
type moveMovementType =
  "Walk" | "Run" | "Sprint";

type gameEActionStatus =
  "STATUS_INVALID" | "STATUS_BOUND" | "STATUS_READY" | "STATUS_PROGRESS" | "STATUS_COMPLETE" | "STATUS_FAILURE";

type AIEExecutionOutcome =
  "OUTCOME_FAILURE" | "OUTCOME_SUCCESS" | "OUTCOME_IN_PROGRESS";

type AIEInterruptionOutcome =
  "INTERRUPTION_SUCCESS" | "INTERRUPTION_DELAYED" | "INTERRUPTION_FAILED";

type EAIActionPhase =
  "Inactive" | "Startup" | "Loop" | "Recovery";

type ETweakAINodeType =
  "Action" | "Selector" | "Sequence";

type AICommandState =
  "NotExecuting" | "Enqueued" | "Executing" | "Cancelled" | "Interrupted" | "Success" | "Failure";

type ECompanionDistancePreset =
  "Medium" | "Close" | "Far" | "VeryFar";

type ECompanionPositionPreset =
  "Behind" | "InFront";

type gameSceneAnimationMotionActionParamsPlacementMode =
  "Blend" | "TeleportToStart" | "PlayAtActorPosition";

type AIArgumentType =
  "Bool" | "Int" | "Uint64" | "Enum" | "Float" | "CName" | "Vector" | "Object" | "TreeRef" | "NodeRef" | "GlobalNodeId" | "PuppetRef" | "Serializable";

type AIParameterizationType =
  "BehaviorArgument" | "CustomValue" | "CharacterRecord" | "TweakDB" | "ActionRecord" | "Blackboard";

type EAIAttitude =
  "AIA_Friendly" | "AIA_Neutral" | "AIA_Hostile";

type AIbehaviorConditionOutcomes =
  "True" | "False" | "Failure";

type AIbehaviorUpdateOutcome =
  "IN_PROGRESS" | "SUCCESS" | "FAILURE";

type AIbehaviorCompletionStatus =
  "FAILURE" | "SUCCESS";

type AICombatSpaceSize =
  "Undefined" | "Narrow" | "Medium" | "Huge";

type ECallbackExpressionActions =
  "SetTrue" | "SetFalse" | "Toggle";

type gameLoSMode =
  "Invalid" | "Keep" | "Avoid";

type entragdollActivationRequestType =
  "Default" | "Animated" | "Forced";

type animAimState =
  "Unaimed" | "Aimed";

type animStanceState =
  "Stand" | "Crouch" | "Kneel" | "Cover" | "Swim" | "Crawl";

type animHitReactionType =
  "" | "Twitch" | "Impact" | "Stagger" | "Pain" | "Knockdown" | "Ragdoll" | "Death" | "Block" | "GuardBreak" | "Parry" | "Bump";

type gameScriptedBlackboardStorage =
  "Default";

type animCoverState =
  "LowCover" | "HighCover";

type animCoverAction =
  "NoAction" | "LeanLeft" | "LeanRight" | "StepOutLeft" | "StepOutRight" | "LeanOver" | "StepUp" | "EnterCover" | "SlideTo" | "Vault" | "LeaveCover" | "BlindfireLeft" | "BlindfireRight" | "BlindfireOver" | "OverheadStepOutLeft" | "OverheadStepOutRight" | "OverheadStepUp";

type animNPCVehicleDeathType =
  "Default" | "Relaxed" | "Combat" | "Ragdoll";

type animWeaponOwnerType =
  "Player" | "NPC" | "";

type gameFearStage =
  "Relaxed" | "Stressed" | "Alarmed" | "Panic";

type gameDismBodyPart =
  "LEFT_ARM" | "RIGHT_ARM" | "LEFT_LEG" | "RIGHT_LEG" | "HEAD" | "BODY";

type gameDismWoundType =
  "CLEAN" | "COARSE" | "HOLE";

type entAudioDismembermentPart =
  "Head" | "Leg" | "Arm";

type gameinfluenceCollisionTestOutcome =
  "NoCell" | "Empty" | "Full";

type gameinfluenceTestLineResult =
  "Fail" | "Success" | "Unknown";

type EAIHitIntensity =
  "" | "Light" | "Medium" | "Heavy" | "Explosion";

type EAIHitSource =
  "" | "Ranged" | "MeleeSharp" | "MeleeBlunt" | "QuickMelee";

type EAILastHitReactionPlayed =
  "" | "Twitch" | "Impact" | "Stagger" | "Knockdown";

type EAIHitDirection =
  "" | "Left" | "Back" | "Right" | "Front";

type EAIHitBodyPart =
  "" | "Head" | "LeftTorso" | "RightTorso" | "Belly" | "LeftLeg" | "RightLeg";

type EAIDismembermentBodyPart =
  "NONE" | "LEFT_ARM" | "RIGHT_ARM" | "LEFT_LEG" | "RIGHT_LEG" | "HEAD" | "BODY";

type ReactionZones_Humanoid_Side =
  "Head" | "ChestLeft" | "ArmLeft" | "HandLeft" | "ChestRight" | "ArmRight" | "HandRight" | "Abdomen" | "LegLeft" | "LegRight";

type HitShape_Type =
  "Normal" | "InternalWeakSpot" | "ExternalWeakSpot" | "ProtectionLayer";

type EHitReactionZone =
  "Head" | "ChestLeft" | "ArmLeft" | "HandLeft" | "ChestRight" | "ArmRight" | "HandRight" | "Abdomen" | "LegLeft" | "LegRight" | "Special";

type EHitShapeType =
  "" | "Flesh" | "Metal" | "Cyberware" | "Armor";

type gameSharedInventoryTag =
  "" | "PlayerStash";

type gameinteractionsELootChoiceType =
  "Available" | "Unavailable" | "Invisible";

type gameinteractionsELootVisualiserControlOperation =
  "Locked";

type moveCirclingDirection =
  "" | "Left" | "Right";

type moveLineOfSight =
  "" | "Keep" | "Avoid";

type worldOffMeshConnectionType =
  "Door" | "Ladder" | "Floor" | "Jump" | "Elevator";

type moveExplorationType =
  "" | "Ladder" | "Jump" | "Climb" | "Vault" | "ChargedJump" | "ThrusterJump";

type gameprojectileOnCollisionAction =
  "" | "Stop" | "Bounce" | "StopAndStick" | "StopAndStickPerpendicular" | "Pierce";

type AIinfluenceEBumpPolicy =
  "Static" | "Lean" | "Move";

type MechanicalScanType =
  "" | "Short" | "Long" | "Danger";

type DronePose =
  "Relaxed" | "Combat";

type EFocusClueInvestigationState =
  "NONE" | "INSPECTED" | "NOT_INSPECTED";

type EConclusionQuestState =
  "Undefined" | "Active" | "Inactive" | "Shown";

type questObjectInspectEventType =
  "Undefined" | "Started" | "Finished";

type EProgressBarType =
  "UPLOAD" | "DURATION";

type EProgressBarContext =
  "QuickHack" | "PhoneCall";

type EMappinDisplayMode =
  "PLAYSTYLE" | "ROLE" | "MINIMALISTIC";

type EUploadProgramState =
  "STARTED" | "COMPLETED";

type EAxisType =
  "X" | "Y" | "Z";

type EMappinVisualState =
  "Default" | "Available" | "Unavailable" | "Inactive";

type EGameplayRole =
  "UnAssigned" | "" | "Alarm" | "ControlNetwork" | "ControlOtherDevice" | "ControlSelf" | "CutPower" | "Distract" | "DropPoint" | "ExplodeLethal" | "ExplodeNoneLethal" | "Fall" | "FastTravel" | "GrantInformation" | "HazardWarning" | "HideBody" | "Loot" | "OpenPath" | "ClearPath" | "Push" | "ServicePoint" | "Shoot" | "SpreadGas" | "StoreItems" | "GenericRole" | "ClearPathAd" | "DistractVendingMachine" | "NPC" | "Clue";

type EMovementDirection =
  "left" | "right" | "up" | "down" | "front" | "back";

type EVehicleDoor =
  "seat_front_left" | "seat_front_right" | "seat_back_left" | "seat_back_right" | "trunk" | "hood" | "count" | "invalid";

type VehicleDoorState =
  "Closed" | "Open" | "Detached";

type EVehicleWindowState =
  "Closed" | "Open";

type VehicleDoorInteractionState =
  "Available" | "Locked" | "Disabled" | "QuestLocked" | "Reserved";

type EQuestVehicleDoorState =
  "ForceOpen" | "ForceClose" | "OpenAll" | "CloseAll" | "ForceLock" | "ForceUnlock" | "LockAll" | "EnableInteraction" | "DisableInteraction" | "DisableAllInteractions" | "ResetInteractions" | "ResetVehicle" | "OpenAllRegular" | "QuestLock" | "QuestLockAll" | "Count" | "Invalid";

type EQuestVehicleWindowState =
  "ForceOpen" | "ForceClose" | "OpenAll" | "CloseAll";

type vehicleQuestUIEnable =
  "Gameplay" | "ForceEnable" | "ForceDisable";

type vehicleRaceUI =
  "PreRaceSetup" | "CountdownStart" | "RaceStart" | "RaceEnd" | "Disable";

type vehicleQuestWindowDestruction =
  "window_f" | "window_fl" | "window_fr" | "window_bl" | "window_br" | "window_b";

type panzerBootupUI =
  "UnbootedIdle" | "BootingAttempt" | "BootingSuccess" | "Loop";

type TweakWeaponPose =
  "Nothing" | "Position" | "Rotation";

type AdditionalTraceType =
  "Knee" | "Hip" | "Chest";

type senseEShapeType =
  "INVALID" | "BOX" | "SPHERE" | "CONE" | "ANGLE_RANGE";

type AICombatSectorType =
  "ToBackLeft" | "ToBackMid" | "ToBackRight" | "ToLeft" | "ToMid" | "ToRight" | "FromLeft" | "FromMid" | "FromRight" | "FromBackLeft" | "FromBackMid" | "FromBackRight" | "BeyondToLeft" | "BeyondToRight" | "BeyondFromLeft" | "BeyondFromRight" | "Unknown";

type AISquadType =
  "Community" | "Global" | "Security" | "Attitude" | "Combat" | "Unknown";

type EJuryrigTrapState =
  "UNARMED" | "ARMED" | "TRIGGERED";

type vehicleEState =
  "Default" | "On" | "Disabled" | "Destroyed";

type vehicleELightMode =
  "Off" | "On" | "HighBeams";

type vehicleELightType =
  "Head" | "Brake" | "LeftBlinker" | "RightBlinker" | "Reverse" | "Interior" | "Utility" | "Default" | "Blinkers";

type AITrackedStatusType =
  "Unknown" | "Friendly" | "Neutral" | "Hostile";

type AIThreatPersistenceStatus =
  "ThreatNotFound" | "Persistent" | "NotPersistent";

type PersistenceSource =
  "AddThreat" | "SetNewCombatTarget" | "CommandAimWithWeapon" | "CommandForceShoot" | "CommandInjectCombatTarget" | "CommandMeleeAttack" | "CommandShoot" | "CommandThrowGrenade" | "CommandInjectThreat" | "TrackedBySecuritySystemAgent";

type EToggleOperationType =
  "ADD" | "REMOVE";

type EPriority =
  "VeryLow" | "Low" | "Medium" | "High" | "VeryHigh" | "Absolute";

type EFocusForcedHighlightType =
  "INTERACTION" | "IMPORTANT_INTERACTION" | "QUEST" | "DISTRACTION" | "CLUE" | "NPC" | "WEAKSPOT" | "AOE" | "ITEM" | "HOSTILE" | "FRIENDLY" | "NEUTRAL" | "HACKABLE" | "ENEMY_NETRUNNER" | "BACKDOOR" | "INVALID";

type EFocusOutlineType =
  "HOSTILE" | "FRIENDLY" | "NEUTRAL" | "ITEM" | "INTERACTION" | "IMPORTANT_INTERACTION" | "QUEST" | "CLUE" | "DISTRACTION" | "AOE" | "HACKABLE" | "WEAKSPOT" | "ENEMY_NETRUNNER" | "BACKDOOR" | "INVALID";

type ERevealState =
  "STARTED" | "CONTINUE" | "STOPPED";

type ERevealDurationType =
  "TEMPORARY" | "PERMANENT";

type entVisibilityParamSource =
  "PhantomEntitySystem";

type gameEPrerequisiteType =
  "" | "NestedPrereq" | "StatValue" | "HealthAbsolute" | "HealthPercent" | "ItemInInventory" | "ItemEquipped" | "ItemCount" | "QuestAchieved" | "WasScanned" | "Count";

type ERenderingPlane =
  "RPl_Scene" | "RPl_Background" | "RPl_Weapon";

type EquipmentManipulationRequestType =
  "Undefined" | "Equip" | "Unequip";

type EquipmentManipulationRequestSlot =
  "Undefined" | "Right" | "Left" | "Both";

type gameEStatFlags =
  "Bool" | "EquipOnPlayer" | "EquipOnNPC" | "ExcludeRootCombination";

type gameStatModifierType =
  "Additive" | "AdditiveMultiplier" | "Multiplier" | "Count" | "Invalid";

type gameStatObjectsRelation =
  "Self" | "Owner" | "Root" | "Parent" | "Target" | "Player" | "Instigator" | "Count" | "Invalid";

type gameGodModeType =
  "Invulnerable" | "Immortal";

type gameCombinedStatOperation =
  "Addition" | "Subtraction" | "Multiplication" | "Division" | "Modulo" | "Count" | "Invalid";

type ESpaceFillMode =
  "JustifyLeft" | "JustifyRight" | "JustifyCenter";

type gamedataAttackType =
  "ChargedWhipAttack" | "Direct" | "Effect" | "Explosion" | "GuardBreak" | "Hack" | "Melee" | "PressureWave" | "QuickMelee" | "Ranged" | "Reflect" | "StrongMelee" | "Thrown" | "WhipAttack" | "Count" | "Invalid";

type gamedataDamageType =
  "Chemical" | "Electric" | "Physical" | "Thermal" | "Count" | "Invalid";

type gamedataItemCategory =
  "Clothing" | "Consumable" | "Cyberware" | "Gadget" | "General" | "Part" | "Weapon" | "Count" | "Invalid";

type gamedataItemType =
  "Clo_Face" | "Clo_Feet" | "Clo_Head" | "Clo_InnerChest" | "Clo_Legs" | "Clo_OuterChest" | "Clo_Outfit" | "Con_Ammo" | "Con_Edible" | "Con_Inhaler" | "Con_Injector" | "Con_LongLasting" | "Con_Skillbook" | "Cyb_Ability" | "Cyb_Launcher" | "Cyb_MantisBlades" | "Cyb_NanoWires" | "Cyb_StrongArms" | "Fla_Launcher" | "Fla_Rifle" | "Fla_Shock" | "Fla_Support" | "Gad_Grenade" | "Gen_CraftingMaterial" | "Gen_DataBank" | "Gen_Junk" | "Gen_Keycard" | "Gen_Misc" | "Gen_Readable" | "GrenadeDelivery" | "Grenade_Core" | "Prt_Capacitor" | "Prt_FabricEnhancer" | "Prt_Fragment" | "Prt_Magazine" | "Prt_Mod" | "Prt_Muzzle" | "Prt_Program" | "Prt_Receiver" | "Prt_Scope" | "Prt_ScopeRail" | "Prt_Stock" | "Prt_TargetingSystem" | "Wea_AssaultRifle" | "Wea_Fists" | "Wea_Hammer" | "Wea_Handgun" | "Wea_HeavyMachineGun" | "Wea_Katana" | "Wea_Knife" | "Wea_LightMachineGun" | "Wea_LongBlade" | "Wea_Melee" | "Wea_OneHandedClub" | "Wea_PrecisionRifle" | "Wea_Revolver" | "Wea_Rifle" | "Wea_ShortBlade" | "Wea_Shotgun" | "Wea_ShotgunDual" | "Wea_SniperRifle" | "Wea_SubmachineGun" | "Wea_TwoHandedClub" | "Count" | "Invalid";

type gamedataMappinVariant =
  "ActionDealDamageVariant" | "ActionFastSoloVariant" | "ActionGenericInteractionVariant" | "ActionNetrunnerAccessPointVariant" | "ActionNetrunnerVariant" | "ActionScanVariant" | "ActionSoloVariant" | "ActionTechieVariant" | "AimVariant" | "AllowVariant" | "ApartmentVariant" | "ArrowVariant" | "BackOutVariant" | "BountyHuntVariant" | "CallVariant" | "ChangeToFriendlyVariant" | "ClientInDistressVariant" | "ConversationVariant" | "ConvoyVariant" | "CoolVariant" | "CourierVariant" | "CustomPositionVariant" | "CyberspaceNPC" | "CyberspaceObject" | "DefaultInteractionVariant" | "DefaultQuestVariant" | "DefaultVariant" | "DistractVariant" | "DropboxVariant" | "DynamicEventVariant" | "EffectAlarmVariant" | "EffectControlNetworkVariant" | "EffectControlOtherDeviceVariant" | "EffectControlSelfVariant" | "EffectCutPowerVariant" | "EffectDistractVariant" | "EffectDropPointVariant" | "EffectExplodeLethalVariant" | "EffectExplodeNonLethalVariant" | "EffectFallVariant" | "EffectGrantInformationVariant" | "EffectHideBodyVariant" | "EffectLootVariant" | "EffectOpenPathVariant" | "EffectPushVariant" | "EffectServicePointVariant" | "EffectShootVariant" | "EffectSpreadGasVariant" | "EffectStoreItemsVariant" | "ExclamationMarkVariant" | "FailedCrossingVariant" | "FastTravelVariant" | "FixerVariant" | "FocusClueVariant" | "GPSForcedPathVariant" | "GPSPortalVariant" | "GangWatchVariant" | "GenericRoleVariant" | "GetInVariant" | "GetUpVariant" | "GrenadeVariant" | "GunSuicideVariant" | "HandVariant" | "HazardWarningVariant" | "HiddenStashVariant" | "HitVariant" | "HuntForPsychoVariant" | "ImportantInteractionVariant" | "InvalidVariant" | "JackInVariant" | "JamWeaponVariant" | "LifepathCorpoVariant" | "LifepathNomadVariant" | "LifepathStreetKidVariant" | "LootVariant" | "MinorActivityVariant" | "NPCVariant" | "NetrunnerAccessPointVariant" | "NetrunnerSoloTechieVariant" | "NetrunnerSoloVariant" | "NetrunnerTechieVariant" | "NetrunnerVariant" | "NonLethalTakedownVariant" | "OffVariant" | "OpenVendorVariant" | "OutpostVariant" | "PhoneCallVariant" | "QuestGiverVariant" | "QuestionMarkVariant" | "QuickHackVariant" | "ReflexesVariant" | "ResourceVariant" | "RetrievingVariant" | "SOSsignalVariant" | "SabotageVariant" | "ServicePointBarVariant" | "ServicePointClothesVariant" | "ServicePointCyberwareVariant" | "ServicePointDropPointVariant" | "ServicePointFoodVariant" | "ServicePointGunsVariant" | "ServicePointJunkVariant" | "ServicePointMedsVariant" | "ServicePointMeleeTrainerVariant" | "ServicePointNetTrainerVariant" | "ServicePointProstituteVariant" | "ServicePointRipperdocVariant" | "ServicePointTechVariant" | "SitVariant" | "SmugglersDenVariant" | "SoloTechieVariant" | "SoloVariant" | "SpeechVariant" | "TakeControlVariant" | "TakeDownVariant" | "TarotVariant" | "TechieVariant" | "ThieveryVariant" | "UseVariant" | "VehicleVariant" | "WanderingMerchantVariant" | "CPO_PingDoorVariant" | "CPO_PingGoHereVariant" | "CPO_PingLootVariant" | "CPO_RemotePlayerVariant" | "Count" | "Invalid";

type gamedataMappinPhase =
  "CompletedPhase" | "DefaultPhase" | "DiscoveredPhase" | "UndiscoveredPhase" | "Count" | "Invalid";

type gamedataMovementType =
  "Run" | "Sprint" | "Strafe" | "Walk" | "Count" | "Invalid";

type gamedataParentAttachmentType =
  "Animated" | "Skinned" | "Slot" | "Count" | "Invalid";

type gamedataQuality =
  "Common" | "Epic" | "Iconic" | "Legendary" | "Random" | "Rare" | "Uncommon" | "Count" | "Invalid";

type gamedataStatType =
  "Acceleration" | "Accuracy" | "Adrenaline" | "AimFOV" | "AimInTime" | "AimOffset" | "AimOutTime" | "AllowMovementInput" | "AllowRotation" | "Armor" | "Assault" | "AssaultMastery" | "AssaultTrait01Stat" | "Athletics" | "AthleticsMastery" | "AthleticsTrait01Stat" | "AttackPenetration" | "AttackSpeed" | "AttackSpeedPercent" | "AttacksNumber" | "AttacksPerSecond" | "AttacksPerSecondBase" | "AudioLocomotionStimRangeMultiplier" | "AudioStimRangeMultiplier" | "AutoReveal" | "AutocraftDuration" | "AutomaticReplenishment" | "AutomaticUploadPerk" | "BaseChargeTime" | "BaseDamage" | "BaseDamageMax" | "BaseDamageMin" | "BerserkArmorBonus" | "BerserkCooldownBase" | "BerserkCooldownReduction" | "BerserkDurationBase" | "BerserkHealthRegenBonus" | "BerserkMeleeDamageBonus" | "BerserkRecoilReduction" | "BerserkResistancesBonus" | "BerserkShockwaveDamage" | "BerserkShockwaveRangeBonus" | "BerserkSwayReduction" | "BleedingApplicationRate" | "BleedingImmunity" | "BlindImmunity" | "BlindResistance" | "BlockFactor" | "BlockLocomotionWhenLeaningOutOfCover" | "BlockReduction" | "BonusChargeDamage" | "BonusDPS" | "BonusDamageAgainstElites" | "BonusDamageAgainstMechanicals" | "BonusDamageAgainstRares" | "BonusQuickHackDamage" | "BonusRicochetDamage" | "Brake" | "BrakeDot" | "Brawling" | "BrawlingMastery" | "BrawlingTrait01Stat" | "BufferSize" | "BulletMagnetismDefaultAngle" | "BulletMagnetismHighVelocityAngle" | "BurningApplicationRate" | "BurningImmunity" | "BurningRegenStamina" | "CPUPower" | "CallReinforcement" | "CameraShutdownExtension" | "CanAerialTakedown" | "CanAimWhileDodging" | "CanAskToFollowOrder" | "CanAskToHolsterWeapon" | "CanAutomaticallyDisassembleJunk" | "CanAutomaticallyRestoreKnives" | "CanBleedingCriticallyHit" | "CanBleedingSlowTarget" | "CanBlindQuickHack" | "CanBlock" | "CanBreatheUnderwater" | "CanBuffCamoQuickHack" | "CanBuffMechanicalsOnTakeControl" | "CanBuffSturdinessQuickHack" | "CanBurningCriticallyHit" | "CanCallDrones" | "CanCallReinforcements" | "CanCatchUp" | "CanCatchUpDistance" | "CanCharge" | "CanChargedShoot" | "CanCloseCombat" | "CanCommsCallInQuickHack" | "CanCommsCallOutQuickHack" | "CanCommsNoiseQuickHack" | "CanControlFullyChargedWeapon" | "CanCraftEpicItems" | "CanCraftFromInventory" | "CanCraftLegendaryItems" | "CanCraftRareItems" | "CanCraftTechAmmunition" | "CanCrouch" | "CanCyberwareMalfunctionQuickHack" | "CanDash" | "CanDataMineQuickHack" | "CanDealFullDamageToArmored" | "CanDeathQuickHack" | "CanDisassemble" | "CanDisassembleConsumables" | "CanDisassembleGadgets" | "CanDropWeapon" | "CanElectrocuteNullifyStats" | "CanElectrocuteRoot" | "CanExitWSOnSoundStimuli" | "CanExplodeQuickHack" | "CanFastTravelWhileEncumbered" | "CanFullyChargeWeapon" | "CanGrab" | "CanGrappleAndroids" | "CanGrappleSilently" | "CanGrenadeLaunch" | "CanGrenadeQuickHack" | "CanGrenadesCriticallyHit" | "CanGrenadesDealExternalDamage" | "CanGuardBreak" | "CanHeartattackQuickHack" | "CanIgnoreArmorDamageReduction" | "CanIgnoreStamina" | "CanInstallTechMods" | "CanJamWeaponQuickHack" | "CanJump" | "CanLandSilently" | "CanLegendaryCraftedWeaponsBeBoosted" | "CanLocomotionMalfunctionQuickHack" | "CanMadnessQuickHack" | "CanMalfunctionQuickHack" | "CanMeleeBerserk" | "CanMeleeDash" | "CanMeleeInfinitelyCombo" | "CanMeleeLeap" | "CanMeleeLeapTakedown" | "CanOverchargeWeapon" | "CanOverheatQuickHack" | "CanOverloadQuickHack" | "CanOverrideAttitudeQuickHack" | "CanOverrideAuthorizationQuickHack" | "CanParry" | "CanPickUpBodyAfterTakedown" | "CanPickUpWeapon" | "CanPingQuickHack" | "CanPlayerBoostConsumables" | "CanPlayerBoostGrenades" | "CanPoisonLowerArmor" | "CanPoisonSlow" | "CanPreciseShoot" | "CanPushBack" | "CanPushFromGrapple" | "CanQuickHackCriticallyHit" | "CanQuickMeleeStagger" | "CanQuickhack" | "CanQuickhackHealPuppet" | "CanQuickhackTransferBetweenEnemies" | "CanRegenInCombat" | "CanRemoveModsFromClothing" | "CanRemoveModsFromWeapons" | "CanResurrectAllies" | "CanRetrieveModsFromDisassemble" | "CanRunSilently" | "CanSandevistanSprintHarass" | "CanScrapPartsFromMechanicals" | "CanSeeGrenadeRadius" | "CanSeeRicochetVisuals" | "CanSeeThroughWalls" | "CanShareThreatsWithPlayer" | "CanShootWhileCarryingBody" | "CanShootWhileDodging" | "CanShootWhileGrappling" | "CanShootWhileMoving" | "CanShootWhileVaulting" | "CanSilentKill" | "CanSmartShoot" | "CanSprint" | "CanSprintHarass" | "CanSprintWhileCarryingBody" | "CanSuicideQuickHack" | "CanSwitchWeapon" | "CanTakeControlQuickHack" | "CanTakedownLethally" | "CanTakedownSilently" | "CanTaunt" | "CanThrowWeapon" | "CanUpgradeFromInventory" | "CanUpgradeToLegendaryQuality" | "CanUseAntiStun" | "CanUseBiohazardGrenades" | "CanUseCloseRing" | "CanUseCombatStims" | "CanUseConsumables" | "CanUseCoolingSystem" | "CanUseCovers" | "CanUseCuttingGrenades" | "CanUseEMPGrenades" | "CanUseExtremeRing" | "CanUseFarRing" | "CanUseFlashbangGrenades" | "CanUseFragGrenades" | "CanUseGrenades" | "CanUseHolographicCamo" | "CanUseIncendiaryGrenades" | "CanUseLeftHand" | "CanUseLegs" | "CanUseMantisBlades" | "CanUseMediumRing" | "CanUseMeleeRing" | "CanUseOpticalCamo" | "CanUsePainInhibitors" | "CanUsePersonalSoundSilencer" | "CanUseProjectileLauncher" | "CanUseReconGrenades" | "CanUseRetractableShield" | "CanUseRightHand" | "CanUseShootingSpots" | "CanUseStaticCamo" | "CanUseStrongArms" | "CanUseTakedowns" | "CanUseTerrainCamo" | "CanUseZoom" | "CanWalkSilently" | "CanWallStick" | "CanWeaponBlock" | "CanWeaponBlockAttack" | "CanWeaponComboAttack" | "CanWeaponCriticallyHit" | "CanWeaponCrouchAttack" | "CanWeaponDash" | "CanWeaponDeflect" | "CanWeaponIgnoreArmor" | "CanWeaponInfinitlyCombo" | "CanWeaponJumpAttack" | "CanWeaponLeap" | "CanWeaponMalfunctionQuickHack" | "CanWeaponReload" | "CanWeaponReloadWhileInactive" | "CanWeaponReloadWhileSliding" | "CanWeaponReloadWhileSprinting" | "CanWeaponReloadWhileVaulting" | "CanWeaponSafeAttack" | "CanWeaponShoot" | "CanWeaponShootWhileSliding" | "CanWeaponShootWhileSprinting" | "CanWeaponShootWhileVaulting" | "CanWeaponSnapToLimbs" | "CanWeaponSprintAttack" | "CanWeaponStrongAttack" | "CanWeaponTriggerHeadshot" | "CannotBeDetectedWhileSubmerged" | "CannotBeHealed" | "CannotSprintHarass" | "CarryCapacity" | "CausingPanicReducesUltimateHacksCost" | "Charge" | "ChargeDischargeTime" | "ChargeFullMultiplier" | "ChargeMaxTimeInChargedState" | "ChargeMultiplier" | "ChargeReadyPercentage" | "ChargeShouldFireWhenReady" | "ChargeTime" | "ChemicalDamage" | "ChemicalDamageMax" | "ChemicalDamageMin" | "ChemicalDamagePercent" | "ChemicalResistance" | "ClimbSpeedModifier" | "ClipTimesCycle" | "ClipTimesCycleBase" | "ClipTimesCyclePlusReload" | "ClipTimesCyclePlusReloadBase" | "CloudComputingTraps" | "ColdBlood" | "ColdBloodBuffBonus" | "ColdBloodMastery" | "ColdBloodMaxDuration" | "ColdBloodMaxStacks" | "ColdBloodTrait01" | "CombatHacking" | "CombatHackingMastery" | "CommsNoiseJamOnQuickhack" | "Cool" | "Crafting" | "CraftingBonusArmorValue" | "CraftingBonusConsumableDuration" | "CraftingBonusGrenadeDamage" | "CraftingBonusWeaponDamage" | "CraftingCostReduction" | "CraftingItemLevelBoost" | "CraftingMastery" | "CraftingMaterialDropChance" | "CraftingMaterialRandomGrantChance" | "CraftingMaterialRetrieveChance" | "CraftingTrait01" | "CritChance" | "CritChanceTimeCritDamage" | "CritDPSBonus" | "CritDamage" | "CyberwareCooldownReduction" | "CycleTime" | "CycleTimeAimBlockDuration" | "CycleTimeAimBlockStart" | "CycleTimeBase" | "CycleTimeBonus" | "CycleTimeShootingMult" | "CycleTimeShootingMultPeriod" | "CycleTime_Burst" | "CycleTime_BurstMaxCharge" | "CycleTime_BurstSecondary" | "CycleTriggerModeTime" | "DPS" | "DamageFalloffDisabled" | "DamageHackSpread" | "DamagePerHit" | "DamageReductionDamageOverTime" | "DamageReductionExplosion" | "DashAttackStaminaCostReduction" | "DataLeakTraps" | "DealsChemicalDamage" | "DealsElectricDamage" | "DealsPhysicalDamage" | "DealsThermalDamage" | "Deceleration" | "DefeatedHeadDamageThreshold" | "DefeatedLArmDamageThreshold" | "DefeatedLLegDamageThreshold" | "DefeatedRArmDamageThreshold" | "DefeatedRLegDamageThreshold" | "DefeatingEnemiesReduceHacksCost" | "Demolition" | "DemolitionMastery" | "DemolitionTrait01Stat" | "Detection" | "DeviceMemoryCostReduction" | "DisableCyberwareOnBurning" | "DisassemblingIngredientsDoubleBonus" | "DisassemblingMaterialQualityObtainChance" | "DismHeadDamageThreshold" | "DismLArmDamageThreshold" | "DismLLegDamageThreshold" | "DismRArmDamageThreshold" | "DismRLegDamageThreshold" | "DoNotCheckFriendlyFireMadnessPassive" | "DummyResistanceStat" | "Durability" | "DurationBonusBleeding" | "DurationBonusBurning" | "DurationBonusElectrified" | "DurationBonusPoisoned" | "DurationBonusQuickhack" | "DurationBonusStun" | "EMPImmunity" | "EffectiveDPS" | "EffectiveDamagePerHit" | "EffectiveDamagePerHitMax" | "EffectiveDamagePerHitMin" | "EffectiveDamagePerHitTimesAttacksPerSecond" | "EffectiveRange" | "ElectricDamage" | "ElectricDamageMax" | "ElectricDamageMin" | "ElectricDamagePercent" | "ElectricResistance" | "ElectrocuteImmunity" | "ElectrocutedApplicationRate" | "ElementalDamagePerHit" | "ElementalResistanceMultiplier" | "EmptyReloadTime" | "Engineering" | "EngineeringMastery" | "EngineeringTrait01" | "EquipActionDuration_Corpo" | "EquipActionDuration_Gang" | "EquipAnimationDuration_Corpo" | "EquipAnimationDuration_Gang" | "EquipDuration" | "EquipDuration_First" | "EquipItemTime_Corpo" | "EquipItemTime_Gang" | "Evasion" | "ExplosionKillsRecudeUltimateHacksCost" | "FFInputLock" | "FallDamageReduction" | "FearOnQuickHackKill" | "FullAutoOnFullCharge" | "Gunslinger" | "GunslingerMastery" | "GunslingerTrait01Stat" | "HackedEnemiesGetDamagedByFriendlyFire" | "HackedEnemyArmorReduction" | "Hacking" | "HackingMastery" | "HackingPenetration" | "HackingResistance" | "HackingResistanceUltimate" | "HasAdditionalSplinterSlot" | "HasAheadTargeting" | "HasAirHover" | "HasAirThrusters" | "HasAutoReloader" | "HasAutomaticReplenishment" | "HasAutomaticTagging" | "HasBerserk" | "HasBleedImmunity" | "HasBlindImmunity" | "HasBoostedCortex" | "HasBurningBuffs" | "HasCameraLinking" | "HasChargeJump" | "HasCritImmunity" | "HasCyberdeck" | "HasCybereye" | "HasDodge" | "HasDodgeAir" | "HasDoubleJump" | "HasElectricCoating" | "HasElectroPlating" | "HasExtendedHitReactionImmunity" | "HasFireproofSkin" | "HasGPS" | "HasGlowingTattoos" | "HasGraphiteTissue" | "HasHackingInteractions" | "HasHealingReapplication" | "HasHealthMonitorBomb" | "HasHostileHackImmunity" | "HasICELevelBooster" | "HasInfravision" | "HasJuiceInjector" | "HasKerenzikov" | "HasKerenzikovSlide" | "HasKers" | "HasLinkToBountySystem" | "HasLoweringPerception" | "HasMadnessLvl4Passive" | "HasMajorQuickhackResistance" | "HasMechanicalControl" | "HasMeleeImmunity" | "HasMeleeTargeting" | "HasMetabolicEnhancer" | "HasPoisonHeal" | "HasPoisonImmunity" | "HasPowerGrip" | "HasQuickhackResistance" | "HasRemoteBotAccessPointBreach" | "HasSandevistan" | "HasSandevistanTier1" | "HasSandevistanTier2" | "HasSandevistanTier3" | "HasSecondHeart" | "HasSelfHealingSkin" | "HasSmartLink" | "HasSpiderBotControl" | "HasStunImmunity" | "HasSubdermalArmor" | "HasSuperheroFall" | "HasThermovision" | "HasTimedImmunity" | "HasToxicCleanser" | "HasWallRunSkill" | "HeadshotDamageMultiplier" | "HeadshotImmunity" | "Health" | "HealthInCombatRegenDelayOnChange" | "HealthInCombatRegenEnabled" | "HealthInCombatRegenEndThreshold" | "HealthInCombatRegenRate" | "HealthInCombatRegenRateAdd" | "HealthInCombatRegenRateBase" | "HealthInCombatRegenRateMult" | "HealthInCombatRegenStartThreshold" | "HealthInCombatStartDelay" | "HealthMonitorCooldownDuration" | "HealthOutOfCombatRegenDelayOnChange" | "HealthOutOfCombatRegenEnabled" | "HealthOutOfCombatRegenEndThreshold" | "HealthOutOfCombatRegenRate" | "HealthOutOfCombatRegenRateAdd" | "HealthOutOfCombatRegenRateBase" | "HealthOutOfCombatRegenRateMult" | "HealthOutOfCombatRegenStartThreshold" | "Hearing" | "HeavyAttacksNumber" | "HighlightAccessPoint" | "HitDismembermentFactor" | "HitReactionDamageHealthFactor" | "HitReactionFactor" | "HitTimerAfterDefeated" | "HitTimerAfterImpact" | "HitTimerAfterImpactMelee" | "HitTimerAfterKnockdown" | "HitTimerAfterPain" | "HitTimerAfterStagger" | "HitTimerAfterStaggerMelee" | "HitWoundsFactor" | "HoldDuration" | "HoldEnterDuration" | "HoldTimeoutDuration" | "HolographicSkinCooldownDuration" | "HolographicSkinDuration" | "IconicItemUpgraded" | "ImpactDamageThreshold" | "ImpactDamageThresholdImpulse" | "ImpactDamageThresholdInCover" | "Intelligence" | "IsAggressive" | "IsBalanced" | "IsBlocking" | "IsCautious" | "IsDefensive" | "IsDeflecting" | "IsDodgeStaminaFree" | "IsDodging" | "IsFastMeleeArchetype" | "IsFastRangedArchetype" | "IsGenericMeleeArchetype" | "IsGenericRangedArchetype" | "IsHeavyRangedArchetype" | "IsInvulnerable" | "IsItemBroken" | "IsItemCracked" | "IsItemCrafted" | "IsItemIconic" | "IsItemUpgraded" | "IsManBig" | "IsManMassive" | "IsMechanical" | "IsNetrunnerArchetype" | "IsNotSlowedDuringADS" | "IsNotSlowedDuringBlock" | "IsNotSlowedDuringReload" | "IsReckless" | "IsShotgunnerArchetype" | "IsSniperArchetype" | "IsSprintStaminaFree" | "IsStrongMeleeArchetype" | "IsTechieArchetype" | "IsTier1Archetype" | "IsTier2Archetype" | "IsTier3Archetype" | "IsTier4Archetype" | "IsWeakspot" | "IsWeaponLethal" | "ItemArmor" | "ItemLevel" | "ItemRequiresElectroPlating" | "ItemRequiresPowerGrip" | "ItemRequiresSmartLink" | "JumpHeight" | "Kenjutsu" | "KenjutsuMastery" | "KenjutsuTrait01Stat" | "KnockdownDamageThreshold" | "KnockdownDamageThresholdImpulse" | "KnockdownDamageThresholdInCover" | "KnockdownImmunity" | "KnockdownImpulse" | "Level" | "LimbHealth" | "LinearDirectionUpdateMax" | "LinearDirectionUpdateMaxADS" | "LinearDirectionUpdateMin" | "LinearDirectionUpdateMinADS" | "LowerActiveCooldownOnDefeat" | "LowerHackingResistanceOnHack" | "MagazineCapacity" | "MagazineCapacityBase" | "MagazineCapacityBonus" | "MaxDuration" | "MaxPercentDamageTakenPerHit" | "MaxSpeed" | "MaxStacks" | "MaxStacksBonusBleeding" | "MaxStacksBonusBurning" | "MechanicalsBuffDPSBonus" | "MeleeAttackDuration" | "Memory" | "MemoryCostModifier" | "MemoryCostReduction" | "MemoryInCombatRegenDelayOnChange" | "MemoryInCombatRegenEnabled" | "MemoryInCombatRegenEndThreshold" | "MemoryInCombatRegenRate" | "MemoryInCombatRegenRateAdd" | "MemoryInCombatRegenRateBase" | "MemoryInCombatRegenRateMult" | "MemoryInCombatRegenStartThreshold" | "MemoryInCombatStartDelay" | "MemoryOutOfCombatRegenDelayOnChange" | "MemoryOutOfCombatRegenEnabled" | "MemoryOutOfCombatRegenEndThreshold" | "MemoryOutOfCombatRegenRate" | "MemoryOutOfCombatRegenRateAdd" | "MemoryOutOfCombatRegenRateBase" | "MemoryOutOfCombatRegenRateMult" | "MemoryOutOfCombatRegenStartThreshold" | "MemoryOutOfCombatStartDelay" | "MemoryTrackerCooldownDuration" | "MinSpeed" | "MinigameBufferExtension" | "MinigameMaterialsEarned" | "MinigameMemoryRegenPerk" | "MinigameMoneyMultiplier" | "MinigameNextInstanceBufferExtensionPerk" | "MinigameShardChanceMultiplier" | "MinigameTimeLimitExtension" | "MinigameTrapsPossibilityChance" | "NPCAnimationTime" | "NPCCorpoEquipItemDuration" | "NPCCorpoUnequipItemDuration" | "NPCDamage" | "NPCEquipItemDuration" | "NPCGangEquipItemDuration" | "NPCGangUnequipItemDuration" | "NPCLoopDuration" | "NPCRecoverDuration" | "NPCStartupDuration" | "NPCUnequipItemDuration" | "NPCUploadTime" | "NoJam" | "NumShotsInBurst" | "NumShotsInBurstMaxCharge" | "NumShotsInBurstSecondary" | "NumShotsToFire" | "NumberIgnoredTraps" | "Overheat" | "Oxygen" | "PartArmor" | "PenetrationHealth" | "PersonalityAggressive" | "PersonalityCuriosity" | "PersonalityDisgust" | "PersonalityFear" | "PersonalityFunny" | "PersonalityJoy" | "PersonalitySad" | "PersonalityShock" | "PersonalitySurprise" | "PhoneCallDuration" | "PhysicalDamage" | "PhysicalDamageMax" | "PhysicalDamageMin" | "PhysicalDamagePercent" | "PhysicalImpulse" | "PhysicalResistance" | "PoisonImmunity" | "PoisonRegenHealth" | "PoisonedApplicationRate" | "PowerLevel" | "PreFireTime" | "PrefersCovers" | "PrefersShootingSpots" | "Price" | "ProjectilesPerShot" | "ProjectilesPerShotBase" | "ProjectilesPerShotBonus" | "Quality" | "Quantity" | "QuickHackDuration" | "QuickHackDurationExtension" | "QuickHackImmunity" | "QuickHackResistancesMod" | "QuickHackSpreadDistance" | "QuickHackSpreadNumber" | "QuickHackSuddenDeathChance" | "QuickHackUpload" | "QuickhackExtraDamageMultiplier" | "QuickhackShield" | "QuickhacksCooldownReduction" | "RandomCurveInput" | "Range" | "Recoil" | "RecoilAllowSway" | "RecoilAlternateDir" | "RecoilAlternateDirADS" | "RecoilAngle" | "RecoilAngleADS" | "RecoilAnimation" | "RecoilChargeMult" | "RecoilChargeMultADS" | "RecoilCycleSize" | "RecoilCycleSizeADS" | "RecoilCycleTime" | "RecoilCycleTimeADS" | "RecoilDelay" | "RecoilDir" | "RecoilDirADS" | "RecoilDirPlanCycleRandDir" | "RecoilDirPlanCycleRandDirADS" | "RecoilDirPlanCycleRandRangeDir" | "RecoilDirPlanCycleRandRangeDirADS" | "RecoilDirPlanSequence" | "RecoilDirPlanSequenceADS" | "RecoilDriftRandomRangeMax" | "RecoilDriftRandomRangeMin" | "RecoilEnableCycleX" | "RecoilEnableCycleXADS" | "RecoilEnableCycleY" | "RecoilEnableCycleYADS" | "RecoilEnableLinearX" | "RecoilEnableLinearXADS" | "RecoilEnableLinearY" | "RecoilEnableLinearYADS" | "RecoilEnableScaleX" | "RecoilEnableScaleXADS" | "RecoilEnableScaleY" | "RecoilEnableScaleYADS" | "RecoilFullChargeMult" | "RecoilFullChargeMultADS" | "RecoilHoldDuration" | "RecoilHoldDurationADS" | "RecoilKickMax" | "RecoilKickMaxADS" | "RecoilKickMin" | "RecoilKickMinADS" | "RecoilMagForFullDrift" | "RecoilMaxLength" | "RecoilMaxLengthADS" | "RecoilRecoveryMinSpeed" | "RecoilRecoveryMinSpeedADS" | "RecoilRecoverySpeed" | "RecoilRecoverySpeedADS" | "RecoilRecoveryTime" | "RecoilRecoveryTimeADS" | "RecoilScaleMax" | "RecoilScaleMaxADS" | "RecoilScaleTime" | "RecoilScaleTimeADS" | "RecoilSpeed" | "RecoilSpeedADS" | "RecoilTime" | "RecoilTimeADS" | "RecoilUseDifferentStatsInADS" | "Reflexes" | "RefreshesPingOnQuickhack" | "RegenerateHPMinigamePerk" | "ReloadAmount" | "ReloadEndTime" | "ReloadTime" | "ReloadTimeBase" | "ReloadTimeBonus" | "RemoveAllStacksWhenDurationEnds" | "RemoveColdBloodStacksOneByOne" | "RemoveSprintOnQuickhack" | "ReprimandEscalation" | "RestoreMemoryOnDefeat" | "RevealNetrunnerWhenHacked" | "RicochetChance" | "RicochetCount" | "RicochetMaxAngle" | "RicochetMinAngle" | "RicochetTargetSearchAngle" | "SandevistanDashShoot" | "ScanDepth" | "ScanTimeReduction" | "ScopeFOV" | "ScopeOffset" | "ScrapItemChance" | "SharedCacheTraps" | "ShootingOffsetAI" | "ShortCircuitOnCriticalHit" | "ShorterChains" | "ShotDelay" | "SlideWhenLeaningOutOfCover" | "SmartGunAddSpiralTrajectory" | "SmartGunAdsLockingAnglePitch" | "SmartGunAdsLockingAngleYaw" | "SmartGunAdsMaxLockedTargets" | "SmartGunAdsTagLockAnglePitch" | "SmartGunAdsTagLockAngleYaw" | "SmartGunAdsTargetableAnglePitch" | "SmartGunAdsTargetableAngleYaw" | "SmartGunAdsTimeToLock" | "SmartGunAdsTimeToUnlock" | "SmartGunEvenDistributionPeriod" | "SmartGunHipLockingAnglePitch" | "SmartGunHipLockingAngleYaw" | "SmartGunHipMaxLockedTargets" | "SmartGunHipTagLockAnglePitch" | "SmartGunHipTagLockAngleYaw" | "SmartGunHipTargetableAnglePitch" | "SmartGunHipTargetableAngleYaw" | "SmartGunHipTimeToLock" | "SmartGunHipTimeToUnlock" | "SmartGunHitProbability" | "SmartGunHitProbabilityMultiplier" | "SmartGunMissDelay" | "SmartGunMissRadius" | "SmartGunNPCApplySpreadAtHitplane" | "SmartGunNPCLockOnTime" | "SmartGunNPCLockTimeout" | "SmartGunNPCLockingAnglePitch" | "SmartGunNPCLockingAngleYaw" | "SmartGunNPCProjectileStartingOrientationAngleOffset" | "SmartGunNPCProjectileVelocity" | "SmartGunNPCShootProjectilesOnlyStraight" | "SmartGunNPCSpreadMultiplier" | "SmartGunNPCTrajectoryCurvatureMultiplier" | "SmartGunPlayerProjectileVelocity" | "SmartGunProjectileVelocityVariance" | "SmartGunSpiralCycleTimeMax" | "SmartGunSpiralCycleTimeMin" | "SmartGunSpiralRadius" | "SmartGunSpiralRampDistanceEnd" | "SmartGunSpiralRampDistanceStart" | "SmartGunSpiralRandomizeDirection" | "SmartGunSpreadMultiplier" | "SmartGunStartingAccuracy" | "SmartGunTargetAcquisitionRange" | "SmartGunTimeToMaxAccuracy" | "SmartGunTimeToRemoveOccludedTarget" | "SmartGunTrackAllBodyparts" | "SmartGunTrackHeadComponents" | "SmartGunTrackLegComponents" | "SmartGunTrackMechanicalComponents" | "SmartGunTrackMultipleEntitiesInADS" | "SmartGunUseEvenDistributionTargeting" | "SmartGunUseTagLockTargeting" | "SmartGunUseTimeBasedAccuracy" | "SmartTargetingDisruptionProbability" | "SpecialDamage" | "SpeedBoost" | "SpeedBoostMaxSpeed" | "Spread" | "SpreadAdsChangePerShot" | "SpreadAdsChargeMult" | "SpreadAdsDefaultX" | "SpreadAdsDefaultY" | "SpreadAdsFastSpeedMax" | "SpreadAdsFastSpeedMaxAdd" | "SpreadAdsFastSpeedMin" | "SpreadAdsFastSpeedMinAdd" | "SpreadAdsFullChargeMult" | "SpreadAdsMaxX" | "SpreadAdsMaxY" | "SpreadAdsMinX" | "SpreadAdsMinY" | "SpreadAnimation" | "SpreadChangePerShot" | "SpreadChargeMult" | "SpreadCrouchDefaultMult" | "SpreadCrouchMaxMult" | "SpreadDefaultX" | "SpreadDefaultY" | "SpreadEvenDistributionJitterSize" | "SpreadEvenDistributionRowCount" | "SpreadFastSpeedMax" | "SpreadFastSpeedMaxAdd" | "SpreadFastSpeedMin" | "SpreadFastSpeedMinAdd" | "SpreadFullChargeMult" | "SpreadMaxAI" | "SpreadMaxX" | "SpreadMaxY" | "SpreadMinX" | "SpreadMinY" | "SpreadRandomizeOriginPoint" | "SpreadResetSpeed" | "SpreadResetTimeThreshold" | "SpreadUseCircularSpread" | "SpreadUseEvenDistribution" | "SpreadUseInAds" | "SpreadZeroOnFirstShot" | "StaggerDamageThreshold" | "StaggerDamageThresholdImpulse" | "StaggerDamageThresholdInCover" | "Stamina" | "StaminaCostReduction" | "StaminaCostToBlock" | "StaminaDamage" | "StaminaRegenDelayOnChange" | "StaminaRegenEnabled" | "StaminaRegenEndThrehold" | "StaminaRegenRate" | "StaminaRegenRateAdd" | "StaminaRegenRateBase" | "StaminaRegenRateMult" | "StaminaRegenStartDelay" | "StaminaRegenStartThreshold" | "StaminaSprintDecayRate" | "StatModifierGroupLimit" | "Stealth" | "StealthHacksCostReduction" | "StealthHitDamageMultiplier" | "StealthMastery" | "StealthTrait01Stat" | "StealthWeakspotDamageMultiplier" | "StreetCred" | "Strength" | "StunImmunity" | "Sway" | "SwayCenterMaximumAngleOffset" | "SwayCurvatureMaximumFactor" | "SwayCurvatureMinimumFactor" | "SwayInitialOffsetRandomFactor" | "SwayResetOnAimStart" | "SwaySideBottomAngleLimit" | "SwaySideMaximumAngleDistance" | "SwaySideMinimumAngleDistance" | "SwaySideStepChangeMaximumFactor" | "SwaySideStepChangeMinimumFactor" | "SwaySideTopAngleLimit" | "SwayStartBlendTime" | "SwayStartDelay" | "SwayTraversalTime" | "TBHsBaseCoefficient" | "TBHsBaseSourceMultiplierCoefficient" | "TBHsCoverTraceLoSIncreaseSpeed" | "TBHsMinimumLineOfSightTime" | "TBHsSensesTraceLoSIncreaseSpeed" | "TBHsVisibilityCooldown" | "TechBaseChargeThreshold" | "TechMaxChargeThreshold" | "TechOverChargeThreshold" | "TechPierceChargeLevel" | "TechPierceEnabled" | "TechnicalAbility" | "ThermalDamage" | "ThermalDamageMax" | "ThermalDamageMin" | "ThermalDamagePercent" | "ThermalResistance" | "ThreeOrMoreProgramsCooldownRedPerk" | "ThreeOrMoreProgramsMemoryRegPerk" | "TimeDilationGenericDuration" | "TimeDilationGenericTimeScale" | "TimeDilationKerenzikovDuration" | "TimeDilationKerenzikovPlayerTimeScale" | "TimeDilationKerenzikovTimeScale" | "TimeDilationOnDodgesCooldownDuration" | "TimeDilationOnDodgesDuration" | "TimeDilationOnDodgesTimeScale" | "TimeDilationOnHealthDropCooldownDuration" | "TimeDilationOnHealthDropDuration" | "TimeDilationOnHealthDropTimeScale" | "TimeDilationSandevistanCooldownBase" | "TimeDilationSandevistanCooldownReduction" | "TimeDilationSandevistanDuration" | "TimeDilationSandevistanTimeScale" | "TimeDilationWhenEnteringCombatCooldownDuration" | "TimeDilationWhenEnteringCombatDuration" | "TimeDilationWhenEnteringCombatTimeScale" | "TriggerDismembermentChance" | "TriggerWoundedChance" | "TurretFriendlyExtension" | "TurretShutdownExtension" | "UltimateHackSpread" | "UltimateHacksCostReduction" | "UltimateMemoryCostReduction" | "UnconsciousImmunity" | "UnequipAnimationDuration_Corpo" | "UnequipAnimationDuration_Gang" | "UnequipDuration" | "UnequipDuration_Corpo" | "UnequipDuration_Gang" | "UnequipItemTime_Corpo" | "UnequipItemTime_Gang" | "UnlockProgress" | "UpgradingCostReduction" | "UpgradingMaterialDropChance" | "UpgradingMaterialRandomGrantChance" | "UpgradingMaterialRetrieveChance" | "UploadQuickHackMod" | "Visibility" | "VisualStimRangeMultiplier" | "VulnerabilityExtension" | "WallRunHorSpeedToEnterMin" | "WallRunStrafeAngleMax" | "WallRunTimeMax" | "WallRunVertSpeedToEnterMax" | "WasItemUpgraded" | "WasQuickHacked" | "WeakspotDamageMultiplier" | "WeaponHasAutoloader" | "WeaponNoise" | "WeaponPosAdsX" | "WeaponPosAdsY" | "WeaponPosAdsZ" | "WeaponPosX" | "WeaponPosY" | "WeaponPosZ" | "WeaponRotAdsX" | "WeaponRotAdsY" | "WeaponRotAdsZ" | "WeaponRotX" | "WeaponRotY" | "WeaponRotZ" | "Weight" | "WoundHeadDamageThreshold" | "WoundLArmDamageThreshold" | "WoundLLegDamageThreshold" | "WoundRArmDamageThreshold" | "WoundRLegDamageThreshold" | "ZoomLevel" | "CPO_Armor" | "CPO_NPC_Importance" | "Count" | "Invalid";

type gamedataStatPoolType =
  "Adrenaline" | "Aggressiveness" | "BleedingTrigger" | "BurningTrigger" | "CPUPower" | "CallReinforcementProgress" | "Durability" | "E3_BossWeakSpotHealth" | "ElectrocutedTrigger" | "Fear" | "Health" | "LeftArmHealth" | "LeftLegHealth" | "Memory" | "Oxygen" | "PhoneCallDuration" | "PoisonTrigger" | "QuickHackDuration" | "QuickHackUpload" | "ReprimandEscalation" | "RightLegHealth" | "Stamina" | "StunTrigger" | "UnlockProgress" | "WeakspotHealth" | "WeaponCharge" | "WeaponOverheat" | "CPOShockedTrigger" | "CPO_Armor" | "CPO_NPC_Importance" | "Count" | "Invalid";

type gamedataTriggerMode =
  "Burst" | "Charge" | "FullAuto" | "Lock" | "SemiAuto" | "Windup" | "Count" | "Invalid";

type gamedataWeaponEvolution =
  "Blade" | "Blunt" | "" | "Power" | "Smart" | "Tech" | "Count" | "Invalid";

type gamedataWeaponManufacturer =
  "Corporation" | "Street" | "Count" | "Invalid";

type gamedataGender =
  "Default" | "Female" | "Male" | "Count" | "Invalid";

type gamedataPerkType =
  "Assault_Area_01_Perk_1" | "Assault_Area_01_Perk_2" | "Assault_Area_02_Perk_1" | "Assault_Area_02_Perk_2" | "Assault_Area_03_Perk_1" | "Assault_Area_03_Perk_2" | "Assault_Area_04_Perk_1" | "Assault_Area_04_Perk_2" | "Assault_Area_05_Perk_1" | "Assault_Area_05_Perk_2" | "Assault_Area_06_Perk_1" | "Assault_Area_06_Perk_2" | "Assault_Area_07_Perk_1" | "Assault_Area_07_Perk_2" | "Assault_Area_08_Perk_1" | "Assault_Area_08_Perk_2" | "Assault_Area_09_Perk_1" | "Assault_Area_09_Perk_2" | "Assault_Area_10_Perk_1" | "Athletics_Area_01_Perk_1" | "Athletics_Area_01_Perk_2" | "Athletics_Area_02_Perk_1" | "Athletics_Area_02_Perk_2" | "Athletics_Area_03_Perk_1" | "Athletics_Area_03_Perk_2" | "Athletics_Area_04_Perk_1" | "Athletics_Area_04_Perk_2" | "Athletics_Area_05_Perk_1" | "Athletics_Area_05_Perk_2" | "Athletics_Area_05_Perk_3" | "Athletics_Area_06_Perk_1" | "Athletics_Area_06_Perk_2" | "Athletics_Area_06_Perk_3" | "Athletics_Area_07_Perk_1" | "Athletics_Area_07_Perk_2" | "Athletics_Area_08_Perk_1" | "Athletics_Area_08_Perk_2" | "Athletics_Area_09_Perk_1" | "Athletics_Area_10_Perk_1" | "Athletics_Area_10_Perk_2" | "Brawling_Area_01_Perk_1" | "Brawling_Area_01_Perk_2" | "Brawling_Area_02_Perk_1" | "Brawling_Area_02_Perk_2" | "Brawling_Area_03_Perk_1" | "Brawling_Area_03_Perk_2" | "Brawling_Area_04_Perk_1" | "Brawling_Area_04_Perk_2" | "Brawling_Area_05_Perk_1" | "Brawling_Area_05_Perk_2" | "Brawling_Area_06_Perk_1" | "Brawling_Area_06_Perk_2" | "Brawling_Area_07_Perk_1" | "Brawling_Area_07_Perk_2" | "Brawling_Area_08_Perk_1" | "Brawling_Area_08_Perk_2" | "ColdBlood_Area_01_Perk_1" | "ColdBlood_Area_02_Perk_1" | "ColdBlood_Area_02_Perk_2" | "ColdBlood_Area_03_Perk_1" | "ColdBlood_Area_03_Perk_2" | "ColdBlood_Area_04_Perk_1" | "ColdBlood_Area_04_Perk_2" | "ColdBlood_Area_05_Perk_1" | "ColdBlood_Area_05_Perk_2" | "ColdBlood_Area_06_Perk_1" | "ColdBlood_Area_06_Perk_2" | "ColdBlood_Area_06_Perk_3" | "ColdBlood_Area_07_Perk_1" | "ColdBlood_Area_07_Perk_2" | "ColdBlood_Area_08_Perk_1" | "ColdBlood_Area_08_Perk_2" | "ColdBlood_Area_09_Perk_1" | "ColdBlood_Area_10_Perk_1" | "CombatHacking_Area_01_Perk_1" | "CombatHacking_Area_01_Perk_2" | "CombatHacking_Area_02_Perk_1" | "CombatHacking_Area_02_Perk_2" | "CombatHacking_Area_02_Perk_3" | "CombatHacking_Area_03_Perk_1" | "CombatHacking_Area_03_Perk_2" | "CombatHacking_Area_04_Perk_1" | "CombatHacking_Area_05_Perk_1" | "CombatHacking_Area_06_Perk_1" | "CombatHacking_Area_06_Perk_2" | "CombatHacking_Area_06_Perk_3" | "CombatHacking_Area_07_Perk_1" | "CombatHacking_Area_08_Perk_1" | "CombatHacking_Area_08_Perk_2" | "CombatHacking_Area_09_Perk_1" | "CombatHacking_Area_10_Perk_1" | "CombatHacking_Area_10_Perk_2" | "Crafting_Area_01_Perk_1" | "Crafting_Area_01_Perk_2" | "Crafting_Area_02_Perk_1" | "Crafting_Area_02_Perk_2" | "Crafting_Area_03_Perk_1" | "Crafting_Area_04_Perk_1" | "Crafting_Area_04_Perk_2" | "Crafting_Area_05_Perk_1" | "Crafting_Area_05_Perk_2" | "Crafting_Area_06_Perk_1" | "Crafting_Area_06_Perk_2" | "Crafting_Area_06_Perk_3" | "Crafting_Area_07_Perk_1" | "Crafting_Area_07_Perk_2" | "Crafting_Area_08_Perk_1" | "Crafting_Area_08_Perk_2" | "Crafting_Area_09_Perk_1" | "Crafting_Area_10_Perk_1" | "Demolition_Area_01_Perk_1" | "Demolition_Area_02_Perk_1" | "Demolition_Area_02_Perk_2" | "Demolition_Area_03_Perk_1" | "Demolition_Area_03_Perk_2" | "Demolition_Area_04_Perk_1" | "Demolition_Area_04_Perk_2" | "Demolition_Area_05_Perk_1" | "Demolition_Area_05_Perk_2" | "Demolition_Area_06_Perk_1" | "Demolition_Area_06_Perk_2" | "Demolition_Area_07_Perk_1" | "Demolition_Area_07_Perk_2" | "Demolition_Area_08_Perk_1" | "Demolition_Area_08_Perk_2" | "Demolition_Area_09_Perk_1" | "Demolition_Area_09_Perk_2" | "Demolition_Area_10_Perk_1" | "Demolition_Area_10_Perk_2" | "Engineering_Area_01_Perk_1" | "Engineering_Area_01_Perk_2" | "Engineering_Area_02_Perk_1" | "Engineering_Area_02_Perk_2" | "Engineering_Area_03_Perk_1" | "Engineering_Area_04_Perk_1" | "Engineering_Area_04_Perk_2" | "Engineering_Area_04_Perk_3" | "Engineering_Area_05_Perk_1" | "Engineering_Area_05_Perk_2" | "Engineering_Area_06_Perk_1" | "Engineering_Area_06_Perk_2" | "Engineering_Area_07_Perk_1" | "Engineering_Area_07_Perk_2" | "Engineering_Area_07_Perk_3" | "Engineering_Area_08_Perk_1" | "Engineering_Area_08_Perk_2" | "Engineering_Area_09_Perk_1" | "Engineering_Area_10_Perk_1" | "Engineering_Area_10_Perk_2" | "Gunslinger_Area_01_Perk_1" | "Gunslinger_Area_01_Perk_2" | "Gunslinger_Area_02_Perk_1" | "Gunslinger_Area_02_Perk_2" | "Gunslinger_Area_03_Perk_1" | "Gunslinger_Area_03_Perk_2" | "Gunslinger_Area_04_Perk_1" | "Gunslinger_Area_04_Perk_2" | "Gunslinger_Area_04_Perk_3" | "Gunslinger_Area_05_Perk_1" | "Gunslinger_Area_05_Perk_2" | "Gunslinger_Area_06_Perk_1" | "Gunslinger_Area_06_Perk_2" | "Gunslinger_Area_07_Perk_1" | "Gunslinger_Area_07_Perk_2" | "Gunslinger_Area_08_Perk_1" | "Gunslinger_Area_08_Perk_2" | "Gunslinger_Area_09_Perk_1" | "Gunslinger_Area_10_Perk_1" | "Hacking_Area_01_Perk_1" | "Hacking_Area_01_Perk_2" | "Hacking_Area_02_Perk_1" | "Hacking_Area_02_Perk_2" | "Hacking_Area_03_Perk_1" | "Hacking_Area_03_Perk_2" | "Hacking_Area_04_Perk_1" | "Hacking_Area_04_Perk_2" | "Hacking_Area_05_Perk_1" | "Hacking_Area_06_Perk_1" | "Hacking_Area_06_Perk_2" | "Hacking_Area_07_Perk_1" | "Hacking_Area_07_Perk_2" | "Hacking_Area_08_Perk_1" | "Hacking_Area_08_Perk_2" | "Hacking_Area_09_Perk_1" | "Hacking_Area_09_Perk_2" | "Hacking_Area_10_Perk_1" | "Hacking_Area_10_Perk_2" | "Kenjutsu_Area_01_Perk_1" | "Kenjutsu_Area_01_Perk_2" | "Kenjutsu_Area_02_Perk_1" | "Kenjutsu_Area_02_Perk_2" | "Kenjutsu_Area_03_Perk_1" | "Kenjutsu_Area_03_Perk_2" | "Kenjutsu_Area_04_Perk_1" | "Kenjutsu_Area_04_Perk_2" | "Kenjutsu_Area_05_Perk_1" | "Kenjutsu_Area_05_Perk_2" | "Kenjutsu_Area_06_Perk_1" | "Kenjutsu_Area_06_Perk_2" | "Kenjutsu_Area_07_Perk_1" | "Kenjutsu_Area_07_Perk_2" | "Kenjutsu_Area_08_Perk_1" | "Kenjutsu_Area_08_Perk_2" | "Stealth_Area_01_Perk_1" | "Stealth_Area_01_Perk_2" | "Stealth_Area_02_Perk_1" | "Stealth_Area_02_Perk_2" | "Stealth_Area_02_Perk_3" | "Stealth_Area_03_Perk_1" | "Stealth_Area_03_Perk_2" | "Stealth_Area_03_Perk_3" | "Stealth_Area_04_Perk_1" | "Stealth_Area_04_Perk_2" | "Stealth_Area_05_Perk_1" | "Stealth_Area_05_Perk_2" | "Stealth_Area_05_Perk_3" | "Stealth_Area_06_Perk_1" | "Stealth_Area_06_Perk_2" | "Stealth_Area_07_Perk_1" | "Stealth_Area_07_Perk_2" | "Stealth_Area_07_Perk_3" | "Stealth_Area_08_Perk_1" | "Stealth_Area_08_Perk_2" | "Stealth_Area_08_Perk_3" | "Stealth_Area_09_Perk_1" | "Stealth_Area_09_Perk_2" | "Stealth_Area_09_Perk_3" | "Stealth_Area_10_Perk_1" | "Count" | "Invalid";

type gamedataProficiencyType =
  "Assault" | "Athletics" | "Brawling" | "ColdBlood" | "CombatHacking" | "Crafting" | "Demolition" | "Engineering" | "Gunslinger" | "Hacking" | "Kenjutsu" | "Level" | "Stealth" | "StreetCred" | "Count" | "Invalid";

type gamedataDevelopmentPointType =
  "Attribute" | "Primary" | "Secondary" | "Count" | "Invalid";

type gamedataEthnicity =
  "African" | "AfricanAmerican" | "AmericanEnglish" | "Arabic" | "Brasilian" | "BritishEnglish" | "Caribbean" | "Chinese" | "Default" | "Indian" | "Japanese" | "Mexican" | "NativeAmerican" | "Russian" | "Count" | "Invalid";

type gamedataStatusEffectType =
  "AndroidTurnOff" | "AndroidTurnOn" | "Berserk" | "Berserker" | "Bleeding" | "Blind" | "BlockCoverVisibilityReduction" | "BrainMelt" | "Burning" | "Cloaked" | "CommsCall" | "CommsNoise" | "Crippled" | "DamageBurst" | "Deafened" | "Defeated" | "DefeatedWithRecover" | "EMP" | "Electrocuted" | "Exhausted" | "ForceShoot" | "Grapple" | "Jam" | "JamCommuniations" | "Kill" | "Knockdown" | "Madness" | "MeleeInvulnerability" | "Misc" | "MuteAudioStims" | "NetwatcherHackStage1" | "NetwatcherHackStage2" | "NetwatcherHackStage3" | "Overheat" | "Overload" | "Pain" | "PassiveBuff" | "PassiveDebuff" | "PlayerCooldown" | "Poisoned" | "QuickHackFreezeLocomotion" | "QuickHackStaggerCyberware" | "QuickHackStaggerLocomotion" | "QuickHackStaggerWeapon" | "Quickhack" | "Regeneration" | "Sandevistan" | "SetFriendly" | "Sleep" | "Stagger" | "StrongArmsActive" | "Stunned" | "SuicideHack" | "SystemCollapse" | "Unconscious" | "UncontrolledMovement" | "VehicleKnockdown" | "WeakspotOverload" | "Wounded" | "CPOShocked" | "Count" | "Invalid";

type gamedataAffiliation =
  "AfterlifeMercs" | "Aldecaldos" | "Animals" | "Arasaka" | "Biotechnica" | "CityCouncil" | "Civilian" | "KangTao" | "Maelstrom" | "Militech" | "NCPD" | "NetWatch" | "News54" | "RecordingAgency" | "SSI" | "Scavengers" | "SixthStreet" | "SouthCalifornia" | "TheMox" | "TraumaTeam" | "TygerClaws" | "Unaffiliated" | "UnaffiliatedCorpo" | "Unknown" | "Valentinos" | "VoodooBoys" | "Wraiths" | "Count" | "Invalid";

type gamedataReactionPresetType =
  "Child" | "Civilian_Guard" | "Civilian_Neutral" | "Civilian_Passive" | "Corpo_Aggressive" | "Corpo_Passive" | "Follower" | "Ganger_Aggressive" | "Ganger_Passive" | "InVehicle_Aggressive" | "InVehicle_Civilian" | "InVehicle_Passive" | "Lore_Aggressive" | "Lore_Civilian" | "Lore_Passive" | "Mechanical_Aggressive" | "Mechanical_NonCombat" | "Mechanical_Passive" | "NoReaction" | "Police_Aggressive" | "Police_Passive" | "Sleep_Aggressive" | "Sleep_Civilian" | "Sleep_Passive" | "Count" | "Invalid";

type gamedataStimType =
  "AimingAt" | "Alarm" | "AreaEffect" | "AskToFollowOrder" | "Attention" | "AudioEnemyPing" | "Bullet" | "Bump" | "Call" | "CarAlarm" | "CarryBody" | "Combat" | "CombatCall" | "CombatHit" | "CombatWhistle" | "CrimeWitness" | "CrowdIllegalAction" | "DeadBody" | "DeviceExplosion" | "Distract" | "DodgeVehicle" | "Driving" | "Dying" | "EnvironmentalHazard" | "Explosion" | "FootStepRegular" | "FootStepSprint" | "GrenadeLanded" | "Gunshot" | "Hacked" | "HijackVehicle" | "IllegalAction" | "IllegalInteraction" | "LandingHard" | "LandingRegular" | "LandingVeryHard" | "MeleeAttack" | "MeleeHit" | "OpeningDoor" | "ProjectileDistraction" | "Provoke" | "Reload" | "Reprimand" | "ReprimandFinalWarning" | "Scream" | "SecurityBreach" | "SilencedGunshot" | "SilentAlarm" | "SoundDistraction" | "SpreadFear" | "StopedAiming" | "Terror" | "TooCloseDistance" | "VehicleHit" | "VehicleHorn" | "VisualDistract" | "WarningDistance" | "WeaponDisplayed" | "WeaponHolstered" | "WeaponSafe" | "Whistle" | "Count" | "Invalid";

type gamedataStimPropagation =
  "Audio" | "Visual" | "Count" | "Invalid";

type gamedataStimPriority =
  "High" | "Low" | "Count" | "Invalid";

type gamedataBuildType =
  "CombatNetrunner0" | "CombatNetrunner10" | "CombatNetrunner15" | "CombatNetrunner18" | "CombatNetrunner20" | "CombatNetrunner25" | "CombatNetrunner30" | "CombatNetrunner35" | "CombatNetrunner40" | "CombatNetrunner5" | "CombatNetrunner50" | "CorporateStarting" | "E32019NetrunnerPhase1" | "E32019StrongSoloPhase1" | "FunctionalTestsProgressionBuildTest" | "FunctionalTestsStartingBuild" | "GYMcclBuild" | "GymSmoketestMaxedBuild" | "HandsOnStarting" | "ItemPass_BaseBuild" | "ItemPass_FactionMeleeMods" | "ItemPass_FactionRangedMods" | "ItemPass_IconicMods" | "ItemPass_LegendaryMods" | "ItemPass_PowerMods" | "ItemPass_SmartMods" | "ItemPass_StandardMods" | "ItemPass_TechMods" | "JohnnyQ101" | "JohnnyQ108" | "JohnnyQ204" | "MaxSkillsAllWeapons" | "MeleeCombat0" | "MeleeCombat10" | "MeleeCombat15" | "MeleeCombat20" | "MeleeCombat25" | "MeleeCombat30" | "MeleeCombat35" | "MeleeCombat40" | "MeleeCombat45" | "MeleeCombat5" | "MeleeCombat50" | "NomadStarting" | "RangedCombat0" | "RangedCombat10" | "RangedCombat15" | "RangedCombat20" | "RangedCombat25" | "RangedCombat30" | "RangedCombat35" | "RangedCombat40" | "RangedCombat45" | "RangedCombat5" | "RangedCombat50" | "StartingBuild" | "StreetKidStarting" | "UIStressTest" | "mech_netrunner" | "q003_royce_netrunner" | "q003_royce_noBuild" | "q003_royce_solo" | "q110_sasquatch_netrunner" | "q110_sasquatch_noBuild" | "q110_sasquatch_solo" | "q112_oda_netrunner" | "q112_oda_noBuild" | "q112_oda_solo" | "q113_smasher_melee" | "q113_smasher_netrunner" | "q113_smasher_noBuild" | "q113_smasher_solo" | "CpoAssassinBuild" | "CpoDefaultBuild" | "CpoNetrunnerBuild" | "CpoSoloBuild" | "CpoTechieBuild" | "Count" | "Invalid";

type gamedataEquipmentArea =
  "AbilityCW" | "ArmsCW" | "BaseFists" | "BotCPU" | "BotChassisModule" | "BotMainModule" | "BotSoftware" | "CardiovascularSystemCW" | "Consumable" | "CyberwareWheel" | "EyesCW" | "Face" | "Feet" | "FrontalCortexCW" | "Gadget" | "HandsCW" | "Head" | "ImmuneSystemCW" | "InnerChest" | "IntegumentarySystemCW" | "LeftArm" | "Legs" | "LegsCW" | "MusculoskeletalSystemCW" | "NervousSystemCW" | "OuterChest" | "Outfit" | "PersonalLink" | "PlayerTattoo" | "Quest" | "QuickSlot" | "QuickWheel" | "RightArm" | "SilverhandArm" | "Splinter" | "SystemReplacementCW" | "UnderwearBottom" | "UnderwearTop" | "VDefaultHandgun" | "Weapon" | "WeaponHeavy" | "WeaponLeft" | "WeaponWheel" | "Count" | "Invalid";

type gamedataWorkspotActionType =
  "DeviceInvestigation" | "FearHide" | "LookAround" | "Count" | "Invalid";

type gamedataWorkspotReactionType =
  "Anger" | "BumpLeftBack" | "BumpLeftFront" | "BumpRightBack" | "BumpRightFront" | "Curious" | "Fear" | "Count" | "Invalid";

type gamedataDistrict =
  "ArasakaWaterfront" | "ArasakaWaterfront_AbandonedWarehouse" | "ArasakaWaterfront_KonpekiPlaza" | "Arroyo" | "Arroyo_Arasaka_Warehouse" | "Arroyo_ClairesGarage" | "Arroyo_CytechFactory" | "Arroyo_Kendachi" | "Arroyo_KenmoreCafe" | "Arroyo_LasPalapas" | "Arroyo_Red_Dirt" | "Arroyo_TireEmpire" | "Badlands" | "Badlands_BiotechnicaFlats" | "Badlands_DryCreek" | "Badlands_JacksonPlains" | "Badlands_LagunaBend" | "Badlands_LasPalapas" | "Badlands_RattlesnakeCreek" | "Badlands_RedPeaks" | "Badlands_RockyRidge" | "Badlands_SantaClara" | "Badlands_SierraSonora" | "Badlands_SoCalBorderCrossing" | "Badlands_VasquezPass" | "Badlands_Yucca" | "Badlands_YuccaGarage" | "Badlands_YuccaRadioTower" | "CharterHill" | "CharterHill_PowerPlant" | "CityCenter" | "Coastview" | "Coastview_BattysHotel" | "Coastview_ButcherShop" | "Coastview_GrandImperialMall" | "Coastview_RundownApartment" | "Coastview_VDBChapel" | "Coastview_VDBMaglev" | "Coastview_q110Cyberspace" | "CorpoPlaza" | "CorpoPlaza_ArasakaTowerAtrium" | "CorpoPlaza_ArasakaTowerCEOFloor" | "CorpoPlaza_ArasakaTowerJenkins" | "CorpoPlaza_ArasakaTowerJungle" | "CorpoPlaza_ArasakaTowerLobby" | "CorpoPlaza_ArasakaTowerNest" | "CorpoPlaza_ArasakaTowerSaburoOffice" | "CorpoPlaza_ArasakaTowerUnlistedFloors" | "CorpoPlaza_ArasakaTowerUpperAtrium" | "CorpoPlaza_q201Cyberspace" | "Downtown" | "Downtown_Jinguji" | "Downtown_TheHammer" | "Glen" | "Glen_Embers" | "Glen_MusicStore" | "Glen_NCPDLab" | "Glen_WichedTires" | "Heywood" | "JapanTown" | "JapanTown_Clouds" | "JapanTown_DarkMatter" | "JapanTown_Fingers" | "JapanTown_FourthWallBdStudio" | "JapanTown_HiromisApartment" | "JapanTown_MegabuildingH8" | "JapanTown_VR_Tutorial" | "JapanTown_Wakakos_Pachinko_Parlor" | "Kabuki" | "Kabuki_JudysApartment" | "Kabuki_LizziesBar" | "Kabuki_NoTellMotel" | "LagunaBend_LakeHut" | "LittleChina" | "LittleChina_Afterlife" | "LittleChina_MistysShop" | "LittleChina_Q101Cyberspace" | "LittleChina_RiotClub" | "LittleChina_TomsDiner" | "LittleChina_VApartment" | "LittleChina_VictorsClinic" | "NorthBadlands" | "NorthOaks" | "NorthOaks_Arasaka_Estate" | "NorthOaks_Columbarium" | "NorthOaks_Denny_Estate" | "NorthOaks_Kerry_Estate" | "Northside" | "Northside_All_Foods" | "Northside_CleanCut" | "Northside_Totentaz" | "Northside_WNS" | "Pacifica" | "RanchoCoronado" | "RanchoCoronado_Caliente" | "RanchoCoronado_GunORama" | "RanchoCoronado_Piez" | "RanchoCoronado_Softsys" | "RanchoCoronado_Stylishly" | "SantoDomingo" | "SouthBadlands" | "SouthBadlands_EdgewoodFarm" | "SouthBadlands_PoppyFarm" | "SouthBadlands_TrailerPark" | "SouthBadlands_q201SpaceStation" | "VistaDelRey" | "Vista_del_Rey_Delamain" | "Vista_del_Rey_LaCatrina" | "Vista_del_rey_Abandoned_Apartment_Building" | "Vista_del_rey_ElCoyoteCojo" | "Watson" | "Wellsprings" | "WestWindEstate" | "Westbrook" | "Count" | "Invalid";

type gamedataNPCUpperBodyState =
  "Aim" | "Any" | "Attack" | "ChargedAttack" | "Defend" | "Equip" | "Normal" | "Parry" | "Reload" | "Shoot" | "Taunt" | "Count" | "Invalid";

type gamedataNPCHighLevelState =
  "Alerted" | "Any" | "Combat" | "Dead" | "Fear" | "Relaxed" | "Stealth" | "Unconscious" | "Wounded" | "Count" | "Invalid";

type gamedataNPCStanceState =
  "Any" | "Cover" | "Crouch" | "Stand" | "Swim" | "Vehicle" | "VehicleWindow" | "Count" | "Invalid";

type gamedataNPCBehaviorState =
  "State1" | "State2" | "State3" | "State4" | "State5" | "Count" | "Invalid";

type gamedataDefenseMode =
  "DefendAll" | "DefendMelee" | "DefendRanged" | "NoDefend" | "Count" | "Invalid";

type gamedataLocomotionMode =
  "Moving" | "Static" | "Count" | "Invalid";

type gamedataNPCType =
  "Android" | "Any" | "Drone" | "Human" | "Mech" | "Spiderbot" | "Count" | "Invalid";

type gamedataUINameplateDisplayType =
  "AfterScan" | "Always" | "Default" | "Never" | "Count" | "Invalid";

type gamedataNPCRarity =
  "Boss" | "Elite" | "Normal" | "Officer" | "Rare" | "Trash" | "Weak" | "Count" | "Invalid";

type gamedataAIActionTarget =
  "AssignedVehicle" | "CombatTarget" | "CommandCover" | "CommandMovementDestination" | "ConsideredCover" | "CurrentCover" | "CurrentNetrunnerProxy" | "CustomWorldPosition" | "DesiredCover" | "FriendlyTarget" | "FurthestNavigableSquadmate" | "FurthestSquadmate" | "FurthestThreat" | "HostileOfficer" | "MountedVehicle" | "MovementDestination" | "NearestDefeatedSquadmate" | "NearestNavigableSquadmate" | "NearestSquadmate" | "NearestThreat" | "NetrunnerProxy" | "ObjectOfInterest" | "Owner" | "Player" | "PointOfInterest" | "RingBackDestination" | "RingBackLeftDestination" | "RingBackRightDestination" | "RingFrontDestination" | "RingFrontLeftDestination" | "RingFrontRightDestination" | "RingLeftDestination" | "RingRightDestination" | "SelectedCover" | "SpawnPosition" | "SquadOfficer" | "StimSource" | "StimTarget" | "TargetDevice" | "TargetItem" | "TopFriendly" | "TopThreat" | "VisibleFurthestThreat" | "VisibleNearestThreat" | "VisibleTopThreat" | "Count" | "Invalid";

type gamedataAIActionType =
  "BackUp" | "BattleCry" | "Block" | "CallOff" | "Charge" | "Crouch" | "Dash" | "GrenadeThrow" | "GroupReaction" | "Investigate" | "Melee" | "Peek" | "Quickhack" | "Reprimand" | "Search" | "Shoot" | "Sync" | "TakeCover" | "Takedown" | "Taunt" | "Count" | "Invalid";

type gamedataAITacticType =
  "Assault" | "Defend" | "Flank" | "Medivac" | "Panic" | "Regroup" | "Retreat" | "Snipe" | "Suppress" | "Count" | "Invalid";

type gamedataAIRingType =
  "Approach" | "Close" | "Default" | "Defend" | "Extreme" | "Far" | "LatestActive" | "Medium" | "Melee" | "Support" | "Undefined" | "Count" | "Invalid";

type gamedataAITicketType =
  "BackUp" | "BattleCry" | "Block" | "CallOff" | "CatchUp" | "Charge" | "CloseRing" | "CloseRing1stFilter" | "CloseRing2ndFilter" | "Crouch" | "DefaultRing" | "Equip" | "EquipMelee" | "ExtremeRing" | "ExtremeRing1stFilter" | "ExtremeRing2ndFilter" | "FarRing" | "FarRing1stFilter" | "FarRing2ndFilter" | "GoToCover" | "GrenadeThrow" | "GroupReaction" | "Investigate" | "MediumRing" | "MediumRing1stFilter" | "MediumRing2ndFilter" | "Melee" | "MeleeApproach" | "MeleeRing" | "MeleeRing1stFilter" | "MeleeRing2ndFilter" | "MeleeSupport" | "Peek" | "QuickMelee" | "Quickhack" | "Reload" | "Reprimand" | "Search" | "Shoot" | "SimpleCombat" | "SimpleCombatMovement" | "Strafe" | "StrafeEvade" | "Sync" | "TakeCover" | "Takedown" | "Taunt" | "TauntBackground" | "Count" | "Invalid";

type gamedataAISquadType =
  "Attitude" | "Community" | "Global" | "Security" | "Unknown" | "Count" | "Invalid";

type gamedataAIActionSecurityNotificationType =
  "COMBAT" | "DEESCALATE" | "DEFAULT" | "ILLEGAL_ACTION" | "REPRIMAND_ESCALATE" | "REPRIMAND_SUCCESSFUL" | "SECURITY_GATE" | "Count" | "Invalid";

type gamedataAIActionSecurityAreaType =
  "DANGEROUS" | "DISABLED" | "RESTRICTED" | "SAFE" | "Count" | "Invalid";

type gamedataAISmartCompositeType =
  "Selector" | "SelectorWithMemory" | "SelectorWithSmartMemory" | "Sequence" | "SequenceWithMemory" | "SequenceWithSmartMemory" | "Count" | "Invalid";

type gamedataAIExposureMethodType =
  "BlindFire" | "Lean" | "StepOut" | "Count" | "Invalid";

type gamedataAIAdditionalTraceType =
  "Chest" | "Hip" | "Knee" | "Undefined" | "Count" | "Invalid";

type gamedataVehicleType =
  "Bike" | "Car" | "Panzer" | "Count" | "Invalid";

type gamedataVehicleModel =
  "Aerondight" | "Alvarado" | "Basilisk" | "Bratsk" | "Colby" | "Columbus" | "Cortes" | "Emperor" | "Galena" | "GalenaNomad" | "Kusanagi" | "Mackinaw" | "Maimai" | "Octant" | "Shion" | "Supron" | "Thrax" | "Turbo" | "Type66" | "Zeya" | "Count" | "Invalid";

type gamedataVehicleManufacturer =
  "Arch" | "Archer" | "Aurochs" | "Brennan" | "Chevillon" | "Delamain" | "Herrera" | "Kaukaz" | "Makigai" | "Militech" | "Mizutani" | "Porsche" | "Quadra" | "Rayfield" | "Seamurai" | "Thorton" | "Villefort" | "Yaiba" | "Zetatech" | "Count" | "Invalid";

type gamedataAIRole =
  "Follower" | "Patrol" | "Count" | "Invalid";

type gamedataChoiceCaptionPartType =
  "Blueline" | "Icon" | "QuickhackCost" | "Tag" | "Text" | "Count" | "Invalid";

type gamedataSubCharacter =
  "Flathead" | "Count" | "Invalid";

type gamedataFxAction =
  "EnterCharge" | "EnterDischarge" | "EnterLowAmmo" | "EnterNoAmmo" | "EnterOverheat" | "EnterReload" | "ExitCharge" | "ExitDischarge" | "ExitLowAmmo" | "ExitNoAmmo" | "ExitOverheat" | "ExitReload" | "MeleeBlock" | "MeleeHit" | "Shoot" | "SilencedShoot" | "Count" | "Invalid";

type gamedataFxActionType =
  "BreakLoop" | "Kill" | "Start" | "Count" | "Invalid";

type gamedataLifePath =
  "Corporate" | "Nomad" | "StreetKid" | "Count" | "Invalid";

type gamedataPlayerBuild =
  "Cool" | "Netrunner" | "Reflexes" | "Solo" | "Techie" | "Count" | "Invalid";

type gamedataStatusEffectAIBehaviorType =
  "Basic" | "" | "Stoppable" | "Unstoppable" | "Count" | "Invalid";

type gamedataStatusEffectAIBehaviorFlag =
  "AcceptsAdditives" | "InterruptsForcedBehavior" | "InterruptsSamePriorityTask" | "" | "OverridesSelf" | "Count" | "Invalid";

type gamedataObjectActionType =
  "DeviceQuickHack" | "Direct" | "Item" | "MinigameUpload" | "Payment" | "PuppetQuickHack" | "Remote" | "Count" | "Invalid";

type gamedataObjectActionReference =
  "Instigator" | "Source" | "Target" | "Count" | "Invalid";

type gamedataPingType =
  "Device" | "Door" | "Elevator" | "Junction" | "Location" | "Loot" | "Trap" | "Count" | "Invalid";

type gamedataPerkArea =
  "Assault_Area_01" | "Assault_Area_02" | "Assault_Area_03" | "Assault_Area_04" | "Assault_Area_05" | "Assault_Area_06" | "Assault_Area_07" | "Assault_Area_08" | "Assault_Area_09" | "Assault_Area_10" | "Athletics_Area_01" | "Athletics_Area_02" | "Athletics_Area_03" | "Athletics_Area_04" | "Athletics_Area_05" | "Athletics_Area_06" | "Athletics_Area_07" | "Athletics_Area_08" | "Athletics_Area_09" | "Athletics_Area_10" | "Brawling_Area_01" | "Brawling_Area_02" | "Brawling_Area_03" | "Brawling_Area_04" | "Brawling_Area_05" | "Brawling_Area_06" | "Brawling_Area_07" | "Brawling_Area_08" | "ColdBlood_Area_01" | "ColdBlood_Area_02" | "ColdBlood_Area_03" | "ColdBlood_Area_04" | "ColdBlood_Area_05" | "ColdBlood_Area_06" | "ColdBlood_Area_07" | "ColdBlood_Area_08" | "ColdBlood_Area_09" | "ColdBlood_Area_10" | "CombatHacking_Area_01" | "CombatHacking_Area_02" | "CombatHacking_Area_03" | "CombatHacking_Area_04" | "CombatHacking_Area_05" | "CombatHacking_Area_06" | "CombatHacking_Area_07" | "CombatHacking_Area_08" | "CombatHacking_Area_09" | "CombatHacking_Area_10" | "Crafting_Area_01" | "Crafting_Area_02" | "Crafting_Area_03" | "Crafting_Area_04" | "Crafting_Area_05" | "Crafting_Area_06" | "Crafting_Area_07" | "Crafting_Area_08" | "Crafting_Area_09" | "Crafting_Area_10" | "Demolition_Area_01" | "Demolition_Area_02" | "Demolition_Area_03" | "Demolition_Area_04" | "Demolition_Area_05" | "Demolition_Area_06" | "Demolition_Area_07" | "Demolition_Area_08" | "Demolition_Area_09" | "Demolition_Area_10" | "Engineering_Area_01" | "Engineering_Area_02" | "Engineering_Area_03" | "Engineering_Area_04" | "Engineering_Area_05" | "Engineering_Area_06" | "Engineering_Area_07" | "Engineering_Area_08" | "Engineering_Area_09" | "Engineering_Area_10" | "Gunslinger_Area_01" | "Gunslinger_Area_02" | "Gunslinger_Area_03" | "Gunslinger_Area_04" | "Gunslinger_Area_05" | "Gunslinger_Area_06" | "Gunslinger_Area_07" | "Gunslinger_Area_08" | "Gunslinger_Area_09" | "Gunslinger_Area_10" | "Hacking_Area_01" | "Hacking_Area_02" | "Hacking_Area_03" | "Hacking_Area_04" | "Hacking_Area_05" | "Hacking_Area_06" | "Hacking_Area_07" | "Hacking_Area_08" | "Hacking_Area_09" | "Hacking_Area_10" | "Kenjutsu_Area_01" | "Kenjutsu_Area_02" | "Kenjutsu_Area_03" | "Kenjutsu_Area_04" | "Kenjutsu_Area_05" | "Kenjutsu_Area_06" | "Kenjutsu_Area_07" | "Kenjutsu_Area_08" | "Stealth_Area_01" | "Stealth_Area_02" | "Stealth_Area_03" | "Stealth_Area_04" | "Stealth_Area_05" | "Stealth_Area_06" | "Stealth_Area_07" | "Stealth_Area_08" | "Stealth_Area_09" | "Stealth_Area_10" | "Count" | "Invalid";

type gamedataAIDirectorEntryStartType =
  "Default" | "DespawnAllEnemies" | "DespawnExcessedEnemies" | "WaitUntilNoEnemies" | "WaitUntilSameOrLessAmountOfEnemies" | "Count" | "Invalid";

type gamedataVendorType =
  "Armorsmith" | "Clothes" | "Clothing" | "Cyberware" | "Drinks" | "DropPoint" | "Food" | "GrilledFood" | "Gunsmith" | "Junk" | "Kiosk" | "Market" | "Medical" | "PackedFood" | "RipperDoc" | "SkillTrainer" | "Tech" | "TechJunk" | "VendingMachine" | "Count" | "Invalid";

type gamedataMeleeAttackDirection =
  "Center" | "DownToUp" | "LeftDownToRightUp" | "LeftToRight" | "LeftUpToRightDown" | "RightDownToLeftUp" | "RightToLeft" | "RightUpToLeftDown" | "UpToDown" | "Count" | "Invalid";

type gamedataGrenadeDeliveryMethodType =
  "Homing" | "Regular" | "Sticky" | "Count" | "Invalid";

type gamedataUICondition =
  "InEyesSubMenu" | "InHandsSubMenu" | "InSubMenu" | "Visible" | "Count" | "Invalid";

type gamedataWorldMapFilter =
  "All" | "DropPoint" | "FastTravel" | "NoFilter" | "Quest" | "ServicePoint" | "Story" | "Count" | "Invalid";

type gamedataSpawnableObjectPriority =
  "Crowd" | "Quest" | "Regular" | "Count" | "Invalid";

type gamedataStatusEffectVariation =
  "Bike" | "Default" | "Vehicle" | "Count" | "Invalid";

type gamedataCompanionDistancePreset =
  "Close" | "Far" | "Medium" | "VeryFar" | "Count" | "Invalid";

type gamedataProjectileOnCollisionAction =
  "Bounce" | "Pierce" | "Stop" | "StopAndStick" | "StopAndStickPerpendicular" | "Count" | "Invalid";

type gamedataProjectileLaunchMode =
  "Regular" | "Tracking" | "Count" | "Invalid";

type gamedataNPCQuestAffiliation =
  "General" | "MainQuest" | "MinorActivity" | "MinorQuest" | "SideQuest" | "StreetStory" | "Count" | "Invalid";

type gamedataAchievement =
  "Bladerunner" | "BornToBeWild" | "Breathtaking" | "BushidoAndChill" | "Cyberjunkie" | "Denied" | "FollowingTheRiver" | "Fortuneteller" | "Gearhead" | "GetMeThereScottie" | "GunKata" | "Gunslinger" | "HandyMan" | "IAmMaxTac" | "LikeFatherLikeSon" | "LittleTokyo" | "MasterRunner" | "MaxPain" | "MustBeTheRats" | "NeverFadeAway" | "NoMansLand" | "NotTheMobile" | "QueenOfTheHighway" | "Roleplayer" | "Specialist" | "Temperance" | "ThatIsSoHardForTheKnees" | "TheDevil" | "TheFool" | "TheHermit" | "TheHightPriestess" | "TheLovers" | "TheStar" | "TheSun" | "TheWheelOfFortune" | "TheWorld" | "ThisIsPacifica" | "TradeUnion" | "TrueSoldier" | "TrueWarrior" | "TwoHeadsOneBullet" | "UnderPressure" | "VForVendetta" | "YipMan" | "YouKnowWhoIAm" | "Count" | "Invalid";

type gamedataOutput =
  "AskToFollowOrder" | "AskToHolster" | "BackOff" | "BodyInvestigate" | "Bump" | "CallGuard" | "CallPolice" | "DeviceInvestigate" | "Dodge" | "DodgeToSide" | "FearInPlace" | "Flee" | "Ignore" | "Intruder" | "Investigate" | "LookAt" | "Panic" | "PlayerCall" | "Reprimand" | "SquadCall" | "Surrender" | "TurnAt" | "WalkAway" | "Count" | "Invalid";

type gamedataWorkspotCategory =
  "Any" | "Eating" | "Nervous" | "Sitting" | "Sleeping" | "Smoking" | "Count" | "Invalid";

type gamedataSenseObjectType =
  "Camera" | "Deadbody" | "Follower" | "Npc" | "Player" | "Turret" | "Undefined" | "Count" | "Invalid";

type gamedataImprovementRelation =
  "Direct" | "Inverse" | "" | "Count" | "Invalid";

type gamedataConsumableType =
  "Drug" | "Medical" | "Count" | "Invalid";

type gamedataPlayerPossesion =
  "Default" | "Johnny" | "Count" | "Invalid";

type gamedataTraitType =
  "AssaultTrait01" | "AthleticsTrait01" | "BrawlingTrait01" | "ColdBloodTrait01" | "CombatHackingTrait01" | "CraftingTrait01" | "DemolitionTrait01" | "EngineeringTrait01" | "GunslingerTrait01" | "HackingTrait01" | "KenjutsuTrait01" | "StealthTrait01" | "Count" | "Invalid";

type gamedataAttackSubtype =
  "BlockAttack" | "ComboAttack" | "CrouchAttack" | "DeflectAttack" | "EquipAttack" | "FinalAttack" | "JumpAttack" | "SafeAttack" | "SprintAttack" | "ThrowAttack" | "Count" | "Invalid";

type gamedataPerkUtility =
  "ActiveUtility" | "PassiveUtility" | "TriggeredUtility" | "Count" | "Invalid";

type gamedataArchetypeType =
  "AndroidMeleeT1" | "AndroidMeleeT2" | "AndroidRangedT2" | "FastMeleeT2" | "FastMeleeT3" | "FastRangedT2" | "FastRangedT3" | "FastShotgunnerT2" | "FastShotgunnerT3" | "FastSniperT3" | "FriendlyGenericRangedT3" | "GenericMeleeT1" | "GenericMeleeT2" | "GenericRangedT1" | "GenericRangedT2" | "GenericRangedT3" | "HeavyMeleeT2" | "HeavyMeleeT3" | "HeavyRangedT2" | "HeavyRangedT3" | "NetrunnerT1" | "NetrunnerT2" | "NetrunnerT3" | "ShotgunnerT2" | "ShotgunnerT3" | "SniperT2" | "TechieT2" | "TechieT3" | "Count" | "Invalid";

type gameVisionModeType =
  "Default" | "Focus";

type VisionModePatternType =
  "Default" | "Netrunner";

type gamedataItemStructure =
  "BlueprintStackable" | "Stackable" | "Unique" | "Count" | "Invalid";

type gamedataHitPrereqConditionType =
  "AgentMoving" | "AmmoState" | "AttackSubType" | "AttackType" | "BodyPart" | "DamageOverTimeType" | "DamageType" | "DistanceCovered" | "HitFlag" | "InstigatorType" | "SameTarget" | "SourceType" | "StatPool" | "StatPoolComparison" | "StatusEffectPresent" | "TargetKilled" | "TargetNPCRarity" | "TargetNPCType" | "TargetType" | "WeaponType" | "WoundedTriggered" | "Count" | "Invalid";

type gamedataTrackingMode =
  "BeliefPosition" | "LastKnownPosition" | "RealPosition" | "SharedBeliefPosition" | "SharedLastKnownPosition" | "Count" | "Invalid";

type gamedataConsumableBaseName =
  "Alcohol" | "BonesMcCoy70" | "CarryCapacityBooster" | "Drinkable" | "Edible" | "FirstAidWhiff" | "HealthBooster" | "MemoryBooster" | "OxyBooster" | "StaminaBooster" | "Count" | "Invalid";

type gamedataMetaQuest =
  "MetaQuest1" | "MetaQuest2" | "MetaQuest3" | "Count" | "Invalid";

type gamedataAimAssistType =
  "HeadTarget" | "LegTarget" | "MechanicalTarget" | "Melee" | "" | "QuickHack" | "Scanning" | "Shooting" | "ShootingLimbCyber" | "Count" | "Invalid";

type gamedataUIIconCensorFlag =
  "Drugs" | "Gore" | "Homosexuality" | "" | "Nudity" | "OverSexualised" | "Religion" | "Suggestive" | "Count" | "Invalid";

type gameinteractionsEInteractionEventType =
  "EIET_activate" | "EIET_deactivate";

type animLookAtStyle =
  "VerySlow" | "Slow" | "Normal" | "Fast" | "VeryFast";

type animLookAtLimitDegreesType =
  "Narrow" | "Normal" | "Wide" | "";

type animLookAtLimitDistanceType =
  "Short" | "Normal" | "Long" | "";

type animLookAtChestMode =
  "Default" | "NoHips" | "Horizontal" | "HorizontalNoHips";

type animLookAtHeadMode =
  "Default" | "Horizontal";

type animLookAtEyesMode =
  "Default" | "Horizontal";

type animLookAtLeftHandedMode =
  "Default" | "Horizontal";

type animLookAtRightHandedMode =
  "Default" | "Horizontal";

type animLookAtTwoHandedMode =
  "Default" | "Horizontal";

type animLookAtStatus =
  "Active" | "LimitReached" | "TransitionInProgress";

type gameprojectileELaunchMode =
  "Default" | "FromLogic" | "FromVisuals";

type gameeventsDeathDirection =
  "Undefined" | "Left" | "Backward" | "Right" | "Forward";

type gameinteractionsReactionState =
  "Idle" | "Starting" | "InInteraction" | "Finishing" | "Canceling";

type gameinteractionsBumpSide =
  "Invalid" | "Left" | "Right";

type gameinteractionsBumpIntensity =
  "Invalid" | "Light" | "Medium" | "Heavy" | "Strafe";

type gameinteractionsBumpLocation =
  "Invalid" | "Front" | "Back";

type gameScanningState =
  "Default" | "Started" | "Stopped" | "Complete" | "ShallowComplete";

type gameScanningMode =
  "Inactive" | "Light" | "Heavy";

type gamestateMachineParameterAspect =
  "Temporary" | "Permanent" | "Conditional";

type gameinteractionsChoiceType =
  "QuestImportant" | "AlreadyRead" | "Inactive" | "CheckSuccess" | "CheckFailed" | "InnerDialog" | "PossessedDialog" | "TimedDialog" | "Blueline" | "Pay" | "Selected" | "Illegal";

type EOutlineType =
  "NONE" | "GREEN" | "RED";

type EDeviceChallengeSkill =
  "Invalid" | "Hacking" | "Engineering" | "Athletics";

type EDeviceChallengeAttribute =
  "Invalid" | "Strength" | "Reflexes" | "Intelligence" | "TechnicalAbility" | "Cool";

type ELogicOperator =
  "OR" | "AND";

type gameTickableEventState =
  "Idle" | "FirstTick" | "NormalTick" | "LastTick" | "Canceled";

type gamedeviceActionPropertyFlags =
  "" | "IsUsedByQuest";

type gamePlatformMovementState =
  "Stopped" | "Paused" | "MovingUp" | "MovingDown";

type gameMovingPlatformMovementInitializationType =
  "Time" | "Speed";

type gameMovingPlatformLoopType =
  "NoLooping" | "Bounce" | "Repeat";

type EItemSlotCheckType =
  "NONE" | "TAG" | "TYPE" | "CATEGORY" | "EVOLUTION" | "FULLY_MODDED";

type PuppetVehicleState =
  "IdleMounted" | "IdleStand" | "CombatWindowed" | "CombatSeated" | "Turret" | "GunnerSlot";

type navNaviPositionType =
  "" | "Normal" | "Projected";

type TargetComponentFilterType =
  "Melee" | "Shooting" | "Scanning" | "QuickHack" | "ShootingLimbCyber" | "HeadTarget" | "LegTarget" | "MechanicalTarget";

type TSFMV =
  "Obj_Player" | "Obj_Puppet" | "Obj_Sensor" | "Obj_Device" | "Obj_Other" | "Att_Friendly" | "Att_Hostile" | "Att_Neutral" | "Sp_AimAssistEnabled" | "Sp_Aggressive" | "St_Alive" | "St_Dead" | "St_NotDefeated" | "St_Defeated" | "St_Conscious" | "St_Unconscious" | "St_TurnedOn" | "St_TurnedOff" | "St_QuickHackable" | "St_AliveAndActive";

type TargetingSet =
  "Visible" | "Frustum" | "Complete" | "";

type physicsStateValue =
  "Position" | "Rotation" | "LinearVelocity" | "AngularVelocity" | "LinearSpeed" | "TouchesWalls" | "ImpulseAccumulator" | "Mass" | "Volume" | "IsSimulated" | "IsKinematic" | "SimulationFilter" | "Radius";

type GameplayTier =
  "Undefined" | "Tier1_FullGameplay" | "Tier2_StagedGameplay" | "Tier3_LimitedGameplay" | "Tier4_FPPCinematic" | "Tier5_Cinematic";

type Tier2WalkType =
  "Undefined" | "Slow" | "Normal" | "Fast";

type vehicleCameraType =
  "FPP" | "TPP";

type vehicleCameraPerspective =
  "FPP" | "TPPClose" | "TPPFar";

type EDodgeMovementInput =
  "Invalid" | "Forward" | "Right" | "Left" | "Back";

type gameStoryTier =
  "Gameplay" | "Cinematic";

type gamePlayerStateMachine =
  "Locomotion" | "UpperBody" | "Weapon" | "HighLevel" | "Projectile" | "Vision" | "TimeDilation" | "CoverAction" | "IconicItem" | "Combat" | "Takedown";

type gamePSMLocomotionStates =
  "Default" | "Crouch" | "Sprint" | "Kereznikov" | "Jump";

type gamePSMUpperBodyStates =
  "Default" | "SwitchItems" | "SwitchCyberware" | "Reload" | "Aim";

type gamePSMWeaponStates =
  "Default" | "NoAmmo" | "Ready" | "Safe";

type gamePSMTimeDilation =
  "Default" | "Sandevistan";

type gamePSMHighLevel =
  "Default" | "SceneTier1" | "SceneTier2" | "SceneTier3" | "SceneTier4" | "SceneTier5";

type gamePSMZones =
  "Default" | "Public" | "Safe" | "Restricted" | "Dangerous";

type gamePSMBodyCarryingStyle =
  "Any" | "Default" | "Friendly" | "Strong";

type gamePSMBodyCarrying =
  "Default" | "PickUp" | "Carry" | "Dispose" | "Drop";

type gamePSMMelee =
  "Default" | "Attack" | "Block";

type gamePSMUIState =
  "" | "WeaponSelect";

type gamePSMCrosshairStates =
  "Default" | "Safe" | "Scanning" | "GrenadeCharging" | "Aim" | "Reload" | "Sprint" | "HipFire" | "LeftHandCyberware" | "QuickHack";

type gamePSMReaction =
  "Default" | "Stagger";

type gamePSMVisionDebug =
  "Default" | "VisionToggle";

type gamePSMVision =
  "Default" | "Focus";

type gamePSMCombatGadget =
  "Default" | "EquipRequest" | "Equipped" | "Charging" | "Throwing" | "WaitForUnequip" | "QuickThrow";

type gamePSMVehicle =
  "Default" | "Driving" | "Combat" | "Passenger" | "Transition" | "Turret" | "DriverCombat" | "Scene";

type gamePSMWhip =
  "Default" | "Charging" | "Pulling";

type coverLeanDirection =
  "Top" | "Left" | "Right";

type gamePSMLeftHandCyberware =
  "Default" | "Safe" | "EquipRequest" | "Idle" | "Equipped" | "Charge" | "Loop" | "Catch" | "QuickAction" | "ChargeAction" | "CatchAction" | "StartUnequip" | "Unequip";

type gamePSMMeleeWeapon =
  "NotReady" | "Idle" | "Safe" | "PublicSafe" | "Parried" | "Hold" | "ChargedHold" | "Block" | "Targeting" | "Deflect" | "ComboAttack" | "FinalAttack" | "StrongAttack" | "SafeAttack" | "BlockAttack" | "SprintAttack" | "CrouchAttack" | "JumpAttack" | "ThrowAttack" | "DeflectAttack" | "EquipAttack" | "Default";

type gamePSMDetailedLocomotionStates =
  "NotInBaseLocomotion" | "Stand" | "AimWalk" | "Crouch" | "Sprint" | "Slide" | "SlideFall" | "Dodge" | "Climb" | "Vault" | "Ladder" | "LadderSprint" | "LadderSlide" | "LadderJump" | "Fall" | "AirThrusters" | "AirHover" | "SuperheroFall" | "Jump" | "DoubleJump" | "ChargeJump" | "HoverJump" | "DodgeAir" | "RegularLand" | "HardLand" | "VeryHardLand" | "DeathLand" | "SuperheroLand" | "SuperheroLandRecovery" | "Knockdown";

type gamePSMCombat =
  "Default" | "InCombat" | "OutOfCombat" | "Stealth";

type gamePSMStamina =
  "Rested" | "Exhausted";

type gamePSMVitals =
  "Alive" | "Dead" | "Resurrecting";

type gamePSMTakedown =
  "Default" | "EnteringGrapple" | "Grapple" | "Leap" | "Takedown";

type gamePSMRangedWeaponStates =
  "Default" | "Charging" | "Reload" | "QuickMelee" | "NoAmmo" | "Ready" | "Safe" | "Overheat" | "Shoot";

type gamePSMFallStates =
  "Default" | "RegularFall" | "SafeFall" | "FastFall" | "VeryFastFall" | "DeathFall";

type gamePSMLandingState =
  "Default" | "RegularLand" | "HardLand" | "VeryHardLand" | "DeathLand" | "SuperheroLand" | "SuperheroLandRecovery";

type braindanceVisionMode =
  "Default" | "Audio" | "Thermal";

type gamePSMWorkspotState =
  "Default" | "Workspot";

type gamePSMSwimming =
  "Default" | "Surface" | "Diving";

type gamePSMBodyCarryingLocomotion =
  "Default" | "Jump" | "Crouch" | "Sprint" | "Fall" | "Land" | "DropBody";

type gamePSMDetailedBodyDisposal =
  "Default" | "Dispose" | "Lethal" | "NonLethal";

type gamePSMNanoWireLaunchMode =
  "Default" | "Primary" | "Secondary";

type moveSecureFootingFailureReason =
  "Invalid" | "Filter" | "SimulationType" | "Ground";

type moveSecureFootingFailureType =
  "Invalid" | "Edge" | "Slope";

type vehicleExitDirection =
  "NoDirection" | "Left" | "Right" | "Front" | "Back" | "Top";

type EInputCustomKey =
  "ICK_Pad_DigitLeftRight" | "ICK_Pad_DigitUpDown" | "ICK_Count";

type gameinputActionType =
  "BUTTON_PRESSED" | "BUTTON_RELEASED" | "BUTTON_HOLD_COMPLETE" | "BUTTON_MULTITAP_BEGIN_LAST" | "BUTTON_MULTITAP_END_LAST" | "AXIS_CHANGE" | "RELATIVE_CHANGE" | "TOGGLE_PRESSED" | "TOGGLE_RELEASED" | "REPEAT";

type EInputKey =
  "IK_None" | "IK_LeftMouse" | "IK_RightMouse" | "IK_MiddleMouse" | "IK_Unknown04" | "IK_Unknown05" | "IK_Unknown06" | "IK_Unknown07" | "IK_Backspace" | "IK_Tab" | "IK_Unknown0A" | "IK_Unknown0B" | "IK_Unknown0C" | "IK_Enter" | "IK_Unknown0E" | "IK_Unknown0F" | "IK_Shift" | "IK_Ctrl" | "IK_Alt" | "IK_Pause" | "IK_CapsLock" | "IK_Unknown15" | "IK_Unknown16" | "IK_Unknown17" | "IK_Unknown18" | "IK_Unknown19" | "IK_Unknown1A" | "IK_Escape" | "IK_Unknown1C" | "IK_Unknown1D" | "IK_Unknown1E" | "IK_Unknown1F" | "IK_Space" | "IK_PageUp" | "IK_PageDown" | "IK_End" | "IK_Home" | "IK_Left" | "IK_Up" | "IK_Right" | "IK_Down" | "IK_Select" | "IK_Print" | "IK_Execute" | "IK_PrintScrn" | "IK_Insert" | "IK_Delete" | "IK_Help" | "IK_0" | "IK_1" | "IK_2" | "IK_3" | "IK_4" | "IK_5" | "IK_6" | "IK_7" | "IK_8" | "IK_9" | "IK_Unknown3A" | "IK_Unknown3B" | "IK_Unknown3C" | "IK_Unknown3D" | "IK_Unknown3E" | "IK_Unknown3F" | "IK_Unknown40" | "IK_A" | "IK_B" | "IK_C" | "IK_D" | "IK_E" | "IK_F" | "IK_G" | "IK_H" | "IK_I" | "IK_J" | "IK_K" | "IK_L" | "IK_M" | "IK_N" | "IK_O" | "IK_P" | "IK_Q" | "IK_R" | "IK_S" | "IK_T" | "IK_U" | "IK_V" | "IK_W" | "IK_X" | "IK_Y" | "IK_Z" | "IK_Unknown5B" | "IK_Unknown5C" | "IK_Unknown5D" | "IK_Unknown5E" | "IK_Unknown5F" | "IK_NumPad0" | "IK_NumPad1" | "IK_NumPad2" | "IK_NumPad3" | "IK_NumPad4" | "IK_NumPad5" | "IK_NumPad6" | "IK_NumPad7" | "IK_NumPad8" | "IK_NumPad9" | "IK_NumStar" | "IK_NumPlus" | "IK_Separator" | "IK_NumMinus" | "IK_NumPeriod" | "IK_NumSlash" | "IK_F1" | "IK_F2" | "IK_F3" | "IK_F4" | "IK_F5" | "IK_F6" | "IK_F7" | "IK_F8" | "IK_F9" | "IK_F10" | "IK_F11" | "IK_F12" | "IK_F13" | "IK_F14" | "IK_F15" | "IK_F16" | "IK_F17" | "IK_F18" | "IK_F19" | "IK_F20" | "IK_F21" | "IK_F22" | "IK_F23" | "IK_F24" | "IK_Pad_A_CROSS" | "IK_Pad_B_CIRCLE" | "IK_Pad_X_SQUARE" | "IK_Pad_Y_TRIANGLE" | "IK_Pad_Start" | "IK_Pad_Back_Select" | "IK_Pad_DigitUp" | "IK_Pad_DigitDown" | "IK_Pad_DigitLeft" | "IK_Pad_DigitRight" | "IK_Pad_LeftThumb" | "IK_Pad_RightThumb" | "IK_Pad_LeftShoulder" | "IK_Pad_RightShoulder" | "IK_Pad_LeftTrigger" | "IK_Pad_RightTrigger" | "IK_Pad_LeftAxisX" | "IK_Pad_LeftAxisY" | "IK_Pad_RightAxisX" | "IK_Pad_RightAxisY" | "IK_NumLock" | "IK_ScrollLock" | "IK_Unknown9E" | "IK_Unknown9F" | "IK_LShift" | "IK_RShift" | "IK_LControl" | "IK_RControl" | "IK_UnknownA4" | "IK_UnknownA5" | "IK_UnknownA6" | "IK_UnknownA7" | "IK_UnknownA8" | "IK_UnknownA9" | "IK_UnknownAA" | "IK_UnknownAB" | "IK_UnknownAC" | "IK_UnknownAD" | "IK_UnknownAE" | "IK_UnknownAF" | "IK_UnknownB0" | "IK_UnknownB1" | "IK_UnknownB2" | "IK_UnknownB3" | "IK_UnknownB4" | "IK_UnknownB5" | "IK_UnknownB6" | "IK_UnknownB7" | "IK_UnknownB8" | "IK_Unicode" | "IK_Semicolon" | "IK_Equals" | "IK_Comma" | "IK_Minus" | "IK_Period" | "IK_Slash" | "IK_Tilde" | "IK_Mouse4" | "IK_Mouse5" | "IK_Mouse6" | "IK_Mouse7" | "IK_Mouse8" | "IK_UnknownC6" | "IK_UnknownC7" | "IK_Joy1" | "IK_Joy2" | "IK_Joy3" | "IK_Joy4" | "IK_Joy5" | "IK_Joy6" | "IK_Joy7" | "IK_Joy8" | "IK_Joy9" | "IK_Joy10" | "IK_Joy11" | "IK_Joy12" | "IK_Joy13" | "IK_Joy14" | "IK_Joy15" | "IK_Joy16" | "IK_UnknownD8" | "IK_UnknownD9" | "IK_UnknownDA" | "IK_LeftBracket" | "IK_Backslash" | "IK_RightBracket" | "IK_SingleQuote" | "IK_UnknownDF" | "IK_UnknownE0" | "IK_UnknownE1" | "IK_UnknownE2" | "IK_MouseHover" | "IK_MouseX" | "IK_MouseY" | "IK_MouseZ" | "IK_MouseW" | "IK_JoyU" | "IK_JoyV" | "IK_JoySlider1" | "IK_JoySlider2" | "IK_MouseWheelUp" | "IK_MouseWheelDown" | "IK_UnknownEE" | "IK_UnknownEF" | "IK_JoyX" | "IK_JoyY" | "IK_JoyZ" | "IK_JoyR" | "IK_UnknownF4" | "IK_UnknownF5" | "IK_Attn" | "IK_ClearSel" | "IK_ExSel" | "IK_ErEof" | "IK_Play" | "IK_Zoom" | "IK_NoName" | "IK_UnknownFD" | "IK_UnknownFE" | "IK_PS4_OPTIONS" | "IK_PS4_TOUCH_PRESS" | "IK_Last" | "IK_Count" | "IK_Pad_First" | "IK_Pad_Last";

type ELogType =
  "DEFAULT" | "WARNING" | "ERROR";

type EComparisonType =
  "Greater" | "GreaterOrEqual" | "Equal" | "NotEqual" | "Less" | "LessOrEqual";

type Ref_1_3_3_Colors =
  "Red" | "Green" | "Blue";

type Ref_1_3_3_BigEnum =
  "BigValue";

type Ref_1_3_3_CustomSize_1 =
  "Test" | "Test1" | "Test2";

type Ref_1_3_3_CustomSize_2 =
  "Test" | "Test1" | "Test2";

type Ref_2_3_3_Enum32Bit =
  "Value";

type Ref_2_3_3_Enum64Bit =
  "BigValue";

type audioEventActionType =
  "Play" | "SetParameter" | "StopSound" | "SetSwitch" | "StopTagged" | "Tag" | "Untag";

type audioAudioEventFlags =
  "NoEventFlags" | "SloMoOnly" | "Music" | "Metadata" | "Unique";

type gameaudioeventsSurfaceDirection =
  "Normal" | "WallLeft" | "WallRight";

type vehicleAudioEventAction =
  "OnPlayerDriving" | "OnPlayerPassenger" | "OnPlayerEnterCombat" | "OnPlayerExitCombat" | "OnPlayerExitVehicle";

type gameEntitySpawnerEventType =
  "Spawn" | "Despawn" | "Death";

type AICoverExposureMethod =
  "Standing_Step_Left" | "Standing_Step_Right" | "Standing_Lean_Left" | "Standing_Lean_Right" | "Crouching_Step_Left" | "Crouching_Step_Right" | "Crouching_Lean_Left" | "Crouching_Lean_Right" | "Lean_Over" | "Stand_Up" | "Standing_Blind_Left" | "Standing_Blind_Right" | "Crouching_Blind_Left" | "Crouching_Blind_Right" | "Crouching_Blind_Top" | "Count";

type gameCoverHeight =
  "Invalid" | "Low" | "High";

type AIUninterruptibleActionType =
  "" | "Default" | "EnteringCover" | "LeavingCover" | "Count";

type ECLSForcedState =
  "DEFAULT" | "ForcedON" | "ForcedOFF";

type gamecheatsystemFlag =
  "God_Immortal" | "God_Invulnerable" | "Resurrect" | "IgnoreTimeDilation" | "BypassMagazine" | "InfiniteAmmo";

type gameDebugViewETextAlignment =
  "Left" | "Right" | "Center";

type DropPointPackageStatus =
  "NOT_ACTIVE" | "ACTIVE" | "COLLECTED";

type EFastTravelSystemInstruction =
  "Forward" | "Previous";

type entAttachmentTarget =
  "Transform" | "TargetPosition";

type gameGrenadeThrowStartType =
  "Invalid" | "LeftSide" | "RightSide" | "Top" | "Count";

type grsHeistStatus =
  "Waiting" | "Starting" | "Lobby" | "InGame" | "Ending" | "Victory" | "Failure";

type gameSaveLockReason =
  "Nothing" | "Combat" | "Scene" | "Quest" | "Script" | "Boundary" | "MainMenu" | "LoadingScreen" | "PlayerStateMachine" | "PlayerState" | "Tier" | "NotEnoughSlots" | "NotEnoughSpace" | "PlayerOnMovingPlatform";

type EGameSessionDataType =
  "NONE" | "CameraDeadBody" | "CameraTagLimit";

type GOGRewardsSystemStatus =
  "Uninitialized" | "GeneratingCPID" | "CheckingRegistrationStatus" | "RegistrationPending" | "Registered" | "Error";

type GOGRewardsSystemErrors =
  "" | "RequestFailed" | "TemporaryFailure" | "NoInternetConnection";

type HUDActorType =
  "UNINITIALIZED" | "GAME_OBJECT" | "VEHICLE" | "DEVICE" | "BODY_DISPOSAL_DEVICE" | "PUPPET" | "ITEM";

type HUDActorStatus =
  "UNINITIALIZED" | "REGISTERED" | "ACTIVE";

type ActorVisibilityStatus =
  "OUTSIDE_CAMERA" | "IN_CAMERA" | "VISIBLE" | "LOOKEDAT";

type CraftingCommands =
  "CraftingFinished" | "DisassemblingFinished" | "UpgradingFinished" | "Failed";

type HighlightContext =
  "DEFAULT" | "OUTLINE" | "FILL" | "FULL";

type gameEEquipmentManagerState =
  "InfiniteAmmo";

type gamemappinsMappinTargetType =
  "World" | "Minimap" | "Map";

type ActiveMode =
  "UNINITIALIZED" | "CLEAR" | "SEMI" | "COMBAT" | "FOCUS";

type InstanceState =
  "DISABLED" | "HIDDEN" | "RUNNING" | "MALFUNCTIONING" | "ON";

type ModuleState =
  "DISABLED" | "HIDDEN" | "ASLEEP" | "MALFUNCTIONING" | "ON";

type VisualState =
  "OFF" | "RUNNING" | "MALFUNCTIONING" | "ON";

type SignalType =
  "DEFAULT" | "REGISTRATION" | "UNREGISTRATION";

type HUDState =
  "UNINITIALIZED" | "DEACTIVATED" | "ACTIVATED";

type HUDContext =
  "DEFAULT" | "FOCUS" | "LOOKEDAT";

type gameMountingSlotRole =
  "Invalid" | "Driver" | "Passenger";

type gameMountingObjectType =
  "Invalid" | "Object" | "Vehicle" | "Puppet" | "Platform";

type gameMountingRelationshipType =
  "Invalid" | "Parent" | "Child";

type gameMessageSender =
  "NPC" | "Player";

type gameContactType =
  "Caller" | "Texter";

type gameJournalQuestType =
  "MainQuest" | "SideQuest" | "MinorQuest" | "StreetStory" | "Contract" | "VehicleQuest";

type questJournalSizeEventType =
  "Maximize" | "Minimize";

type questJournalAlignmentEventType =
  "Left" | "Center" | "Right";

type gameJournalBriefingContentType =
  "MapLocation" | "VideoContent" | "Paperdoll";

type worldNavigationRequestStatus =
  "OK" | "InvalidStartingPosition" | "InvalidEndPosition" | "OtherError";

type NavGenAgentSize =
  "Human";

type AIReactionCountOutcome =
  "Failed" | "Succeded" | "NotFound";

type scnFastForwardMode =
  "Default" | "GameplayReview";

type scnPlayDirection =
  "Forward" | "Backward";

type scnPlaySpeed =
  "Pause" | "Slow" | "Normal" | "Fast" | "VeryFast";

type gameStatPoolModificationTypes =
  "Regeneration" | "Decay";

type gameDifficulty =
  "Easy" | "Hard" | "VeryHard" | "Story";

type ELinkType =
  "NETWORK" | "GRID" | "FREE" | "INVALID";

type ENetworkRelation =
  "MASTER" | "SLAVE" | "NONE";

type EPingType =
  "DIRECT" | "SPACE";

type EKnockdownStates =
  "Invalid" | "Start" | "FallLoop" | "Land" | "Recovery" | "AirRecovery";

type gametargetingSystemETargetFilterStatus =
  "Stop" | "Continue";

type gameTelemetryDamageSituation =
  "Irrelevant" | "EnemyToPlayer" | "EnemyToCompanion" | "PlayerToEnemy" | "CompanionToEnemy";

type telemetryInitalChoiceStage =
  "" | "LifePath" | "Gender" | "Customizations" | "Attributes" | "Finished";

type UIGameContext =
  "Default" | "QuickHack" | "Scanning" | "DeviceZoom" | "BraindanceEditor" | "BraindancePlayback" | "VehicleMounted" | "ModalPopup" | "RadialWheel" | "VehicleRace";

type EntityNotificationType =
  "DoNotNotifyEntity" | "SendThisEventToEntity" | "SendPSChangedEventToEntity";

type vehicleGarageState =
  "NoVehiclesAvailable" | "SummonAvailable" | "SummonDisabled";

type vehicleSummonState =
  "Idle" | "EnRoute" | "AlreadySummoned" | "PathfindingFailed" | "Arrived";

type worldRainIntensity =
  "NoRain" | "LightRain" | "HeavyRain";

type WorkspotSlidingBehaviour =
  "PlayAtResourcePosition" | "DontPlayAtResourcePosition" | "SlideActorAndRotateDevice";

type workWorkspotDebugMode =
  "VisualLogToogle" | "VisualLogOn" | "VisualLogOff" | "VisualStateToogle" | "VisualStateOn" | "VisualStateOff" | "RecorderOn" | "RecorderOff" | "PlaybackOn" | "PlaybackOff" | "Invalid" | "FunctionalTests";

type EPreventionHeatStage =
  "Heat_0" | "Heat_1" | "Heat_2" | "Heat_3" | "Heat_4" | "Size";

type EPreventionPsychoLogicType =
  "Start" | "PoliceKilled" | "PoliceSpawn" | "PoliceDespawn" | "DeescalationZeroExecutionLocked" | "DeescalationZeroExecute";

type EPreventionDebugProcessReason =
  "Redirected_IsPsycho" | "Process_NewDamage" | "Process_EntityCalls" | "Abort_EntitySame" | "Abort_DamageZero" | "Abort_SystemLockedBySceneTier";

type EPreventionSystemInstruction =
  "Safe" | "Active" | "Off" | "On";

type WorkspotWeaponConditionEnum =
  "" | "Any" | "Ranged" | "OneHandedRanged" | "Melee" | "MeleeCyberware" | "LMG";

type WorkspotConditionOperators =
  "OR" | "AND";

type inkanimPropertyType =
  "Size" | "Color" | "Margin" | "Padding" | "Transparency" | "Rotation";

type inkanimInterpolationMode =
  "EasyIn" | "EasyOut" | "EasyInOut";

type inkanimInterpolationType =
  "Linear" | "Quadratic" | "Qubic" | "Quartic" | "Quintic" | "Sinusoidal" | "Exponential" | "Elastic" | "Circular" | "Back";

type inkanimEventType =
  "OnLoaded" | "OnStart" | "OnFinish" | "OnPause" | "OnResume" | "OnStartLoop" | "OnEndLoop";

type inkanimLoopType =
  "" | "Cycle" | "PingPong";

type inkanimInterpolationDirection =
  "To" | "From" | "FromTo";

type inkEButtonState =
  "Normal" | "Press" | "Hover" | "Disabled";

type inkDiscreteNavigationDirection =
  "Up" | "Right" | "Down" | "Left";

type EInkAnimationPlaybackOption =
  "PLAY" | "STOP" | "PAUSE" | "RESUME" | "CONTINUE" | "GO_TO_START" | "GO_TO_END";

type GenericNotificationType =
  "Generic" | "JournalNotification" | "LevelUpNotification" | "VendorNotification" | "ZoneNotification" | "ProgressionNotification" | "CraftingNotification" | "InventoryNotification";

type inkEScrollDirection =
  "Vertical" | "Horizontal";

type inkESliderDirection =
  "Horizontal" | "Vertical";

type inkEToggleState =
  "Normal" | "Press" | "Hover" | "Disabled" | "Toggled" | "ToggledPress" | "ToggledHover";

type inkSelectorChangeDirection =
  "" | "Prior" | "Next";

type inkTextureType =
  "StaticTexture" | "DynamicTexture" | "InvalidTexture";

type inkInputHintHoldIndicationType =
  "Press" | "Hold" | "FromInputConfig";

type textLetterCase =
  "OriginalCase" | "UpperCase" | "LowerCase";

type textVerticalAlignment =
  "Top" | "Center" | "Bottom";

type textHorizontalAlignment =
  "Left" | "Center" | "Right";

type inkEOrientation =
  "Horizontal" | "Vertical";

type inkEChildOrder =
  "Forward" | "Backward";

type inkEHorizontalAlign =
  "Fill" | "Left" | "Center" | "Right";

type inkEVerticalAlign =
  "Fill" | "Top" | "Center" | "Bottom";

type inkEAnchor =
  "TopLeft" | "TopCenter" | "TopRight" | "CenterLeft" | "Centered" | "CenterRight" | "BottomLeft" | "BottomCenter" | "BottomRight" | "TopFillHorizontaly" | "CenterFillHorizontaly" | "BottomFillHorizontaly" | "LeftFillVerticaly" | "CenterFillVerticaly" | "RightFillVerticaly" | "Fill";

type inkESizeRule =
  "Fixed" | "Stretch";

type gameuiEBraindanceLayer =
  "Visual" | "Audio" | "Thermal";

type gameuiEClueDescriptorMode =
  "Invalid" | "Add" | "Finish";

type inkIconResult =
  "Success" | "UnknownIconTweak" | "AtlasResourceNotFound" | "PartNotFoundInAtlas";

type inkMenuMode =
  "Unknown" | "PauseMenu" | "HubMenu" | "CustomMenu";

type inkMenuState =
  "Enabled" | "Disabled";

type EMeasurementSystem =
  "Metric" | "Imperial";

type EMeasurementUnit =
  "Millimeter" | "Centimeter" | "Meter" | "Kilometer" | "Inch" | "Feet" | "Yard" | "Mile" | "NauticalMile" | "SquareMillimeter" | "SquareCentimeter" | "SquareMeter" | "Hectare" | "SquareKilometer" | "SquareInch" | "SquareFeet" | "SquareYard" | "Acre" | "SquareMile" | "CubicCentimer" | "CubicDecimeter" | "CubicMeter" | "Liter" | "Hectoliter" | "CubicInch" | "CubicFeet" | "FluidOunce" | "Pint" | "Gallon" | "Gram" | "Kilogram" | "Tonne" | "Ounce" | "Pound" | "Stone" | "Celcius" | "Fahrenheit" | "MAX";

type inkEffectType =
  "ScanlineWipe" | "LinearWipe" | "RadialWipe" | "LightSweep" | "BoxBlur" | "Mask" | "Glitch" | "PointCloud" | "ColorFill" | "InnerGlow" | "ColorCorrection" | "Multisampling";

type PopupPosition =
  "Undefined" | "UpperRight" | "UpperLeft" | "LowerLeft" | "LowerRight" | "Center";

type VideoType =
  "Tutorial_720x405" | "Tutorial_1024x576" | "Tutorial_1280x720" | "Tutorial_1360x768" | "Unknown";

type inkBrushDrawType =
  "NoDraw" | "Solid" | "Wire";

type inkBrushTileType =
  "NoTile" | "Horizontal" | "Vertical" | "Both";

type inkBrushMirrorType =
  "NoMirror" | "Horizontal" | "Vertical" | "Both";

type ConfigVarType =
  "Bool" | "Int" | "Float" | "Name" | "IntList" | "FloatList" | "StringList" | "NameList";

type ConfigVarUpdatePolicy =
  "Disabled" | "Immediately" | "ConfirmationRequired" | "RestartRequired" | "LoadLastCheckpointRequired";

type UserSettingsLoadStatus =
  "NotLoaded" | "InternalError" | "FileIsMissing" | "FileIsCorrupted" | "Loaded" | "ImportedFromOldVersion";

type ConfigChangeReason =
  "Invalid" | "Accepted" | "Rejected" | "NeedsConfirmation" | "NeedsRestart";

type ConfigNotificationType =
  "RestartRequiredConfirmed" | "ChangesApplied" | "ChangesRejected" | "ChangesLoadLastCheckpointApplied" | "Saved" | "ErrorSaving" | "RequiresRestart" | "Loaded" | "LoadCanceled" | "Refresh";

type inkSelectionRule =
  "Single" | "Parent" | "Children" | "TypeBased" | "NameBased";

type worldgeometryDescriptionQueryFlags =
  "DistanceVector" | "CollisionNormal" | "ObstacleDepth" | "UpExtent" | "DownExtent" | "TopExtent" | "TopPoint" | "BehindPoint";

type worldgeometryDescriptionQueryStatus =
  "OK" | "NoGeometry" | "UpVectorSameAsDirection";

type worldgeometryProbingStatus =
  "" | "StillInObstacle" | "GeometryDiverged" | "Failure";

type AISignalFlags =
  "Undefined" | "OverridesSelf" | "InterruptsSamePriorityTask" | "InterruptsForcedBehavior" | "AcceptsAdditives";

type ECentaurShieldState =
  "Inactive" | "Activating" | "Active" | "Destroyed" | "Hacked";

type scnDialogLineType =
  "" | "Regular" | "Holocall" | "SceneComment" | "OverHead" | "Radio" | "GlobalTV" | "Invisible" | "OverHeadAlwaysVisible" | "OwnerlessRegular" | "AlwaysCinematicNoSpeaker" | "GlobalTVAlwaysVisible";

type scnDialogLineLanguage =
  "Origin" | "Creole" | "Japanese" | "Arabic" | "Russian" | "Chinese" | "Brasilian";

type ItemSortMode =
  "Default" | "NewItems" | "NameAsc" | "NameDesc" | "QualityAsc" | "QualityDesc" | "WeightAsc" | "WeightDesc" | "PriceAsc" | "PriceDesc" | "ItemType" | "DpsAsc" | "DpsDesc";

type GenericMessageNotificationType =
  "OK" | "Confirm" | "Cancel" | "ConfirmCancel" | "YesNo";

type GenericMessageNotificationResult =
  "Cancel" | "Confirm" | "OK" | "Yes" | "No";

type WeaponPartType =
  "Scope" | "Magazine" | "Silencer";

type gameuiHitType =
  "Miss" | "Glance" | "Hit" | "CriticalHit" | "CriticalHit_x2";

type gameuiDamageDigitsMode =
  "Off" | "Individual" | "Accumulated" | "Both";

type gameuiDamageDigitsStickingMode =
  "" | "Individual" | "Accumulated" | "Both";

type gameuiDamageIndicatorMode =
  "Off" | "DamageOnly" | "On";

type gameKillType =
  "Normal" | "Defeat";

type ECartOperationResult =
  "Success" | "NoItems" | "AllItems" | "WontSell" | "WontBuy" | "QuestItem" | "NotInCart";

type EVendorMode =
  "BuyItems" | "SellItems" | "Train" | "Ripperdoc" | "RipperdocSummary";

type ItemFilterType =
  "All" | "Weapons" | "Clothes" | "Consumables" | "Cyberware" | "Attachments" | "Quest" | "Buyback" | "LightWeapons" | "HeavyWeapons" | "MeleeWeapons" | "Hacks";

type ItemFilterCategory =
  "RangedWeapons" | "MeleeWeapons" | "Clothes" | "Consumables" | "Grenades" | "SoftwareMods" | "Attachments" | "Programs" | "Cyberware" | "Junk" | "BaseCount" | "Quest" | "Buyback" | "AllItems" | "AllCount" | "Invalid";

type CrafringMaterialItemHighlight =
  "" | "Hover" | "Add" | "Remove";

type CodexDataSource =
  "Undefined" | "Codex" | "Onscreen";

type DerivedFilterResult =
  "False" | "True" | "Pass";

type DropdownItemDirection =
  "" | "Down" | "Up";

type DropdownDisplayContext =
  "NotSet" | "Default" | "ItemChooserWeapon";

type CodexCategoryType =
  "All" | "Database" | "Characters" | "Locations" | "Tutorials" | "Count" | "Invalid";

type CodexImageType =
  "Default" | "Character";

type ECooldownGameControllerMode =
  "COOLDOWNS" | "BUFFS_AND_DEBUFFS";

type ECooldownIndicatorState =
  "Pooled" | "Intro" | "Filling" | "Outro";

type ECraftingIconPositioning =
  "generic" | "weaponBig" | "weaponSmall";

type CraftingMode =
  "craft" | "upgrade";

type CraftingInfoType =
  "QuickHack" | "Item";

type HubMenuItems =
  "" | "Crafting" | "Character" | "Inventory" | "Map" | "Journal" | "Phone" | "Database" | "Stats" | "Backpack" | "HubMenuItems" | "Codex" | "Shards" | "Tarot" | "Gear" | "Cyberware" | "Count";

type HubMenuCraftingItems =
  "Crafting" | "Upgrade";

type HubMenuInventoryItems =
  "Gear" | "Cyberware" | "Backpack";

type HubMenuCharacterItems =
  "Skills" | "Stats";

type HubMenuDatabaseItems =
  "Codex" | "Tarot" | "Shards";

type HubVendorMenuItems =
  "Trade" | "Crafting" | "Cyberware";

type PauseMenuAction =
  "OpenSubMenu" | "QuickSave" | "Save" | "ExitGame" | "ExitToMainMenu" | "QuickLoad";

type inkLoadingScreenType =
  "Unknown" | "SplashScreen" | "Initial" | "FastTravel";

type WorldMapTooltipType =
  "Default" | "Police" | "District";

type operationsMode =
  "PLAYER" | "FLATHEAD" | "TOOLBOX";

type gameuiAuthorisationNotificationType =
  "Unknown" | "GotKeycard" | "AccessGranted";

type CraftingNotificationType =
  "NoPerks" | "NotEnoughMaterial";

type gameuiEWorldMapCameraMode =
  "TopDown" | "Free" | "ZoomLevels" | "COUNT";

type EWorldMapView =
  "Map" | "FloorPlan" | "TimeSkip";

type gameuiEWorldMapDistrictView =
  "" | "Districts" | "SubDistricts";

type gameuiMappinGroupState =
  "Ungrouped" | "Grouped" | "GroupedCollection" | "GroupedHidden";

type EGenericNotificationPriority =
  "Default" | "Low" | "Medium" | "Height";

type UIInGameNotificationType =
  "ActionRestriction" | "CombatRestriction" | "CantSaveActionRestriction" | "CantSaveCombatRestriction" | "CantSaveQuestRestriction" | "CantSaveDeathRestriction" | "NotEnoughSlotsSaveResctriction" | "NotEnoughSpaceSaveResctriction";

type UIMenuNotificationType =
  "VendorNotEnoughMoney" | "VNotEnoughMoney" | "VendorRequirementsNotMet" | "InventoryActionBlocked" | "CraftingNoPerks" | "CraftingNotEnoughMaterial" | "UpgradingLevelToLow" | "NoPerksPoints" | "PerksLocked" | "MaxLevelPerks" | "NoAttributePoints" | "InCombat";

type CharacterScreenType =
  "Attributes" | "Perks";

type PerkMenuAttribute =
  "Body" | "Reflex" | "Technical_Ability" | "Johnny" | "Cool" | "Intelligence";

type MessengerContactType =
  "Contact" | "Group" | "Thread";

type MessageViewType =
  "Sent" | "Received";

type gameuiCharacterCustomizationPart =
  "Head" | "Body" | "Arms";

type AttributeButtonState =
  "Default" | "Hover";

type inkLifePath =
  "Corporate" | "StreetKid" | "Nomad" | "Invalid";

type inkSaveType =
  "ManualSave" | "QuickSave" | "AutoSave" | "PointOfNoReturn" | "EndGameSave";

type SettingsType =
  "Slider" | "Toggle" | "DropdownList";

type RipperdocModes =
  "Default" | "Item";

type CyberwareScreenType =
  "Ripperdoc" | "Inventory";

type CyberwareInfoType =
  "Default" | "Cyberdeck";

type VendorConfirmationPopupType =
  "Default" | "ExpensiveItem" | "EquippedItem";

type QuantityPickerActionType =
  "Buy" | "Sell" | "TransferToStorage" | "TransferToPlayer" | "Drop" | "Disassembly";

type EHudAvatarMode =
  "Connecting" | "Disconnecting" | "Holocall" | "Audiocall";

type EHudPhoneVisibility =
  "Invisible" | "Showing" | "Visible" | "Hiding";

type EHudPhoneFunction =
  "Inactive" | "DisplayingMessage" | "IncomingCall" | "Holocall" | "Audiocall";

type ScannerNetworkState =
  "NOT_CONNECTED" | "NOT_BREACHED" | "TIER1" | "TIER2" | "TIER3" | "BREACHED";

type ScannerObjectType =
  "INVALID" | "PUPPET" | "VEHICLE" | "DEVICE" | "GENERIC";

type ScannerDataType =
  "" | "Name" | "Level" | "Health" | "Rarity" | "WeaponBasic" | "WeaponDetailed" | "BountySystem" | "Vulnerabilities" | "Faction" | "Attitude" | "SquadInfo" | "Resistances" | "Abilities" | "Requirements" | "Description" | "DeviceStatus" | "NetworkStatus" | "NetworkLevel" | "DeviceConnections" | "QuestEntry" | "VehicleName" | "VehicleManufacturer" | "VehicleProductionYears" | "VehicleDriveLayout" | "VehicleHorsepower" | "VehicleMass" | "VehicleState" | "VehicleInfo" | "QuickHackDescription";

type EVisualizerActivityState =
  "Visible" | "Available" | "Active";

type EVisualizerType =
  "Device" | "Dialog" | "Loot" | "Invalid";

type EVisualizerDefinitionFlags =
  "" | "Fading" | "HeadlineSelection" | "CPO_Mode";

type EInventoryComboBoxMode =
  "FromInventory" | "FromEquipment" | "CustomizeFromEquipment" | "CustomizeFromInventory" | "CustomizeCyberware";

type InventoryItemAttachmentType =
  "Generic" | "Dedicated";

type EInventoryItemShape =
  "SingleSlot" | "DoubleSlot";

type ItemIconGender =
  "Female" | "Male";

type LootItemType =
  "Default" | "Quest" | "Shard";

type ItemLabelType =
  "New" | "Quest" | "Money" | "Equipped" | "Owned" | "Buyback";

type ItemDisplayType =
  "Item" | "Weapon";

type ItemDisplayContext =
  "" | "Vendor" | "Tooltip" | "VendorPlayer" | "GearPanel" | "Backpack" | "DPAD_RADIAL" | "Attachment" | "Ripperdoc";

type ItemAdditionalInfoType =
  "NONE" | "PRICE" | "TYPE";

type RipperdocFilter =
  "All" | "Vendor" | "Player";

type InventoryModes =
  "Default" | "Item";

type ItemViewModes =
  "Item" | "Mod";

type PaperdollPositionAnimation =
  "Center" | "Left" | "Right" | "LeftFullBody";

type InventoryPaperdollZoomArea =
  "Default" | "Weapon" | "Legs" | "Feet" | "Cyberware" | "QuickSlot" | "Consumable" | "Outfit" | "Head" | "Face" | "InnerChest" | "OuterChest";

type gamemappinsVerticalPositioning =
  "Above" | "Same" | "Below";

type gameEnemyStealthAwarenessState =
  "Relaxed" | "Aware" | "Alerted" | "Combat";

type gameReprimandMappinAnimationState =
  "" | "Normal" | "Fast";

type CustomButtonType =
  "UnlockAllVehicles" | "ShowAllPoiMappins" | "DiscoverAllPoiMappins";

type HackingMinigameState =
  "Unknown" | "InProgress" | "Succeeded" | "Failed";

type MinigameActionType =
  "Device" | "NPC" | "Both" | "AccessPoint";

type gameTutorialBracketType =
  "WidgetArea" | "CustomArea";

type gameJournalEntryState =
  "Undefined" | "Inactive" | "Active" | "Succeeded" | "Failed";

type gameJournalListenerType =
  "State" | "Visited" | "Tracked" | "Untracked" | "Counter";

type JournalChangeType =
  "Undefined" | "Direct" | "Indirect" | "IndirectDependent";

type JournalNotifyOption =
  "Undefined" | "DoNotNotify" | "Notify";

type UIObjectiveEntryType =
  "Invalid" | "Quest" | "Objective" | "SubObjective";

type SlotType =
  "DEFAULT" | "HOLSTER" | "WEAPON" | "COMBAT_CYBERWARE" | "TOOLTIP" | "MISC";

type ERadialMode =
  "ApplyOnlyActiveSlot" | "ApplyActiveSlotAndConsumables";

type EStatProviderDataSource =
  "gameItemData" | "InventoryItemData" | "InnerItemData" | "Invalid";

type DamageEffectDisplayType =
  "Flat" | "TargetHealth" | "Invalid";

type ItemComparisonState =
  "Default" | "NoChange" | "Better" | "Worse";

type EInventoryDataStatDisplayType =
  "CompareBar" | "DisplayBar" | "Value";

type InventoryTooltipDisplayContext =
  "Default" | "Attachment" | "Crafting" | "Upgrading" | "HUD";

type GrenadeDamageType =
  "Normal" | "DoT" | "";

type ETooltipsStyle =
  "Menus" | "HUD";

type gameuiETooltipPlacement =
  "LeftCenter" | "RightCenter" | "LeftTop" | "RightTop";

type gamesmartGunTargetState =
  "Visible" | "Targetable" | "Locking" | "Locked" | "Unlocking";

type gamedataChargeStep =
  "Idle" | "Charging" | "Charged" | "Overcharging" | "Discharging";

type CustomWeaponWheelSlot =
  "FreeHands" | "Fists";

type EUIStealthIconType =
  "Invalid" | "HostileHuman" | "Camera" | "Turret" | "Drone";

type ClueState =
  "active" | "complete";

type EUIActionState =
  "Invalid" | "DEFAULT" | "STARTED" | "COMPLETED" | "ABORTED";

type ProximityProgressBarOrientation =
  "Undefined" | "InRange" | "OutOfRange";

type ProximityProgressBarState =
  "" | "Active" | "Inactive" | "Complete";

type EActionInactivityReson =
  "Ready" | "Locked" | "Recompilation" | "OutOfMemory" | "Invalid";

type EAIBackgroundCombatStep =
  "ChangeCover" | "ChangeTarget";

type ECoverSpecialAction =
  "" | "Left" | "Right";

type EAIRole =
  "" | "Patrol" | "Follower";

type hitFlag =
  "" | "IgnoreImmortalityModes" | "FriendlyFire" | "DisableSounds" | "DisableVFX" | "CannotReturnDamage" | "CanParry" | "CanCounter" | "CanDodge" | "WasBlocked" | "WasDeflected" | "WasDodged" | "Kill" | "DontShowDamageFloater" | "DealNoDamage" | "CannotModifyDamage" | "Headshot" | "CriticalHit" | "FinisherTriggered" | "DamageNullified" | "Nonlethal" | "WasKillingBlow" | "ProcessDefeated" | "Defeated" | "SilentKillModifier" | "DeterministicDamage" | "WeakspotHit" | "StealthHit" | "DoNotTriggerFinisher" | "DealtDamage" | "ImmortalTarget" | "CanDamageSelf" | "SuccessfulAttack" | "WeaponFullyCharged" | "DisableNPCHitReaction" | "VehicleDamage" | "VehicleImpact" | "RagdollImpact" | "IgnoreDifficulty" | "QuickHack" | "IgnoreVehicles" | "DamageOverTime" | "PROJECT_SPECIFIC_FLAGS" | "UsedKerenzikov" | "FragmentationSplinter" | "DetonateGrenades" | "WeakExplosion" | "GrenadeQuickhackExplosion" | "FriendlyFireIgnored" | "ForceNoCrit" | "ReduceDamage";

type damageSystemLogFlags =
  "GENERAL" | "ASSERT" | "WEAKSPOTS";

type EVarDBMode =
  "Add" | "Set" | "Invalid";

type EComponentOperation =
  "Enable" | "Disable";

type EMathOperationType =
  "Add" | "Set";

type HighlightMode =
  "Row" | "Column";

type OutcomeMessage =
  "Success" | "Failure";

type ETrap =
  "Invalid" | "GridRegen" | "AppendStart" | "Hidden" | "Virus";

type ProgramEffect =
  "GrantAccess" | "BlockAccess" | "UnlockQuestFact";

type ProgramType =
  "BasicAccess" | "ExtraPlayerProgram" | "ExtraServerProgram" | "EnemyProgram" | "EnemyLockNetwork";

type ExtraEffect =
  "AccuracyVirus" | "PeernoidVirus" | "";

type gameDamageCallbackType =
  "HitTriggered" | "HitReceived" | "PipelineProcessed" | "COUNT" | "INVALID";

type gameDamagePipelineStage =
  "PreProcess" | "Process" | "PostProcess" | "COUNT" | "INVALID";

type DMGPipelineType =
  "" | "Damage" | "ProjectedDamage" | "All";

type ButtonStatus =
  "DEFAULT" | "PROCESSING" | "DISABLED";

type HoverStatus =
  "DEFAULT" | "HOVER";

type EComputerMenuType =
  "MAIN" | "SYSTEM" | "FILES" | "MAILS" | "NEWSFEED" | "INTERNET" | "INVALID";

type EDocumentType =
  "FILE" | "MAIL" | "Invalid";

type EWidgetPlacementType =
  "DOCKED" | "FLOATING";

type EScreenRatio =
  "Screen_21x9" | "Screen_9x21" | "Screen_9x16" | "Screen_3x4" | "Screen_4x3" | "Screen_1x1";

type ELayoutType =
  "Generic" | "Militech" | "Arasaka" | "Zetatech";

type EWidgetState =
  "DEFAULT" | "ON" | "OFF" | "INACTIVE" | "ALLOWED" | "LOCKED" | "SEALED";

type EForcedElevatorArrowsState =
  "Disabled" | "ArrowsUp" | "ArrowsDown";

type EIndustrialArmAnimations =
  "Idle" | "RepairLoop" | "RepairLoop2" | "RepairLoopBroken" | "RepairLoopBelow" | "RepairLoopBelowBroken" | "CarDestroy" | "Repair_below_loop_high" | "Repair_below_loop_low" | "Repair_below_loop_medium" | "Repair_loop_high";

type ERentStatus =
  "PAID" | "OVERDUE" | "EVICTED";

type EPaymentSchedule =
  "WEEKLY" | "MONTHLY";

type EPlaystyleType =
  "NONE" | "TECHIE" | "NETRUNNER" | "TECHIE_AND_NETRUNNER";

type ESurveillanceCameraStatus =
  "THREAT" | "STREAMING" | "WORKING";

type ESurveillanceCameraState =
  "Off" | "Active";

type worldTrafficLightColor =
  "GREEN" | "RED" | "YELLOW" | "INVALID";

type EOperationClassType =
  "Local" | "BaseState" | "DoorState" | "BaseAction" | "CustomActions" | "TriggerVolume" | "Hit" | "InteractionArea" | "Senses" | "FocusMode";

type ETriggerOperationType =
  "ENTER" | "EXIT";

type EWorkspotOperationType =
  "ENTER" | "LEAVE";

type EEffectOperationType =
  "START" | "STOP" | "BRAKE_LOOP";

type ETransformAnimationOperationType =
  "PLAY" | "PAUSE" | "RESET" | "SKIP";

type EItemOperationType =
  "ADD" | "REMOVE";

type EBinkOperationType =
  "PLAY" | "STOP" | "PAUSE" | "RESUME";

type gamedeviceRequestType =
  "" | "External" | "Remote" | "Direct" | "Internal";

type EGlitchState =
  "NONE" | "DEFAULT" | "SUBLIMINAL_MESSAGE";

type EDeviceStatus =
  "DISABLED" | "UNPOWERED" | "OFF" | "ON" | "INVALID";

type EDeviceDurabilityType =
  "INVULNERABLE" | "INDESTRUCTIBLE" | "DESTRUCTIBLE";

type EDeviceDurabilityState =
  "NOMINAL" | "MALFUNCTIONING" | "BROKEN" | "DESTROYED";

type EGameplayChallengeLevel =
  "NONE" | "EASY" | "MEDIUM" | "HARD" | "IMPOSSIBLE";

type EActivationState =
  "NONE" | "ACTIVATED" | "DEACTIVATED";

type EPersonalLinkSlotSide =
  "FRONT" | "RIGHT" | "BOTTOM";

type EPersonalLinkConnectionStatus =
  "NOT_CONNECTED" | "CONNECTING" | "CONNECTED";

type ETargetManagerAnimGraphState =
  "MODELOOKAT" | "IDLE" | "JAMMED";

type ESensorDeviceWakeState =
  "NONE" | "CLOSED" | "WAKEN" | "OPEN";

type ESensorDeviceStates =
  "NONE" | "IDLE" | "IDLEFORCED" | "TARGETLOCK" | "TARGETLOSE" | "TARGETRECEIVED" | "REPRIMAND" | "JAMMER";

type EDebuggerColor =
  "RED" | "YELLOW";

type EPlaystyle =
  "NETRUNNER" | "SOLO" | "TECHIE";

type EVirtualSystem =
  "" | "SurveillanceSystem" | "DoorSystem" | "MediaSystem" | "SecuritySystem";

type EActionContext =
  "" | "Direct" | "QHack" | "Master" | "Spiderbot";

type EDoorType =
  "NONE" | "INTERACTIVE" | "AUTOMATIC" | "PHYSICAL" | "REMOTELY_CONTROLLED";

type EDoorStatus =
  "SEALED" | "LOCKED" | "CLOSED" | "OPENED";

type EDoorOpeningType =
  "SLIDING_HORIZONTALLY" | "SLIDING_VERTICALLY" | "HINGED" | "GATE";

type EAnimationType =
  "REGULAR" | "TRANSFORM" | "TRANSFORM_TWO_SIDES" | "NONE";

type EDoorTriggerSide =
  "OUTSIDE" | "ONE" | "TWO";

type EDoorSkillcheckSide =
  "BOTH" | "ONE" | "TWO";

type EExplosiveAdditionalGameEffectType =
  "none" | "EMP";

type ExplosiveTriggerDeviceLaserState =
  "GREEN" | "RED" | "DISABLED";

type EFastTravelTriggerType =
  "Manual" | "Auto";

type SignType =
  "INFORMATION" | "ATTENTION" | "WARNING";

type SignShape =
  "RECTANGLE" | "ARROWLEFT" | "ARROWRIGHT" | "SQUARE";

type ERadioStationList =
  "AGGRO_INDUSTRIAL" | "ELECTRO_INDUSTRIAL" | "HIP_HOP" | "AGGRO_TECHNO" | "DOWNTEMPO" | "ATTITUDE_ROCK" | "POP" | "LATINO" | "METAL" | "NONE";

type ETVChannel =
  "CH1" | "CH2" | "CH3" | "CH4" | "CH5" | "INVALID";

type EWindowBlindersStates =
  "NonInteractive" | "Open" | "Closed" | "Tilted";

type IntercomStatus =
  "DEFAULT" | "CALLING" | "TALKING" | "CALL_MISSED" | "CALL_ENDED";

type EViabilityDecision =
  "INCONCLUSIVE" | "VIABLE" | "NONVIABLE";

type EActionsSequencerMode =
  "REGULAR_INTERVALS" | "ACCELERATING_INTERVALS_TODO" | "DECELERATING_INTEVALS_TODO" | "RANDOM_INTERVALS_TODO" | "AT_THE_SAME_TIME_TODO";

type EToggleActivationTypeComputer =
  "" | "Raise";

type EComputerAnimationState =
  "" | "Opened" | "Closed";

type ELightSwitchRandomizerType =
  "RANDOM" | "RANDOM_PROGRESSIVE" | "NONE";

type ESmartHousePreset =
  "MorningPreset" | "EveningPreset" | "NightPreset";

type ESoundStatusEffects =
  "NONE" | "DEAFENED" | "SUPRESS_NOISE";

type ESwitchAction =
  "ToggleOn" | "ToggleActivate";

type ESystems =
  "NONE" | "SecuritySystem" | "AccessPoints" | "MaintenanceSystem" | "PersonnelSystem" | "SurveillanceSystem";

type ESecurityAreaType =
  "DISABLED" | "SAFE" | "RESTRICTED" | "DANGEROUS";

type EFilterType =
  "ALLOW_NONE" | "ALLOW_COMBAT_ONLY" | "ALLOW_ALL";

type ETransitionMode =
  "GENTLE" | "FORCED";

type EQuestFilterType =
  "DONT_CHANGE" | "ALLOW_NONE" | "ALLOW_COMBAT_ONLY" | "ALLOW_ALL";

type AttitudeChange =
  "DONT_CHANGE" | "FRIENDLY" | "NEUTRAL" | "HOSTILE";

type SecurityEventScopeSettings =
  "GLOBAL" | "AREA_WHERE_PLAYER_IS" | "SPECIFIC_AGENTS_ONLY";

type EPermissionSource =
  "GAMEPLAY" | "PLAYER" | "QUEST";

type ERevealPlayerType =
  "DONT_REVEAL" | "REVEAL_ONCE";

type EAllowedTo =
  "UNDEFINED" | "TRESSPASSING" | "ILLEGAL_ACTIONS" | "COMBAT";

type ESecurityAccessLevel =
  "ESL_NONE" | "ESL_LOCAL" | "ESL_0" | "ESL_1" | "ESL_2" | "ESL_3" | "ESL_4";

type BlacklistReason =
  "UNINITIALIZED" | "TRESPASSING" | "REPRIMAND" | "COMBAT";

type ESecuritySystemState =
  "UNINITIALIZED" | "SAFE" | "ALERTED" | "COMBAT";

type EReprimandInstructions =
  "INITIATE_FIRST" | "INITIATE_SUCCESSIVE" | "TAKEOVER" | "CONCLUDE_SUCCESSFUL" | "CONCLUDE_FAILED" | "RELEASE_TO_ANOTHER_ENTITY";

type EBreachOrigin =
  "LOCAL" | "EXTERNAL" | "GLOBAL";

type ESecurityNotificationType =
  "REPRIMAND_SUCCESSFUL" | "DEESCALATE" | "DEFAULT" | "ILLEGAL_ACTION" | "REPRIMAND_ESCALATE" | "DEVICE_DESTROYED" | "ALARM" | "SECURITY_GATE" | "COMBAT" | "QUEST";

type EShouldChangeAttitude =
  "PERSISTENTLY" | "TEMPORARLY";

type ESecurityTurretStatus =
  "THREAT" | "SHOOTING" | "WORKING" | "SCANING" | "DAMAGED";

type ESecurityTurretType =
  "SIMPLE";

type ESecurityGateStatus =
  "READY" | "SCANNING" | "THREAT_DETECTED";

type ESecurityGateScannerIssueType =
  "NoIssues" | "ScannerEmpty" | "Overcrowded" | "TargetAlreadyScanned";

type ESecurityGateEntranceType =
  "OnlySideA" | "OnlySideB" | "AnySide";

type ESecurityGateResponseType =
  "AUDIOVISUAL_ONLY" | "SEC_SYS_REPRIMAND" | "SEC_SYS_COMBAT";

type ELightSequenceStage =
  "NONE" | "INPROGRESS" | "COMPLETE";

type PaymentStatus =
  "DEFAULT" | "IN_PROGRESS" | "NO_MONEY";

type ETrapEffects =
  "Explosion" | "Poisoned" | "Bleeding" | "Burning" | "Blind" | "SmokeScreen" | "Stun" | "Unconcious";

type EBOOL =
  "UNINITIALZED" | "FALSE" | "TRUE";

type ECompareOp =
  "CO_Lesser" | "CO_LesserEq" | "CO_Greater" | "CO_GreaterEq" | "CO_Equal" | "CO_NotEqual";

type EWeaponNamesList =
  "EWNL_PowerStreetRifle" | "EWNL_TechStreetShotgun" | "EWNL_PowerCorpHandgun" | "EWNL_SmartCorpRifle" | "EWNL_PowerCorpHandgunJackie";

type EAITargetType =
  "AITT_Undefined" | "AITT_Argument" | "AITT_Owner" | "AITT_CombatTarget" | "AITT_FacingTarget" | "AITT_Attacker" | "AITT_Companion" | "AITT_Cover";

type EAIThreatCalculationType =
  "Regular" | "Boss" | "Madness";

type EBarkList =
  "vo_enemy_reaction_surprised_combat_start" | "vo_enemy_reaction_generic_cursing" | "vo_enemy_reaction_jammed_weapon" | "vo_enemy_reaction_impact_hit" | "vo_enemy_reaction_stagger_hit" | "vo_enemy_reaction_crippled_arm" | "vo_enemy_reaction_crippled_leg" | "vo_enemy_reaction_death" | "vo_enemy_group_call_to_combat" | "vo_enemy_group_call_for_help" | "vo_enemy_group_order_go_to_cover" | "vo_enemy_group_order_flank_target" | "vo_enemy_group_order_suppressing_fire" | "vo_enemy_answer_to_order_suppressing_fire" | "vo_enemy_group_notification_reloading" | "vo_enemy_group_notification_squad_member_died" | "vo_enemy_group_notification_grenade_nearby" | "vo_enemy_group_notification_target_using_sandevistan" | "vo_enemy_group_notification_target_using_kerenzikov" | "vo_enemy_answer_to_notification_target_using_sandevistan" | "vo_enemy_answer_to_notification_target_using_kerenzikov" | "vo_enemy_group_generic_combat_question" | "vo_enemy_answer_to_generic_combat_question" | "vo_enemy_group_boost_combat_morale";

type EAIActionState =
  "Inactive" | "Startup" | "Loop" | "Recover";

type AIactionParamsPackageTypes =
  "Default" | "Reaction" | "StatusEffect" | "Undefined";

type EAIActionTarget =
  "" | "CombatTarget" | "FriendlyTarget" | "CurrentCover" | "StimTarget" | "StimSource" | "CustomWorldPosition";

type EAICombatPreset =
  "" | "IsReckless" | "IsAggressive" | "IsBalanced" | "IsDefensive" | "IsCautious";

type EAttackType =
  "Invalid" | "Ranged" | "Melee";

type EHitReactionMode =
  "Regular" | "ForceImpact" | "ForceStagger" | "ForceKnockdown" | "Fragile" | "Weak" | "Tough" | "Bulky" | "Unstoppable" | "UnstoppableTwitchMin" | "UnstoppableTwitchNone" | "StaggerMin" | "BulkyStaggerMin" | "Invalid";

type EMeleeAttacks =
  "Invalid" | "LightAtk_Left" | "LightAtk_Right" | "ComboAtk_3hits_Part1" | "ComboAtk_3hits_Part2" | "ComboAtk_3hits_Part3" | "ChargeAttack";

type DeviceStimType =
  "Distract" | "VisualDistract" | "Explosion" | "VentilationAreaEffect" | "";

type ETauntType =
  "Normal" | "Melee" | "Ranged";

type EWoundedBodyPart =
  "Invalid" | "WoundedLeftArm" | "WoundedRightArm" | "WoundedLeftLeg" | "WoundedRightLeg" | "DismemberedLeftArm" | "DismemberedRightArm" | "DismemberedLeftLeg" | "DismemberedRightLeg" | "DismemberedBothLegs";

type EStatusEffects =
  "Invalid" | "WeaponJammed" | "Blind" | "SmokeScreen" | "Unconscious" | "Burning" | "Stun" | "HeartAttack" | "SuicideWithWeapon" | "SuicideWithGrenade" | "Wounded" | "MonowireGrapple" | "Exhausted" | "Defeated" | "Sleep" | "Berserker" | "Pain" | "Sandevistan" | "NetwatcherHackStage1" | "NetwatcherHackStage2" | "NetwatcherHackStage3" | "Count";

type EstatusEffectsState =
  "Deactivated" | "Activating" | "Activated";

type EAISquadAction =
  "Invalid" | "Shoot" | "Charge" | "TakeCover" | "Search" | "Reprimand" | "Investigate" | "Melee" | "Taunt" | "Defend" | "Takedown" | "Peek" | "GrenadeThrow" | "Dash" | "Sync" | "BattleCry" | "CallOff" | "BackUp" | "RangedStrafe" | "Quickhack" | "GroupReaction" | "Crouch";

type EAISquadTactic =
  "Invalid" | "Flanking" | "Assault" | "Snipe" | "Regroup" | "Retreat" | "Defend" | "Suppress" | "Medivac" | "Panic";

type EAISquadChoiceAlgorithm =
  "Invalid" | "TargetDistance" | "SectorDistance" | "SquadmateDistance" | "CoopDistance" | "LineOfSight" | "StimDistance" | "StimDistancePerSource" | "AvoidLastPuppetIfPossible" | "Officer" | "Group" | "CallForBackUp" | "CallOffAction" | "ShareNewThreat";

type EAISquadRing =
  "Invalid" | "Melee" | "Close" | "Medium" | "Far" | "Extreme";

type EAISquadVerb =
  "Invalid" | "JoinSquad" | "LeaveSquad" | "OpenSquadAction" | "RevokeSquadAction" | "RevokeOrder" | "CommitToSquadAction" | "ReportDoneOnSquadAction" | "ReportFailureOnSquadAction" | "EvaluateTicketActivation" | "EvaluateTicketDeactivation" | "AcknowledgeOrder";

type EAITicketStatus =
  "Invalid" | "Evaluate" | "OrderFail" | "OrderDone" | "OrderRevoked";

type EAIPlayerSquadOrder =
  "Takedown" | "Invalid";

type EReactionValue =
  "Fear" | "Aggressive";

type EAICoverAction =
  "StepOut" | "LeanOut" | "StepUp" | "LeanOver" | "Undefined";

type EAICoverActionDirection =
  "Front" | "FrontRight" | "Right" | "BackRight" | "Back" | "BackLeft" | "Left" | "FrontLeft";

type EAIGateSignalFlags =
  "AIGSF_Undefined" | "AIGSF_OverridesSelf" | "AIGSF_InterruptsSamePriorityTask" | "AIGSF_InterruptsForcedBehavior" | "AIGSF_AcceptsAdditives";

type ENPCPhaseState =
  "Phase1" | "Phase2" | "Phase3" | "Phase4" | "Phase5" | "Invalid";

type EAIGateEventFlags =
  "AIGEF_Undefined" | "AIGEF_OverridesSelf" | "AIGEF_InterruptsSamePriorityTask" | "AIGEF_InterruptsForcedBehavior" | "AIGEF_AcceptsAdditives";

type EAIShootingPatternRange =
  "Close" | "Medium" | "Long" | "Undefined";

type EStatusEffectBehaviorType =
  "Invalid" | "Basic" | "Stoppable" | "Unstoppable";

type EComparisonOperator =
  "Equal" | "NotEqual" | "More" | "MoreOrEqual" | "Less" | "LessOrEqual";

type EArgumentType =
  "Object" | "CoverID" | "Vector4";

type EInitReactionAnim =
  "Shock" | "Fear" | "Curious" | "Call";

type ENeutralizeType =
  "" | "Killed" | "Defeated" | "Unconscious";

type EMathOperator =
  "" | "Add" | "Subtract" | "Multiply" | "Divide";

type EMagazineAmmoState =
  "" | "FirstBullet" | "LastBullet";

type EBroadcasteingType =
  "Active" | "SingleActive" | "Direct" | "Remove" | "Single";

type EDrillMachineRewireState =
  "InsideInteractionRange" | "OutsideInteractionRange" | "InteractionStarted" | "InteractionFinished" | "RewireStarted" | "RewireFinished";

type PackageStatus =
  "UNINITIALIZED" | "ON_HOLD" | "FOR_IMMEDIATE_TRIGGER" | "TRIGGERED";

type RequestType =
  "INSTANTLY_TRIGGER" | "MANUALLY_TRIGGERED";

type EBeamStyle =
  "" | "Sweeping" | "HeadSlicer";

type EGrenadeType =
  "Frag" | "Flash" | "Piercing" | "EMP" | "Biohazard" | "Incendiary" | "Recon" | "Cutting" | "Sonic";

type gameEContinuousMode =
  "" | "Start" | "Stop";

type gameweaponReloadStatus =
  "Standard" | "Interrupted";

type QuickSlotActionType =
  "Undefined" | "SelectItem" | "HideWeapon" | "OpenPhone" | "SummonCar" | "SummonBike" | "ToggleRadio" | "SelectRadioStation" | "TurnOffRadio" | "CycleTrackedQuest" | "SummonVehicle" | "SetActiveVehicle" | "QuickHack" | "ToggleSummonMode" | "EquipFists";

type QuickSlotItemType =
  "Undefined" | "Vehicle" | "Gadget" | "Consumable" | "Cyberware" | "Weapon" | "Interaction";

type EDPadSlot =
  "Left" | "Up" | "Right" | "Down" | "LeftDouble" | "UpDouble" | "RightDouble" | "DownDouble" | "WeaponsWheel" | "VehicleWheel" | "GadgetWheel" | "InteractionWheel" | "Phone" | "CallVehicle" | "CycleObjective" | "VehicleInsideWheel" | "ConsumableWheel";

type gamePlayerCoverDirection =
  "" | "Up" | "Left" | "Right";

type gamePlayerCoverMode =
  "" | "Auto" | "Manual";

type worldgeometryaverageNormalDetectionHelperQueryStatus =
  "Finished" | "NoGeometry";

type gamePlayerObstacleSystemQueryType =
  "Climb_Vault" | "Covers" | "AverageNormal";

type PlayerVisionModeControllerRefreshPolicyEnum =
  "Persistent" | "Eventful";

type ECarryState =
  "" | "Pickup" | "Carry" | "Drop" | "Release" | "Dispose" | "Jump";

type EPowerDifferential =
  "IMPOSSIBLE" | "HARD" | "NORMAL" | "EASY" | "TRASH";

type LaserTargettingState =
  "Start" | "Update" | "End";

type gameCityAreaType =
  "Undefined" | "PublicZone" | "SafeZone" | "RestrictedZone" | "DangerousZone";

type EEquipmentState =
  "Unequipped" | "Equipped" | "Equipping" | "Unequipping" | "FirstEquip";

type EEquipmentSide =
  "Left" | "Right";

type EDeathType =
  "Ground" | "Air" | "Swimming";

type EPlayerMovementDirection =
  "Forward" | "Right" | "Back" | "Left";

type EAimAssistLevel =
  "Off" | "Light" | "Standard";

type ETakedownActionType =
  "GrappleFailed" | "Grapple" | "Takedown" | "TakedownNonLethal" | "TakedownNetrunner" | "TakedownMassiveTarget" | "AerialTakedown" | "LeapToTarget" | "Struggle" | "BreakFree" | "TargetDead" | "KillTarget" | "SpareTarget" | "ForceShove" | "BossTakedown" | "DisposalTakedown" | "DisposalTakedownNonLethal" | "";

type ETakedownBossName =
  "Smasher" | "Oda" | "Royce" | "Sasquatch" | "";

type EMeleeAttackType =
  "Combo" | "Strong" | "Final" | "Block" | "Safe" | "Slide" | "Crouch" | "Jump" | "Sprint" | "Fall" | "Throw" | "Dodge" | "Equip";

type EMoveAssistLevel =
  "Off" | "SpecialAttacks" | "AllAttacks";

type meleeMoveDirection =
  "Forward" | "Right" | "Back" | "Left";

type meleeQueuedAttack =
  "Block" | "Combo" | "Crouch" | "Final" | "Jump" | "Safe" | "Sprint" | "Strong" | "Throw";

type aimTypeEnum =
  "AimIn" | "AimOut" | "Invalid";

type EActionType =
  "QuickAction" | "ChargeAction" | "";

type ThrowType =
  "Quick" | "Charge";

type ELauncherActionType =
  "QuickAction" | "ChargeAction" | "";

type ELaunchMode =
  "Primary" | "Secondary" | "";

type EMissileRainPhase =
  "Init" | "Phase1" | "Phase2";

type LandingType =
  "Off" | "Regular" | "Hard" | "VeryHard" | "Superhero" | "Death";

type EquipmentPriority =
  "Primary" | "Secondary" | "All";

type ETelemetryData =
  "MeleeAttacksMade" | "RangedAttacksMade" | "BluelinesSelected" | "MeleeKills" | "RangedKills" | "QuickHacksMade" | "LegendaryItemsCrafted";

type ENPCTelemetryData =
  "HitByLightAttack" | "HitByStrongAttack" | "HitByFinalComboAttack" | "HitByBlockAttack" | "BlockedAttack" | "DeflectedAttack" | "WasGuardBreaked";

type EDownedType =
  "Killed" | "Finished" | "Defeated" | "Unconscious";

type inputContextType =
  "Action" | "RPG";

type ESlotState =
  "Taken" | "Empty" | "Available";

type questPhoneStatus =
  "Available" | "NotAvailable" | "Busy" | "Minimized";

type questPhoneCallPhase =
  "Undefined" | "IncomingCall" | "StartCall" | "EndCall";

type questPhoneCallMode =
  "Undefined" | "Audio" | "Video";

type questPhoneTalkingState =
  "Ended" | "Initializing" | "Talking";

type EHotkey =
  "INVALID" | "DPAD_UP" | "DPAD_DOWN" | "DPAD_RIGHT" | "RB";

type EHotkeyRequestType =
  "Assign" | "Cycle" | "Restore";

type EHandEquipSlot =
  "" | "Left" | "Right";

type telemetryLevelGainReason =
  "Ignore" | "Gameplay" | "IsDebug";

type EGravityType =
  "LowGravity" | "Regular";

type ESmartBulletPhase =
  "Init" | "Parabolic" | "Follow" | "Linear" | "Miss";

type FunctionalTestsResultCode =
  "Valid" | "MalformedEntityDescr" | "EntityNotFound" | "ComponentNotFound" | "InvalidEntityType" | "InvalidComponentType" | "InvalidNodeRef" | "SlotNotFound" | "InventoryError" | "InvalidInputAction" | "EmptyContainer";

type FTNpcMountingState =
  "Mounted" | "Unmounted";

type ECameraDirectionFunctionalTestsUtil =
  "Up" | "Down" | "Left" | "Right";

type Ft_TakedownType =
  "Lethal" | "Nonlethal" | "Breach";

type Ft_Result =
  "Success" | "GettingPlayerGameObjectFailed" | "GetPSMBlackboardFailed" | "GetStatsPoolFailed" | "NoEnemyFoundInSpawner" | "NoEnemyFoundInPool" | "NoEntitiesFoundInSpawner" | "NoEnemyTargeted" | "FailedToSelectGrapple" | "FailedToSelectTakedown" | "TakedownWithoutGrappleAttempt" | "NoInteractionAvailable" | "RequestedInteractionNotAvailable" | "OutOfRange" | "TargetNotInEnemyPool" | "DescriptorFormatError";

type Ft_TakedownStage =
  "Default" | "Grappling" | "Grappled" | "Takedown" | "Finished";

type FTScriptState =
  "ERROR";

type FTEntityRequirementsFlag =
  "" | "LookAtComponent" | "ScanningComponent" | "DestructionComponent" | "GameObject" | "ScriptedPuppet" | "AttitudeAgent" | "Device" | "VehicleObject" | "GamePuppet";

type gameItemEquipContexts =
  "LastWeaponEquipped" | "LastUsedMeleeWeapon" | "LastUsedRangedWeapon" | "Gadget" | "MeleeCyberware" | "LauncherCyberware" | "Fists";

type gameEquipAnimationType =
  "Default" | "Instant" | "FirstEquip";

type gameItemUnequipContexts =
  "AllWeapons" | "HeadClothing" | "FaceClothing" | "OuterChestClothing" | "InnerChestClothing" | "LegClothing" | "FootClothing" | "AllClothing" | "RightHandWeapon" | "LeftHandWeapon" | "AllQuestItems" | "AllItems";

type ELastUsed =
  "Weapon" | "Melee" | "Ranged" | "Heavy";

type EEquipmentSetType =
  "Offensive" | "Defensive" | "Cyberware";

type EquipmentManipulationAction =
  "Undefined" | "RequestActiveMeleeware" | "RequestActiveWeapon" | "RequestSlotActiveWeapon" | "RequestLastUsedWeapon" | "RequestFirstMeleeWeapon" | "RequestLastUsedMeleeWeapon" | "RequestLastUsedOrFirstAvailableWeapon" | "RequestLastUsedOrFirstAvailableRangedWeapon" | "RequestLastUsedOrFirstAvailableMeleeWeapon" | "RequestLastUsedOrFirstAvailableOneHandedRangedWeapon" | "RequestHeavyWeapon" | "CycleWeaponWheelItem" | "CycleNextWeaponWheelItem" | "CyclePreviousWeaponWheelItem" | "RequestConsumable" | "RequestGadget" | "RequestFists" | "RequestLeftHandCyberware" | "UnequipWeapon" | "UnequipConsumable" | "UnequipGadget" | "UnequipLeftHandCyberware" | "UnequipAll" | "ReequipWeapon" | "RequestWeaponSlot1" | "RequestWeaponSlot2" | "RequestWeaponSlot3" | "RequestWeaponSlot4";

declare interface IScriptable {

  GetClassName(): CName
  IsA(className: CName): Bool
  IsExactlyA(className: CName): Bool
  /** @noSelf **/
  DetectScriptableCycles(): void
}

declare interface Entity extends IScriptable {

  GetEntity(): EntityGameInterface
  QueueEvent(evt: Event): void
  GetEntityID(): EntityID
  QueueEventForNodeID(nodeID: GlobalNodeRef, evt: Event): Bool
  QueueEventForEntityID(entityID: EntityID, evt: Event): Bool
  CanServiceEvent(evtName: CName): Bool
  IsReplicated(): Bool
  GetControllingPeerID(): number
  MatchVisualTag(visualTag: CName): Bool
  MatchVisualTags(visualTags: CName[]): Bool
  IsControlledByAnyPeer(): Bool
  IsControlledByLocalPeer(): Bool
  IsControlledByAnotherClient(): Bool
  IsAttached(): Bool
  FindComponentByName(componentName: CName): IComponent
  PrefetchAppearanceChange(newAppearanceName: CName): void
  ScheduleAppearanceChange(newAppearanceName: CName): void
  GetCurrentAppearanceName(): CName
  OnInspectorDebugDraw(box: InfoBox): void
  GetWorldPosition(): Vector4
  GetWorldOrientation(): Quaternion
  GetWorldYaw(): number
  GetWorldForward(): Vector4
  GetWorldRight(): Vector4
  GetWorldUp(): Vector4
  GetWorldTransform(): WorldTransform
}

declare interface WorldPosition {

  /** @noSelf **/
  SetX(worldPosition: WorldPosition, value: number): void
  /** @noSelf **/
  SetY(worldPosition: WorldPosition, value: number): void
  /** @noSelf **/
  SetZ(worldPosition: WorldPosition, value: number): void
  /** @noSelf **/
  SetXYZ(worldPosition: WorldPosition, x: number, y: number, z: number): void
  /** @noSelf **/
  SetVector4(worldPosition: WorldPosition, value: Vector4): void
  /** @noSelf **/
  GetX(worldPosition: WorldPosition): number
  /** @noSelf **/
  GetY(worldPosition: WorldPosition): number
  /** @noSelf **/
  GetZ(worldPosition: WorldPosition): number
  /** @noSelf **/
  ToVector4(worldPosition: WorldPosition): Vector4
}

declare interface WorldTransform {

  /** @noSelf **/
  SetIdentity(xform: WorldTransform): void
  /** @noSelf **/
  SetWorldPosition(xform: WorldTransform, value: WorldPosition): void
  /** @noSelf **/
  SetPosition(xform: WorldTransform, value: Vector4): void
  /** @noSelf **/
  SetOrientation(xform: WorldTransform, value: Quaternion): void
  /** @noSelf **/
  SetOrientationEuler(xform: WorldTransform, value: EulerAngles): void
  /** @noSelf **/
  SetOrientationFromDir(xform: WorldTransform, value: Vector4): void
  /** @noSelf **/
  TransformXForm(xform: WorldTransform, value: Transform): WorldTransform
  /** @noSelf **/
  TransformWorldXForm(xform: WorldTransform, value: WorldTransform): WorldTransform
  /** @noSelf **/
  TransformPoint(xform: WorldTransform, value: Vector4): WorldPosition
  /** @noSelf **/
  TransformWorldPosition(xform: WorldTransform, value: WorldPosition): WorldPosition
  /** @noSelf **/
  TransformInvWorldXForm(xform: WorldTransform, value: WorldTransform): Transform
  /** @noSelf **/
  TransformInvXForm(xform: WorldTransform, value: Transform): Transform
  /** @noSelf **/
  TransformInvPoint(xform: WorldTransform, value: Vector4): Vector4
  /** @noSelf **/
  TransformInvWorldPosition(xform: WorldTransform, value: WorldPosition): Vector4
  /** @noSelf **/
  GetWorldPosition(xform: WorldTransform): WorldPosition
  /** @noSelf **/
  GetOrientation(xform: WorldTransform): Quaternion
  /** @noSelf **/
  GetInverse(xform: WorldTransform): WorldTransform
  /** @noSelf **/
  GetForward(xform: WorldTransform): Vector4
  /** @noSelf **/
  GetRight(xform: WorldTransform): Vector4
  /** @noSelf **/
  GetUp(xform: WorldTransform): Vector4
  /** @noSelf **/
  ToMatrix(xform: WorldTransform): Matrix
  /** @noSelf **/
  _ToXForm(xform: WorldTransform): Transform
}

declare interface GameEntity extends Entity {

}

declare interface AnimFeature extends IScriptable {

}

declare interface GameObject extends GameEntity {

  GetName(): CName
  GetGame(): GameInstance
  RegisterInputListener(listener: IScriptable, name?: CName): void
  RegisterInputListenerWithOwner(listener: IScriptable, name?: CName): void
  UnregisterInputListener(listener: IScriptable, name?: CName): void
  GetCurveValue(x: number, y: number, curveName: CName, isDebug: Bool): void
  IsSelectedForDebugging(): Bool
  GetTracedActionName(): string
  IsPlayerControlled(): Bool
  GetOwner(): GameObject
  GetCurrentContext(): CName
  PlayerLastUsedPad(): Bool
  PlayerLastUsedKBM(): Bool
  TriggerEvent(eventName: CName, data?: IScriptable, flags?: number): Bool
  GetPS(): GameObjectPS
  GetBasePS(): GameObjectPS
  HasTag(tag: CName): Bool
  EnableTransformUpdates(enable: Bool): void
  OnDeviceLinkRequest(evt: DeviceLinkRequest): Bool
  GetDeviceLink(): DeviceLinkComponentPS
  OnTransformUpdated(): void
  GetPersistentID(): PersistentID
  GetPSOwnerData(): PSOwnerData
  GetPSClassName(): CName
  SendEventToDefaultPS(evt: Event): void
  IsConnectedToSecuritySystem(): Bool
  GetSecuritySystem(): SecuritySystemControllerPS
  IsTargetTresspassingMyZone(target: GameObject): Bool
  /** @noSelf **/
  AddListener(obj: GameObject, listener: GameObjectListener): void
  /** @noSelf **/
  RemoveListener(obj: GameObject, listener: GameObjectListener): void
  OnAddOrRemoveListenerForGameObject(evt: AddOrRemoveListenerForGOEvent): Bool
  /** @noSelf **/
  AddStatusEffectTriggerListener(target: GameObject, listener: StatusEffectTriggerListener): void
  /** @noSelf **/
  RemoveStatusEffectTriggerListener(target: GameObject, listener: StatusEffectTriggerListener): void
  OnAddStatusEffectTriggerListener(evt: AddStatusEffectListenerEvent): Bool
  OnRemoveStatusEffectTriggerListener(evt: RemoveStatusEffectListenerEvent): Bool
  GetDisplayName(): string
  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnDetach(): Bool
  ShouldForceRegisterInHUDManager(): Bool
  ShouldRegisterToHUD(): Bool
  RegisterToHUDManager(shouldRegister: Bool): void
  RequestHUDRefresh(updateData?: HUDActorUpdateData): void
  RequestHUDRefresh(targetID: EntityID, updateData?: HUDActorUpdateData): void
  CanScanThroughWalls(): Bool
  IsScannerDataDirty(): Bool
  SetScannerDirty(dirty: Bool): void
  CanRevealRemoteActionsWheel(): Bool
  IsInitialized(): Bool
  IsLogicReady(): Bool
  ShouldReactToTarget(targetID: EntityID): Bool
  GetSensesComponent(): SenseComponent
  GetAttitudeAgent(): AttitudeAgent
  GetScannerAttitudeTweak(): TweakDBID
  /** @noSelf **/
  GetAttitudeTowards(first: GameObject, second: GameObject): EAIAttitude
  GetAttitudeTowards(target: GameObject): EAIAttitude
  /** @noSelf **/
  GetAttitudeBetween(first: GameObject, second: GameObject): EAIAttitude
  /** @noSelf **/
  IsFriendlyTowardsPlayer(obj: GameObject): Bool
  IsHostile(): Bool
  /** @noSelf **/
  ChangeAttitudeToHostile(owner: GameObject, target: GameObject): void
  /** @noSelf **/
  ChangeAttitudeToNeutral(owner: GameObject, target: GameObject): void
  GetTargetTrackerComponent(): TargetTrackerComponent
  /** @noSelf **/
  GetTDBID(object: GameObject): TweakDBID
  /** @noSelf **/
  GetActiveWeapon(object: GameObject): WeaponObject
  /** @noSelf **/
  StartCooldown(self: GameObject, cooldownName: CName, cooldownDuration: number): number
  /** @noSelf **/
  RemoveCooldown(self: GameObject, cooldownName: CName): void
  /** @noSelf **/
  IsCooldownActive(self: GameObject, cooldownName: CName, id?: number): Bool
  /** @noSelf **/
  GetTargetAngleInFloat(target: GameObject, owner: GameObject): number
  /** @noSelf **/
  GetTargetAngleInInt(target: GameObject, owner: GameObject): number
  /** @noSelf **/
  GetAttackAngleInInt(hitEvent: gameHitEvent, hitSource?: number): number
  /** @noSelf **/
  GetLocalAngleForDirectionInInt(direction: Vector4, owner: GameObject): number
  /** @noSelf **/
  GetAttackAngleInFloat(hitEvent: gameHitEvent): number
  /** @noSelf **/
  ApplyModifierGroup(self: GameObject, modifierGroupID: number): void
  /** @noSelf **/
  RemoveModifierGroup(self: GameObject, modifierGroupID: number): void
  /** @noSelf **/
  PlayVoiceOver(self: GameObject, voName: CName, debugInitialContext: CName, delay?: number, answeringEntityID?: EntityID, canPlayInVehicle?: Bool): DelayID
  /** @noSelf **/
  PlaySound(self: GameObject, eventName: CName, emitterName?: CName): void
  /** @noSelf **/
  PlaySoundWithParams(self: GameObject, eventName: CName, emitterName?: CName, flag?: audioAudioEventFlags, type?: audioEventActionType): void
  /** @noSelf **/
  StopSound(self: GameObject, eventName: CName, emitterName?: CName): void
  /** @noSelf **/
  AudioSwitch(self: GameObject, switchName: CName, switchValue: CName, emitterName?: CName): void
  /** @noSelf **/
  AudioParameter(self: GameObject, parameterName: CName, parameterValue: number, emitterName?: CName): void
  /** @noSelf **/
  PlaySoundEvent(self: GameObject, eventName: CName): void
  /** @noSelf **/
  PlaySoundEventWithParams(self: GameObject, eventName: CName, flag?: audioAudioEventFlags, type?: audioEventActionType): void
  /** @noSelf **/
  StopSoundEvent(self: GameObject, eventName: CName): void
  /** @noSelf **/
  PlayMetadataEvent(self: GameObject, eventName: CName): void
  /** @noSelf **/
  SetAudioSwitch(self: GameObject, switchName: CName, switchValue: CName): void
  /** @noSelf **/
  SetAudioParameter(self: GameObject, paramName: CName, paramValue: number): void
  QueueReplicatedEvent(evt: Event): void
  OnEventReplicated(evt: Event): void
  /** @noSelf **/
  ActivateEffectAction(obj: GameObject, actionType: gamedataFxActionType, fxName: CName, fxBlackboard?: worldEffectBlackboard): void
  /** @noSelf **/
  StartEffectEvent(self: GameObject, effectName: CName, shouldPersist?: Bool, blackboard?: worldEffectBlackboard): void
  /** @noSelf **/
  StartReplicatedEffectEvent(self: GameObject, effectName: CName, shouldPersist?: Bool, breakAllOnDestroy?: Bool): void
  /** @noSelf **/
  BreakEffectLoopEvent(self: GameObject, effectName: CName): void
  /** @noSelf **/
  BreakReplicatedEffectLoopEvent(self: GameObject, effectName: CName): void
  /** @noSelf **/
  StopEffectEvent(self: GameObject, effectName: CName): void
  /** @noSelf **/
  StopReplicatedEffectEvent(self: GameObject, effectName: CName): void
  /** @noSelf **/
  StopEffectEvent(self: GameObject, id: EntityID, effectName: CName): void
  /** @noSelf **/
  SetMeshAppearanceEvent(self: GameObject, appearance: CName): void
  PassUpdate(dt: number): void
  Update(dt: number): void
  OnStatusEffectApplied(evt: ApplyStatusEffectEvent): Bool
  HandleICEBreakerUpdate(evt: ApplyStatusEffectEvent): void
  ApplyStatusEffectPackages(evt: ApplyStatusEffectEvent): void
  StartStatusEffectVFX(evt: ApplyStatusEffectEvent): void
  StartStatusEffectSFX(evt: ApplyStatusEffectEvent): void
  OnStatusEffectRemoved(evt: RemoveStatusEffect): Bool
  RemoveStatusEffectPackages(evt: RemoveStatusEffect): void
  StopStatusEffectVFX(evt: RemoveStatusEffect): void
  StopStatusEffectSFX(evt: RemoveStatusEffect): void
  OnHit(evt: gameHitEvent): Bool
  OnVehicleHit(evt: gameVehicleHitEvent): Bool
  OnHitProjection(evt: gameProjectedHitEvent): Bool
  OnAttitudeChanged(evt: AttitudeChangedEvent): Bool
  ProcessDamagePipeline(evt: gameHitEvent): void
  ReactToHitProcess(hitEvent: gameHitEvent): void
  OnHitBlockedOrDeflected(hitEvent: gameHitEvent): void
  OnHitAnimation(hitEvent: gameHitEvent): void
  OnHitUI(hitEvent: gameHitEvent): void
  DisplayHitUI(dmgInfos: DamageInfo[]): void
  DisplayKillUI(killInfo: KillInfo): void
  OnHitSounds(hitEvent: gameHitEvent): void
  OnHitVFX(hitEvent: gameHitEvent): void
  OnDamageReceived(evt: gameDamageReceivedEvent): Bool
  Record1DamageInHistory(source: GameObject): void
  OnRecord1DamageInHistoryEvent(evt: Record1DamageInHistoryEvent): Bool
  FindAndRewardKiller(killType: gameKillType, instigator?: GameObject): void
  RewardKiller(killer: GameObject, killType: gameKillType, isAnyDamageNonlethal: Bool): void
  ForceDefeatReward(value: Bool): void
  DisableKillReward(value: Bool): void
  OnChangeRewardSettingsEvent(evt: ChangeRewardSettingsEvent): Bool
  OnWillDieSoonEventEvent(evt: WillDieSoonEvent): Bool
  CheckIfPreventionShouldReact(damageDealers: GameObject[]): void
  IsVehicle(): this is VehicleObject
  IsPuppet(): this is ScriptedPuppet
  IsPlayer(): this is PlayerPuppet
  IsReplacer(): Bool
  IsVRReplacer(): Bool
  IsJohnnyReplacer(): Bool
  IsNPC(): this is NPCPuppet
  IsContainer(): this is ContainerObjectSingleItem
  IsShardContainer(): this is ShardCaseContainer
  IsDevice(): this is Device
  IsSensor(): this is SensorDevice
  IsTurret(): this is TankTurret
  IsActive(): Bool
  IsPrevention(): Bool
  IsDropPoint(): this is DropPoint
  IsDrone(): Bool
  IsItem(): this is ItemObject
  IsDead(): Bool
  IsDeadNoStatPool(): Bool
  UpdateAdditionalScanningData(): void
  OnOutlineItemRequestEvent(evt: OutlineItemRequestEvent): Bool
  OnOutlineRequestEvent(evt: OutlineRequestEvent): Bool
  StartUpdate(): void
  FireSingleE3Tick(): void
  OnFakeUpdate(evt: FakeUpdateEvent): Bool
  EvaluateLastFrameRequest(): void
  ClearLastFrame(): void
  Suppress(): void
  OnSuppressOutlineEvent(evt: SuppressOutlineEvent): Bool
  SetUpProperOutline(): void
  FadeOutOutlines(): void
  OnFadeOutOutlinesUpdate(evt: FadeOutOutlinesUpdate): Bool
  CalculateRealTimePassed(): number
  OnForceFadeOutlineEventForWeapon(evt: ForceFadeOutlineEventForWeapon): Bool
  CalculateAmountOfTicks(): number
  CalculateOpacity(outlineStrength: number): number
  ShouldEnableOutlineRed(): Bool
  ShouldEnableOutlineGreen(): Bool
  OnDebugOutlineEvent(evt: DebugOutlineEvent): Bool
  OnScanningModeChanged(evt: ScanningModeEvent): Bool
  OnScanningLookedAt(evt: ScanningLookAtEvent): Bool
  OnLookedAtEvent(evt: LookedAtEvent): Bool
  OnPulseEvent(evt: gameVisionModeUpdateVisuals): Bool
  PulseNetwork(revealNetworkAtEnd: Bool): void
  GetTakeOverControlSystem(): TakeOverControlSystem
  GetTaggingSystem(): FocusModeTaggingSystem
  /** @noSelf **/
  TagObject(obj: GameObject): void
  /** @noSelf **/
  UntagObject(obj: GameObject): void
  CanBeTagged(): Bool
  OnTagObjectEvent(evt: TagObjectEvent): Bool
  GetDefaultHighlight(): FocusForcedHighlightData
  UpdateDefaultHighlight(): void
  GetCurrentOutline(): EFocusOutlineType
  GetDefaultHighlightType(): EFocusForcedHighlightType
  HasHighlight(highlightType: EFocusForcedHighlightType, outlineType: EFocusOutlineType): Bool
  HasOutlineOrFill(highlightType: EFocusForcedHighlightType, outlineType: EFocusOutlineType): Bool
  HasHighlight(highlightType: EFocusForcedHighlightType, outlineType: EFocusOutlineType, sourceID: EntityID): Bool
  HasHighlight(highlightType: EFocusForcedHighlightType, outlineType: EFocusOutlineType, sourceID: EntityID, sourceName: CName): Bool
  HasRevealRequest(data: gameVisionModeSystemRevealIdentifier): Bool
  CancelForcedVisionAppearance(data: FocusForcedHighlightData): void
  ForceVisionAppearance(data: FocusForcedHighlightData): void
  /** @noSelf **/
  ForceVisionAppearance(self: GameObject, data: FocusForcedHighlightData): void
  /** @noSelf **/
  SetFocusForcedHightlightData(outType: EFocusOutlineType, highType: EFocusForcedHighlightType, prio: EPriority, id: EntityID, className: CName): FocusForcedHighlightData
  SendReactivateHighlightEvent(): void
  GetObjectToForwardHighlight(): GameObject[]
  OnHUDInstruction(evt: HUDInstruction): Bool
  TryOpenQuickhackMenu(shouldOpen: Bool): void
  SendQuickhackCommands(shouldOpen: Bool): void
  SendForceRevealObjectEvent(reveal: Bool, reason: CName, instigatorID?: EntityID, lifetime?: number, delay?: number): void
  /** @noSelf **/
  SendForceRevealObjectEvent(self: GameObject, reveal: Bool, reason: CName, instigatorID?: EntityID, lifetime?: number, delay?: number): void
  RestoreRevealState(): void
  IsHighlightedInFocusMode(): Bool
  IsScanned(): Bool
  GetBraindanceLayer(): braindanceVisionMode
  IsObjectRevealed(): Bool
  GetFastTravelSystem(): FastTravelSystem
  GetNetworkSystem(): NetworkSystem
  CanOverrideNetworkContext(): Bool
  IsAccessPoint(): Bool
  StartPingingNetwork(): void
  StopPingingNetwork(): void
  GetNetworkLinkSlotName(transform: WorldTransform): CName
  GetNetworkLinkSlotName(): CName
  GetRoleMappinSlotName(): CName
  GetQuickHackIndicatorSlotName(): CName
  GetPhoneCallIndicatorSlotName(): CName
  IsNetworkLinkDynamic(): Bool
  GetNetworkBeamEndpoint(): Vector4
  IsNetworkKnownToPlayer(): Bool
  CanPlayerUseQuickHackVulnerability(data: TweakDBID): Bool
  IsConnectedToBackdoorDevice(): Bool
  IsInIconForcedVisibilityRange(): Bool
  EvaluateMappinsVisualState(): void
  IsGameplayRelevant(): Bool
  ShouldSendGameAttachedEventToPS(): Bool
  GetContentScale(): TweakDBID
  IsGameplayRoleValid(role: EGameplayRole): Bool
  DeterminGameplayRole(): EGameplayRole
  DeterminGameplayRoleMappinVisuaState(data: SDeviceMappinData): EMappinVisualState
  DeterminGameplayRoleMappinRange(data: SDeviceMappinData): number
  OnGameplayRoleChangeNotification(evt: GameplayRoleChangeNotification): Bool
  IsHackingPlayer(): Bool
  IsQuickHackAble(): Bool
  IsQuickHacksExposed(): Bool
  IsBreached(): Bool
  IsBackdoor(): Bool
  IsActiveBackdoor(): Bool
  IsBodyDisposalPossible(): Bool
  IsControllingDevices(): Bool
  HasAnySlaveDevices(): Bool
  IsFastTravelPoint(): Bool
  IsExplosive(): Bool
  HasImportantInteraction(): Bool
  HasAnyDirectInteractionActive(): Bool
  ShouldEnableRemoteLayer(): Bool
  IsTechie(): Bool
  IsSolo(): Bool
  IsNetrunner(): Bool
  IsAnyPlaystyleValid(): Bool
  IsHackingSkillCheckActive(): Bool
  IsDemolitionSkillCheckActive(): Bool
  IsEngineeringSkillCheckActive(): Bool
  CanPassEngineeringSkillCheck(): Bool
  CanPassDemolitionSkillCheck(): Bool
  CanPassHackingSkillCheck(): Bool
  HasDirectActionsActive(): Bool
  HasActiveDistraction(): Bool
  HasActiveQuickHackUpload(): Bool
  IsInvestigating(): Bool
  IsInvestigatingObject(targetID: GameObject): Bool
  IsTaggedinFocusMode(): Bool
  IsQuest(): Bool
  OnSetAsQuestImportantEvent(evt: SetAsQuestImportantEvent): Bool
  ToggleQuestImportance(isImportant: Bool): void
  MarkAsQuest(isQuest: Bool): void
  IsGrouppedClue(): Bool
  HasAnyClue(): Bool
  IsClueInspected(): Bool
  GetLinkedClueData(clueIndex: number): LinkedFocusClueData
  GetAvailableClueIndex(): number
  PurgeScannerBlackboard(): void
  OnlinkedClueTagEvent(evt: linkedClueTagEvent): Bool
  CompileScannerChunks(): Bool
  FillObjectDescription(arr: ScanningTooltipElementDef[]): void
  GetScannableObjects(): ScanningTooltipElementDef[]
  ShouldShowScanner(): Bool
  IsScaningCluesBlocked(): Bool
  IsBraindanceBlocked(): Bool
  IsPhotoModeBlocked(): Bool
  ResolveFocusClueExtendedDescription(clueIndex: number): void
  ResolveFocusClueConclusion(clueIndex: number, conclusionData: ScanningTooltipElementDef): void
  ResolveFacts(facts: SFactOperationData[]): void
  GetFocusClueSystem(): FocusCluesSystem
  IsAnyClueEnabled(): Bool
  IsCurrentTarget(): Bool
  IsCurrentlyScanned(): Bool
  GetFreeWorkspotRefForAIAction(aiAction: gamedataWorkspotActionType): NodeRef
  GetFreeWorkspotDataForAIAction(aiAction: gamedataWorkspotActionType): WorkspotEntryData
  HasFreeWorkspotForInvestigation(): Bool
  GetFreeWorkspotsCountForAIAction(aiAction: gamedataWorkspotActionType): number
  GetNumberOfWorkpotsForAIAction(aiAction: gamedataWorkspotActionType): number
  GetTotalCountOfInvestigationSlots(): number
  GetStimBroadcasterComponent(): StimBroadcasterComponent
  GetUISlotComponent(): SlotComponent
  GetSquadMemberComponent(): SquadMemberBaseComponent
  GetStatusEffectComponent(): StatusEffectComponent
  GetSourceShootComponent(): SourceShootComponent
  GetTargetShootComponent(): TargetShootComponent
  ReplicateAnimFeature(obj: GameObject, inputName: CName, value: AnimFeature): void
  OnAnimFeatureReplicated(inputName: CName, value: AnimFeature): void
  ReplicateAnimEvent(obj: GameObject, eventName: CName): void
  OnAnimEventReplicated(eventName: CName): void
  ReplicateInputFloat(obj: GameObject, inputName: CName, value: number): void
  ReplicateInputBool(obj: GameObject, inputName: CName, value: Bool): void
  ReplicateInputInt(obj: GameObject, inputName: CName, value: number): void
  ReplicateInputVector(obj: GameObject, inputName: CName, value: Vector4): void
  GetPlaystyleMappinLocalPos(): Vector4
  GetPlaystyleMappinSlotWorldPos(): Vector4
  GetPlaystyleMappinSlotWorldTransform(): WorldTransform
  GetFxResourceByKey(key: CName): FxResource
  OnDelayPrereqEvent(evt: DelayPrereqEvent): Bool
  OnTriggerAttackEffectorWithDelay(evt: TriggerAttackEffectorWithDelay): Bool
  OnToggleOffMeshConnections(evt: ToggleOffMeshConnections): Bool
  EnableOffMeshConnections(player: Bool, npc: Bool): void
  DisableOffMeshConnections(player: Bool, npc: Bool): void
  OnPhysicalDestructionEvent(evt: PhysicalDestructionEvent): Bool
  GetHudManager(): HUDManager
  TriggerMenuEvent(eventName: CName): void
  GetAcousticQuerryStartPoint(): Vector4
  CanBeInvestigated(): Bool
  /** @noSelf **/
  IsVehicle(object: GameObject): Bool
  GetPreventionSystem(): PreventionSystem
  GetLootQuality(): gamedataQuality
  GetIsIconic(): Bool
  GetAnimationSystemForcedVisibilityManager(): AnimationSystemForcedVisibilityManager
  /** @noSelf **/
  ToggleForcedVisibilityInAnimSystemEvent(owner: GameObject, sourceName: CName, isVisibe: Bool, transitionTime?: number): void
  ToggleForcedVisibilityInAnimSystem(sourceName: CName, isVisibe: Bool, transitionTime?: number, entityID?: EntityID, forcedVisibleOnlyInFrustum?: Bool): void
  ClearForcedVisibilityInAnimSystem(): void
  HasVisibilityForcedInAnimSystem(): Bool
  OnToggleVisibilityInAnimSystemEvent(evt: ToggleVisibilityInAnimSystemEvent): Bool
  OnSetGlitchOnUIEvent(evt: SetGlitchOnUIEvent): Bool
  OnCustomUIAnimationEvent(evt: CustomUIAnimationEvent): Bool
  OnSmartGunLockEvent(evt: SmartGunLockEvent): Bool
  ToString(): string

  // VARIABLES
  isDead: boolean
}

declare interface PersistentState extends IScriptable {

  GetID(): PersistentID
  GetPersistencySystem(): GamePersistencySystem
  GetGameInstance(): GameInstance
  ForcePersistentStateChanged(): void
}

declare interface IGameSystem extends IScriptable {

}

declare interface IGamePersistencySystem extends IGameSystem {

}

declare interface Event extends IScriptable {

}

declare interface GameComponentPS extends PersistentState {

}

declare interface DeviceComponentPS extends GameComponentPS {

  GetPS(deviceLink: DeviceLink): DeviceComponentPS
  IsStatic(): Bool
  IsAttachedToGame(): Bool
  IsLogicReady(): Bool
  GetClearance(): Clearance
  GetNativeActions(outActions: DeviceAction[], context: GetActionsContext): void
  GetActions(outActions: DeviceAction[], context: GetActionsContext): Bool
  GetQuestActions(outActions: DeviceAction[], context: GetActionsContext): void
  GetActionsToNative(context: GetActionsContext): DeviceAction[]
  GetQuestActionsToNative(context: GetActionsContext): DeviceAction[]
  OnMaraudersMapDeviceDebug(sink: MaraudersMapDevicesSink): void
  GetFirstAttachedSlave(): DeviceComponentPS
  GetBackdoorObjectiveData(): BackDoorObjectiveData
  GetControlPanelObjectiveData(): ControlPanelObjectiveData
  InitializeGameplayObjectives(): void
  InitializeQuestDBCallbacksForQuestmark(): void
  UnInitializeQuestDBCallbacksForQuestmark(): void
  GetOwnerEntityWeak(): Entity
  GetNetworkSystem(): NetworkSystem
  ExposeQuickHacks(shouldExpose: Bool): void
  ExposeQuickHacks(): void
  IsQuickHacksExposed(): Bool
  IsScanned(): Bool
  GetSecurityAreas(includeInactive?: Bool, returnOnlyDirectlyConnected?: Bool): SecurityAreaControllerPS[]
  GetSecuritySystem(): SecuritySystemControllerPS
  GetPersistentStateName(): CName
  GetChildren(outDevices: DeviceComponentPS[]): void
  GetParents(outDevices: DeviceComponentPS[]): void
  GetImmediateParents(): DeviceComponentPS[]
  GetAncestors(outDevices: DeviceComponentPS[]): void
  HasAnySlave(): Bool
  HasAnyDeviceConnection(): Bool
  GetDeviceName(): string
  GetDeviceStatus(): string
  IsMasterType(): Bool
  HackGetOwner(): Entity
  IsBeingScanned(): Bool
  IsMarkedAsQuest(): Bool
  IsAutoTogglingQuestMark(): Bool
  GetFactToDisableQuestMarkName(): CName
  IsAnyMasterFlaggedAsQuest(): Bool
  GetWidgetTypeName(): CName
  GetDeviceIconPath(): string
  GetVirtualSystemType(): EVirtualSystem
  GetDeviceIconID(): CName
  GetDeviceWidget(context: GetActionsContext): SDeviceWidgetPackage
  GetBlackboardDef(): DeviceBaseBlackboardDef
  GetBlackboard(): IBlackboard
  GetInkWidgetLibraryPath(): ResRef
  GetInkWidgetLibraryID(context: GetActionsContext): CName
  GetInkWidgetTweakDBID(context: GetActionsContext): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
  GetDeviceIconTweakDBID(): TweakDBID
  GetThumbnailWidget(): SThumbnailWidgetPackage
  GetActionWidgets(context: GetActionsContext): SActionWidgetPackage[]
  GetThumbnailAction(): ThumbnailUI
  SetIsMarkedAsQuest(isQuest: Bool): void
  SetIsBeingScannedFlag(isBeingScanned: Bool): void
  SetIsScanComplete(isComplete: Bool): void
  DetermineInteractionState(interactionComponent: InteractionComponent, context: GetActionsContext): void
  PassBlackboard(blackboard: IBlackboard): void
  GetVirtualSystem(slave: DeviceComponentPS, vs: VirtualSystemPS): Bool
  GetVirtualSystem(id: PersistentID, vs: VirtualSystemPS): Bool
  GetVirtualSystem(vs: VirtualSystemPS): Bool
  ResloveUIOnAction(action: ScriptableDeviceAction): void
  RefreshUI(blackboard: IBlackboard): void
  RequestBreadCrumbUpdate(blackboard: IBlackboard, data: SBreadCrumbUpdateData): void
  RequestActionWidgetsUpdate(blackboard: IBlackboard): void
  ActionThumbnailUI(): ThumbnailUI
  GetMyEntityID(): EntityID
}

declare interface GamePersistencySystem extends IGamePersistencySystem {

  QueueEntityEvent(targetEntity: EntityID, evt: Event): void
  QueuePSEvent(targetID: PersistentID, psClassName: CName, evt: Event): void
  GetConstAccessToPSObject(targetID: PersistentID, psClassName: CName): PersistentState
  ForgetObject(targetID: PersistentID, notifyEntity: Bool): void
  QueuePSDeviceEvent(action: DeviceAction): void
  GetPersistentBool(targetEntity: PersistentID, psClassName: CName, varName: CName): Bool
  GetPersistentInt(targetEntity: PersistentID, psClassName: CName, varName: CName): number
  GetPersistentFloat(targetEntity: PersistentID, psClassName: CName, varName: CName): number
  SetPersistentBool(targetEntity: PersistentID, psClassName: CName, varName: CName, newValue: Bool): void
  SetPersistentInt(targetEntity: PersistentID, psClassName: CName, varName: CName, newValue: number): void
  SetPersistentFloat(targetEntity: PersistentID, psClassName: CName, varName: CName, newValue: number): void
}

declare interface DeviceLink {

  /** @noSelf **/
  Construct(ps: PersistentState): DeviceLink
  /** @noSelf **/
  Construct(id: PersistentID, _className: CName): DeviceLink
  /** @noSelf **/
  Construct(persistentStates: PersistentState[]): DeviceLink[]
  /** @noSelf **/
  GetLinkID(s: DeviceLink): PersistentID
  /** @noSelf **/
  GetLinkClassName(s: DeviceLink): CName
  /** @noSelf **/
  IsValid(s: DeviceLink): Bool
}

declare interface PersistentID {

  /** @noSelf **/
  IsDefined(id: PersistentID): Bool
  /** @noSelf **/
  IsDynamic(id: PersistentID): Bool
  /** @noSelf **/
  IsStatic(id: PersistentID): Bool
  /** @noSelf **/
  IsEntity(id: PersistentID): Bool
  /** @noSelf **/
  IsComponent(id: PersistentID): Bool
  /** @noSelf **/
  GetComponentName(id: PersistentID): CName
  /** @noSelf **/
  ToDebugString(id: PersistentID): string
  /** @noSelf **/
  ExtractEntityID(id: PersistentID): EntityID
}

declare interface MaraudersMapDevicesSink extends IScriptable {

  PushName(key: CName, value: CName): void
  PushString(key: string, value: string): void
  PushVector4(key: string, value: Vector4): void
  PushVector2(key: string, value: Vector2): void
  PushQuaternion(key: string, value: Quaternion): void
  PushFloat(key: string, value: number): void
  PushInt32(key: string, value: number): void
  PushUint32(key: string, value: number): void
  PushBool(key: string, value: Bool): void
  BeginCategory(name: string): void
  EndCategory(): void
}

declare interface GemplayObjectiveData extends IScriptable {

  GetObjectiveEntryID(): string
  SetObjectiveEntryID(objectiveEntryID: string): void
  GetOwnerID(): EntityID
  SetOwnerID(requesterID: EntityID): void
  GetQuestTitle(): string
  GetObjectiveDescription(): string
  GetUniqueID(): string
  CreateUniqueID(entityID: EntityID): void
  IsCreated(): Bool
  SetObjectiveState(state: gameJournalEntryState): void
  GetObjectiveState(): gameJournalEntryState
}

declare interface EntityID {

  /** @noSelf **/
  IsDefined(id: EntityID): Bool
  /** @noSelf **/
  IsDynamic(id: EntityID): Bool
  /** @noSelf **/
  IsStatic(id: EntityID): Bool
  /** @noSelf **/
  ToDebugString(id: EntityID): string
  /** @noSelf **/
  ToDebugStringDecimal(id: EntityID): string
  /** @noSelf **/
  GetHash(id: EntityID): number
}

declare interface GameInstance {

  /** @noSelf **/
  IsRestoringState(): Bool
  /** @noSelf **/
  IsValid(): Bool
  /** @noSelf **/
  GetGameTime(): GameTime
  /** @noSelf **/
  GetEngineTime(): EngineTime
  /** @noSelf **/
  GetSimTime(): EngineTime
  /** @noSelf **/
  GetPlaythroughTime(): EngineTime
  /** @noSelf **/
  GetFrameNumber(): number
  /** @noSelf **/
  GetActivityLogSystem(): ActivityLogSystem
  /** @noSelf **/
  GetAnimationSystem(): AnimationSystem
  /** @noSelf **/
  GetAttitudeSystem(): AttitudeSystem
  /** @noSelf **/
  GetAudioSystem(): AudioSystem
  /** @noSelf **/
  GetBlackboardSystem(): BlackboardSystem
  /** @noSelf **/
  GetCameraSystem(): CameraSystem
  /** @noSelf **/
  GetCommunitySystem(): CommunitySystem
  /** @noSelf **/
  GetCompanionSystem(): CompanionSystem
  /** @noSelf **/
  GetCoverManager(): CoverManager
  /** @noSelf **/
  GetDebugVisualizerSystem(): DebugVisualizerSystem
  /** @noSelf **/
  GetDebugDrawHistorySystem(): IDebugDrawHistorySystem
  /** @noSelf **/
  GetDelaySystem(): DelaySystem
  /** @noSelf **/
  GetDeviceSystem(): DeviceSystem
  /** @noSelf **/
  GetEntitySpawnerEventsBroadcaster(): EntitySpawnerEventsBroadcaster
  /** @noSelf **/
  GetGameEffectSystem(): EffectSystem
  /** @noSelf **/
  GetSpatialQueriesSystem(): SpatialQueriesSystem
  /** @noSelf **/
  GetLootManager(): LootManager
  /** @noSelf **/
  GetLocationManager(): LocationManager
  /** @noSelf **/
  GetMappinSystem(): MappinSystem
  /** @noSelf **/
  GetNavigationSystem(): NavigationSystem
  /** @noSelf **/
  GetObjectPoolSystem(): ObjectPoolSystem
  /** @noSelf **/
  GetPersistencySystem(): GamePersistencySystem
    /** @noSelf **/
  GetPlayer(): PlayerPuppet
  /** @noSelf **/
  GetPlayerSystem(): PlayerSystem
  /** @noSelf **/
  GetPrereqManager(): PrereqManager
  /** @noSelf **/
  GetPreventionSpawnSystem(): PreventionSpawnSystem
  /** @noSelf **/
  GetQuestsSystem(): QuestsSystem
  /** @noSelf **/
  GetSceneSystem(): SceneSystem
  /** @noSelf **/
  GetScriptableSystemsContainer(): ScriptableSystemsContainer
  /** @noSelf **/
  GetStatPoolsSystem(): StatPoolsSystem
  /** @noSelf **/
  GetStatsSystem(): StatsSystem
  /** @noSelf **/
  GetStatsDataSystem(): StatsDataSystem
  /** @noSelf **/
  GetStatusEffectSystem(): StatusEffectSystem
  /** @noSelf **/
  GetGodModeSystem(): GodModeSystem
  /** @noSelf **/
  GetEffectorSystem(): EffectorSystem
  /** @noSelf **/
  GetDamageSystem(): DamageSystem
  /** @noSelf **/
  GetTargetingSystem(): TargetingSystem
  /** @noSelf **/
  GetTimeSystem(): TimeSystem
  /** @noSelf **/
  GetTransactionSystem(): TransactionSystem
  /** @noSelf **/
  GetTrafficSystem(): TrafficSystem
  /** @noSelf **/
  GetVisionModeSystem(): VisionModeSystem
  /** @noSelf **/
  GetVehicleSystem(): VehicleSystem
  /** @noSelf **/
  GetWorkspotSystem(): WorkspotGameSystem
  /** @noSelf **/
  GetInventoryManager(): InventoryManager
  /** @noSelf **/
  GetTeleportationFacility(): TeleportationFacility
  /** @noSelf **/
  GetInfluenceMapSystem(): InfluenceMapSystem
  /** @noSelf **/
  GetFxSystem(): FxSystem
  /** @noSelf **/
  GetMountingFacility(): IMountingFacility
  /** @noSelf **/
  GetRestrictMovementAreaManager(): RestrictMovementAreaManager
  /** @noSelf **/
  GetGameplayLogicPackageSystem(): GameplayLogicPackageSystem
  /** @noSelf **/
  GetJournalManager(): JournalManager
  /** @noSelf **/
  GetDebugCheatsSystem(): DebugCheatsSystem
  /** @noSelf **/
  GetCombatQueriesSystem(): gameICombatQueriesSystem
  /** @noSelf **/
  GetTelemetrySystem(): TelemetrySystem
  /** @noSelf **/
  GetGameRulesSystem(): gameIGameRulesSystem
  /** @noSelf **/
  GetGameTagSystem(): GameTagSystem
  /** @noSelf **/
  GetPingSystem(): PingSystem
  /** @noSelf **/
  GetPlayerManagerSystem(): gameIPlayerManager
  /** @noSelf **/
  GetScriptsDebugOverlaySystem(): ScriptsDebugOverlaySystem
  /** @noSelf **/
  GetCooldownSystem(): ICooldownSystem
  /** @noSelf **/
  GetDebugPlayerBreadcrumbs(): DebugPlayerBreadcrumbs
  /** @noSelf **/
  GetInteractionManager(): InteractionManager
  /** @noSelf **/
  GetGlobalTVSystem(): GlobalTvSystem
  /** @noSelf **/
  GetSubtitleHandlerSystem(): SubtitleHandlerSystem
  /** @noSelf **/
  GetAINavigationSystem(): AIINavigationSystem
  /** @noSelf **/
  GetSenseManager(): SenseManager
  /** @noSelf **/
  GetUISystem(): UISystem
  /** @noSelf **/
  GetAchievementSystem(): AchievementSystem
  /** @noSelf **/
  GetWatchdogSystem(): IWatchdogSystem
  /** @noSelf **/
  GetLevelAssignmentSystem(): LevelAssignmentSystem
  /** @noSelf **/
  GetPhotoModeSystem(): PhotoModeSystem
  /** @noSelf **/
  GetSettingsSystem(): UserSettings
  /** @noSelf **/
  GetCharacterCustomizationSystem(): gameuiICharacterCustomizationSystem
  /** @noSelf **/
  GetUIObjectsLoaderSystem(): gameuiIUIObjectsLoaderSystem
  /** @noSelf **/
  GetWeatherSystem(): WeatherSystem
  /** @noSelf **/
  GetReactionSystem(): ReactionSystem
  /** @noSelf **/
  GetAutoSaveSystem(): gameAutoSaveSystem
  /** @noSelf **/
  GetTutorialManager(): questTutorialManager
  /** @noSelf **/
  IsSavingLocked(locks: gameSaveLock[]): Bool
  /** @noSelf **/
  GetRuntimeInfo(): RuntimeInfo
  /** @noSelf **/
  FindWaypointsByTag(tag: CName, waypoints: Vector4[]): void
  /** @noSelf **/
  FindEntityByID(entityId: EntityID): Entity
  /** @noSelf **/
  GetNodeTransform(nodeRef: GlobalNodeRef, transform: Transform): Bool
  /** @noSelf **/
  AddtoInventory(name: string, count: number): void
  /** @noSelf **/
  EquipItemOnPlayer(name: string, slot: string): void
}

declare interface IActivityLogSystem extends IGameSystem {

}

declare interface gameIAttitudeManager extends IGameSystem {

}

declare interface gameIGameAudioSystem extends IGameSystem {

}

declare interface IBlackboardSystem extends IGameSystem {

}

declare interface ICameraSystem extends IGameSystem {

}

declare interface ICommunitySystem extends IGameSystem {

}

declare interface ICompanionSystem extends IGameSystem {

}

declare interface ICoverManager extends IGameSystem {

}

declare interface gameIDebugVisualizerSystem extends IGameSystem {

}

declare interface IDelaySystem extends IGameSystem {

}

declare interface IDeviceSystem extends IGameSystem {

}

declare interface IEntitySpawnerEventsBroadcaster extends IGameSystem {

}

declare interface IEffectSystem extends IGameSystem {

}

declare interface gameISpatialQueriesSystem extends IGameSystem {

}

declare interface ILootManager extends IGameSystem {

}

declare interface ILocationManager extends IGameSystem {

}

declare interface IReplicatedGameSystem extends IGameSystem {

}

declare interface IMappinSystem extends IReplicatedGameSystem {

}

declare interface IObjectPoolSystem extends IGameSystem {

}

declare interface gameIPlayerSystem extends IGameSystem {

}

declare interface gamePlayerSystem extends gameIPlayerSystem {

  PlayerEnteredCombat(playerEnteredCombat: Bool): void
}

declare interface IPrereqManager extends IGameSystem {

}

declare interface IPreventionSpawnSystem extends IGameSystem {

}

declare interface questIQuestsSystem extends IReplicatedGameSystem {

}

declare interface ISceneSystem extends IGameSystem {

}

declare interface gameIScriptableSystemsContainer extends IGameSystem {

}

declare interface IStatPoolsSystem extends IGameSystem {

}

declare interface IStatsSystem extends IGameSystem {

}

declare interface IStatsDataSystem extends IGameSystem {

}

declare interface IStatusEffectSystem extends IGameSystem {

}

declare interface IGodModeSystem extends IReplicatedGameSystem {

}

declare interface IEffectorSystem extends IGameSystem {

}

declare interface IDamageSystem extends IReplicatedGameSystem {

}

declare interface ITargetingSystem extends IGameSystem {

}

declare interface gameITimeSystem extends IReplicatedGameSystem {

}

declare interface ITransactionSystem extends IGameSystem {

}

declare interface IVisionModeSystem extends IGameSystem {

}

declare interface IVehicleSystem extends IGameSystem {

}

declare interface IWorkspotGameSystem extends IGameSystem {

}

declare interface IInventoryManager extends IGameSystem {

}

declare interface gameITeleportationFacility extends IGameSystem {

}

declare interface IInfluenceMapSystem extends IGameSystem {

}

declare interface IFxSystem extends IGameSystem {

}

declare interface IRestrictMovementAreaManager extends IGameSystem {

}

declare interface IGameplayLogicPackageSystem extends IGameSystem {

}

declare interface IJournalManager extends IReplicatedGameSystem {

}

declare interface IDebugCheatsSystem extends IReplicatedGameSystem {

}

declare interface ITelemetrySystem extends IGameSystem {

  LogInitialChoiceSetStatege(state: telemetryInitalChoiceStage): void
  LogInitialChoiceLifePathSelected(lifePathID: TweakDBID): void
  LogInitialChoiceBodyGenderSelected(isMale: Bool): void
  LogInitialChoiceBrainGenderSelected(isMale: Bool): void
  LogInitialChoiceOptionSelected(option: CharacterCustomizationOption, value: number): void
  LogInitialChoiceAttributeChanged(attribute: gamedataStatType): void
  LogNewGameStarted(): void
}

declare interface gameIPingSystem extends IReplicatedGameSystem {

}

declare interface gameIScriptsDebugOverlaySystem extends IGameSystem {

}

declare interface IDebugPlayerBreadcrumbs extends IGameSystem {

}

declare interface IInteractionManager extends IGameSystem {

}

declare interface IGlobalTvSystem extends IGameSystem {

}

declare interface ISubtitleHandlerSystem extends IGameSystem {

}

declare interface ISenseManager extends IGameSystem {

}

declare interface IUISystem extends IGameSystem {

}

declare interface IAchievementSystem extends IGameSystem {

}

declare interface ILevelAssignmentSystem extends IGameSystem {

}

declare interface IPhotoModeSystem extends IGameSystem {

}

declare interface IReactionSystem extends IGameSystem {

}

declare interface gameIAutoSaveSystem extends IGameSystem {

}

declare interface questITutorialManager extends IGameSystem {

}

declare interface QuestsSystem extends questIQuestsSystem {

  GetFact(factName: CName): number
  GetFactStr(factName: string): number
  SetFact(factName: CName, value: number): void
  SetFactStr(factName: string, value: number): void
  RegisterListener(factName: CName, listener: IScriptable, funcName: CName): number
  UnregisterListener(factName: CName, id: number): void
  RegisterEntity(factName: CName, entityId: EntityID): number
  UnregisterEntity(factName: CName, callbackId: number): void
  GetGameplayTimerData(seconds: number, percent: number): void
}

declare interface ScriptableSystem extends IScriptable {

  QueueRequest(request: ScriptableSystemRequest): void
  GetGameInstance(): GameInstance
  WasRestored(): Bool
  OnAttach(): void
  OnDetach(): void
  OnRestored(saveVersion: number, gameVersion: number): void
  IsSavingLocked(): Bool
}

declare interface NetworkSystem extends ScriptableSystem {

  OnAttach(): void
  OnDetach(): void
  GetPlayerStateMachineBlackboard(playerPuppet: GameObject): IBlackboard
  OnPlayerSpawnedCallback(playerPuppet: GameObject): void
  RegisterPlayerSpawnedCallback(): void
  RegisterVisionModeCallback(player: GameObject): void
  RegisterFocusModeCallback(): void
  RegisterPlayerTargetCallback(): void
  UnregisterVisionModeCallback(): void
  UnregisterFocusModeCallback(): void
  UnregisterPlayerTargetCallback(): void
  UnregisterPlayerSpawnedCallback(): void
  AddNetworkLink(linkData: SNetworkLinkData): void
  DeterminNetworkLinkPriority(linkData: SNetworkLinkData): EPriority
  RemoveNetworkLinksByID(ID: EntityID): void
  RemoveNetworkLinksBetweenTwoEntitities(firstID: EntityID, secondID: EntityID, onlyRemoveWeakLink: Bool): void
  RemoveNetworkLinkByData(linkData: SNetworkLinkData): void
  RemoveNetworkLinkByType(linkType: ELinkType): void
  RemoveNetworkLinkByIdAndType(linkType: ELinkType, ID: EntityID): void
  RemoveNetworkLink(index: number, instant: Bool): void
  UnregisterNetworkLinkWithDelay(linkData: SNetworkLinkData): DelayID
  RegisterNetworkLinkWithDelay(linkData: SNetworkLinkData, delay: number): void
  HasNetworkLink(linkData: SNetworkLinkData, index: number): Bool
  HasNetworkLink(linkData: SNetworkLinkData): Bool
  UpdateNetworkLinkData(linkData: SNetworkLinkData, indexToUpdate: number): void
  CancelNetworkLinkDelay(linkData: SNetworkLinkData): void
  CompareLinks(linkData1: SNetworkLinkData, linkData2: SNetworkLinkData): Bool
  CompareLinksData(linkData1: SNetworkLinkData, linkData2: SNetworkLinkData): Bool
  HasNetworkLinkWithHigherPriority(linkData: SNetworkLinkData): Bool
  HasNetworkLink(ID: EntityID): Bool
  HasNetworkLink(ID: EntityID, ignorePingLinks: Bool): Bool
  HasNetworkLink(masterID: EntityID, slaveID: EntityID, linkType: ELinkType): Bool
  HasAnyActiveNetworkLink(ID: EntityID): Bool
  GetNetworkBeam(linkData: SNetworkLinkData): FxInstance
  OnNewBackdoorDeviceRequest(request: NewBackdoorDeviceRequest): void
  OnMarkBackdoorAsRevealedRequest(request: MarkBackdoorAsRevealedRequest): void
  OnUnregisterAllNetworkLinksRequest(request: UnregisterAllNetworkLinksRequest): void
  OnDeactivateAllNetworkLinksRequest(request: DeactivateAllNetworkLinksRequest): void
  KillAllNetworkBeams(): void
  ResolveNetworkSystemCleanupDelay(): void
  CleanNetwork(): void
  RemoveAllNetworkLinks(): void
  OnUnregisterNetworkLinksByIDRequest(request: UnregisterNetworkLinksByIDRequest): void
  OnUnregisterNetworkLinksByIdAndTypeRequest(request: UnregisterNetworkLinksByIdAndTypeRequest): void
  OnUnregisterNetworkLinkRequest(request: UnregisterNetworkLinkRequest): void
  OnUnregisterNetworkLinkBetweenTwoEntitiesRequest(request: UnregisterNetworkLinkBetweenTwoEntitiesRequest): void
  KillNetworkBeamsByID(ID: EntityID): void
  KillNetworkBeamByIndex(index: number): void
  KillNetworkBeamsByID(slaveID: EntityID, masterID: EntityID): void
  KillNetworkBeamByData(linkData: SNetworkLinkData): void
  KillNetworkBeam(index: number, instant: Bool): void
  OnRegisterNetworkLinkRequest(request: RegisterNetworkLinkRequest): void
  RegisterNetworkLink(linkData: SNetworkLinkData): void
  OnUpdateNetworkVisualisationRequest(request: UpdateNetworkVisualisationRequest): void
  UpdateNetworkVisualisation(): void
  DeterminNetworkLinkVisibility(linkIndex: number): Bool
  ActivateNetworkLinkByIndex(linkIndex: number): void
  DrawNetworkBeamByIndex(linkIndex: number): Bool
  DrawNetworkBeam(linkData: SNetworkLinkData): void
  ResolveConnectionHighlight(enable: Bool, linkData: SNetworkLinkData): void
  SendConnectionHighlightEvent(enable: Bool, target: EntityID, source: EntityID, linkData: SNetworkLinkData): void
  /** @noSelf **/
  SendEvaluateVisionModeRequest(instance: GameInstance, mode: gameVisionModeType): void
  OnEvaluateVisionModeRequest(request: EvaluateVisionModeRequest): void
  OnVisionModeChanged(value: number): Bool
  EvaluateVisionMode(visionType: gameVisionModeType): void
  OnFocusModeToggle(value: Bool): Bool
  OnPlayerTargetChanged(value: EntityID): Bool
  EvaluatelastTargets(newTarget: EntityID): Bool
  GetNetworkRelation(sourceID: EntityID, targetID: EntityID): ENetworkRelation
  EvaluateLastSlaveTarget(masterID: EntityID): void
  EvaluateLastMasterTarget(slaveID: EntityID): void
  IsMaster(targetEntityID: EntityID): Bool
  IsLastSlaveTarget(entityID: EntityID): Bool
  IsLastMasterTarget(entityID: EntityID): Bool
  IsCurrentTarget(entityID: EntityID): Bool
  IsCurrentTargetValid(): Bool
  IsCurrentTargetValidInNetwork(): Bool
  IsInNetwork(id: EntityID): Bool
  IsSlaveInNetwork(id: EntityID): Bool
  GetAllSlavesOfMaster(masterID: EntityID): EntityID[]
  IsMasterInNetwork(id: EntityID): Bool
  GetAllMastersOfSlave(slaveID: EntityID): EntityID[]
  GetCurrentTargetID(): EntityID
  GetCurrentTarget(): GameObject
  GetObjectFromID(entityID: EntityID): GameObject
  IsTagged(id: EntityID): Bool
  OnRegisterPingLinkRequest(request: RegisterPingNetworkLinkRequest): void
  KillSingleOldestFreeLink(): void
  KillSingleOldestFreeLinkWitoutRevealPing(): void
  IsFreeLinkLimitReached(linkData: SNetworkLinkData): Bool
  OnStartPingingNetworkRequest(request: StartPingingNetworkRequest): void
  OnStopingingNetworkRequest(request: StopPingingNetworkRequest): void
  AddActivePing(source: GameObject, pingType: EPingType, duration: number, linkType: ELinkType, revealNetworkAtEnd: Bool, fxResource: FxResource, virtualNetworkShapeID: TweakDBID): void
  CreateVirtualNetwork(sourcePing: PingCachedData): void
  IsVirtualNetworkWithinDistanceLimit(sourcePing: PingCachedData): Bool
  CreateVirtualLinksForPing1(ping: PingCachedData): void
  CreateVirtualLinksForPing(ping: PingCachedData): void
  CreateForksForVirtualLink1(linkData: SNetworkLinkData, ping: PingCachedData, sphereCentre: Vector4, radius: number, direction: Vector4, vertices: Vector4[]): void
  CreateForksForVirtualLink1(linkData: SNetworkLinkData, ping: PingCachedData, sphereCentre: Vector4, radius: number, direction: Vector4, connectionPoint: Vector4): void
  CreateForksForVirtualLink(linkData: SNetworkLinkData, ping: PingCachedData, sphereCentre: Vector4, radius: number, slice: number): void
  RemoveActivePing(index: number): void
  RemoveActivePingBySource(sourceID: EntityID): void
  RemoveAllActivePings(): void
  RemoveAllActiveFakePings(): void
  RemoveAllPingLinks(): void
  RemoveAllPingLinksByType(linkType: ELinkType): void
  RemovePingLinksBySourceAndType(linkType: ELinkType, sourceID: EntityID): void
  RemovePingLinksBySource(sourceID: EntityID, intant: Bool): void
  RemovePingLinksBySourceAndFxResource(sourceID: EntityID, fxResource: FxResource, intant: Bool): void
  RemovePingLinksByFxResource(fxResource: FxResource, intant: Bool): void
  RemoveActivePingBySourceAndType(sourceID: EntityID, pingType: EPingType): void
  HasActivePing(sourceID: EntityID): Bool
  GetActivePing(sourceID: EntityID): PingCachedData
  GetInitialPingSourceID(): EntityID
  GetInitialPingSource(): GameObject
  GetPingType(sourceID: EntityID): EPingType
  HasAnyActivePing(): Bool
  HasAnyActivePingWithRevealNetwork(): Bool
  HasActivePingWithRevealNetwork(sourceID: EntityID): Bool
  GetLastActivePingWithRevealNetwork(): PingCachedData
  IncreasePingLinbksCounter(): void
  DecreasePingLinbksCounter(): void
  IsPingLinksLimitReached(): Bool
  IsActivePingsLimitReached(): Bool
  HasDiffrentParentsThanTargets(sourceID: EntityID, targets: EntityID[]): Bool
  HasDiffrentChildrenThanTargets(sourceID: EntityID, targets: EntityID[]): Bool
  ResolveNetworkRevealTarget(linkData: SNetworkLinkData): void
  AddNetworkRevealTarget(target: EntityID): void
  RemoveNetworkRevealTarget(index: number): void
  RevealNetworkOnCachedTarget(targets: EntityID[]): void
  RevealEntireNetworkOnTarget(target: EntityID): void
  OnRevealNetworkRequestRequest(request: RevealNetworkRequestRequest): void
  SendRevealNetworkEvent(target: EntityID, delay?: number): void
  SendRevealNetworkGridRequest(target: EntityID): void
  IsIdValid(id: EntityID): Bool
  GetVirtualNetworkRecord(): VirtualNetwork_Record
  GetVirtualNetworkSegmentMarker(virtualNetworkRecord: VirtualNetwork_Record): Vector4
  GetMaxNumberOfSegmentsForVirtualNetwork(virtualNetworkRecord: VirtualNetwork_Record): number
  GetPingRange(): number
  GetSpacePingDuration(): number
  GetSpacePingAppearModifier(): number
  GetNetworkReavealDuration(): number
  ShouldNetworkElementsPersistAfterFocus(): Bool
  ShouldForceInstantBeamKill(): Bool
  GetRevealMasterAfterLeavingFocusDuration(): number
  GetRevealLinksAfterLeavingFocusDuration(): number
  GetPingRevealDuration(): number
  GetAmmountOfPingDurationIntervals(): number
  GetMaxFreePingLinks(): number
  GetMaximumNumberOfFreeLinksPerTarget(): number
  GetMaximumNumberOfActivePings(): number
  GetNumberOfVirtualLinksPerObject(): number
  GetVirtualLinkDepth(): number
  GetVirtualLinkAngleTollerance(): number
  GetVirtualLinkForkAngleTollerance(): number
  GetMaxAmountOfVirtualLinkForks(): number
  GetVirtualLinksSphereRadius(): number
  ShouldRevealMasterOnPulse(): Bool
  ShouldRevealSlaveOnPulse(): Bool
  SuppressPingIfBackdoorsFound(): Bool
  AllowSimultanousPinging(): Bool
  ShouldRevealNetworkAfterPulse(): Bool
  ShouldUsePulseOnPing(): Bool
  GetPulseRange(): number
  ShouldPulsRealObject(): Bool
  ShouldShowLinksOnMaster(): Bool
  QuickHacksExposedByDefault(): Bool
  /** @noSelf **/
  QuickHacksExposedByDefault(game: GameInstance): Bool
  ShouldShowOnlyTargetQuickHacks(): Bool
  /** @noSelf **/
  ShouldShowOnlyTargetQuickHacks(game: GameInstance): Bool
  GetPingPresetRecord(): NetworkPingingParameteres_Record
  SetupPingPresetRecord(): void
  GetLastPingSourceID(): EntityID
  FindBestMatchingVertice(point: Vector4, direction: Vector4, angle: number, radius: number, excludeVertice: Vector4, vertices: Vector4[]): Vector4
  GetRandomPoint(direction: Vector4, radius: number, angle: number): Vector4
  GetRandomPointOnSphere(sphereCentre: Vector4, radius: number, slice: number): Vector4
  GetRandomPointOnSphere(sphereCentre: Vector4, radius: number): Vector4
  GetRandomPointOnSphereQuadrant0(): Vector4
  GetRandomPointOnSphereInFacingQuadrant(sphereCenter: Vector4, radius: number, facePoint: Vector4): Vector4
  GetHudManager(): HUDManager
}

declare interface PlayerSystem extends gamePlayerSystem {

  GetLocalPlayerMainGameObject(): GameObject
  GetLocalPlayerControlledGameObject(): GameObject
  LocalPlayerControlExistingObject(entityID: EntityID): void
  RegisterPlayerPuppetAttachedCallback(object: IScriptable, func: CName): number
  UnregisterPlayerPuppetAttachedCallback(callbackID: number): void
  RegisterPlayerPuppetDetachedCallback(object: IScriptable, func: CName): number
  UnregisterPlayerPuppetDetachedCallback(callbackID: number): void
  FindPlayerControlledObjects(position: Vector4, radius: number, includeLocalPlayers: Bool, includeRemotePlayers: Bool, outPlayerGameObjects: GameObject[]): number
  IsInFreeCamera(): Bool
  SetFreeCameraTransform(newTransform: Transform): void
  IsCPOControlSchemeForced(): Bool
  GetPossessedByJohnnyFactName(): string
  OnGameRestored(game: GameInstance): Bool
  OnLocalPlayerChanged(controlledObject: GameObject): Bool
  OnLocalPlayerPossesionChanged(playerPossesion: gamedataPlayerPossesion): Bool
}

declare interface UISystem extends IUISystem {

  QueueEvent(evt: Event): void
  PushGameContext(context: UIGameContext): void
  PopGameContext(context: UIGameContext): void
  SwapGameContext(oldContext: UIGameContext, newContext: UIGameContext): void
  ResetGameContext(): void
  RequestNewVisualState(newVisualState: CName): void
  RestorePreviousVisualState(popVisualState: CName): void
  RequestVendorMenu(data: VendorPanelData, scenarioName?: CName): void
  ShowTutorialBracket(data: TutorialBracketData): void
  HideTutorialBracket(bracketID: CName): void
  ShowTutorialOverlay(data: TutorialOverlayData): void
  HideTutorialOverlay(data: TutorialOverlayData): void
  SetGlobalThemeOverride(themeID: CName): void
  ClearGlobalThemeOverride(): void
}

declare interface PushUIGameContextEvent extends Event {

}

declare interface PopUIGameContextEvent extends Event {

}

declare interface SwapUIGameContextEvent extends Event {

}

declare interface ResetUIGameContextEvent extends Event {

}

declare interface VisualStateChangeEvent extends Event {

}

declare interface VisualStateRestorePreviousEvent extends Event {

}

declare interface TimeDilatable extends GameObject {

  HasIndividualTimeDilation(reason?: CName): Bool
  SetIndividualTimeDilation(reason: CName, dilation: number, duration?: number, easeInCurve?: CName, easeOutCurve?: CName, ignoreGlobalDilation?: Bool): void
  UnsetIndividualTimeDilation(easeOutCurve?: CName): void
  GetTimeDilationValue(): number
  IsIgnoringGlobalTimeDilation(): Bool
  IsIgnoringTimeDilation(): Bool
}

declare interface gamePuppetBase extends TimeDilatable {

  GetRecordID(): TweakDBID
  GetTweakDBDisplayName(useDisplayNameAsFallback: Bool): string
  GetTweakDBFullDisplayName(useDisplayNameAsFallback: Bool): string
  GetIntFromCharacterTweak(varName: string, defaultValue?: number): number
  GetFloatFromCharacterTweak(varName: string, defaultValue?: number): number
  GetStringFromCharacterTweak(varName: string, defaultValue?: string): string
  GetBoolFromCharacterTweak(varName: string, defaultValue?: Bool): Bool
  GetCNameFromCharacterTweak(varName: string, defaultValue?: CName): CName
  IsIncapacitated(): Bool
}

declare interface TDBID {

  /** @noSelf **/
  Create(str: string): TweakDBID
  /** @noSelf **/
  IsValid(tdbID: TweakDBID): Bool
  /** @noSelf **/
  Prepend(tdbID: TweakDBID, toPrepend: TweakDBID): void
  /** @noSelf **/
  Append(tdbID: TweakDBID, toAppend: TweakDBID): void
  /** @noSelf **/
  ToNumber(tdbID: TweakDBID): number
  /** @noSelf **/
  (): TweakDBID
  /** @noSelf **/
  ToStringDEBUG(tdbID: TweakDBID): string
}

declare interface TweakDBInterface extends IScriptable {

  /** @noSelf **/
  GetInt(path: TweakDBID, defaultValue: number): number
  /** @noSelf **/
  GetIntArray(path: TweakDBID): number[]
  /** @noSelf **/
  GetIntDefault(path: TweakDBID): number
  /** @noSelf **/
  GetIntArrayDefault(path: TweakDBID): number[]
  /** @noSelf **/
  GetFloat(path: TweakDBID, defaultValue: number): number
  /** @noSelf **/
  GetFloatArray(path: TweakDBID): number[]
  /** @noSelf **/
  GetFloatDefault(path: TweakDBID): number
  /** @noSelf **/
  GetFloatArrayDefault(path: TweakDBID): number[]
  /** @noSelf **/
  GetString(path: TweakDBID, defaultValue: string): string
  /** @noSelf **/
  GetStringArray(path: TweakDBID): string[]
  /** @noSelf **/
  GetStringDefault(path: TweakDBID): string
  /** @noSelf **/
  GetStringArrayDefault(path: TweakDBID): string[]
  /** @noSelf **/
  GetBool(path: TweakDBID, defaultValue: Bool): Bool
  /** @noSelf **/
  GetBoolArray(path: TweakDBID): Bool[]
  /** @noSelf **/
  GetBoolDefault(path: TweakDBID): Bool
  /** @noSelf **/
  GetBoolArrayDefault(path: TweakDBID): Bool[]
  /** @noSelf **/
  GetCName(path: TweakDBID, defaultValue: CName): CName
  /** @noSelf **/
  GetCNameArray(path: TweakDBID): CName[]
  /** @noSelf **/
  GetCNameDefault(path: TweakDBID): CName
  /** @noSelf **/
  GetCNameArrayDefault(path: TweakDBID): CName[]
  /** @noSelf **/
  GetLocKey(path: TweakDBID, defaultValue: CName): CName
  /** @noSelf **/
  GetLocKeyArray(path: TweakDBID): CName[]
  /** @noSelf **/
  GetLocKeyDefault(path: TweakDBID): CName
  /** @noSelf **/
  GetLocKeyArrayDefault(path: TweakDBID): CName[]
  /** @noSelf **/
  GetColor(path: TweakDBID, defaultValue: Color): Color
  /** @noSelf **/
  GetColorArray(path: TweakDBID): Color[]
  /** @noSelf **/
  GetColorDefault(path: TweakDBID): Color
  /** @noSelf **/
  GetColorArrayDefault(path: TweakDBID): Color[]
  /** @noSelf **/
  GetVector2(path: TweakDBID, defaultValue: Vector2): Vector2
  /** @noSelf **/
  GetVector2Array(path: TweakDBID): Vector2[]
  /** @noSelf **/
  GetVector2Default(path: TweakDBID): Vector2
  /** @noSelf **/
  GetVector2ArrayDefault(path: TweakDBID): Vector2[]
  /** @noSelf **/
  GetVector3(path: TweakDBID, defaultValue: Vector3): Vector3
  /** @noSelf **/
  GetVector3Array(path: TweakDBID): Vector3[]
  /** @noSelf **/
  GetVector3Default(path: TweakDBID): Vector3
  /** @noSelf **/
  GetVector3ArrayDefault(path: TweakDBID): Vector3[]
  /** @noSelf **/
  GetEulerAngles(path: TweakDBID, defaultValue: EulerAngles): EulerAngles
  /** @noSelf **/
  GetEulerAnglesArray(path: TweakDBID): EulerAngles[]
  /** @noSelf **/
  GetEulerAnglesDefault(path: TweakDBID): EulerAngles
  /** @noSelf **/
  GetEulerAnglesArrayDefault(path: TweakDBID): EulerAngles[]
  /** @noSelf **/
  GetQuaternion(path: TweakDBID, defaultValue: Quaternion): Quaternion
  /** @noSelf **/
  GetQuaternionArray(path: TweakDBID): Quaternion[]
  /** @noSelf **/
  GetQuaternionDefault(path: TweakDBID): Quaternion
  /** @noSelf **/
  GetQuaternionArrayDefault(path: TweakDBID): Quaternion[]
  /** @noSelf **/
  GetResRef(path: TweakDBID, defaultValue: ResRef): ResRef
  /** @noSelf **/
  GetResRefArray(path: TweakDBID): ResRef[]
  /** @noSelf **/
  GetResRefDefault(path: TweakDBID): ResRef
  /** @noSelf **/
  GetResRefArrayDefault(path: TweakDBID): ResRef[]
  /** @noSelf **/
  GetAIAbilityCondRecord(path: TweakDBID): AIAbilityCond_Record
  /** @noSelf **/
  GetAIActionRecord(path: TweakDBID): AIAction_Record
  /** @noSelf **/
  GetAIActionANDRecord(path: TweakDBID): AIActionAND_Record
  /** @noSelf **/
  GetAIActionAnimDataRecord(path: TweakDBID): AIActionAnimData_Record
  /** @noSelf **/
  GetAIActionAnimDirectionRecord(path: TweakDBID): AIActionAnimDirection_Record
  /** @noSelf **/
  GetAIActionAnimSlotRecord(path: TweakDBID): AIActionAnimSlot_Record
  /** @noSelf **/
  GetAIActionChangeNPCStateRecord(path: TweakDBID): AIActionChangeNPCState_Record
  /** @noSelf **/
  GetAIActionConditionRecord(path: TweakDBID): AIActionCondition_Record
  /** @noSelf **/
  GetAIActionCooldownRecord(path: TweakDBID): AIActionCooldown_Record
  /** @noSelf **/
  GetAIActionLookAtDataRecord(path: TweakDBID): AIActionLookAtData_Record
  /** @noSelf **/
  GetAIActionORRecord(path: TweakDBID): AIActionOR_Record
  /** @noSelf **/
  GetAIActionPhaseRecord(path: TweakDBID): AIActionPhase_Record
  /** @noSelf **/
  GetAIActionSecurityAreaTypeRecord(path: TweakDBID): AIActionSecurityAreaType_Record
  /** @noSelf **/
  GetAIActionSecurityNotificationTypeRecord(path: TweakDBID): AIActionSecurityNotificationType_Record
  /** @noSelf **/
  GetAIActionSelectorRecord(path: TweakDBID): AIActionSelector_Record
  /** @noSelf **/
  GetAIActionSequenceRecord(path: TweakDBID): AIActionSequence_Record
  /** @noSelf **/
  GetAIActionSlideDataRecord(path: TweakDBID): AIActionSlideData_Record
  /** @noSelf **/
  GetAIActionSmartCompositeRecord(path: TweakDBID): AIActionSmartComposite_Record
  /** @noSelf **/
  GetAIActionSubConditionRecord(path: TweakDBID): AIActionSubCondition_Record
  /** @noSelf **/
  GetAIActionTargetRecord(path: TweakDBID): AIActionTarget_Record
  /** @noSelf **/
  GetAIActionTicketRecord(path: TweakDBID): AIActionTicket_Record
  /** @noSelf **/
  GetAIActionTypeRecord(path: TweakDBID): AIActionType_Record
  /** @noSelf **/
  GetAIAdditionalTraceTypeRecord(path: TweakDBID): AIAdditionalTraceType_Record
  /** @noSelf **/
  GetAIAffiliationCondRecord(path: TweakDBID): AIAffiliationCond_Record
  /** @noSelf **/
  GetAIAmmoCountCondRecord(path: TweakDBID): AIAmmoCountCond_Record
  /** @noSelf **/
  GetAIBlockCountCondRecord(path: TweakDBID): AIBlockCountCond_Record
  /** @noSelf **/
  GetAICalculateLineOfSightVectorRecord(path: TweakDBID): AICalculateLineOfSightVector_Record
  /** @noSelf **/
  GetAICalculatePathCondRecord(path: TweakDBID): AICalculatePathCond_Record
  /** @noSelf **/
  GetAICommandRecord(path: TweakDBID): AICommand_Record
  /** @noSelf **/
  GetAICommandCondRecord(path: TweakDBID): AICommandCond_Record
  /** @noSelf **/
  GetAICooldownCondRecord(path: TweakDBID): AICooldownCond_Record
  /** @noSelf **/
  GetAICoverCondRecord(path: TweakDBID): AICoverCond_Record
  /** @noSelf **/
  GetAIDirectorEntryStartTypeRecord(path: TweakDBID): AIDirectorEntryStartType_Record
  /** @noSelf **/
  GetAIDirectorScheduleRecord(path: TweakDBID): AIDirectorSchedule_Record
  /** @noSelf **/
  GetAIDirectorScheduleEntryRecord(path: TweakDBID): AIDirectorScheduleEntry_Record
  /** @noSelf **/
  GetAIDirectorSchedulePlanRecord(path: TweakDBID): AIDirectorSchedulePlan_Record
  /** @noSelf **/
  GetAIDirectorSchedulePlanEnemyEntryRecord(path: TweakDBID): AIDirectorSchedulePlanEnemyEntry_Record
  /** @noSelf **/
  GetAIDirectorScheduleSpawningDescRecord(path: TweakDBID): AIDirectorScheduleSpawningDesc_Record
  /** @noSelf **/
  GetAIDodgeCountCondRecord(path: TweakDBID): AIDodgeCountCond_Record
  /** @noSelf **/
  GetAIDriverCondRecord(path: TweakDBID): AIDriverCond_Record
  /** @noSelf **/
  GetAIExposureMethodTypeRecord(path: TweakDBID): AIExposureMethodType_Record
  /** @noSelf **/
  GetAIExtendTargetCirclingCondRecord(path: TweakDBID): AIExtendTargetCirclingCond_Record
  /** @noSelf **/
  GetAIFriendlyFireCondRecord(path: TweakDBID): AIFriendlyFireCond_Record
  /** @noSelf **/
  GetAIGoToCoverCondRecord(path: TweakDBID): AIGoToCoverCond_Record
  /** @noSelf **/
  GetAIHasWeaponRecord(path: TweakDBID): AIHasWeapon_Record
  /** @noSelf **/
  GetAIHitCondRecord(path: TweakDBID): AIHitCond_Record
  /** @noSelf **/
  GetAIInTacticPositionCondRecord(path: TweakDBID): AIInTacticPositionCond_Record
  /** @noSelf **/
  GetAIIsInActiveCameraCondRecord(path: TweakDBID): AIIsInActiveCameraCond_Record
  /** @noSelf **/
  GetAIIsOnNavmeshCondRecord(path: TweakDBID): AIIsOnNavmeshCond_Record
  /** @noSelf **/
  GetAIItemCondRecord(path: TweakDBID): AIItemCond_Record
  /** @noSelf **/
  GetAILookAtCondRecord(path: TweakDBID): AILookAtCond_Record
  /** @noSelf **/
  GetAIMovementCondRecord(path: TweakDBID): AIMovementCond_Record
  /** @noSelf **/
  GetAINPCTypeCondRecord(path: TweakDBID): AINPCTypeCond_Record
  /** @noSelf **/
  GetAINodeRecord(path: TweakDBID): AINode_Record
  /** @noSelf **/
  GetAINodeMapRecord(path: TweakDBID): AINodeMap_Record
  /** @noSelf **/
  GetAINodeMapFieldRecord(path: TweakDBID): AINodeMapField_Record
  /** @noSelf **/
  GetAIOptimalDistanceCondRecord(path: TweakDBID): AIOptimalDistanceCond_Record
  /** @noSelf **/
  GetAIPatternRecord(path: TweakDBID): AIPattern_Record
  /** @noSelf **/
  GetAIPatternDelayRecord(path: TweakDBID): AIPatternDelay_Record
  /** @noSelf **/
  GetAIPatternsPackageRecord(path: TweakDBID): AIPatternsPackage_Record
  /** @noSelf **/
  GetAIPreviousAttackCondRecord(path: TweakDBID): AIPreviousAttackCond_Record
  /** @noSelf **/
  GetAIReactionCondRecord(path: TweakDBID): AIReactionCond_Record
  /** @noSelf **/
  GetAIRecordRecord(path: TweakDBID): AIRecord_Record
  /** @noSelf **/
  GetAIRestrictedMovementAreaCondRecord(path: TweakDBID): AIRestrictedMovementAreaCond_Record
  /** @noSelf **/
  GetAIRingTicketRecord(path: TweakDBID): AIRingTicket_Record
  /** @noSelf **/
  GetAIRingTypeRecord(path: TweakDBID): AIRingType_Record
  /** @noSelf **/
  GetAIRoleRecord(path: TweakDBID): AIRole_Record
  /** @noSelf **/
  GetAISectorTypeRecord(path: TweakDBID): AISectorType_Record
  /** @noSelf **/
  GetAISecurityCondRecord(path: TweakDBID): AISecurityCond_Record
  /** @noSelf **/
  GetAISignalCondRecord(path: TweakDBID): AISignalCond_Record
  /** @noSelf **/
  GetAISlotCondRecord(path: TweakDBID): AISlotCond_Record
  /** @noSelf **/
  GetAISmartCompositeTypeRecord(path: TweakDBID): AISmartCompositeType_Record
  /** @noSelf **/
  GetAISpatialCondRecord(path: TweakDBID): AISpatialCond_Record
  /** @noSelf **/
  GetAISquadANDConditionRecord(path: TweakDBID): AISquadANDCondition_Record
  /** @noSelf **/
  GetAISquadAvoidLastFilterRecord(path: TweakDBID): AISquadAvoidLastFilter_Record
  /** @noSelf **/
  GetAISquadClosestToSectorCheckRecord(path: TweakDBID): AISquadClosestToSectorCheck_Record
  /** @noSelf **/
  GetAISquadClosestToTargetCheckRecord(path: TweakDBID): AISquadClosestToTargetCheck_Record
  /** @noSelf **/
  GetAISquadCondRecord(path: TweakDBID): AISquadCond_Record
  /** @noSelf **/
  GetAISquadContainsSelfCheckRecord(path: TweakDBID): AISquadContainsSelfCheck_Record
  /** @noSelf **/
  GetAISquadDistanceRelationToSectorCheckRecord(path: TweakDBID): AISquadDistanceRelationToSectorCheck_Record
  /** @noSelf **/
  GetAISquadDistanceRelationToTargetCheckRecord(path: TweakDBID): AISquadDistanceRelationToTargetCheck_Record
  /** @noSelf **/
  GetAISquadFilterByAIConditionRecord(path: TweakDBID): AISquadFilterByAICondition_Record
  /** @noSelf **/
  GetAISquadFilterOwnTargetSpottedRecord(path: TweakDBID): AISquadFilterOwnTargetSpotted_Record
  /** @noSelf **/
  GetAISquadFurthestToSectorCheckRecord(path: TweakDBID): AISquadFurthestToSectorCheck_Record
  /** @noSelf **/
  GetAISquadFurthestToTargetCheckRecord(path: TweakDBID): AISquadFurthestToTargetCheck_Record
  /** @noSelf **/
  GetAISquadInSectorFilterRecord(path: TweakDBID): AISquadInSectorFilter_Record
  /** @noSelf **/
  GetAISquadItemCategoryPriorityFilterRecord(path: TweakDBID): AISquadItemCategoryPriorityFilter_Record
  /** @noSelf **/
  GetAISquadItemPriorityFilterRecord(path: TweakDBID): AISquadItemPriorityFilter_Record
  /** @noSelf **/
  GetAISquadItemTypePriorityFilterRecord(path: TweakDBID): AISquadItemTypePriorityFilter_Record
  /** @noSelf **/
  GetAISquadJustSelfFilterRecord(path: TweakDBID): AISquadJustSelfFilter_Record
  /** @noSelf **/
  GetAISquadMembersAmountCheckRecord(path: TweakDBID): AISquadMembersAmountCheck_Record
  /** @noSelf **/
  GetAISquadORConditionRecord(path: TweakDBID): AISquadORCondition_Record
  /** @noSelf **/
  GetAISquadParamsRecord(path: TweakDBID): AISquadParams_Record
  /** @noSelf **/
  GetAISquadSpatialForOwnTargetRecord(path: TweakDBID): AISquadSpatialForOwnTarget_Record
  /** @noSelf **/
  GetAISquadTypeRecord(path: TweakDBID): AISquadType_Record
  /** @noSelf **/
  GetAIStatPoolCondRecord(path: TweakDBID): AIStatPoolCond_Record
  /** @noSelf **/
  GetAIStateCondRecord(path: TweakDBID): AIStateCond_Record
  /** @noSelf **/
  GetAIStatusEffectCondRecord(path: TweakDBID): AIStatusEffectCond_Record
  /** @noSelf **/
  GetAISubActionRecord(path: TweakDBID): AISubAction_Record
  /** @noSelf **/
  GetAISubActionActivateLightPresetRecord(path: TweakDBID): AISubActionActivateLightPreset_Record
  /** @noSelf **/
  GetAISubActionActivateStrongArmsFXRecord(path: TweakDBID): AISubActionActivateStrongArmsFX_Record
  /** @noSelf **/
  GetAISubActionAddFactRecord(path: TweakDBID): AISubActionAddFact_Record
  /** @noSelf **/
  GetAISubActionApplyTimeDilationRecord(path: TweakDBID): AISubActionApplyTimeDilation_Record
  /** @noSelf **/
  GetAISubActionAttackWithWeaponRecord(path: TweakDBID): AISubActionAttackWithWeapon_Record
  /** @noSelf **/
  GetAISubActionCallReinforcementsRecord(path: TweakDBID): AISubActionCallReinforcements_Record
  /** @noSelf **/
  GetAISubActionCallSquadSearchBackUpRecord(path: TweakDBID): AISubActionCallSquadSearchBackUp_Record
  /** @noSelf **/
  GetAISubActionChangeAttitudeRecord(path: TweakDBID): AISubActionChangeAttitude_Record
  /** @noSelf **/
  GetAISubActionChangeCoverSelectionPresetRecord(path: TweakDBID): AISubActionChangeCoverSelectionPreset_Record
  /** @noSelf **/
  GetAISubActionCharacterRecordEquipRecord(path: TweakDBID): AISubActionCharacterRecordEquip_Record
  /** @noSelf **/
  GetAISubActionCharacterRecordUnequipRecord(path: TweakDBID): AISubActionCharacterRecordUnequip_Record
  /** @noSelf **/
  GetAISubActionCompleteCommandRecord(path: TweakDBID): AISubActionCompleteCommand_Record
  /** @noSelf **/
  GetAISubActionConditionalFailureRecord(path: TweakDBID): AISubActionConditionalFailure_Record
  /** @noSelf **/
  GetAISubActionCoverRecord(path: TweakDBID): AISubActionCover_Record
  /** @noSelf **/
  GetAISubActionCreateGameEffectRecord(path: TweakDBID): AISubActionCreateGameEffect_Record
  /** @noSelf **/
  GetAISubActionCustomEffectorsRecord(path: TweakDBID): AISubActionCustomEffectors_Record
  /** @noSelf **/
  GetAISubActionDisableAimAssistRecord(path: TweakDBID): AISubActionDisableAimAssist_Record
  /** @noSelf **/
  GetAISubActionDisableColliderRecord(path: TweakDBID): AISubActionDisableCollider_Record
  /** @noSelf **/
  GetAISubActionDroneModifyAltitudeRecord(path: TweakDBID): AISubActionDroneModifyAltitude_Record
  /** @noSelf **/
  GetAISubActionEquipOnBodyRecord(path: TweakDBID): AISubActionEquipOnBody_Record
  /** @noSelf **/
  GetAISubActionEquipOnSlotRecord(path: TweakDBID): AISubActionEquipOnSlot_Record
  /** @noSelf **/
  GetAISubActionFailRecord(path: TweakDBID): AISubActionFail_Record
  /** @noSelf **/
  GetAISubActionFailIfFriendlyFireRecord(path: TweakDBID): AISubActionFailIfFriendlyFire_Record
  /** @noSelf **/
  GetAISubActionFastExitWorkspotRecord(path: TweakDBID): AISubActionFastExitWorkspot_Record
  /** @noSelf **/
  GetAISubActionForceDeathRecord(path: TweakDBID): AISubActionForceDeath_Record
  /** @noSelf **/
  GetAISubActionForceEquipRecord(path: TweakDBID): AISubActionForceEquip_Record
  /** @noSelf **/
  GetAISubActionForceHitReactionRecord(path: TweakDBID): AISubActionForceHitReaction_Record
  /** @noSelf **/
  GetAISubActionForceUnequipRecord(path: TweakDBID): AISubActionForceUnequip_Record
  /** @noSelf **/
  GetAISubActionGameplayLogicPackageRecord(path: TweakDBID): AISubActionGameplayLogicPackage_Record
  /** @noSelf **/
  GetAISubActionGeneratePointOfInterestTargetRecord(path: TweakDBID): AISubActionGeneratePointOfInterestTarget_Record
  /** @noSelf **/
  GetAISubActionHitDataRecord(path: TweakDBID): AISubActionHitData_Record
  /** @noSelf **/
  GetAISubActionInitialReactionRecord(path: TweakDBID): AISubActionInitialReaction_Record
  /** @noSelf **/
  GetAISubActionLeaveCoverRecord(path: TweakDBID): AISubActionLeaveCover_Record
  /** @noSelf **/
  GetAISubActionMeleeAttackAttemptEventRecord(path: TweakDBID): AISubActionMeleeAttackAttemptEvent_Record
  /** @noSelf **/
  GetAISubActionMeleeAttackManagerRecord(path: TweakDBID): AISubActionMeleeAttackManager_Record
  /** @noSelf **/
  GetAISubActionMissileRainCircularRecord(path: TweakDBID): AISubActionMissileRainCircular_Record
  /** @noSelf **/
  GetAISubActionMissileRainGridRecord(path: TweakDBID): AISubActionMissileRainGrid_Record
  /** @noSelf **/
  GetAISubActionModifyStatPoolRecord(path: TweakDBID): AISubActionModifyStatPool_Record
  /** @noSelf **/
  GetAISubActionMountVehicleRecord(path: TweakDBID): AISubActionMountVehicle_Record
  /** @noSelf **/
  GetAISubActionPlaySoundRecord(path: TweakDBID): AISubActionPlaySound_Record
  /** @noSelf **/
  GetAISubActionPlayVoiceOverRecord(path: TweakDBID): AISubActionPlayVoiceOver_Record
  /** @noSelf **/
  GetAISubActionQueueAIEventRecord(path: TweakDBID): AISubActionQueueAIEvent_Record
  /** @noSelf **/
  GetAISubActionQueueCommunicationEventRecord(path: TweakDBID): AISubActionQueueCommunicationEvent_Record
  /** @noSelf **/
  GetAISubActionQuickHackRecord(path: TweakDBID): AISubActionQuickHack_Record
  /** @noSelf **/
  GetAISubActionRandomizeRecord(path: TweakDBID): AISubActionRandomize_Record
  /** @noSelf **/
  GetAISubActionRegisterActionNameRecord(path: TweakDBID): AISubActionRegisterActionName_Record
  /** @noSelf **/
  GetAISubActionReloadWeaponRecord(path: TweakDBID): AISubActionReloadWeapon_Record
  /** @noSelf **/
  GetAISubActionScaleDurationWithDistanceRecord(path: TweakDBID): AISubActionScaleDurationWithDistance_Record
  /** @noSelf **/
  GetAISubActionSecuritySystemNotificationRecord(path: TweakDBID): AISubActionSecuritySystemNotification_Record
  /** @noSelf **/
  GetAISubActionSendSignalRecord(path: TweakDBID): AISubActionSendSignal_Record
  /** @noSelf **/
  GetAISubActionSetEquipPrimaryWeaponsRecord(path: TweakDBID): AISubActionSetEquipPrimaryWeapons_Record
  /** @noSelf **/
  GetAISubActionSetEquipSecondaryWeaponsRecord(path: TweakDBID): AISubActionSetEquipSecondaryWeapons_Record
  /** @noSelf **/
  GetAISubActionSetInfluenceMapRecord(path: TweakDBID): AISubActionSetInfluenceMap_Record
  /** @noSelf **/
  GetAISubActionSetIntRecord(path: TweakDBID): AISubActionSetInt_Record
  /** @noSelf **/
  GetAISubActionSetItemAsTargetRecord(path: TweakDBID): AISubActionSetItemAsTarget_Record
  /** @noSelf **/
  GetAISubActionSetStimSourceRecord(path: TweakDBID): AISubActionSetStimSource_Record
  /** @noSelf **/
  GetAISubActionSetTargetByTagRecord(path: TweakDBID): AISubActionSetTargetByTag_Record
  /** @noSelf **/
  GetAISubActionSetUnequipPrimaryWeaponsRecord(path: TweakDBID): AISubActionSetUnequipPrimaryWeapons_Record
  /** @noSelf **/
  GetAISubActionSetUnequipSecondaryWeaponsRecord(path: TweakDBID): AISubActionSetUnequipSecondaryWeapons_Record
  /** @noSelf **/
  GetAISubActionSetWaypointByTagRecord(path: TweakDBID): AISubActionSetWaypointByTag_Record
  /** @noSelf **/
  GetAISubActionSetWorldPositionRecord(path: TweakDBID): AISubActionSetWorldPosition_Record
  /** @noSelf **/
  GetAISubActionShootToPointRecord(path: TweakDBID): AISubActionShootToPoint_Record
  /** @noSelf **/
  GetAISubActionShootWithWeaponRecord(path: TweakDBID): AISubActionShootWithWeapon_Record
  /** @noSelf **/
  GetAISubActionSpawnFXRecord(path: TweakDBID): AISubActionSpawnFX_Record
  /** @noSelf **/
  GetAISubActionSquadSyncRecord(path: TweakDBID): AISubActionSquadSync_Record
  /** @noSelf **/
  GetAISubActionStartCooldownRecord(path: TweakDBID): AISubActionStartCooldown_Record
  /** @noSelf **/
  GetAISubActionStatusEffectRecord(path: TweakDBID): AISubActionStatusEffect_Record
  /** @noSelf **/
  GetAISubActionThrowItemRecord(path: TweakDBID): AISubActionThrowItem_Record
  /** @noSelf **/
  GetAISubActionTriggerItemActivationRecord(path: TweakDBID): AISubActionTriggerItemActivation_Record
  /** @noSelf **/
  GetAISubActionTriggerStimRecord(path: TweakDBID): AISubActionTriggerStim_Record
  /** @noSelf **/
  GetAISubActionUnequipOnSlotRecord(path: TweakDBID): AISubActionUnequipOnSlot_Record
  /** @noSelf **/
  GetAISubActionUpdateFriendlyFireParamsRecord(path: TweakDBID): AISubActionUpdateFriendlyFireParams_Record
  /** @noSelf **/
  GetAISubActionUseSensePresetRecord(path: TweakDBID): AISubActionUseSensePreset_Record
  /** @noSelf **/
  GetAISubActionWorkspotRecord(path: TweakDBID): AISubActionWorkspot_Record
  /** @noSelf **/
  GetAITacticTicketRecord(path: TweakDBID): AITacticTicket_Record
  /** @noSelf **/
  GetAITacticTypeRecord(path: TweakDBID): AITacticType_Record
  /** @noSelf **/
  GetAITargetCondRecord(path: TweakDBID): AITargetCond_Record
  /** @noSelf **/
  GetAIThrowCondRecord(path: TweakDBID): AIThrowCond_Record
  /** @noSelf **/
  GetAITicketRecord(path: TweakDBID): AITicket_Record
  /** @noSelf **/
  GetAITicketCheckRecord(path: TweakDBID): AITicketCheck_Record
  /** @noSelf **/
  GetAITicketConditionRecord(path: TweakDBID): AITicketCondition_Record
  /** @noSelf **/
  GetAITicketFilterRecord(path: TweakDBID): AITicketFilter_Record
  /** @noSelf **/
  GetAITicketTypeRecord(path: TweakDBID): AITicketType_Record
  /** @noSelf **/
  GetAITresspassingCondRecord(path: TweakDBID): AITresspassingCond_Record
  /** @noSelf **/
  GetAIValidCoversCondRecord(path: TweakDBID): AIValidCoversCond_Record
  /** @noSelf **/
  GetAIVehicleCondRecord(path: TweakDBID): AIVehicleCond_Record
  /** @noSelf **/
  GetAIVelocitiesDotCondRecord(path: TweakDBID): AIVelocitiesDotCond_Record
  /** @noSelf **/
  GetAIVelocityCondRecord(path: TweakDBID): AIVelocityCond_Record
  /** @noSelf **/
  GetAIVelocityDotCondRecord(path: TweakDBID): AIVelocityDotCond_Record
  /** @noSelf **/
  GetAIWeakSpotCondRecord(path: TweakDBID): AIWeakSpotCond_Record
  /** @noSelf **/
  GetAIWeaponLockedOnTargetCondRecord(path: TweakDBID): AIWeaponLockedOnTargetCond_Record
  /** @noSelf **/
  GetAIWorkspotCondRecord(path: TweakDBID): AIWorkspotCond_Record
  /** @noSelf **/
  GetAbsoluteZLimiterCoverSelectionParametersRecord(path: TweakDBID): AbsoluteZLimiterCoverSelectionParameters_Record
  /** @noSelf **/
  GetAccelerateTowardsParametersRecord(path: TweakDBID): AccelerateTowardsParameters_Record
  /** @noSelf **/
  GetAccuracyRecord(path: TweakDBID): Accuracy_Record
  /** @noSelf **/
  GetAchievementRecord(path: TweakDBID): Achievement_Record
  /** @noSelf **/
  GetActionMapRecord(path: TweakDBID): ActionMap_Record
  /** @noSelf **/
  GetActionMapFieldRecord(path: TweakDBID): ActionMapField_Record
  /** @noSelf **/
  GetActionPaymentRecord(path: TweakDBID): ActionPayment_Record
  /** @noSelf **/
  GetActionRestrictionGroupRecord(path: TweakDBID): ActionRestrictionGroup_Record
  /** @noSelf **/
  GetActionTargetPrereqRecord(path: TweakDBID): ActionTargetPrereq_Record
  /** @noSelf **/
  GetActionWidgetDefinitionRecord(path: TweakDBID): ActionWidgetDefinition_Record
  /** @noSelf **/
  GetAddItemsEffectorRecord(path: TweakDBID): AddItemsEffector_Record
  /** @noSelf **/
  GetAddStatusEffectToAttackEffectorRecord(path: TweakDBID): AddStatusEffectToAttackEffector_Record
  /** @noSelf **/
  GetAdvertisementRecord(path: TweakDBID): Advertisement_Record
  /** @noSelf **/
  GetAdvertisementFormatDefRecord(path: TweakDBID): AdvertisementFormatDef_Record
  /** @noSelf **/
  GetAdvertisementFormatsEnumRecord(path: TweakDBID): AdvertisementFormatsEnum_Record
  /** @noSelf **/
  GetAdvertisementGroupRecord(path: TweakDBID): AdvertisementGroup_Record
  /** @noSelf **/
  GetAffiliationRecord(path: TweakDBID): Affiliation_Record
  /** @noSelf **/
  GetAimAssistAimSnapRecord(path: TweakDBID): AimAssistAimSnap_Record
  /** @noSelf **/
  GetAimAssistBulletMagnetismRecord(path: TweakDBID): AimAssistBulletMagnetism_Record
  /** @noSelf **/
  GetAimAssistCommonRecord(path: TweakDBID): AimAssistCommon_Record
  /** @noSelf **/
  GetAimAssistConfigPresetRecord(path: TweakDBID): AimAssistConfigPreset_Record
  /** @noSelf **/
  GetAimAssistFinishingRecord(path: TweakDBID): AimAssistFinishing_Record
  /** @noSelf **/
  GetAimAssistMagnetismRecord(path: TweakDBID): AimAssistMagnetism_Record
  /** @noSelf **/
  GetAimAssistMeleeRecord(path: TweakDBID): AimAssistMelee_Record
  /** @noSelf **/
  GetAimAssistSettingsRecord(path: TweakDBID): AimAssistSettings_Record
  /** @noSelf **/
  GetAimAssistTargetDataRecord(path: TweakDBID): AimAssistTargetData_Record
  /** @noSelf **/
  GetAimAssistTypeRecord(path: TweakDBID): AimAssistType_Record
  /** @noSelf **/
  GetAngleDistanceCoverSelectionParametersRecord(path: TweakDBID): AngleDistanceCoverSelectionParameters_Record
  /** @noSelf **/
  GetAngleRangeRecord(path: TweakDBID): AngleRange_Record
  /** @noSelf **/
  GetAppearanceRecord(path: TweakDBID): Appearance_Record
  /** @noSelf **/
  GetApperanceToEthnicitiesRecord(path: TweakDBID): ApperanceToEthnicities_Record
  /** @noSelf **/
  GetApperanceToEthnicitiesMapRecord(path: TweakDBID): ApperanceToEthnicitiesMap_Record
  /** @noSelf **/
  GetApplyEffectorEffectorRecord(path: TweakDBID): ApplyEffectorEffector_Record
  /** @noSelf **/
  GetApplyLightPresetEffectorRecord(path: TweakDBID): ApplyLightPresetEffector_Record
  /** @noSelf **/
  GetApplyStatGroupEffectorRecord(path: TweakDBID): ApplyStatGroupEffector_Record
  /** @noSelf **/
  GetApplyStatusEffectEffectorRecord(path: TweakDBID): ApplyStatusEffectEffector_Record
  /** @noSelf **/
  GetArchetypeDataRecord(path: TweakDBID): ArchetypeData_Record
  /** @noSelf **/
  GetArchetypeTypeRecord(path: TweakDBID): ArchetypeType_Record
  /** @noSelf **/
  GetAttachableObjectRecord(path: TweakDBID): AttachableObject_Record
  /** @noSelf **/
  GetAttachmentSlotRecord(path: TweakDBID): AttachmentSlot_Record
  /** @noSelf **/
  GetAttackRecord(path: TweakDBID): Attack_Record
  /** @noSelf **/
  GetAttackDirectionRecord(path: TweakDBID): AttackDirection_Record
  /** @noSelf **/
  GetAttackSubtypeRecord(path: TweakDBID): AttackSubtype_Record
  /** @noSelf **/
  GetAttackTypeRecord(path: TweakDBID): AttackType_Record
  /** @noSelf **/
  GetAttack_GameEffectRecord(path: TweakDBID): Attack_GameEffect_Record
  /** @noSelf **/
  GetAttack_LandingRecord(path: TweakDBID): Attack_Landing_Record
  /** @noSelf **/
  GetAttack_MeleeRecord(path: TweakDBID): Attack_Melee_Record
  /** @noSelf **/
  GetAttack_ProjectileRecord(path: TweakDBID): Attack_Projectile_Record
  /** @noSelf **/
  GetAttitudeRecord(path: TweakDBID): Attitude_Record
  /** @noSelf **/
  GetAttitudeGroupRecord(path: TweakDBID): AttitudeGroup_Record
  /** @noSelf **/
  GetAttributeRecord(path: TweakDBID): Attribute_Record
  /** @noSelf **/
  GetAvoidLineOfSightSelectionParametersRecord(path: TweakDBID): AvoidLineOfSightSelectionParameters_Record
  /** @noSelf **/
  GetBaseDrivingParametersRecord(path: TweakDBID): BaseDrivingParameters_Record
  /** @noSelf **/
  GetBaseObjectRecord(path: TweakDBID): BaseObject_Record
  /** @noSelf **/
  GetBaseSignRecord(path: TweakDBID): BaseSign_Record
  /** @noSelf **/
  GetBase_MappinDefinitionRecord(path: TweakDBID): Base_MappinDefinition_Record
  /** @noSelf **/
  GetBounceRecord(path: TweakDBID): Bounce_Record
  /** @noSelf **/
  GetBountyRecord(path: TweakDBID): Bounty_Record
  /** @noSelf **/
  GetBountyDrawTableRecord(path: TweakDBID): BountyDrawTable_Record
  /** @noSelf **/
  GetBoxRecord(path: TweakDBID): Box_Record
  /** @noSelf **/
  GetBuildAttributeRecord(path: TweakDBID): BuildAttribute_Record
  /** @noSelf **/
  GetBuildAttributeSetRecord(path: TweakDBID): BuildAttributeSet_Record
  /** @noSelf **/
  GetBuildCyberwareRecord(path: TweakDBID): BuildCyberware_Record
  /** @noSelf **/
  GetBuildCyberwareSetRecord(path: TweakDBID): BuildCyberwareSet_Record
  /** @noSelf **/
  GetBuildEquipmentRecord(path: TweakDBID): BuildEquipment_Record
  /** @noSelf **/
  GetBuildEquipmentSetRecord(path: TweakDBID): BuildEquipmentSet_Record
  /** @noSelf **/
  GetBuildPerkRecord(path: TweakDBID): BuildPerk_Record
  /** @noSelf **/
  GetBuildPerkSetRecord(path: TweakDBID): BuildPerkSet_Record
  /** @noSelf **/
  GetBuildProficiencyRecord(path: TweakDBID): BuildProficiency_Record
  /** @noSelf **/
  GetBuildProficiencySetRecord(path: TweakDBID): BuildProficiencySet_Record
  /** @noSelf **/
  GetCPOItemCategoryBaseRecord(path: TweakDBID): CPOItemCategoryBase_Record
  /** @noSelf **/
  GetCPOLoadoutBaseRecord(path: TweakDBID): CPOLoadoutBase_Record
  /** @noSelf **/
  GetCarriableObjectRecord(path: TweakDBID): CarriableObject_Record
  /** @noSelf **/
  GetChannelDataRecord(path: TweakDBID): ChannelData_Record
  /** @noSelf **/
  GetCharacterRecord(path: TweakDBID): Character_Record
  /** @noSelf **/
  GetCharacterEntryRecord(path: TweakDBID): CharacterEntry_Record
  /** @noSelf **/
  GetCharacterListRecord(path: TweakDBID): CharacterList_Record
  /** @noSelf **/
  GetChatterHelperRadiusRecord(path: TweakDBID): ChatterHelperRadius_Record
  /** @noSelf **/
  GetChoiceCaptionIconPartRecord(path: TweakDBID): ChoiceCaptionIconPart_Record
  /** @noSelf **/
  GetChoiceCaptionPartRecord(path: TweakDBID): ChoiceCaptionPart_Record
  /** @noSelf **/
  GetChoiceCaptionPartTypeRecord(path: TweakDBID): ChoiceCaptionPartType_Record
  /** @noSelf **/
  GetChoiceCaptionTagPartRecord(path: TweakDBID): ChoiceCaptionTagPart_Record
  /** @noSelf **/
  GetClearLineOfSightCoverSelectionParametersRecord(path: TweakDBID): ClearLineOfSightCoverSelectionParameters_Record
  /** @noSelf **/
  GetClosestToOwnerCoverSelectionParametersRecord(path: TweakDBID): ClosestToOwnerCoverSelectionParameters_Record
  /** @noSelf **/
  GetClothingRecord(path: TweakDBID): Clothing_Record
  /** @noSelf **/
  GetClothing_inline0Record(path: TweakDBID): Clothing_inline0_Record
  /** @noSelf **/
  GetClothing_inline1Record(path: TweakDBID): Clothing_inline1_Record
  /** @noSelf **/
  GetCodexRecord(path: TweakDBID): Codex_Record
  /** @noSelf **/
  GetCodexRecordRecord(path: TweakDBID): CodexRecord_Record
  /** @noSelf **/
  GetCodexRecordPartRecord(path: TweakDBID): CodexRecordPart_Record
  /** @noSelf **/
  GetCombinedStatModifierRecord(path: TweakDBID): CombinedStatModifier_Record
  /** @noSelf **/
  GetCompanionDistancePresetRecord(path: TweakDBID): CompanionDistancePreset_Record
  /** @noSelf **/
  GetCompoundSelectionPresetRecord(path: TweakDBID): CompoundSelectionPreset_Record
  /** @noSelf **/
  GetComputerScreenTypeRecord(path: TweakDBID): ComputerScreenType_Record
  /** @noSelf **/
  GetConeRecord(path: TweakDBID): Cone_Record
  /** @noSelf **/
  GetConstantStatModifierRecord(path: TweakDBID): ConstantStatModifier_Record
  /** @noSelf **/
  GetConsumableBaseNameRecord(path: TweakDBID): ConsumableBaseName_Record
  /** @noSelf **/
  GetConsumableItemRecord(path: TweakDBID): ConsumableItem_Record
  /** @noSelf **/
  GetConsumableTypeRecord(path: TweakDBID): ConsumableType_Record
  /** @noSelf **/
  GetContentAssignmentRecord(path: TweakDBID): ContentAssignment_Record
  /** @noSelf **/
  GetContinuousAttackEffectorRecord(path: TweakDBID): ContinuousAttackEffector_Record
  /** @noSelf **/
  GetContinuousEffectorRecord(path: TweakDBID): ContinuousEffector_Record
  /** @noSelf **/
  GetCooldownRecord(path: TweakDBID): Cooldown_Record
  /** @noSelf **/
  GetCooldownTypeRecord(path: TweakDBID): CooldownType_Record
  /** @noSelf **/
  GetCoverHealthCoverSelectionParametersRecord(path: TweakDBID): CoverHealthCoverSelectionParameters_Record
  /** @noSelf **/
  GetCoverSelectionParametersRecord(path: TweakDBID): CoverSelectionParameters_Record
  /** @noSelf **/
  GetCoverSelectionPresetRecord(path: TweakDBID): CoverSelectionPreset_Record
  /** @noSelf **/
  GetCoverTypeCoverSelectionParametersRecord(path: TweakDBID): CoverTypeCoverSelectionParameters_Record
  /** @noSelf **/
  GetCrackActionRecord(path: TweakDBID): CrackAction_Record
  /** @noSelf **/
  GetCraftableRecord(path: TweakDBID): Craftable_Record
  /** @noSelf **/
  GetCraftingPackageRecord(path: TweakDBID): CraftingPackage_Record
  /** @noSelf **/
  GetCraftingResultRecord(path: TweakDBID): CraftingResult_Record
  /** @noSelf **/
  GetCrosshairRecord(path: TweakDBID): Crosshair_Record
  /** @noSelf **/
  GetCrowdSettingsPackageBaseRecord(path: TweakDBID): CrowdSettingsPackageBase_Record
  /** @noSelf **/
  GetCrowdSlotMovementPatternBaseRecord(path: TweakDBID): CrowdSlotMovementPatternBase_Record
  /** @noSelf **/
  GetCrowdSlotMovementSettingsBaseRecord(path: TweakDBID): CrowdSlotMovementSettingsBase_Record
  /** @noSelf **/
  GetCurrencyRewardRecord(path: TweakDBID): CurrencyReward_Record
  /** @noSelf **/
  GetCurrencyReward_inline0Record(path: TweakDBID): CurrencyReward_inline0_Record
  /** @noSelf **/
  GetCurveRecord(path: TweakDBID): Curve_Record
  /** @noSelf **/
  GetCurveStatModifierRecord(path: TweakDBID): CurveStatModifier_Record
  /** @noSelf **/
  GetCurvesRecord(path: TweakDBID): Curves_Record
  /** @noSelf **/
  GetCyberwareAreaRecord(path: TweakDBID): CyberwareArea_Record
  /** @noSelf **/
  GetDPadUIDataRecord(path: TweakDBID): DPadUIData_Record
  /** @noSelf **/
  GetDamageTypeRecord(path: TweakDBID): DamageType_Record
  /** @noSelf **/
  GetDefenseModeRecord(path: TweakDBID): DefenseMode_Record
  /** @noSelf **/
  GetDestructibleObjectRecord(path: TweakDBID): DestructibleObject_Record
  /** @noSelf **/
  GetDetectionCurveRecord(path: TweakDBID): DetectionCurve_Record
  /** @noSelf **/
  GetDevelopmentPointRecord(path: TweakDBID): DevelopmentPoint_Record
  /** @noSelf **/
  GetDeviceRecord(path: TweakDBID): Device_Record
  /** @noSelf **/
  GetDeviceAreaAttackRecord(path: TweakDBID): DeviceAreaAttack_Record
  /** @noSelf **/
  GetDeviceContentAssignmentRecord(path: TweakDBID): DeviceContentAssignment_Record
  /** @noSelf **/
  GetDeviceFXRecord(path: TweakDBID): DeviceFX_Record
  /** @noSelf **/
  GetDeviceScreenTypeRecord(path: TweakDBID): DeviceScreenType_Record
  /** @noSelf **/
  GetDeviceUIDefinitionRecord(path: TweakDBID): DeviceUIDefinition_Record
  /** @noSelf **/
  GetDeviceWidgetDefinitionRecord(path: TweakDBID): DeviceWidgetDefinition_Record
  /** @noSelf **/
  GetDisassemblingResultRecord(path: TweakDBID): DisassemblingResult_Record
  /** @noSelf **/
  GetDistanceFromOthersCoverSelectionParametersRecord(path: TweakDBID): DistanceFromOthersCoverSelectionParameters_Record
  /** @noSelf **/
  GetDistrictRecord(path: TweakDBID): District_Record
  /** @noSelf **/
  GetDistrictPreventionDataRecord(path: TweakDBID): DistrictPreventionData_Record
  /** @noSelf **/
  GetDriveHelperRecord(path: TweakDBID): DriveHelper_Record
  /** @noSelf **/
  GetDriveHelperTypeRecord(path: TweakDBID): DriveHelperType_Record
  /** @noSelf **/
  GetDriveWheelsAccelerateNoiseRecord(path: TweakDBID): DriveWheelsAccelerateNoise_Record
  /** @noSelf **/
  GetDroneAnimationSetupRecord(path: TweakDBID): DroneAnimationSetup_Record
  /** @noSelf **/
  GetDynamicDownforceHelperRecord(path: TweakDBID): DynamicDownforceHelper_Record
  /** @noSelf **/
  GetEffectorRecord(path: TweakDBID): Effector_Record
  /** @noSelf **/
  GetEnvLightRecord(path: TweakDBID): EnvLight_Record
  /** @noSelf **/
  GetEquipmentAreaRecord(path: TweakDBID): EquipmentArea_Record
  /** @noSelf **/
  GetEquipmentMovementSoundRecord(path: TweakDBID): EquipmentMovementSound_Record
  /** @noSelf **/
  GetEthnicNamesRecord(path: TweakDBID): EthnicNames_Record
  /** @noSelf **/
  GetEthnicityRecord(path: TweakDBID): Ethnicity_Record
  /** @noSelf **/
  GetFacialPresetRecord(path: TweakDBID): FacialPreset_Record
  /** @noSelf **/
  GetFastTravelBinkDataRecord(path: TweakDBID): FastTravelBinkData_Record
  /** @noSelf **/
  GetFastTravelBinksGroupRecord(path: TweakDBID): FastTravelBinksGroup_Record
  /** @noSelf **/
  GetFastTravelPointRecord(path: TweakDBID): FastTravelPoint_Record
  /** @noSelf **/
  GetFastTravelScreenDataRecord(path: TweakDBID): FastTravelScreenData_Record
  /** @noSelf **/
  GetFastTravelScreenDataGroupRecord(path: TweakDBID): FastTravelScreenDataGroup_Record
  /** @noSelf **/
  GetFocusClueRecord(path: TweakDBID): FocusClue_Record
  /** @noSelf **/
  GetFootstepRecord(path: TweakDBID): Footstep_Record
  /** @noSelf **/
  GetForceDismembermentEffectorRecord(path: TweakDBID): ForceDismembermentEffector_Record
  /** @noSelf **/
  GetFriendlyTargetAngleDistanceCoverSelectionParametersRecord(path: TweakDBID): FriendlyTargetAngleDistanceCoverSelectionParameters_Record
  /** @noSelf **/
  GetFriendlyTargetDistanceCoverSelectionParametersRecord(path: TweakDBID): FriendlyTargetDistanceCoverSelectionParameters_Record
  /** @noSelf **/
  GetFxActionRecord(path: TweakDBID): FxAction_Record
  /** @noSelf **/
  GetFxActionTypeRecord(path: TweakDBID): FxActionType_Record
  /** @noSelf **/
  GetGOGRewardRecord(path: TweakDBID): GOGReward_Record
  /** @noSelf **/
  GetGadgetRecord(path: TweakDBID): Gadget_Record
  /** @noSelf **/
  GetGameplayAbilityRecord(path: TweakDBID): GameplayAbility_Record
  /** @noSelf **/
  GetGameplayAbilityGroupRecord(path: TweakDBID): GameplayAbilityGroup_Record
  /** @noSelf **/
  GetGameplayLogicPackageRecord(path: TweakDBID): GameplayLogicPackage_Record
  /** @noSelf **/
  GetGameplayLogicPackageUIDataRecord(path: TweakDBID): GameplayLogicPackageUIData_Record
  /** @noSelf **/
  GetGameplayRestrictionStatusEffectRecord(path: TweakDBID): GameplayRestrictionStatusEffect_Record
  /** @noSelf **/
  GetGenderRecord(path: TweakDBID): Gender_Record
  /** @noSelf **/
  GetGenderEntityRecord(path: TweakDBID): GenderEntity_Record
  /** @noSelf **/
  GetGenericHighwaySignRecord(path: TweakDBID): GenericHighwaySign_Record
  /** @noSelf **/
  GetGenericMetroSignRecord(path: TweakDBID): GenericMetroSign_Record
  /** @noSelf **/
  GetGenericStreetNameSignRecord(path: TweakDBID): GenericStreetNameSign_Record
  /** @noSelf **/
  GetGrenadeRecord(path: TweakDBID): Grenade_Record
  /** @noSelf **/
  GetGrenadeDeliveryMethodRecord(path: TweakDBID): GrenadeDeliveryMethod_Record
  /** @noSelf **/
  GetGrenadeDeliveryMethodTypeRecord(path: TweakDBID): GrenadeDeliveryMethodType_Record
  /** @noSelf **/
  GetHUD_Preset_EntryRecord(path: TweakDBID): HUD_Preset_Entry_Record
  /** @noSelf **/
  GetHackCategoryRecord(path: TweakDBID): HackCategory_Record
  /** @noSelf **/
  GetHackingMiniGameRecord(path: TweakDBID): HackingMiniGame_Record
  /** @noSelf **/
  GetHandbrakeFrictionModifierRecord(path: TweakDBID): HandbrakeFrictionModifier_Record
  /** @noSelf **/
  GetHitPrereqRecord(path: TweakDBID): HitPrereq_Record
  /** @noSelf **/
  GetHitPrereqConditionRecord(path: TweakDBID): HitPrereqCondition_Record
  /** @noSelf **/
  GetHitPrereqConditionTypeRecord(path: TweakDBID): HitPrereqConditionType_Record
  /** @noSelf **/
  GetHomingGDMRecord(path: TweakDBID): HomingGDM_Record
  /** @noSelf **/
  GetHomingParametersRecord(path: TweakDBID): HomingParameters_Record
  /** @noSelf **/
  GetHudEnhancerRecord(path: TweakDBID): HudEnhancer_Record
  /** @noSelf **/
  GetIPrereqRecord(path: TweakDBID): IPrereq_Record
  /** @noSelf **/
  GetIconsGeneratorContextRecord(path: TweakDBID): IconsGeneratorContext_Record
  /** @noSelf **/
  GetImprovementRelationRecord(path: TweakDBID): ImprovementRelation_Record
  /** @noSelf **/
  GetInAirGravityModifierRecord(path: TweakDBID): InAirGravityModifier_Record
  /** @noSelf **/
  GetInitLoadingScreenRecord(path: TweakDBID): InitLoadingScreen_Record
  /** @noSelf **/
  GetInteractionBaseRecord(path: TweakDBID): InteractionBase_Record
  /** @noSelf **/
  GetInteractionMountBaseRecord(path: TweakDBID): InteractionMountBase_Record
  /** @noSelf **/
  GetInventoryItemRecord(path: TweakDBID): InventoryItem_Record
  /** @noSelf **/
  GetInventoryItemGroupRecord(path: TweakDBID): InventoryItemGroup_Record
  /** @noSelf **/
  GetInventoryItemSetRecord(path: TweakDBID): InventoryItemSet_Record
  /** @noSelf **/
  GetItemRecord(path: TweakDBID): Item_Record
  /** @noSelf **/
  GetItemActionRecord(path: TweakDBID): ItemAction_Record
  /** @noSelf **/
  GetItemArrayQueryRecord(path: TweakDBID): ItemArrayQuery_Record
  /** @noSelf **/
  GetItemBlueprintRecord(path: TweakDBID): ItemBlueprint_Record
  /** @noSelf **/
  GetItemBlueprintElementRecord(path: TweakDBID): ItemBlueprintElement_Record
  /** @noSelf **/
  GetItemCategoryRecord(path: TweakDBID): ItemCategory_Record
  /** @noSelf **/
  GetItemCostRecord(path: TweakDBID): ItemCost_Record
  /** @noSelf **/
  GetItemCreationPrereqRecord(path: TweakDBID): ItemCreationPrereq_Record
  /** @noSelf **/
  GetItemDropSettingsRecord(path: TweakDBID): ItemDropSettings_Record
  /** @noSelf **/
  GetItemPartConnectionRecord(path: TweakDBID): ItemPartConnection_Record
  /** @noSelf **/
  GetItemPartListElementRecord(path: TweakDBID): ItemPartListElement_Record
  /** @noSelf **/
  GetItemQueryRecord(path: TweakDBID): ItemQuery_Record
  /** @noSelf **/
  GetItemQueryElementRecord(path: TweakDBID): ItemQueryElement_Record
  /** @noSelf **/
  GetItemRecipeRecord(path: TweakDBID): ItemRecipe_Record
  /** @noSelf **/
  GetItemRequiredSlotRecord(path: TweakDBID): ItemRequiredSlot_Record
  /** @noSelf **/
  GetItemStructureRecord(path: TweakDBID): ItemStructure_Record
  /** @noSelf **/
  GetItemTypeRecord(path: TweakDBID): ItemType_Record
  /** @noSelf **/
  GetItemsFactoryAppearanceSuffixBaseRecord(path: TweakDBID): ItemsFactoryAppearanceSuffixBase_Record
  /** @noSelf **/
  GetItemsFactoryAppearanceSuffixOrderRecord(path: TweakDBID): ItemsFactoryAppearanceSuffixOrder_Record
  /** @noSelf **/
  GetJournalIconRecord(path: TweakDBID): JournalIcon_Record
  /** @noSelf **/
  GetKeepCurrentCoverCoverSelectionParametersRecord(path: TweakDBID): KeepCurrentCoverCoverSelectionParameters_Record
  /** @noSelf **/
  GetLCDScreenRecord(path: TweakDBID): LCDScreen_Record
  /** @noSelf **/
  GetLandingFxMaterialRecord(path: TweakDBID): LandingFxMaterial_Record
  /** @noSelf **/
  GetLandingFxPackageRecord(path: TweakDBID): LandingFxPackage_Record
  /** @noSelf **/
  GetLayoutRecord(path: TweakDBID): Layout_Record
  /** @noSelf **/
  GetLifePathRecord(path: TweakDBID): LifePath_Record
  /** @noSelf **/
  GetLightPresetRecord(path: TweakDBID): LightPreset_Record
  /** @noSelf **/
  GetLinearAccuracyRecord(path: TweakDBID): LinearAccuracy_Record
  /** @noSelf **/
  GetLoadingTipsGroupRecord(path: TweakDBID): LoadingTipsGroup_Record
  /** @noSelf **/
  GetLocomotionModeRecord(path: TweakDBID): LocomotionMode_Record
  /** @noSelf **/
  GetLookAtPartRecord(path: TweakDBID): LookAtPart_Record
  /** @noSelf **/
  GetLookAtPresetRecord(path: TweakDBID): LookAtPreset_Record
  /** @noSelf **/
  GetLootItemRecord(path: TweakDBID): LootItem_Record
  /** @noSelf **/
  GetLootTableRecord(path: TweakDBID): LootTable_Record
  /** @noSelf **/
  GetLootTableElementRecord(path: TweakDBID): LootTableElement_Record
  /** @noSelf **/
  GetMappinClampingSettingsRecord(path: TweakDBID): MappinClampingSettings_Record
  /** @noSelf **/
  GetMappinDefinitionRecord(path: TweakDBID): MappinDefinition_Record
  /** @noSelf **/
  GetMappinPhaseRecord(path: TweakDBID): MappinPhase_Record
  /** @noSelf **/
  GetMappinPhaseDefinitionRecord(path: TweakDBID): MappinPhaseDefinition_Record
  /** @noSelf **/
  GetMappinUICustomOpacityParamsRecord(path: TweakDBID): MappinUICustomOpacityParams_Record
  /** @noSelf **/
  GetMappinUIFilterGroupRecord(path: TweakDBID): MappinUIFilterGroup_Record
  /** @noSelf **/
  GetMappinUIGlobalProfileRecord(path: TweakDBID): MappinUIGlobalProfile_Record
  /** @noSelf **/
  GetMappinUIParamGroupRecord(path: TweakDBID): MappinUIParamGroup_Record
  /** @noSelf **/
  GetMappinUIRuntimeProfileRecord(path: TweakDBID): MappinUIRuntimeProfile_Record
  /** @noSelf **/
  GetMappinUISettingsRecord(path: TweakDBID): MappinUISettings_Record
  /** @noSelf **/
  GetMappinUISpawnProfileRecord(path: TweakDBID): MappinUISpawnProfile_Record
  /** @noSelf **/
  GetMappinVariantRecord(path: TweakDBID): MappinVariant_Record
  /** @noSelf **/
  GetMaterialRecord(path: TweakDBID): Material_Record
  /** @noSelf **/
  GetMaterialFxRecord(path: TweakDBID): MaterialFx_Record
  /** @noSelf **/
  GetMeleeAttackDirectionRecord(path: TweakDBID): MeleeAttackDirection_Record
  /** @noSelf **/
  GetMetaQuestRecord(path: TweakDBID): MetaQuest_Record
  /** @noSelf **/
  GetMiniGame_AllSymbolsRecord(path: TweakDBID): MiniGame_AllSymbols_Record
  /** @noSelf **/
  GetMiniGame_AllSymbols_inline0Record(path: TweakDBID): MiniGame_AllSymbols_inline0_Record
  /** @noSelf **/
  GetMiniGame_AllSymbols_inline1Record(path: TweakDBID): MiniGame_AllSymbols_inline1_Record
  /** @noSelf **/
  GetMiniGame_AllSymbols_inline2Record(path: TweakDBID): MiniGame_AllSymbols_inline2_Record
  /** @noSelf **/
  GetMiniGame_AllSymbols_inline3Record(path: TweakDBID): MiniGame_AllSymbols_inline3_Record
  /** @noSelf **/
  GetMiniGame_AllSymbols_inline4Record(path: TweakDBID): MiniGame_AllSymbols_inline4_Record
  /** @noSelf **/
  GetMiniGame_SymbolsWithRarityRecord(path: TweakDBID): MiniGame_SymbolsWithRarity_Record
  /** @noSelf **/
  GetMiniGame_TrapRecord(path: TweakDBID): MiniGame_Trap_Record
  /** @noSelf **/
  GetMinigameActionRecord(path: TweakDBID): MinigameAction_Record
  /** @noSelf **/
  GetMinigameActionTypeRecord(path: TweakDBID): MinigameActionType_Record
  /** @noSelf **/
  GetMinigameCategoryRecord(path: TweakDBID): MinigameCategory_Record
  /** @noSelf **/
  GetMinigameTrapTypeRecord(path: TweakDBID): MinigameTrapType_Record
  /** @noSelf **/
  GetMinigame_DefRecord(path: TweakDBID): Minigame_Def_Record
  /** @noSelf **/
  GetModifyStatPoolModifierEffectorRecord(path: TweakDBID): ModifyStatPoolModifierEffector_Record
  /** @noSelf **/
  GetMovementParamRecord(path: TweakDBID): MovementParam_Record
  /** @noSelf **/
  GetMovementParamsRecord(path: TweakDBID): MovementParams_Record
  /** @noSelf **/
  GetMovementPolicyRecord(path: TweakDBID): MovementPolicy_Record
  /** @noSelf **/
  GetMovementPolicyTagListRecord(path: TweakDBID): MovementPolicyTagList_Record
  /** @noSelf **/
  GetMultiPrereqRecord(path: TweakDBID): MultiPrereq_Record
  /** @noSelf **/
  GetMutablePoolValueModifierRecord(path: TweakDBID): MutablePoolValueModifier_Record
  /** @noSelf **/
  GetNPCBehaviorStateRecord(path: TweakDBID): NPCBehaviorState_Record
  /** @noSelf **/
  GetNPCEquipmentGroupRecord(path: TweakDBID): NPCEquipmentGroup_Record
  /** @noSelf **/
  GetNPCEquipmentGroupEntryRecord(path: TweakDBID): NPCEquipmentGroupEntry_Record
  /** @noSelf **/
  GetNPCEquipmentItemRecord(path: TweakDBID): NPCEquipmentItem_Record
  /** @noSelf **/
  GetNPCEquipmentItemPoolRecord(path: TweakDBID): NPCEquipmentItemPool_Record
  /** @noSelf **/
  GetNPCEquipmentItemsPoolEntryRecord(path: TweakDBID): NPCEquipmentItemsPoolEntry_Record
  /** @noSelf **/
  GetNPCHighLevelStateRecord(path: TweakDBID): NPCHighLevelState_Record
  /** @noSelf **/
  GetNPCQuestAffiliationRecord(path: TweakDBID): NPCQuestAffiliation_Record
  /** @noSelf **/
  GetNPCRarityRecord(path: TweakDBID): NPCRarity_Record
  /** @noSelf **/
  GetNPCStanceStateRecord(path: TweakDBID): NPCStanceState_Record
  /** @noSelf **/
  GetNPCTypeRecord(path: TweakDBID): NPCType_Record
  /** @noSelf **/
  GetNPCTypePrereqRecord(path: TweakDBID): NPCTypePrereq_Record
  /** @noSelf **/
  GetNPCUpperBodyStateRecord(path: TweakDBID): NPCUpperBodyState_Record
  /** @noSelf **/
  GetNetworkPingingParameteresRecord(path: TweakDBID): NetworkPingingParameteres_Record
  /** @noSelf **/
  GetNetworkPresetBinderParametersRecord(path: TweakDBID): NetworkPresetBinderParameters_Record
  /** @noSelf **/
  GetNewsFeedTitleRecord(path: TweakDBID): NewsFeedTitle_Record
  /** @noSelf **/
  GetNonLinearAccuracyRecord(path: TweakDBID): NonLinearAccuracy_Record
  /** @noSelf **/
  GetNumberPlateRecord(path: TweakDBID): NumberPlate_Record
  /** @noSelf **/
  GetObjectActionRecord(path: TweakDBID): ObjectAction_Record
  /** @noSelf **/
  GetObjectActionCostRecord(path: TweakDBID): ObjectActionCost_Record
  /** @noSelf **/
  GetObjectActionEffectRecord(path: TweakDBID): ObjectActionEffect_Record
  /** @noSelf **/
  GetObjectActionGameplayCategoryRecord(path: TweakDBID): ObjectActionGameplayCategory_Record
  /** @noSelf **/
  GetObjectActionPrereqRecord(path: TweakDBID): ObjectActionPrereq_Record
  /** @noSelf **/
  GetObjectActionReferenceRecord(path: TweakDBID): ObjectActionReference_Record
  /** @noSelf **/
  GetObjectActionTypeRecord(path: TweakDBID): ObjectActionType_Record
  /** @noSelf **/
  GetOffMeshLinkTagRecord(path: TweakDBID): OffMeshLinkTag_Record
  /** @noSelf **/
  GetOutputRecord(path: TweakDBID): Output_Record
  /** @noSelf **/
  GetOwnerAngleCoverSelectionParametersRecord(path: TweakDBID): OwnerAngleCoverSelectionParameters_Record
  /** @noSelf **/
  GetOwnerDistanceCoverSelectionParametersRecord(path: TweakDBID): OwnerDistanceCoverSelectionParameters_Record
  /** @noSelf **/
  GetOwnerThreatCoverSelectionParametersRecord(path: TweakDBID): OwnerThreatCoverSelectionParameters_Record
  /** @noSelf **/
  GetParentAttachmentTypeRecord(path: TweakDBID): ParentAttachmentType_Record
  /** @noSelf **/
  GetParticleDamageRecord(path: TweakDBID): ParticleDamage_Record
  /** @noSelf **/
  GetPassiveProficiencyBonusRecord(path: TweakDBID): PassiveProficiencyBonus_Record
  /** @noSelf **/
  GetPassiveProficiencyBonusUIDataRecord(path: TweakDBID): PassiveProficiencyBonusUIData_Record
  /** @noSelf **/
  GetPathLengthCoverSelectionParametersRecord(path: TweakDBID): PathLengthCoverSelectionParameters_Record
  /** @noSelf **/
  GetPathSecurityCoverSelectionParametersRecord(path: TweakDBID): PathSecurityCoverSelectionParameters_Record
  /** @noSelf **/
  GetPerkRecord(path: TweakDBID): Perk_Record
  /** @noSelf **/
  GetPerkAreaRecord(path: TweakDBID): PerkArea_Record
  /** @noSelf **/
  GetPerkLevelDataRecord(path: TweakDBID): PerkLevelData_Record
  /** @noSelf **/
  GetPerkLevelUIDataRecord(path: TweakDBID): PerkLevelUIData_Record
  /** @noSelf **/
  GetPerkUtilityRecord(path: TweakDBID): PerkUtility_Record
  /** @noSelf **/
  GetPhotoModeBackgroundRecord(path: TweakDBID): PhotoModeBackground_Record
  /** @noSelf **/
  GetPhotoModeEffectRecord(path: TweakDBID): PhotoModeEffect_Record
  /** @noSelf **/
  GetPhotoModeFaceRecord(path: TweakDBID): PhotoModeFace_Record
  /** @noSelf **/
  GetPhotoModeFrameRecord(path: TweakDBID): PhotoModeFrame_Record
  /** @noSelf **/
  GetPhotoModeItemRecord(path: TweakDBID): PhotoModeItem_Record
  /** @noSelf **/
  GetPhotoModePoseRecord(path: TweakDBID): PhotoModePose_Record
  /** @noSelf **/
  GetPhotoModePoseCategoryRecord(path: TweakDBID): PhotoModePoseCategory_Record
  /** @noSelf **/
  GetPhotoModeStickerRecord(path: TweakDBID): PhotoModeSticker_Record
  /** @noSelf **/
  GetPierceRecord(path: TweakDBID): Pierce_Record
  /** @noSelf **/
  GetPingRecord(path: TweakDBID): Ping_Record
  /** @noSelf **/
  GetPlayerBuildRecord(path: TweakDBID): PlayerBuild_Record
  /** @noSelf **/
  GetPlayerPossesionRecord(path: TweakDBID): PlayerPossesion_Record
  /** @noSelf **/
  GetPoolValueModifierRecord(path: TweakDBID): PoolValueModifier_Record
  /** @noSelf **/
  GetPrereqRecord(path: TweakDBID): Prereq_Record
  /** @noSelf **/
  GetPrereqCheckRecord(path: TweakDBID): PrereqCheck_Record
  /** @noSelf **/
  GetPresetMapperRecord(path: TweakDBID): PresetMapper_Record
  /** @noSelf **/
  GetPreventionHeatDataRecord(path: TweakDBID): PreventionHeatData_Record
  /** @noSelf **/
  GetPreventionUnitPoolDataRecord(path: TweakDBID): PreventionUnitPoolData_Record
  /** @noSelf **/
  GetProficiencyRecord(path: TweakDBID): Proficiency_Record
  /** @noSelf **/
  GetProgramRecord(path: TweakDBID): Program_Record
  /** @noSelf **/
  GetProgressionBuildRecord(path: TweakDBID): ProgressionBuild_Record
  /** @noSelf **/
  GetProjectileCollisionRecord(path: TweakDBID): ProjectileCollision_Record
  /** @noSelf **/
  GetProjectileLaunchRecord(path: TweakDBID): ProjectileLaunch_Record
  /** @noSelf **/
  GetProjectileLaunchModeRecord(path: TweakDBID): ProjectileLaunchMode_Record
  /** @noSelf **/
  GetProjectileOnCollisionActionRecord(path: TweakDBID): ProjectileOnCollisionAction_Record
  /** @noSelf **/
  GetPropRecord(path: TweakDBID): Prop_Record
  /** @noSelf **/
  GetQualityRecord(path: TweakDBID): Quality_Record
  /** @noSelf **/
  GetQueryRecord(path: TweakDBID): Query_Record
  /** @noSelf **/
  GetQuestRestrictionModeRecord(path: TweakDBID): QuestRestrictionMode_Record
  /** @noSelf **/
  GetQuestSystemSetupRecord(path: TweakDBID): QuestSystemSetup_Record
  /** @noSelf **/
  GetRPGActionRecord(path: TweakDBID): RPGAction_Record
  /** @noSelf **/
  GetRPGDataPackageRecord(path: TweakDBID): RPGDataPackage_Record
  /** @noSelf **/
  GetRaceCheckpointRecord(path: TweakDBID): RaceCheckpoint_Record
  /** @noSelf **/
  GetRadioStationRecord(path: TweakDBID): RadioStation_Record
  /** @noSelf **/
  GetRandomNewsFeedBatchRecord(path: TweakDBID): RandomNewsFeedBatch_Record
  /** @noSelf **/
  GetRandomPassengerEntryRecord(path: TweakDBID): RandomPassengerEntry_Record
  /** @noSelf **/
  GetRandomRatioCoverSelectionParametersRecord(path: TweakDBID): RandomRatioCoverSelectionParameters_Record
  /** @noSelf **/
  GetRandomStatModifierRecord(path: TweakDBID): RandomStatModifier_Record
  /** @noSelf **/
  GetRangedAttackRecord(path: TweakDBID): RangedAttack_Record
  /** @noSelf **/
  GetRangedAttackPackageRecord(path: TweakDBID): RangedAttackPackage_Record
  /** @noSelf **/
  GetReactionLimitRecord(path: TweakDBID): ReactionLimit_Record
  /** @noSelf **/
  GetReactionPresetRecord(path: TweakDBID): ReactionPreset_Record
  /** @noSelf **/
  GetReactionPresetCivilianRecord(path: TweakDBID): ReactionPresetCivilian_Record
  /** @noSelf **/
  GetReactionPresetCorpoRecord(path: TweakDBID): ReactionPresetCorpo_Record
  /** @noSelf **/
  GetReactionPresetGangerRecord(path: TweakDBID): ReactionPresetGanger_Record
  /** @noSelf **/
  GetReactionPresetMechanicalRecord(path: TweakDBID): ReactionPresetMechanical_Record
  /** @noSelf **/
  GetReactionPresetNoReactionRecord(path: TweakDBID): ReactionPresetNoReaction_Record
  /** @noSelf **/
  GetReactionPresetPoliceRecord(path: TweakDBID): ReactionPresetPolice_Record
  /** @noSelf **/
  GetRearWheelsFrictionModifierRecord(path: TweakDBID): RearWheelsFrictionModifier_Record
  /** @noSelf **/
  GetRecipeElementRecord(path: TweakDBID): RecipeElement_Record
  /** @noSelf **/
  GetRecipeItemRecord(path: TweakDBID): RecipeItem_Record
  /** @noSelf **/
  GetRegularRecord(path: TweakDBID): Regular_Record
  /** @noSelf **/
  GetRegularGDMRecord(path: TweakDBID): RegularGDM_Record
  /** @noSelf **/
  GetRewardBaseRecord(path: TweakDBID): RewardBase_Record
  /** @noSelf **/
  GetRewardBase_inline0Record(path: TweakDBID): RewardBase_inline0_Record
  /** @noSelf **/
  GetRewardSetRecord(path: TweakDBID): RewardSet_Record
  /** @noSelf **/
  GetRigsRecord(path: TweakDBID): Rigs_Record
  /** @noSelf **/
  GetRotationLimiterRecord(path: TweakDBID): RotationLimiter_Record
  /** @noSelf **/
  GetRowSymbolsRecord(path: TweakDBID): RowSymbols_Record
  /** @noSelf **/
  GetRowTrapsRecord(path: TweakDBID): RowTraps_Record
  /** @noSelf **/
  GetRuleRecord(path: TweakDBID): Rule_Record
  /** @noSelf **/
  GetScannableDataRecord(path: TweakDBID): ScannableData_Record
  /** @noSelf **/
  GetScannerModuleVisibilityPresetRecord(path: TweakDBID): ScannerModuleVisibilityPreset_Record
  /** @noSelf **/
  GetSceneCameraDoFRecord(path: TweakDBID): SceneCameraDoF_Record
  /** @noSelf **/
  GetScreenMessageDataRecord(path: TweakDBID): ScreenMessageData_Record
  /** @noSelf **/
  GetScreenMessagesListRecord(path: TweakDBID): ScreenMessagesList_Record
  /** @noSelf **/
  GetSeatStateRecord(path: TweakDBID): SeatState_Record
  /** @noSelf **/
  GetSectorSelectorRecord(path: TweakDBID): SectorSelector_Record
  /** @noSelf **/
  GetSenseObjectTypeRecord(path: TweakDBID): SenseObjectType_Record
  /** @noSelf **/
  GetSensePresetRecord(path: TweakDBID): SensePreset_Record
  /** @noSelf **/
  GetSenseShapeRecord(path: TweakDBID): SenseShape_Record
  /** @noSelf **/
  GetSlotItemPartElementRecord(path: TweakDBID): SlotItemPartElement_Record
  /** @noSelf **/
  GetSlotItemPartListElementRecord(path: TweakDBID): SlotItemPartListElement_Record
  /** @noSelf **/
  GetSlotItemPartPresetRecord(path: TweakDBID): SlotItemPartPreset_Record
  /** @noSelf **/
  GetSmartGunMissParamsRecord(path: TweakDBID): SmartGunMissParams_Record
  /** @noSelf **/
  GetSmartGunTargetSortConfigurationsRecord(path: TweakDBID): SmartGunTargetSortConfigurations_Record
  /** @noSelf **/
  GetSmartGunTargetSortDataRecord(path: TweakDBID): SmartGunTargetSortData_Record
  /** @noSelf **/
  GetSpawnableObjectRecord(path: TweakDBID): SpawnableObject_Record
  /** @noSelf **/
  GetSpawnableObjectPriorityRecord(path: TweakDBID): SpawnableObjectPriority_Record
  /** @noSelf **/
  GetSpreadEffectorRecord(path: TweakDBID): SpreadEffector_Record
  /** @noSelf **/
  GetSpreadInitEffectorRecord(path: TweakDBID): SpreadInitEffector_Record
  /** @noSelf **/
  GetSquadBackyardBaseRecord(path: TweakDBID): SquadBackyardBase_Record
  /** @noSelf **/
  GetSquadBaseRecord(path: TweakDBID): SquadBase_Record
  /** @noSelf **/
  GetSquadFenceBaseRecord(path: TweakDBID): SquadFenceBase_Record
  /** @noSelf **/
  GetSquadInstanceRecord(path: TweakDBID): SquadInstance_Record
  /** @noSelf **/
  GetStatRecord(path: TweakDBID): Stat_Record
  /** @noSelf **/
  GetStatDistributionDataRecord(path: TweakDBID): StatDistributionData_Record
  /** @noSelf **/
  GetStatModifierRecord(path: TweakDBID): StatModifier_Record
  /** @noSelf **/
  GetStatModifierGroupRecord(path: TweakDBID): StatModifierGroup_Record
  /** @noSelf **/
  GetStatPoolRecord(path: TweakDBID): StatPool_Record
  /** @noSelf **/
  GetStatPoolCostRecord(path: TweakDBID): StatPoolCost_Record
  /** @noSelf **/
  GetStatPoolDistributionDataRecord(path: TweakDBID): StatPoolDistributionData_Record
  /** @noSelf **/
  GetStatPoolPrereqRecord(path: TweakDBID): StatPoolPrereq_Record
  /** @noSelf **/
  GetStatPoolUpdateRecord(path: TweakDBID): StatPoolUpdate_Record
  /** @noSelf **/
  GetStatPrereqRecord(path: TweakDBID): StatPrereq_Record
  /** @noSelf **/
  GetStatsArrayRecord(path: TweakDBID): StatsArray_Record
  /** @noSelf **/
  GetStatsFolderRecord(path: TweakDBID): StatsFolder_Record
  /** @noSelf **/
  GetStatsListRecord(path: TweakDBID): StatsList_Record
  /** @noSelf **/
  GetStatusEffectRecord(path: TweakDBID): StatusEffect_Record
  /** @noSelf **/
  GetStatusEffectAIBehaviorFlagRecord(path: TweakDBID): StatusEffectAIBehaviorFlag_Record
  /** @noSelf **/
  GetStatusEffectAIBehaviorTypeRecord(path: TweakDBID): StatusEffectAIBehaviorType_Record
  /** @noSelf **/
  GetStatusEffectAIDataRecord(path: TweakDBID): StatusEffectAIData_Record
  /** @noSelf **/
  GetStatusEffectAttackDataRecord(path: TweakDBID): StatusEffectAttackData_Record
  /** @noSelf **/
  GetStatusEffectFXRecord(path: TweakDBID): StatusEffectFX_Record
  /** @noSelf **/
  GetStatusEffectPlayerDataRecord(path: TweakDBID): StatusEffectPlayerData_Record
  /** @noSelf **/
  GetStatusEffectPrereqRecord(path: TweakDBID): StatusEffectPrereq_Record
  /** @noSelf **/
  GetStatusEffectTypeRecord(path: TweakDBID): StatusEffectType_Record
  /** @noSelf **/
  GetStatusEffectUIDataRecord(path: TweakDBID): StatusEffectUIData_Record
  /** @noSelf **/
  GetStatusEffectVariationRecord(path: TweakDBID): StatusEffectVariation_Record
  /** @noSelf **/
  GetStatusEffect_inline0Record(path: TweakDBID): StatusEffect_inline0_Record
  /** @noSelf **/
  GetStatusEffect_inline1Record(path: TweakDBID): StatusEffect_inline1_Record
  /** @noSelf **/
  GetStickyGDMRecord(path: TweakDBID): StickyGDM_Record
  /** @noSelf **/
  GetStimRecord(path: TweakDBID): Stim_Record
  /** @noSelf **/
  GetStimPriorityRecord(path: TweakDBID): StimPriority_Record
  /** @noSelf **/
  GetStimPropagationRecord(path: TweakDBID): StimPropagation_Record
  /** @noSelf **/
  GetStimTypeRecord(path: TweakDBID): StimType_Record
  /** @noSelf **/
  GetStopRecord(path: TweakDBID): Stop_Record
  /** @noSelf **/
  GetStopAndStickRecord(path: TweakDBID): StopAndStick_Record
  /** @noSelf **/
  GetStopAndStickPerpendicularRecord(path: TweakDBID): StopAndStickPerpendicular_Record
  /** @noSelf **/
  GetStreetCredTierRecord(path: TweakDBID): StreetCredTier_Record
  /** @noSelf **/
  GetStreetSignRecord(path: TweakDBID): StreetSign_Record
  /** @noSelf **/
  GetSubCharacterRecord(path: TweakDBID): SubCharacter_Record
  /** @noSelf **/
  GetSubStatModifierRecord(path: TweakDBID): SubStatModifier_Record
  /** @noSelf **/
  GetSubstatRecord(path: TweakDBID): Substat_Record
  /** @noSelf **/
  GetTPPCameraSetupRecord(path: TweakDBID): TPPCameraSetup_Record
  /** @noSelf **/
  GetTPPLookAtPresetsRecord(path: TweakDBID): TPPLookAtPresets_Record
  /** @noSelf **/
  GetTVBaseRecord(path: TweakDBID): TVBase_Record
  /** @noSelf **/
  GetTacticLimiterCoverSelectionParametersRecord(path: TweakDBID): TacticLimiterCoverSelectionParameters_Record
  /** @noSelf **/
  GetTemporalPrereqRecord(path: TweakDBID): TemporalPrereq_Record
  /** @noSelf **/
  GetTerminalScreenTypeRecord(path: TweakDBID): TerminalScreenType_Record
  /** @noSelf **/
  GetThreatDistanceCoverSelectionParametersRecord(path: TweakDBID): ThreatDistanceCoverSelectionParameters_Record
  /** @noSelf **/
  GetThreatTrackingPresetBaseRecord(path: TweakDBID): ThreatTrackingPresetBase_Record
  /** @noSelf **/
  GetThumbnailWidgetDefinitionRecord(path: TweakDBID): ThumbnailWidgetDefinition_Record
  /** @noSelf **/
  GetTimeRecord(path: TweakDBID): Time_Record
  /** @noSelf **/
  GetTrackingRecord(path: TweakDBID): Tracking_Record
  /** @noSelf **/
  GetTrackingModeRecord(path: TweakDBID): TrackingMode_Record
  /** @noSelf **/
  GetTraitRecord(path: TweakDBID): Trait_Record
  /** @noSelf **/
  GetTraitDataRecord(path: TweakDBID): TraitData_Record
  /** @noSelf **/
  GetTransgressionRecord(path: TweakDBID): Transgression_Record
  /** @noSelf **/
  GetTrapRecord(path: TweakDBID): Trap_Record
  /** @noSelf **/
  GetTrapTypeRecord(path: TweakDBID): TrapType_Record
  /** @noSelf **/
  GetTriggerAttackEffectorRecord(path: TweakDBID): TriggerAttackEffector_Record
  /** @noSelf **/
  GetTriggerHackingMinigameEffectorRecord(path: TweakDBID): TriggerHackingMinigameEffector_Record
  /** @noSelf **/
  GetTriggerModeRecord(path: TweakDBID): TriggerMode_Record
  /** @noSelf **/
  GetUIAnimationRecord(path: TweakDBID): UIAnimation_Record
  /** @noSelf **/
  GetUICharacterCreationAttributeRecord(path: TweakDBID): UICharacterCreationAttribute_Record
  /** @noSelf **/
  GetUICharacterCreationAttributesPresetRecord(path: TweakDBID): UICharacterCreationAttributesPreset_Record
  /** @noSelf **/
  GetUIConditionRecord(path: TweakDBID): UICondition_Record
  /** @noSelf **/
  GetUIElementRecord(path: TweakDBID): UIElement_Record
  /** @noSelf **/
  GetUIIconRecord(path: TweakDBID): UIIcon_Record
  /** @noSelf **/
  GetUIIconCensorFlagRecord(path: TweakDBID): UIIconCensorFlag_Record
  /** @noSelf **/
  GetUIIconCensorshipRecord(path: TweakDBID): UIIconCensorship_Record
  /** @noSelf **/
  GetUINameplateRecord(path: TweakDBID): UINameplate_Record
  /** @noSelf **/
  GetUINameplateDisplayTypeRecord(path: TweakDBID): UINameplateDisplayType_Record
  /** @noSelf **/
  GetUIStatsMapRecord(path: TweakDBID): UIStatsMap_Record
  /** @noSelf **/
  GetUncontrolledMovementEffectorRecord(path: TweakDBID): UncontrolledMovementEffector_Record
  /** @noSelf **/
  GetUpgradingDataRecord(path: TweakDBID): UpgradingData_Record
  /** @noSelf **/
  GetUphillDriveHelperRecord(path: TweakDBID): UphillDriveHelper_Record
  /** @noSelf **/
  GetUtilityLossCoverSelectionParametersRecord(path: TweakDBID): UtilityLossCoverSelectionParameters_Record
  /** @noSelf **/
  GetVehicleRecord(path: TweakDBID): Vehicle_Record
  /** @noSelf **/
  GetVehicleAIBoostSettingsRecord(path: TweakDBID): VehicleAIBoostSettings_Record
  /** @noSelf **/
  GetVehicleAirControlRecord(path: TweakDBID): VehicleAirControl_Record
  /** @noSelf **/
  GetVehicleAirControlAxisRecord(path: TweakDBID): VehicleAirControlAxis_Record
  /** @noSelf **/
  GetVehicleBehaviorDataRecord(path: TweakDBID): VehicleBehaviorData_Record
  /** @noSelf **/
  GetVehicleCameraManagerRecord(path: TweakDBID): VehicleCameraManager_Record
  /** @noSelf **/
  GetVehicleCrowdCollisionsParamsRecord(path: TweakDBID): VehicleCrowdCollisionsParams_Record
  /** @noSelf **/
  GetVehicleDataPackageRecord(path: TweakDBID): VehicleDataPackage_Record
  /** @noSelf **/
  GetVehicleDefaultStateRecord(path: TweakDBID): VehicleDefaultState_Record
  /** @noSelf **/
  GetVehicleDeformablePartRecord(path: TweakDBID): VehicleDeformablePart_Record
  /** @noSelf **/
  GetVehicleDeformableZoneRecord(path: TweakDBID): VehicleDeformableZone_Record
  /** @noSelf **/
  GetVehicleDestructibleGlassRecord(path: TweakDBID): VehicleDestructibleGlass_Record
  /** @noSelf **/
  GetVehicleDestructibleLightRecord(path: TweakDBID): VehicleDestructibleLight_Record
  /** @noSelf **/
  GetVehicleDestructibleWheelRecord(path: TweakDBID): VehicleDestructibleWheel_Record
  /** @noSelf **/
  GetVehicleDestructionRecord(path: TweakDBID): VehicleDestruction_Record
  /** @noSelf **/
  GetVehicleDestructionPointDamperRecord(path: TweakDBID): VehicleDestructionPointDamper_Record
  /** @noSelf **/
  GetVehicleDetachablePartRecord(path: TweakDBID): VehicleDetachablePart_Record
  /** @noSelf **/
  GetVehicleDriveModelDataRecord(path: TweakDBID): VehicleDriveModelData_Record
  /** @noSelf **/
  GetVehicleEngineDataRecord(path: TweakDBID): VehicleEngineData_Record
  /** @noSelf **/
  GetVehicleFPPCameraParamsRecord(path: TweakDBID): VehicleFPPCameraParams_Record
  /** @noSelf **/
  GetVehicleFxCollisionRecord(path: TweakDBID): VehicleFxCollision_Record
  /** @noSelf **/
  GetVehicleFxCollisionMaterialRecord(path: TweakDBID): VehicleFxCollisionMaterial_Record
  /** @noSelf **/
  GetVehicleFxWheelsDecalsRecord(path: TweakDBID): VehicleFxWheelsDecals_Record
  /** @noSelf **/
  GetVehicleFxWheelsDecalsMaterialRecord(path: TweakDBID): VehicleFxWheelsDecalsMaterial_Record
  /** @noSelf **/
  GetVehicleFxWheelsDecalsMaterialSmearRecord(path: TweakDBID): VehicleFxWheelsDecalsMaterialSmear_Record
  /** @noSelf **/
  GetVehicleFxWheelsParticlesRecord(path: TweakDBID): VehicleFxWheelsParticles_Record
  /** @noSelf **/
  GetVehicleFxWheelsParticlesMaterialRecord(path: TweakDBID): VehicleFxWheelsParticlesMaterial_Record
  /** @noSelf **/
  GetVehicleGearRecord(path: TweakDBID): VehicleGear_Record
  /** @noSelf **/
  GetVehicleImpactTrafficRecord(path: TweakDBID): VehicleImpactTraffic_Record
  /** @noSelf **/
  GetVehicleManufacturerRecord(path: TweakDBID): VehicleManufacturer_Record
  /** @noSelf **/
  GetVehicleModelRecord(path: TweakDBID): VehicleModel_Record
  /** @noSelf **/
  GetVehiclePIDSettingsRecord(path: TweakDBID): VehiclePIDSettings_Record
  /** @noSelf **/
  GetVehicleProceduralFPPCameraParamsRecord(path: TweakDBID): VehicleProceduralFPPCameraParams_Record
  /** @noSelf **/
  GetVehicleSeatRecord(path: TweakDBID): VehicleSeat_Record
  /** @noSelf **/
  GetVehicleSeatSetRecord(path: TweakDBID): VehicleSeatSet_Record
  /** @noSelf **/
  GetVehicleSteeringSettingsRecord(path: TweakDBID): VehicleSteeringSettings_Record
  /** @noSelf **/
  GetVehicleStoppingSettingsRecord(path: TweakDBID): VehicleStoppingSettings_Record
  /** @noSelf **/
  GetVehicleSurfaceBindingRecord(path: TweakDBID): VehicleSurfaceBinding_Record
  /** @noSelf **/
  GetVehicleSurfaceTypeRecord(path: TweakDBID): VehicleSurfaceType_Record
  /** @noSelf **/
  GetVehicleTPPCameraParamsRecord(path: TweakDBID): VehicleTPPCameraParams_Record
  /** @noSelf **/
  GetVehicleTPPCameraPresetParamsRecord(path: TweakDBID): VehicleTPPCameraPresetParams_Record
  /** @noSelf **/
  GetVehicleTypeRecord(path: TweakDBID): VehicleType_Record
  /** @noSelf **/
  GetVehicleUIDataRecord(path: TweakDBID): VehicleUIData_Record
  /** @noSelf **/
  GetVehicleVisualDestructionRecord(path: TweakDBID): VehicleVisualDestruction_Record
  /** @noSelf **/
  GetVehicleWaterRecord(path: TweakDBID): VehicleWater_Record
  /** @noSelf **/
  GetVehicleWeaponRecord(path: TweakDBID): VehicleWeapon_Record
  /** @noSelf **/
  GetVehicleWheelDimensionsPresetRecord(path: TweakDBID): VehicleWheelDimensionsPreset_Record
  /** @noSelf **/
  GetVehicleWheelDimensionsSetupRecord(path: TweakDBID): VehicleWheelDimensionsSetup_Record
  /** @noSelf **/
  GetVehicleWheelDrivingPresetRecord(path: TweakDBID): VehicleWheelDrivingPreset_Record
  /** @noSelf **/
  GetVehicleWheelDrivingSetupRecord(path: TweakDBID): VehicleWheelDrivingSetup_Record
  /** @noSelf **/
  GetVehicleWheelDrivingSetup_2Record(path: TweakDBID): VehicleWheelDrivingSetup_2_Record
  /** @noSelf **/
  GetVehicleWheelDrivingSetup_4Record(path: TweakDBID): VehicleWheelDrivingSetup_4_Record
  /** @noSelf **/
  GetVehicleWheelRoleRecord(path: TweakDBID): VehicleWheelRole_Record
  /** @noSelf **/
  GetVehicleWheelsFrictionMapRecord(path: TweakDBID): VehicleWheelsFrictionMap_Record
  /** @noSelf **/
  GetVehicleWheelsFrictionPresetRecord(path: TweakDBID): VehicleWheelsFrictionPreset_Record
  /** @noSelf **/
  GetVendorRecord(path: TweakDBID): Vendor_Record
  /** @noSelf **/
  GetVendorCraftableRecord(path: TweakDBID): VendorCraftable_Record
  /** @noSelf **/
  GetVendorExperienceRecord(path: TweakDBID): VendorExperience_Record
  /** @noSelf **/
  GetVendorItemRecord(path: TweakDBID): VendorItem_Record
  /** @noSelf **/
  GetVendorProgressionBasedStockRecord(path: TweakDBID): VendorProgressionBasedStock_Record
  /** @noSelf **/
  GetVendorTypeRecord(path: TweakDBID): VendorType_Record
  /** @noSelf **/
  GetVendorWareRecord(path: TweakDBID): VendorWare_Record
  /** @noSelf **/
  GetVirtualNetworkRecord(path: TweakDBID): VirtualNetwork_Record
  /** @noSelf **/
  GetVirtualNetworkPathRecord(path: TweakDBID): VirtualNetworkPath_Record
  /** @noSelf **/
  GetVisionGroupRecord(path: TweakDBID): VisionGroup_Record
  /** @noSelf **/
  GetVisionModuleBaseRecord(path: TweakDBID): VisionModuleBase_Record
  /** @noSelf **/
  GetVisualTagsPrereqRecord(path: TweakDBID): VisualTagsPrereq_Record
  /** @noSelf **/
  GetWeakspotRecord(path: TweakDBID): Weakspot_Record
  /** @noSelf **/
  GetWeaponEvolutionRecord(path: TweakDBID): WeaponEvolution_Record
  /** @noSelf **/
  GetWeaponFxPackageRecord(path: TweakDBID): WeaponFxPackage_Record
  /** @noSelf **/
  GetWeaponItemRecord(path: TweakDBID): WeaponItem_Record
  /** @noSelf **/
  GetWeaponManufacturerRecord(path: TweakDBID): WeaponManufacturer_Record
  /** @noSelf **/
  GetWeaponVFXActionRecord(path: TweakDBID): WeaponVFXAction_Record
  /** @noSelf **/
  GetWeaponVFXSetRecord(path: TweakDBID): WeaponVFXSet_Record
  /** @noSelf **/
  GetWeatherRecord(path: TweakDBID): Weather_Record
  /** @noSelf **/
  GetWeatherPresetRecord(path: TweakDBID): WeatherPreset_Record
  /** @noSelf **/
  GetWebsiteRecord(path: TweakDBID): Website_Record
  /** @noSelf **/
  GetWeightedCharacterRecord(path: TweakDBID): WeightedCharacter_Record
  /** @noSelf **/
  GetWidgetDefinitionRecord(path: TweakDBID): WidgetDefinition_Record
  /** @noSelf **/
  GetWidgetRatioRecord(path: TweakDBID): WidgetRatio_Record
  /** @noSelf **/
  GetWidgetStyleRecord(path: TweakDBID): WidgetStyle_Record
  /** @noSelf **/
  GetWorkspotActionTypeRecord(path: TweakDBID): WorkspotActionType_Record
  /** @noSelf **/
  GetWorkspotCategoryRecord(path: TweakDBID): WorkspotCategory_Record
  /** @noSelf **/
  GetWorkspotReactionTypeRecord(path: TweakDBID): WorkspotReactionType_Record
  /** @noSelf **/
  GetWorkspotStatusEffectRecord(path: TweakDBID): WorkspotStatusEffect_Record
  /** @noSelf **/
  GetWorldMapFilterRecord(path: TweakDBID): WorldMapFilter_Record
  /** @noSelf **/
  GetWorldMapFreeCameraSettingsRecord(path: TweakDBID): WorldMapFreeCameraSettings_Record
  /** @noSelf **/
  GetWorldMapSettingsRecord(path: TweakDBID): WorldMapSettings_Record
  /** @noSelf **/
  GetWorldMapZoomLevelRecord(path: TweakDBID): WorldMapZoomLevel_Record
  /** @noSelf **/
  GetXPPointsRecord(path: TweakDBID): XPPoints_Record
  /** @noSelf **/
  GetXPPoints_inline0Record(path: TweakDBID): XPPoints_inline0_Record
  /** @noSelf **/
  Getdevice_gameplay_roleRecord(path: TweakDBID): device_gameplay_role_Record
  /** @noSelf **/
  Getdevice_role_action_desctiptionRecord(path: TweakDBID): device_role_action_desctiption_Record
  /** @noSelf **/
  Getdevice_scanning_dataRecord(path: TweakDBID): device_scanning_data_Record
  /** @noSelf **/
  Getnpc_scanning_dataRecord(path: TweakDBID): npc_scanning_data_Record
}

declare interface TweakDBRecord extends IScriptable {

  GetID(): TweakDBID
}

declare interface AIActionSubCondition_Record extends TweakDBRecord {

  Invert(): Bool
}

declare interface AIRecord_Record extends TweakDBRecord {

}

declare interface AINode_Record extends AIRecord_Record {

  ActivationCondition(): AIActionCondition_Record
  MinLOD(): number
  IsVirtual(): Bool
}

declare interface AITicket_Record extends TweakDBRecord {

  TicketType(): AITicketType_Record
  SyncWithTickets(outList: AITicketType_Record[]): void
  GetSyncWithTicketsCount(): number
  GetSyncWithTicketsItem(index: number): AITicketType_Record
  SyncWithTicketsContains(item: AITicketType_Record): Bool
  Cooldowns(outList: AIActionCooldown_Record[]): void
  GetCooldownsCount(): number
  GetCooldownsItem(index: number): AIActionCooldown_Record
  CooldownsContains(item: AIActionCooldown_Record): Bool
  ActivationCondition(outList: AITicketCondition_Record[]): void
  GetActivationConditionCount(): number
  GetActivationConditionItem(index: number): AITicketCondition_Record
  ActivationConditionContains(item: AITicketCondition_Record): Bool
  DeactivationCondition(outList: AITicketCondition_Record[]): void
  GetDeactivationConditionCount(): number
  GetDeactivationConditionItem(index: number): AITicketCondition_Record
  DeactivationConditionContains(item: AITicketCondition_Record): Bool
  MaxNumberOfTickets(): number
  MinNumberOfTickets(): number
  MaxTicketDesyncTime(): number
  MinTicketDesyncTime(): number
  PercentageNumberOfTickets(): number
  Timeout(): number
  SyncTimeout(): number
  DeactivationConditionCheckInterval(): number
  ConditionSuccessDuration(): number
  ScaleNumberOfTicketsFromWorkspots(): Bool
  ReleaseAll(): Bool
  RevokeOnTimeout(): Bool
  StartCooldownOnFailure(): Bool
}

declare interface AIItemCond_Record extends AIActionSubCondition_Record {

  ItemCategory(): ItemCategory_Record
  ItemType(): ItemType_Record
  ItemID(): Item_Record
  Evolution(): WeaponEvolution_Record
  TriggerModes(outList: TriggerMode_Record[]): void
  GetTriggerModesCount(): number
  GetTriggerModesItem(index: number): TriggerMode_Record
  TriggerModesContains(item: TriggerMode_Record): Bool
  ItemTag(): CName
  EquipmentGroup(): CName
  CheckAllItemsInEquipmentGroup(): Bool
}

declare interface BaseObject_Record extends TweakDBRecord {

  StatModifierGroups(outList: StatModifierGroup_Record[]): void
  GetStatModifierGroupsCount(): number
  GetStatModifierGroupsItem(index: number): StatModifierGroup_Record
  StatModifierGroupsContains(item: StatModifierGroup_Record): Bool
  Effectors(outList: Effector_Record[]): void
  GetEffectorsCount(): number
  GetEffectorsItem(index: number): Effector_Record
  EffectorsContains(item: Effector_Record): Bool
  StatPools(outList: StatPool_Record[]): void
  GetStatPoolsCount(): number
  GetStatPoolsItem(index: number): StatPool_Record
  StatPoolsContains(item: StatPool_Record): Bool
  StatModifiers(outList: StatModifier_Record[]): void
  GetStatModifiersCount(): number
  GetStatModifiersItem(index: number): StatModifier_Record
  StatModifiersContains(item: StatModifier_Record): Bool
  Weakspots(outList: Weakspot_Record[]): void
  GetWeakspotsCount(): number
  GetWeakspotsItem(index: number): Weakspot_Record
  WeakspotsContains(item: Weakspot_Record): Bool
  ObjectActions(outList: ObjectAction_Record[]): void
  GetObjectActionsCount(): number
  GetObjectActionsItem(index: number): ObjectAction_Record
  ObjectActionsContains(item: ObjectAction_Record): Bool
  Savable(): Bool
}

declare interface SpawnableObject_Record extends BaseObject_Record {

  Priority(): SpawnableObjectPriority_Record
  Tags(): CName[]
  GetTagsCount(): number
  GetTagsItem(index: number): CName
  TagsContains(item: CName): Bool
  VisualTags(): CName[]
  GetVisualTagsCount(): number
  GetVisualTagsItem(index: number): CName
  VisualTagsContains(item: CName): Bool
  MultiplayerTemplatePaths(): ResRef[]
  GetMultiplayerTemplatePathsCount(): number
  GetMultiplayerTemplatePathsItem(index: number): ResRef
  AppearanceName(): CName
  PersistentName(): CName
  EntityTemplatePath(): ResRef
}

declare interface AITicketCondition_Record extends TweakDBRecord {

  Invert(): Bool
}

declare interface AITicketCheck_Record extends AITicketCondition_Record {

  OptionalFastExit(): Bool
}

declare interface AITicketFilter_Record extends AITicketCondition_Record {

  ResetMembers(): Bool
  ResetMembersIncludingUnwillings(): Bool
  SkipSelfOnce(): Bool
}

declare interface AISquadDistanceRelationToSectorCheck_Record extends AITicketCheck_Record {

  Sectors(outList: AISectorType_Record[]): void
  GetSectorsCount(): number
  GetSectorsItem(index: number): AISectorType_Record
  SectorsContains(item: AISectorType_Record): Bool
}

declare interface AISquadDistanceRelationToTargetCheck_Record extends AITicketCheck_Record {

  Target(): AIActionTarget_Record
  RingRadius(): number
}

declare interface AISquadItemPriorityFilter_Record extends AITicketFilter_Record {

  RestoreOnFail(): Bool
}

declare interface AISubAction_Record extends TweakDBRecord {

}

declare interface AISubActionCharacterRecordEquip_Record extends AISubAction_Record {

  AnimationTime(): number
}

declare interface AISubActionShootWithWeapon_Record extends AISubAction_Record {

  Instigator(): AIActionTarget_Record
  Target(): AIActionTarget_Record
  RangedAttack(): RangedAttack_Record
  TriggerMode(): TriggerMode_Record
  ShootingPatternPackages(outList: AIPatternsPackage_Record[]): void
  GetShootingPatternPackagesCount(): number
  GetShootingPatternPackagesItem(index: number): AIPatternsPackage_Record
  ShootingPatternPackagesContains(item: AIPatternsPackage_Record): Bool
  PauseCondition(outList: AIActionCondition_Record[]): void
  GetPauseConditionCount(): number
  GetPauseConditionItem(index: number): AIActionCondition_Record
  PauseConditionContains(item: AIActionCondition_Record): Bool
  WeaponSlots(outList: AttachmentSlot_Record[]): void
  GetWeaponSlotsCount(): number
  GetWeaponSlotsItem(index: number): AttachmentSlot_Record
  WeaponSlotsContains(item: AttachmentSlot_Record): Bool
  DualWieldShootingStyle(): CName
  TargetOffset(): Vector3
  Delay(): number
  TbhCoefficient(): number
  AimingDelay(): number
  PredictionTime(): number
  NumberOfShots(): number
  MaxNumberOfShots(): number
}

declare interface AISubActionSetTargetByTag_Record extends AISubAction_Record {

  RangeObj(): AIActionTarget_Record
  Target(): AIActionTarget_Record
  LineOfSightTarget(): AIActionTarget_Record
  AllowedOffMeshTags(): CName[]
  GetAllowedOffMeshTagsCount(): number
  GetAllowedOffMeshTagsItem(index: number): CName
  AllowedOffMeshTagsContains(item: CName): Bool
  SelectionMethod(): CName
  Tag(): CName
  RangeFromOwner(): Vector2
  RangeFromObj(): Vector2
  AvoidSelectingSameTargetMethod(): number
  Delay(): number
  AvoidSelectingSameTarget(): Bool
}

declare interface AISubActionCharacterRecordUnequip_Record extends AISubAction_Record {

  AnimationTime(): number
  DropItem(): Bool
}

declare interface CoverSelectionParameters_Record extends TweakDBRecord {

  ScoreOnlyForCombatTarget(): Bool
  VaidateOnlyForCombatTarget(): Bool
}

declare interface ObjectAction_Record extends TweakDBRecord {

  Cooldown(): Cooldown_Record
  ObjectActionType(): ObjectActionType_Record
  ObjectActionUI(): InteractionBase_Record
  GameplayCategory(): ObjectActionGameplayCategory_Record
  HackCategory(): HackCategory_Record
  TargetPrereqs(outList: IPrereq_Record[]): void
  GetTargetPrereqsCount(): number
  GetTargetPrereqsItem(index: number): IPrereq_Record
  TargetPrereqsContains(item: IPrereq_Record): Bool
  Costs(outList: ObjectActionCost_Record[]): void
  GetCostsCount(): number
  GetCostsItem(index: number): ObjectActionCost_Record
  CostsContains(item: ObjectActionCost_Record): Bool
  InstigatorActivePrereqs(outList: ObjectActionPrereq_Record[]): void
  GetInstigatorActivePrereqsCount(): number
  GetInstigatorActivePrereqsItem(index: number): ObjectActionPrereq_Record
  InstigatorActivePrereqsContains(item: ObjectActionPrereq_Record): Bool
  StartEffects(outList: ObjectActionEffect_Record[]): void
  GetStartEffectsCount(): number
  GetStartEffectsItem(index: number): ObjectActionEffect_Record
  StartEffectsContains(item: ObjectActionEffect_Record): Bool
  ActivationTime(outList: StatModifier_Record[]): void
  GetActivationTimeCount(): number
  GetActivationTimeItem(index: number): StatModifier_Record
  ActivationTimeContains(item: StatModifier_Record): Bool
  TargetActivePrereqs(outList: ObjectActionPrereq_Record[]): void
  GetTargetActivePrereqsCount(): number
  GetTargetActivePrereqsItem(index: number): ObjectActionPrereq_Record
  TargetActivePrereqsContains(item: ObjectActionPrereq_Record): Bool
  InstigatorPrereqs(outList: IPrereq_Record[]): void
  GetInstigatorPrereqsCount(): number
  GetInstigatorPrereqsItem(index: number): IPrereq_Record
  InstigatorPrereqsContains(item: IPrereq_Record): Bool
  Rewards(outList: RewardBase_Record[]): void
  GetRewardsCount(): number
  GetRewardsItem(index: number): RewardBase_Record
  RewardsContains(item: RewardBase_Record): Bool
  CompletionEffects(outList: ObjectActionEffect_Record[]): void
  GetCompletionEffectsCount(): number
  GetCompletionEffectsItem(index: number): ObjectActionEffect_Record
  CompletionEffectsContains(item: ObjectActionEffect_Record): Bool
  ActionName(): CName
  InteractionLayer(): CName
  Priority(): number
}

declare interface ScannableData_Record extends TweakDBRecord {

  FriendlyName(): string
  IconRecord(): UIIcon_Record
  LocalizedDescription(): CName
  LocalizedName(): CName
  IconName(): CName
}

declare interface IPrereq_Record extends TweakDBRecord {

  PrereqClassName(): CName
}

declare interface WidgetDefinition_Record extends TweakDBRecord {

  LibraryID(): string
  Styles(outList: WidgetStyle_Record[]): void
  GetStylesCount(): number
  GetStylesItem(index: number): WidgetStyle_Record
  StylesContains(item: WidgetStyle_Record): Bool
  Ratios(outList: WidgetRatio_Record[]): void
  GetRatiosCount(): number
  GetRatiosItem(index: number): WidgetRatio_Record
  RatiosContains(item: WidgetRatio_Record): Bool
  LibraryPath(): ResRef
  UseContentRatio(): Bool
}

declare interface Effector_Record extends TweakDBRecord {

  PrereqRecord(): IPrereq_Record
  StatModifierGroups(outList: StatModifierGroup_Record[]): void
  GetStatModifierGroupsCount(): number
  GetStatModifierGroupsItem(index: number): StatModifierGroup_Record
  StatModifierGroupsContains(item: StatModifierGroup_Record): Bool
  StatPoolUpdates(outList: StatPoolUpdate_Record[]): void
  GetStatPoolUpdatesCount(): number
  GetStatPoolUpdatesItem(index: number): StatPoolUpdate_Record
  StatPoolUpdatesContains(item: StatPoolUpdate_Record): Bool
  EffectorClassName(): CName
  RemoveAfterActionCall(): Bool
}

declare interface SenseShape_Record extends TweakDBRecord {

  Name(): CName
  DetectionMultiplier(): number
}

declare interface Attack_Record extends TweakDBRecord {

  AttackName(): string
  UserDataPath(): string
  DamageType(): DamageType_Record
  AttackType(): AttackType_Record
  StatModifiers(outList: StatModifier_Record[]): void
  GetStatModifiersCount(): number
  GetStatModifiersItem(index: number): StatModifier_Record
  StatModifiersContains(item: StatModifier_Record): Bool
  StatusEffects(outList: StatusEffectAttackData_Record[]): void
  GetStatusEffectsCount(): number
  GetStatusEffectsItem(index: number): StatusEffectAttackData_Record
  StatusEffectsContains(item: StatusEffectAttackData_Record): Bool
  HitFlags(): string[]
  GetHitFlagsCount(): number
  GetHitFlagsItem(index: number): string
  HitFlagsContains(item: string): Bool
  ClassName(): CName
  Range(): number
  PlayerIncomingDamageMultiplier(): number
  HitReactionSeverityMin(): number
  HitReactionSeverityMax(): number
  UseDefaultAimData(): Bool
}

declare interface Attack_GameEffect_Record extends Attack_Record {

  AttackTag(): CName
  EffectTag(): CName
  EffectName(): CName
  AudioTag(): CName
  AudioAttackIndex(): number
}

declare interface Stat_Record extends TweakDBRecord {

  EnumComment(): string
  LocalizedDescription(): string
  LocalizedName(): string
  EnumName(): string
  LocalizedStatDisplay(): string
  ImprovementRelation(): ImprovementRelation_Record
  Flags(): CName[]
  GetFlagsCount(): number
  GetFlagsItem(index: number): CName
  FlagsContains(item: CName): Bool
  Substats(outList: Substat_Record[]): void
  GetSubstatsCount(): number
  GetSubstatsItem(index: number): Substat_Record
  SubstatsContains(item: Substat_Record): Bool
  Min(): number
  Max(): number
  StatType(): gamedataStatType
}

declare interface ProjectileCollision_Record extends TweakDBRecord {

  Type(): ProjectileOnCollisionAction_Record
  EnergyLossFactor(): number
  CanStopAndStickOnHardSurfaces(): Bool
}

declare interface ChoiceCaptionPart_Record extends TweakDBRecord {

  PartType(): ChoiceCaptionPartType_Record
}

declare interface Item_Record extends BaseObject_Record {

  FriendlyName(): string
  IconPath(): string
  LocalizedName(): string
  MovementSound(): EquipmentMovementSound_Record
  DropSettings(): ItemDropSettings_Record
  Crosshair(): Crosshair_Record
  EquipArea(): EquipmentArea_Record
  CraftingData(): CraftingPackage_Record
  ItemSecondaryAction(): ItemAction_Record
  ItemType(): ItemType_Record
  Blueprint(): ItemBlueprint_Record
  NpcRPGData(): RPGDataPackage_Record
  Quality(): Quality_Record
  ParentAttachmentType(): ParentAttachmentType_Record
  ItemStructure(): ItemStructure_Record
  MinigameInstance(): Minigame_Def_Record
  Equivalent(): Item_Record
  ItemCategory(): ItemCategory_Record
  CpoItemCategory(): CPOItemCategoryBase_Record
  Icon(): UIIcon_Record
  OnEquipStats(): StatsList_Record
  EquipPrereqs(outList: IPrereq_Record[]): void
  GetEquipPrereqsCount(): number
  GetEquipPrereqsItem(index: number): IPrereq_Record
  EquipPrereqsContains(item: IPrereq_Record): Bool
  SlotPartListPreset(outList: SlotItemPartPreset_Record[]): void
  GetSlotPartListPresetCount(): number
  GetSlotPartListPresetItem(index: number): SlotItemPartPreset_Record
  SlotPartListPresetContains(item: SlotItemPartPreset_Record): Bool
  EquipAreas(outList: EquipmentArea_Record[]): void
  GetEquipAreasCount(): number
  GetEquipAreasItem(index: number): EquipmentArea_Record
  EquipAreasContains(item: EquipmentArea_Record): Bool
  AppearanceSuffixes(outList: ItemsFactoryAppearanceSuffixBase_Record[]): void
  GetAppearanceSuffixesCount(): number
  GetAppearanceSuffixesItem(index: number): ItemsFactoryAppearanceSuffixBase_Record
  AppearanceSuffixesContains(item: ItemsFactoryAppearanceSuffixBase_Record): Bool
  GameplayRestrictions(outList: GameplayRestrictionStatusEffect_Record[]): void
  GetGameplayRestrictionsCount(): number
  GetGameplayRestrictionsItem(index: number): GameplayRestrictionStatusEffect_Record
  GameplayRestrictionsContains(item: GameplayRestrictionStatusEffect_Record): Bool
  HairSkinnedMeshComponents(): CName[]
  GetHairSkinnedMeshComponentsCount(): number
  GetHairSkinnedMeshComponentsItem(index: number): CName
  HairSkinnedMeshComponentsContains(item: CName): Bool
  AppearanceSuffixesOwnerOverride(): Bool[]
  GetAppearanceSuffixesOwnerOverrideCount(): number
  GetAppearanceSuffixesOwnerOverrideItem(index: number): Bool
  AppearanceSuffixesOwnerOverrideContains(item: Bool): Bool
  OnEquip(outList: GameplayLogicPackage_Record[]): void
  GetOnEquipCount(): number
  GetOnEquipItem(index: number): GameplayLogicPackage_Record
  OnEquipContains(item: GameplayLogicPackage_Record): Bool
  AttachmentSlots(outList: AttachmentSlot_Record[]): void
  GetAttachmentSlotsCount(): number
  GetAttachmentSlotsItem(index: number): AttachmentSlot_Record
  AttachmentSlotsContains(item: AttachmentSlot_Record): Bool
  Tags(): CName[]
  GetTagsCount(): number
  GetTagsItem(index: number): CName
  TagsContains(item: CName): Bool
  OnAttach(outList: GameplayLogicPackage_Record[]): void
  GetOnAttachCount(): number
  GetOnAttachItem(index: number): GameplayLogicPackage_Record
  OnAttachContains(item: GameplayLogicPackage_Record): Bool
  SellPrice(outList: StatModifier_Record[]): void
  GetSellPriceCount(): number
  GetSellPriceItem(index: number): StatModifier_Record
  SellPriceContains(item: StatModifier_Record): Bool
  VisualTags(): CName[]
  GetVisualTagsCount(): number
  GetVisualTagsItem(index: number): CName
  VisualTagsContains(item: CName): Bool
  BuyPrice(outList: StatModifier_Record[]): void
  GetBuyPriceCount(): number
  GetBuyPriceItem(index: number): StatModifier_Record
  BuyPriceContains(item: StatModifier_Record): Bool
  OnLooted(outList: GameplayLogicPackage_Record[]): void
  GetOnLootedCount(): number
  GetOnLootedItem(index: number): GameplayLogicPackage_Record
  OnLootedContains(item: GameplayLogicPackage_Record): Bool
  PlacementSlots(outList: AttachmentSlot_Record[]): void
  GetPlacementSlotsCount(): number
  GetPlacementSlotsItem(index: number): AttachmentSlot_Record
  PlacementSlotsContains(item: AttachmentSlot_Record): Bool
  SlotPartList(outList: SlotItemPartListElement_Record[]): void
  GetSlotPartListCount(): number
  GetSlotPartListItem(index: number): SlotItemPartListElement_Record
  SlotPartListContains(item: SlotItemPartListElement_Record): Bool
  RequiredSlots(outList: ItemRequiredSlot_Record[]): void
  GetRequiredSlotsCount(): number
  GetRequiredSlotsItem(index: number): ItemRequiredSlot_Record
  RequiredSlotsContains(item: ItemRequiredSlot_Record): Bool
  Parts(outList: Item_Record[]): void
  GetPartsCount(): number
  GetPartsItem(index: number): Item_Record
  PartsContains(item: Item_Record): Bool
  Connections(outList: ItemPartConnection_Record[]): void
  GetConnectionsCount(): number
  GetConnectionsItem(index: number): ItemPartConnection_Record
  ConnectionsContains(item: ItemPartConnection_Record): Bool
  AnimationParameters(): CName[]
  GetAnimationParametersCount(): number
  GetAnimationParametersItem(index: number): CName
  AnimationParametersContains(item: CName): Bool
  DisplayName(): CName
  DropObject(): CName
  AudioName(): CName
  EquipSoundMetadata(): CName
  AudioSwitchValue(): CName
  EntityName(): CName
  AppearanceName(): CName
  AudioSwitchName(): CName
  AnimFeatureName(): CName
  StateMachineName(): CName
  AppearanceResourceName(): CName
  AnimName(): CName
  AnimSetResource(): ResRef
  MovementPattern(): CName
  LocalizedDescription(): CName
  CameraForward(): Vector3
  CameraUp(): Vector3
  GarmentOffset(): number
  Mass(): number
  IsSingleInstance(): Bool
  IsPart(): Bool
  UseNewSpawnMethod(): Bool
  IsGarment(): Bool
  IsCustomizable(): Bool
  EnableNpcRPGData(): Bool
  ReplicateWhenNotActive(): Bool
}

declare interface StatusEffect_Record extends TweakDBRecord {

  MaxStacks(): StatModifierGroup_Record
  RemoveAllStacksWhenDurationEndsStatModifiers(): StatModifierGroup_Record
  StatusEffectType(): StatusEffectType_Record
  AIData(): StatusEffectAIData_Record
  UiData(): StatusEffectUIData_Record
  Duration(): StatModifierGroup_Record
  PlayerData(): StatusEffectPlayerData_Record
  DebugTags(): CName[]
  GetDebugTagsCount(): number
  GetDebugTagsItem(index: number): CName
  DebugTagsContains(item: CName): Bool
  GameplayTags(): CName[]
  GetGameplayTagsCount(): number
  GetGameplayTagsItem(index: number): CName
  GameplayTagsContains(item: CName): Bool
  SFX(outList: StatusEffectFX_Record[]): void
  GetSFXCount(): number
  GetSFXItem(index: number): StatusEffectFX_Record
  SFXContains(item: StatusEffectFX_Record): Bool
  VFX(outList: StatusEffectFX_Record[]): void
  GetVFXCount(): number
  GetVFXItem(index: number): StatusEffectFX_Record
  VFXContains(item: StatusEffectFX_Record): Bool
  ImmunityStats(outList: Stat_Record[]): void
  GetImmunityStatsCount(): number
  GetImmunityStatsItem(index: number): Stat_Record
  ImmunityStatsContains(item: Stat_Record): Bool
  Packages(outList: GameplayLogicPackage_Record[]): void
  GetPackagesCount(): number
  GetPackagesItem(index: number): GameplayLogicPackage_Record
  PackagesContains(item: GameplayLogicPackage_Record): Bool
  AdditionalParam(): CName
  StopActiveSfxOnDeactivate(): Bool
  RemoveOnStoryTier(): Bool
  IsAffectedByTimeDilationPlayer(): Bool
  Savable(): Bool
  RemoveAllStacksWhenDurationEnds(): Bool
  IsAffectedByTimeDilationNPC(): Bool
  Replicated(): Bool
}

declare interface StatModifier_Record extends TweakDBRecord {

  StatType(): Stat_Record
  ModifierType(): CName
}

declare interface CombinedStatModifier_Record extends StatModifier_Record {

  RefStat(): Stat_Record
  RefObject(): CName
  OpSymbol(): CName
  Value(): number
}

declare interface ConstantStatModifier_Record extends StatModifier_Record {

  Value(): number
}

declare interface DeviceScreenType_Record extends TweakDBRecord {

  Ratio(): WidgetRatio_Record
  ContentRatio(): WidgetRatio_Record
  LibraryPath(): ResRef
}

declare interface ContinuousEffector_Record extends Effector_Record {

  DelayTime(): number
}

declare interface ItemAction_Record extends ObjectAction_Record {

  RemoveAfterUse(): Bool
}

declare interface EquipmentArea_Record extends TweakDBRecord {

  EnumComment(): string
  LocalizedName(): string
  EnumName(): CName
  NumberOfEquipSlots(): number
  Locked(): Bool
  Type(): gamedataEquipmentArea
}

declare interface ContentAssignment_Record extends TweakDBRecord {

  PowerLevelMod(): StatModifier_Record
  QuestType(): NPCQuestAffiliation_Record
}

declare interface DriveHelper_Record extends TweakDBRecord {

  Type(): DriveHelperType_Record
}

declare interface WeaponItem_Record extends Item_Record {

  Ammo(): Item_Record
  FxPackageQuickMelee(): WeaponFxPackage_Record
  HudIcon(): UIIcon_Record
  RangedAttacks(): RangedAttackPackage_Record
  SecondaryTriggerMode(): TriggerMode_Record
  Evolution(): WeaponEvolution_Record
  Manufacturer(): WeaponManufacturer_Record
  PrimaryTriggerMode(): TriggerMode_Record
  FxPackage(): WeaponFxPackage_Record
  DamageType(): DamageType_Record
  HolsteredItem(): Item_Record
  Attacks(outList: Attack_Record[]): void
  GetAttacksCount(): number
  GetAttacksItem(index: number): Attack_Record
  AttacksContains(item: Attack_Record): Bool
  TriggerModes(outList: TriggerMode_Record[]): void
  GetTriggerModesCount(): number
  GetTriggerModesItem(index: number): TriggerMode_Record
  TriggerModesContains(item: TriggerMode_Record): Bool
  ShootingPatternPackages(outList: AIPatternsPackage_Record[]): void
  GetShootingPatternPackagesCount(): number
  GetShootingPatternPackagesItem(index: number): AIPatternsPackage_Record
  ShootingPatternPackagesContains(item: AIPatternsPackage_Record): Bool
  AudioWeaponConfiguration(): CName
  EffectiveRangeFalloffCurve(): CName
  NPCAnimWrapperWeightOverride(): CName
  PreviewEffectTag(): CName
  EffectiveRangeCurve(): CName
  ProjectileEaseOutCurveName(): CName
  PreviewEffectName(): CName
  ForcedMinHitReaction(): number
  UseForcedTBHZOffset(): Bool
}

declare interface BaseSign_Record extends TweakDBRecord {

  Resource(): ResRef
  StyleStateName(): CName
  IsUnique(): Bool
}

declare interface Gadget_Record extends WeaponItem_Record {

}

declare interface GrenadeDeliveryMethod_Record extends TweakDBRecord {

  Type(): GrenadeDeliveryMethodType_Record
  Bounciness(): number
  DetonationTimer(): number
  TrackingRadius(): number
  InitialVelocity(): number
  InitialQuickThrowVelocity(): number
  AccelerationZ(): number
}

declare interface InteractionBase_Record extends TweakDBRecord {

  Name(): string
  Action(): string
  PrereqID(): string
  CaptionIcon(): ChoiceCaptionIconPart_Record
  Caption(): CName
  Description(): CName
}

declare interface Query_Record extends TweakDBRecord {

  RecordType(): CName
}

declare interface ItemQuery_Record extends Query_Record {

  Tags(): CName[]
  GetTagsCount(): number
  GetTagsItem(index: number): CName
  TagsContains(item: CName): Bool
  TagsToExclude(): CName[]
  GetTagsToExcludeCount(): number
  GetTagsToExcludeItem(index: number): CName
  TagsToExcludeContains(item: CName): Bool
}

declare interface ObjectActionCost_Record extends TweakDBRecord {

  CostMods(outList: StatModifier_Record[]): void
  GetCostModsCount(): number
  GetCostModsItem(index: number): StatModifier_Record
  CostModsContains(item: StatModifier_Record): Bool
}

declare interface StatPrereq_Record extends IPrereq_Record {

  StatType(): CName
  ComparisonType(): CName
  ValueToCheck(): number
}

declare interface LootTableElement_Record extends TweakDBRecord {

  PrereqID(): Prereq_Record
  StatModifiers(outList: StatModifier_Record[]): void
  GetStatModifiersCount(): number
  GetStatModifiersItem(index: number): StatModifier_Record
  StatModifiersContains(item: StatModifier_Record): Bool
  DropChance(): number
  DropCountMin(): number
  DropCountMax(): number
}

declare interface UIIcon_Record extends TweakDBRecord {

  AtlasResourcePath(): ResRef
  AtlasPartName(): CName
}

declare interface Accuracy_Record extends TweakDBRecord {

  AccuracyDropCooldown(): number
  MinDistanceToRunCooldown(): number
}

declare interface Base_MappinDefinition_Record extends TweakDBRecord {

  VisibilityRange(): number
  ShowOnMinimap(): Bool
  ShowOnMap(): Bool
  ShowInWorld(): Bool
}

declare interface MappinUIRuntimeProfile_Record extends TweakDBRecord {

  ScaleDistanceScanningParams(): MappinUIParamGroup_Record
  ClampingParams(): MappinClampingSettings_Record
  OpacityDistanceParams(): MappinUIParamGroup_Record
  ScaleDistanceParams(): MappinUIParamGroup_Record
  OpacityAngleParams(): MappinUIParamGroup_Record
  OpacityCustomParams(): MappinUICustomOpacityParams_Record
  VisibleInTier(): Bool[]
  GetVisibleInTierCount(): number
  GetVisibleInTierItem(index: number): Bool
  VisibleInTierContains(item: Bool): Bool
  WorldOffset(): Vector3
  ClampEllipseSize(): Vector2
  ClampRectMargin(): Vector2
  ScreenOffset(): Vector2
  Priority(): number
  ShowDistanceMinRange(): number
  ShowNameMinRange(): number
  HoverRadius(): number
  ShowDistance(): Bool
  DynamicClamping(): Bool
  ClampY(): Bool
  VisibleInScanning(): Bool
  ClampX(): Bool
  VisibleInBraindance(): Bool
  ScaleByDistance(): Bool
  KeepNameplate(): Bool
  UseQuestProperties(): Bool
  ShowTrackedIcon(): Bool
}

declare interface MiniGame_SymbolsWithRarity_Record extends TweakDBRecord {

  Name(): string
  Symbol(): string
  Probability(): number
}

declare interface PoolValueModifier_Record extends TweakDBRecord {

  StartDelay(): number
  ValuePerSec(): number
  RangeBegin(): number
  RangeEnd(): number
  Enabled(): Bool
  UsingPointValues(): Bool
  DelayOnChange(): Bool
}

declare interface NPCEquipmentGroupEntry_Record extends TweakDBRecord {

}

declare interface LCDScreen_Record extends BaseSign_Record {

  Message(): ScreenMessageData_Record
}

declare interface PhotoModeItem_Record extends TweakDBRecord {

  DisplayName(): CName
  Locked(): Bool
}

declare interface ReactionPreset_Record extends TweakDBRecord {

  ReactionGroup(): string
  EnumComment(): string
  StatModifiers(outList: StatModifier_Record[]): void
  GetStatModifiersCount(): number
  GetStatModifiersItem(index: number): StatModifier_Record
  StatModifiersContains(item: StatModifier_Record): Bool
  Rules(outList: Rule_Record[]): void
  GetRulesCount(): number
  GetRulesItem(index: number): Rule_Record
  RulesContains(item: Rule_Record): Bool
  PresetMapper(outList: PresetMapper_Record[]): void
  GetPresetMapperCount(): number
  GetPresetMapperItem(index: number): PresetMapper_Record
  PresetMapperContains(item: PresetMapper_Record): Bool
  EnumName(): CName
  FearThreshold(): number
  AggressiveThreshold(): number
  IsAggressive(): Bool
  Type(): gamedataReactionPresetType
}

declare interface ProjectileLaunch_Record extends TweakDBRecord {

  Type(): ProjectileLaunchMode_Record
  ApplyAdditiveProjectileSpiraling(): Bool
  CanTrackDevices(): Bool
}

declare interface StatModifierGroup_Record extends TweakDBRecord {

  StatModsLimitModifier(): StatModifier_Record
  StatModifiers(outList: StatModifier_Record[]): void
  GetStatModifiersCount(): number
  GetStatModifiersItem(index: number): StatModifier_Record
  StatModifiersContains(item: StatModifier_Record): Bool
  StatModsLimit(): number
  DrawBasedOnStatType(): Bool
}

declare interface Character_Record extends SpawnableObject_Record {

  CpoCharacterBuild(): string
  DevNotes(): string
  VendorID(): Vendor_Record
  Driving(): BaseDrivingParameters_Record
  ThreatTrackingPreset(): ThreatTrackingPresetBase_Record
  LootDrop(): LootTable_Record
  SquadParamsID(): AISquadParams_Record
  BountyDrawTable(): BountyDrawTable_Record
  SecondaryEquipment(): NPCEquipmentGroup_Record
  CharacterType(): NPCType_Record
  PrimaryEquipment(): NPCEquipmentGroup_Record
  UiNameplate(): UINameplate_Record
  ArchetypeData(): ArchetypeData_Record
  MinigameInstance(): Minigame_Def_Record
  Quest(): NPCQuestAffiliation_Record
  DefaultEquipment(): NPCEquipmentItem_Record
  CrowdMemberSettings(): CrowdSettingsPackageBase_Record
  Rarity(): NPCRarity_Record
  ActionMap(): ActionMap_Record
  DefaultCrosshair(): Crosshair_Record
  SensePreset(): SensePreset_Record
  ContentAssignment(): ContentAssignment_Record
  Affiliation(): Affiliation_Record
  ReactionPreset(): ReactionPreset_Record
  IdleActions(): AIActionSmartComposite_Record
  ScannerModulePreset(): ScannerModuleVisibilityPreset_Record
  OnSpawnGLPs(outList: GameplayLogicPackage_Record[]): void
  GetOnSpawnGLPsCount(): number
  GetOnSpawnGLPsItem(index: number): GameplayLogicPackage_Record
  OnSpawnGLPsContains(item: GameplayLogicPackage_Record): Bool
  Genders(outList: GenderEntity_Record[]): void
  GetGendersCount(): number
  GetGendersItem(index: number): GenderEntity_Record
  GendersContains(item: GenderEntity_Record): Bool
  Abilities(outList: GameplayAbility_Record[]): void
  GetAbilitiesCount(): number
  GetAbilitiesItem(index: number): GameplayAbility_Record
  AbilitiesContains(item: GameplayAbility_Record): Bool
  Items(outList: InventoryItem_Record[]): void
  GetItemsCount(): number
  GetItemsItem(index: number): InventoryItem_Record
  ItemsContains(item: InventoryItem_Record): Bool
  CrowdAppearanceNames(): CName[]
  GetCrowdAppearanceNamesCount(): number
  GetCrowdAppearanceNamesItem(index: number): CName
  CrowdAppearanceNamesContains(item: CName): Bool
  EquipmentAreas(outList: EquipmentArea_Record[]): void
  GetEquipmentAreasCount(): number
  GetEquipmentAreasItem(index: number): EquipmentArea_Record
  EquipmentAreasContains(item: EquipmentArea_Record): Bool
  AttachmentSlots(outList: AttachmentSlot_Record[]): void
  GetAttachmentSlotsCount(): number
  GetAttachmentSlotsItem(index: number): AttachmentSlot_Record
  AttachmentSlotsContains(item: AttachmentSlot_Record): Bool
  ItemGroups(outList: InventoryItemGroup_Record[]): void
  GetItemGroupsCount(): number
  GetItemGroupsItem(index: number): InventoryItemGroup_Record
  ItemGroupsContains(item: InventoryItemGroup_Record): Bool
  SecuritySquad(): CName
  DisplayName(): CName
  LootBagEntity(): CName
  GlobalSquad(): CName
  ArchetypeName(): CName
  AudioResourceName(): CName
  CommunitySquad(): CName
  DisplayDescription(): CName
  AlternativeDisplayName(): CName
  StateMachineName(): CName
  BaseAttitudeGroup(): CName
  AlternativeFullDisplayName(): CName
  AudioMeleeMaterial(): CName
  FullDisplayName(): CName
  CpoClassName(): CName
  VoiceTag(): CName
  ForcedTBHZOffset(): number
  Level(): number
  IsChild(): Bool
  DespawnChildCommunityWhenPlayerInVehicle(): Bool
  IsCrowd(): Bool
  CanHaveGenericTalk(): Bool
  DropsAmmoOnDeath(): Bool
  DropsWeaponOnDeath(): Bool
  StaticCommunityAppearancesDistributionEnabled(): Bool
  IsBumpable(): Bool
  IsLightCrowd(): Bool
  ForceCanHaveGenericTalk(): Bool
  EnableSensesOnStart(): Bool
  HasDirectionalStarts(): Bool
  DropsMoneyOnDeath(): Bool
  UseForcedTBHZOffset(): Bool
  SkipDisplayArchetype(): Bool
}

declare interface Device_Record extends BaseObject_Record {

  RPGActions(outList: RPGAction_Record[]): void
  GetRPGActionsCount(): number
  GetRPGActionsItem(index: number): RPGAction_Record
  RPGActionsContains(item: RPGAction_Record): Bool
  AudioResourceName(): CName
}

declare interface VehicleFxWheelsDecalsMaterial_Record extends TweakDBRecord {

  Material(): Material_Record
  Skid_marks_decal(): ResRef
  Tire_tracks_decal(): ResRef
}

declare interface VehicleWheelDrivingSetup_Record extends TweakDBRecord {

  FrontPreset(): VehicleWheelDrivingPreset_Record
  BackPreset(): VehicleWheelDrivingPreset_Record
}

declare interface VendorWare_Record extends TweakDBRecord {

  AvailabilityPrereq(): IPrereq_Record
  GenerationPrereqs(outList: IPrereq_Record[]): void
  GetGenerationPrereqsCount(): number
  GetGenerationPrereqsItem(index: number): IPrereq_Record
  GenerationPrereqsContains(item: IPrereq_Record): Bool
  Quantity(outList: StatModifier_Record[]): void
  GetQuantityCount(): number
  GetQuantityItem(index: number): StatModifier_Record
  QuantityContains(item: StatModifier_Record): Bool
  ForceQuality(): CName
}

declare interface BlackboardSystem extends IBlackboardSystem {

  Get(definition: BlackboardDefinition): IBlackboard
  GetLocalInstanced(entityID: EntityID, definition: BlackboardDefinition): IBlackboard
  RegisterLocalBlackboard(blackboard: IBlackboard): void
  UnregisterLocalBlackboard(blackboard: IBlackboard): void
  RegisterLocalBlackboardForDebugRender(blackboard: IBlackboard, debugName: string): void
}

declare interface AllBlackboardDefinitions extends IScriptable {

}

declare interface BlackboardDefinition extends IScriptable {

}

declare interface AIBlackboardDef extends BlackboardDefinition {

}

declare interface DeviceBaseBlackboardDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface BlackboardID {

}

declare interface MasterDeviceBaseBlackboardDef extends DeviceBaseBlackboardDef {

}

declare interface CustomBlackboardDef extends BlackboardDefinition {

}

declare interface IBlackboard extends IScriptable {

  /** @noSelf **/
  Create(definition: BlackboardDefinition): IBlackboard
  Signal(id: BlackboardID): void
  FireCallbacks(): void
  ClearAllFields(signal: Bool): void
  RegisterEntity(id: BlackboardID, gameInstance: GameInstance, entityID: EntityID): number
  UnregisterEntity(id: BlackboardID, callbackId: number): void
  GetBool(id: BlackboardID_Bool): Bool
  SetBool(id: BlackboardID_Bool, value: Bool, forceFire?: Bool): void
  SignalBool(id: BlackboardID_Bool): void
  RegisterListenerBool(id: BlackboardID_Bool, object: IScriptable, func: CName, fireIfValueExist?: Bool): number
  RegisterDelayedListenerBool(id: BlackboardID_Bool, object: IScriptable, func: CName, fireIfValueExist?: Bool): number
  UnregisterListenerBool(id: BlackboardID_Bool, callbackId: number): void
  GetInt(id: BlackboardID_Int): number
  SetInt(id: BlackboardID_Int, value: number, forceFire?: Bool): void
  SignalInt(id: BlackboardID_Int): void
  RegisterListenerInt(id: BlackboardID_Int, object: IScriptable, func: CName, fireIfValueExist?: Bool): number
  RegisterDelayedListenerInt(id: BlackboardID_Int, object: IScriptable, func: CName, fireIfValueExist?: Bool): number
  UnregisterListenerInt(id: BlackboardID_Int, callbackId: number): void
  GetUint(id: BlackboardID_Uint): number
  SetUint(id: BlackboardID_Uint, value: number, forceFire?: Bool): void
  SignalUint(id: BlackboardID_Uint): void
  RegisterListenerUint(id: BlackboardID_Uint, object: IScriptable, func: CName, fireIfValueExist?: Bool): number
  RegisterDelayedListenerUint(id: BlackboardID_Uint, object: IScriptable, func: CName, fireIfValueExist?: Bool): number
  UnregisterListenerUint(id: BlackboardID_Uint, callbackId: number): void
  GetFloat(id: BlackboardID_Float): number
  SetFloat(id: BlackboardID_Float, value: number, forceFire?: Bool): void
  SignalFloat(id: BlackboardID_Float): void
  RegisterListenerFloat(id: BlackboardID_Float, object: IScriptable, func: CName, fireIfValueExist?: Bool): number
  RegisterDelayedListenerFloat(id: BlackboardID_Float, object: IScriptable, func: CName, fireIfValueExist?: Bool): number
  UnregisterListenerFloat(id: BlackboardID_Float, callbackId: number): void
  GetString(id: BlackboardID_String): string
  SetString(id: BlackboardID_String, value: string, forceFire?: Bool): void
  SignalString(id: BlackboardID_String): void
  RegisterListenerString(id: BlackboardID_String, object: IScriptable, func: CName, fireIfValueExist?: Bool): number
  RegisterDelayedListenerString(id: BlackboardID_String, object: IScriptable, func: CName, fireIfValueExist?: Bool): number
  UnregisterListenerString(id: BlackboardID_String, callbackId: number): void
  GetName(id: BlackboardID_Name): CName
  SetName(id: BlackboardID_Name, value: CName, forceFire?: Bool): void
  SignalName(id: BlackboardID_Name): void
  RegisterListenerName(id: BlackboardID_Name, object: IScriptable, func: CName, fireIfValueExist?: Bool): number
  RegisterDelayedListenerName(id: BlackboardID_Name, object: IScriptable, func: CName, fireIfValueExist?: Bool): number
  UnregisterListenerName(id: BlackboardID_Name, callbackId: number): void
  GetVector2(id: BlackboardID_Vector2): Vector2
  SetVector2(id: BlackboardID_Vector2, value: Vector2, forceFire?: Bool): void
  SignalVector2(id: BlackboardID_Vector2): void
  RegisterListenerVector2(id: BlackboardID_Vector2, object: IScriptable, func: CName, fireIfValueExist?: Bool): number
  RegisterDelayedListenerVector2(id: BlackboardID_Vector2, object: IScriptable, func: CName, fireIfValueExist?: Bool): number
  UnregisterListenerVector2(id: BlackboardID_Vector2, callbackId: number): void
  GetVector4(id: BlackboardID_Vector4): Vector4
  SetVector4(id: BlackboardID_Vector4, value: Vector4, forceFire?: Bool): void
  SignalVector4(id: BlackboardID_Vector4): void
  RegisterListenerVector4(id: BlackboardID_Vector4, object: IScriptable, func: CName, fireIfValueExist?: Bool): number
  RegisterDelayedListenerVector4(id: BlackboardID_Vector4, object: IScriptable, func: CName, fireIfValueExist?: Bool): number
  UnregisterListenerVector4(id: BlackboardID_Vector4, callbackId: number): void
  GetQuat(id: BlackboardID_Quat): Quaternion
  SetQuat(id: BlackboardID_Quat, value: Quaternion, forceFire?: Bool): void
  SignalQuat(id: BlackboardID_Quat): void
  RegisterListenerQuat(id: BlackboardID_Quat, object: IScriptable, func: CName, fireIfValueExist?: Bool): number
  RegisterDelayedListenerQuat(id: BlackboardID_Quat, object: IScriptable, func: CName, fireIfValueExist?: Bool): number
  UnregisterListenerQuat(id: BlackboardID_Quat, callbackId: number): void
  GetEntityID(id: BlackboardID_EntityID): EntityID
  SetEntityID(id: BlackboardID_EntityID, value: EntityID, forceFire?: Bool): void
  SignalEntityID(id: BlackboardID_EntityID): void
  RegisterListenerEntityID(id: BlackboardID_EntityID, object: IScriptable, func: CName, fireIfValueExist?: Bool): number
  RegisterDelayedListenerEntityID(id: BlackboardID_EntityID, object: IScriptable, func: CName, fireIfValueExist?: Bool): number
  UnregisterListenerEntityID(id: BlackboardID_EntityID, callbackId: number): void
  GetVariant(tag: BlackboardID_Variant): Variant
  SetVariant(tag: BlackboardID_Variant, value: Variant, forceFire?: Bool): void
  SignalVariant(id: BlackboardID_Variant): void
  RegisterListenerVariant(tag: BlackboardID_Variant, object: IScriptable, func: CName, fireIfValueExist?: Bool): number
  RegisterDelayedListenerVariant(id: BlackboardID_Variant, object: IScriptable, func: CName, fireIfValueExist?: Bool): number
  UnregisterListenerVariant(id: BlackboardID_Variant, callbackId: number): void
  UnregisterDelayedListener(id: BlackboardID, callbackId: number): void
}

declare interface UI_PlayerStatsDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface UI_VisionModeDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface UI_ScannerDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface NetworkPresetBinderParameters_Record extends TweakDBRecord {

  PingPresetID(): NetworkPingingParameteres_Record
}

declare interface UI_TargetingInfoDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface PlayerStateMachineDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface FxResource {

  /** @noSelf **/
  IsValid(self: FxResource): Bool
}

declare interface SNetworkLinkData {

}

declare interface NetworkPingingParameteres_Record extends TweakDBRecord {

  VirtualNetwork(): VirtualNetwork_Record
  DirectPingDuration(): number
  PingRange(): number
  PulseRange(): number
  RevealMasterAfterLeavingFocusDuration(): number
  NetworkRevealDuration(): number
  RevealLinksAfterLeavingFocusDuration(): number
  SpacePingDuration(): number
  MaxFreePingLinks(): number
  AmmountOfIntervals(): number
  SpacePingAppearModifier(): number
  AllowSimultanousPinging(): Bool
  ForceInstantBeamKill(): Bool
  ShouldNetworkElementsPersistAfterFocus(): Bool
  RevealSlave(): Bool
  UsePulse(): Bool
  ShouldRevealNetworkAfterPulse(): Bool
  SuppressPingIfBackdoorsFound(): Bool
  RevealMaster(): Bool
  PulseRealObjects(): Bool
  ReavealNetworkOnMaster(): Bool
  QuickHacksExposedByDefaul(): Bool
  ShowOnlyTargetQuickHacks(): Bool
}

declare interface FxInstance extends IScriptable {

  Kill(): void
  BreakLoop(): void
  UpdateTransform(transform: WorldTransform): void
  UpdateTargetPosition(position: WorldPosition): void
  SetBlackboardValue(parameterName: CName, clampedValue: number): void
  IsValid(): Bool
  AttachToSlot(entity: Entity, targetType: entAttachmentTarget, slotName: CName, localTransform?: WorldTransform): void
  AttachToComponent(entity: Entity, targetType: entAttachmentTarget, componentName: CName, localTransform?: WorldTransform): void
}

declare interface RevealDeviceRequest extends Event {

}

declare interface DelaySystem extends IDelaySystem {

  DelayEvent(entity: Entity, eventToDelay: Event, timeToDelay: number, isAffectedByTimeDilation?: Bool): DelayID
  DelayCallback(delayCallback: DelayCallback, timeToDelay: number, isAffectedByTimeDilation?: Bool): DelayID
  DelayPSEvent(psID: PersistentID, classType: CName, eventToDelay: Event, timeToDelay: number, isAffectedByTimeDilation?: Bool): DelayID
  DelayScriptableSystemRequest(systemName: CName, requestToDelay: ScriptableSystemRequest, timeToDelay: number, isAffectedByTimeDilation?: Bool): DelayID
  DelayEventNextFrame(entity: Entity, eventToDelay: Event): void
  DelayCallbackNextFrame(delayCallback: DelayCallback): void
  DelayPSEventNextFrame(psID: PersistentID, classType: CName, eventToDelay: Event): void
  DelayScriptableSystemRequestNextFrame(systemName: CName, requestToDelay: ScriptableSystemRequest): void
  CancelDelay(delayID: DelayID): void
  CancelCallback(delayID: DelayID): void
  TickOnEvent(entity: Entity, eventToTick: TickableEvent, duration: number): DelayID
  CancelTick(delayID: DelayID): void
}

declare interface PingCachedData extends IScriptable {

  Initialize(sourceID: EntityID, timeout: number, ammountOfIntervals: number, pingType: EPingType, gameEffect: EffectInstance, revealNetworkAtEnd: Bool, fxResource: FxResource, position: Vector4, virtualNetworkShapeID: TweakDBID): void
  Initialize(timeout: number, ammountOfIntervals: number): void
  IncrementLinkCounter(): void
  GetLifetimeValue(): number
  UpdateCurrentInterval(): void
  GetCurrentMaxValue(): number
  GetCurrentMinValue(): number
}

declare interface IEffect extends IScriptable {

}

declare interface ScriptableSystemRequest extends IScriptable {

  Cancel(): void
}

declare interface RevealNetworkGridOnPulse extends Event {

}

declare interface RevealNetworkRequestRequest extends ScriptableSystemRequest {

}

declare interface UnregisterNetworkLinkRequest extends ScriptableSystemRequest {

}

declare interface RegisterNetworkLinkRequest extends ScriptableSystemRequest {

}

declare interface NewBackdoorDeviceRequest extends ScriptableSystemRequest {

}

declare interface SharedGameplayPS extends DeviceComponentPS {

  GetDeviceState(): EDeviceStatus
  CacheDeviceState(state: EDeviceStatus): void
  SetDeviceState(state: EDeviceStatus): void
  EvaluateDeviceState(): void
  QueuePSEvent(targetPS: PersistentState, evt: Event): void
  QueuePSEvent(targetID: PersistentID, psClassName: CName, evt: Event): void
  QueuePSEventWithDelay(targetPS: PersistentState, evt: Event, delay: number): void
  QueuePSEventWithDelay(targetID: PersistentID, psClassName: CName, evt: Event, delay: number): void
  QueueEntityEvent(entityID: EntityID, evt: Event): void
  IsPartOfSystem(systemType: ESystems): Bool
  IsConnectedToSecuritySystem(): Bool
  IsConnectedToSecuritySystem(level: ESecurityAccessLevel): Bool
  GetSecurityAccessLevel(): ESecurityAccessLevel
  FindHighestSecurityAccessLevel(securityAreas: SecurityAreaControllerPS[]): ESecurityAccessLevel
  IsBreached(): Bool
  HasNetworkBackdoor(): Bool
  IsConnectedToBackdoorDevice(): Bool
  GetBackdoorAccessPoint(): AccessPointControllerPS
  GetAccessPoints(): AccessPointControllerPS[]
  GetNetworkName(): string
  CheckMasterConnectedClassTypes(): ConnectedClassTypes
  WasRevealedInNetworkPing(): Bool
  SetRevealedInNetworkPing(wasRevealed: Bool): void
  OnSetRevealedInNetwork(evt: SetRevealedInNetwork): EntityNotificationType
  IsPuppet(): Bool
}

declare interface ScriptableDeviceComponentPS extends SharedGameplayPS {

  OnInstantiated(): Bool
  GetParents(outDevices: DeviceComponentPS[]): void
  GetImmediateParents(): DeviceComponentPS[]
  Initialize(): void
  OnGameAttached(evt: GameAttachedEvent): EntityNotificationType
  OnLogicReady(evt: SetLogicReadyEvent): EntityNotificationType
  GameAttached(): void
  LogicReady(): void
  SetDeviceState(state: EDeviceStatus): void
  OnDeviceDynamicConnectionChange(evt: DeviceDynamicConnectionChange): EntityNotificationType
  CacheDevices(): void
  InitializeRPGParams(): void
  InitializeContentScale(): void
  InitializeStats(): void
  InitializeStatPools(): void
  InitializeSkillChecks(container: BaseSkillCheckContainer): void
  IsInitialized(): Bool
  ForceResolveGameplayStateOnAttach(): Bool
  ForceVisibilityInAnimSystemOnLogicReady(): Bool
  GetDeviceName(): string
  GetTweakDBRecord(): TweakDBID
  GetTweakDBDescriptionRecord(): TweakDBID
  GetContentAssignmentID(): TweakDBID
  IsConnectedToSystem(): Bool
  IsPartOfSystem(systemType: ESystems): Bool
  GetDurabilityState(): EDeviceDurabilityState
  GetActivationState(): EActivationState
  HasAdvancedInteractions(): Bool
  CanBeTrapped(): Bool
  CanBeDisassembled(): Bool
  CanBeFixed(): Bool
  GetDurabilityType(): EDeviceDurabilityType
  HasPersonalLinkSlot(): Bool
  CanBeScavengedBySpiderbot(): Bool
  HasQuickHacksDisabled(): Bool
  GetMinigameDefinition(): TweakDBID
  OnQuestMinigameRequest(): void
  ShouldExposePersonalLinkAction(): Bool
  SetHasPersonalLinkSlot(isPersonalLinkSlotPresent: Bool): void
  SetHasUICameraZoom(hasUICameraZoom: Bool): void
  ToggleInteractivity(isInteractive: Bool): void
  IsInteractive(): Bool
  IsAdvancedInteractionModeOn(): Bool
  IsAdvancedInteractionModeOff(): Bool
  GetPersonalLinkStatus(): EPersonalLinkConnectionStatus
  IsPersonalLinkConnected(): Bool
  IsPersonalLinkConnecting(): Bool
  IsPersonalLinkDisconnected(): Bool
  IsSecurityWakeUpBlocked(): Bool
  HasUICameraZoom(): Bool
  AllowsUICameraZoomDynamicSwitch(): Bool
  HasFullScreenUI(): Bool
  IsHighlightedInFocusMode(): Bool
  IsControlledByPlayer(): Bool
  CanPlayerTakeOverControl(): Bool
  IsRestarting(): Bool
  IsGlitching(): Bool
  IsDistracting(): Bool
  IsActivated(): Bool
  GetActiveContexts(): gamedeviceRequestType[]
  GetMinigameAttempt(): number
  ShouldScannerShowStatus(): Bool
  ShouldScannerShowNetwork(): Bool
  ShouldScannerShowAttitude(): Bool
  ShouldScannerShowRole(): Bool
  ShouldScannerShowHealth(): Bool
  CanBeInDeviceChain(): Bool
  ShouldShowExamineIntaraction(): Bool
  IsSpiderbotInteractionOrdered(): Bool
  OnSetIsSpiderbotInteractionOrderedEvent(evt: SetIsSpiderbotInteractionOrderedEvent): EntityNotificationType
  IsInDirectInteractionRange(): Bool
  HasActiveContext(context: gamedeviceRequestType): Bool
  HasPlaystyle(playstyle: EPlaystyle): Bool
  GetPlaystyles(): EPlaystyle[]
  HasAnyPlaystyle(): Bool
  PassDeviceName(deviceName: string, dbgDeviceName?: CName): void
  DisbaleRPGChecksForAction(actionID: TweakDBID): void
  EnableRPGChecksForAction(actionID: TweakDBID): void
  HasAnyActionsWithDisabledRPGChecks(): Bool
  IsActionRPGRequirementDisabled(actionID: TweakDBID): Bool
  SetGlitchingState(isGlitching: Bool): void
  AddActiveContext(context: gamedeviceRequestType): void
  OnAddActiveContext(evt: AddActiveContextEvent): EntityNotificationType
  RemoveActiveContext(context: gamedeviceRequestType): void
  OnRemoveActiveContext(evt: RemoveActiveContextEvent): EntityNotificationType
  RefreshPS(): void
  OnPSRefreshEvent(evt: PSRefreshEvent): EntityNotificationType
  AddPlaystyle(playstyle: EPlaystyle): void
  RemovePlaystyle(playstyle: EPlaystyle): void
  DetermineInitialPlaystyle(): void
  OnActionOverride(evt: ActionOverride): EntityNotificationType
  GetAllQuickHackVulnerabilities(): TweakDBID[]
  GetActiveQuickHackVulnerabilities(): TweakDBID[]
  HasAnyActiveQuickHackVulnerabilities(): Bool
  CanPlayerUseQuickHackVulnerability(data: TweakDBID): Bool
  InitializeQuickHackVulnerabilities(): void
  HasQuickHackVulnerability(data: TweakDBID): Bool
  HasHasQuickHackVulnerabilitiesInitialized(): Bool
  AddQuickHackVulnerability(data: TweakDBID): void
  RemoveQuickHackVoulnerability(data: TweakDBID): void
  UpdateQuickHackableState(isQuickHackable: Bool): void
  SetPlayerTakeOverControl(canBeControlled: Bool): void
  GetJuryrigTrapState(): EJuryrigTrapState
  IsJuryrigTrapArmed(): Bool
  IsJuryrigTrapUnarmed(): Bool
  IsJuryrigTrapTriggered(): Bool
  IsON(): Bool
  IsOFF(): Bool
  IsEnabled(): Bool
  IsDisabled(): Bool
  IsPowered(): Bool
  IsUnpowered(): Bool
  GetDeviceStatus(): string
  GetDeviceStatusAction(): BaseDeviceStatus
  GetScannerStatusRecord(): TweakDBID
  GetDeviceStatusTextData(): inkTextParams
  GetActionByName(actionName: CName, entityID?: EntityID): DeviceAction
  GetActionByName(actionName: CName, context: GetActionsContext): DeviceAction
  GetMinigameActionByName(actionName: CName, context: GetActionsContext): DeviceAction
  GetTotalClearance(entityID?: EntityID): GetActionsContext
  GetTotalClearanceValue(): Clearance
  GetCustomClearance(min: number, max: number): Clearance
  GetClearance(): Clearance
  IsPlayerPerformingTakedown(): Bool
  GetActions(outActions: DeviceAction[], context: GetActionsContext): Bool
  IsPotentiallyQuickHackable(): Bool
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(outActions: DeviceAction[], context: GetActionsContext): void
  GetMinigameActions(outActions: DeviceAction[], context: GetActionsContext): void
  FinalizeGetQuickHackActions(outActions: DeviceAction[], context: GetActionsContext): void
  FinalizeGetActions(outActions: DeviceAction[]): void
  GetQuickHackActionsExternal(outActions: DeviceAction[], context: GetActionsContext): void
  CanCreateAnySpiderbotActions(): Bool
  GetSpiderbotActions(outActions: DeviceAction[], context: GetActionsContext): void
  SetInactiveActionsWithExceptions(outActions: DeviceAction[]): void
  GetActionsRestrictionData(allowedNames: string[], disallowedNames: string[], inactiveReason: string): Bool
  FindActionInTweakList(actionName: CName, allowedNames: string[]): Bool
  GetLocalPassword(): CName
  HasAuthorizationModule(): Bool
  IsAuthorizationModuleOn(): Bool
  IsAuthorizationModuleOff(): Bool
  SetBlockSecurityWakeUp(value: Bool): void
  GetMySecurityAccessLevel(): ESecurityAccessLevel
  GetSecurityAlarm(): SecurityAlarmControllerPS
  GetDropPointSystem(): DropPointSystem
  GetSecurityAreasWithUsersInside(uniqueUsers: AreaEntry[]): SecurityAreaControllerPS[]
  GetSecurityAreasWithUsersInside(): SecurityAreaControllerPS[]
  GetSecurityAreasWithUserInside(whoToCheck: EntityID): SecurityAreaControllerPS[]
  GetSecurityAreasWithUserInside(whoToCheck: GameObject): SecurityAreaControllerPS[]
  SetCurrentSpiderbotActionPerformed(action: ScriptableDeviceAction): void
  GetCurrentlyQueuedSpiderbotAction(): ScriptableDeviceAction
  IsDeviceSecured(): Bool
  IsDeviceSecuredWithPassword(): Bool
  IsDeviceSecuredWithKeycard(): Bool
  HasActiveStaticHackingSkillcheck(): Bool
  IsPlayerAuthorized(): Bool
  CanPayToAuthorize(): Bool
  IsUserAuthorized(user: EntityID): Bool
  GetUserAuthorizationLevel(user: EntityID): ESecurityAccessLevel
  CurrentlyAuthorizedUsers(): SecuritySystemClearanceEntry[]
  UserAuthorizationAttempt(userToAuthorize: EntityID, password?: CName): Bool
  MasterUserAuthorizationAttempt(userToAuthorize: EntityID, password?: CName): Bool
  ActionAuthorizeUser(): AuthorizeUser
  OnAuthorizeUser(evt: AuthorizeUser): EntityNotificationType
  ActionSetAuthorizationModuleON(): SetAuthorizationModuleON
  OnSetAuthorizationModuleON(evt: SetAuthorizationModuleON): EntityNotificationType
  ActionSetAuthorizationModuleOFF(): SetAuthorizationModuleOFF
  OnSetAuthorizationModuleOFF(evt: SetAuthorizationModuleOFF): EntityNotificationType
  ActionPay(context: GetActionsContext): Pay
  TriggerSecuritySystemNotification(whoBreached: GameObject, lastKnownPosition: Vector4, type: ESecurityNotificationType, forceNotification?: Bool): void
  ActionSecurityBreachNotification(lastKnownPosition: Vector4, whoBreached: GameObject, type: ESecurityNotificationType): SecuritySystemInput
  WasQuickHacked(): Bool
  WasQuickHackAttempt(): Bool
  WasQuickHackJustPerformed(quickHackName: CName): Bool
  OnSetWasQuickHacked(evt: SetQuickHackEvent): EntityNotificationType
  OnSetWasQuickHackedAtempt(evt: SetQuickHackAttemptEvent): EntityNotificationType
  IsConnectedToAccessPoint(): Bool
  GetNetworkSizeCount(): number
  GetBackdoorDevices(): ScriptableDeviceComponentPS[]
  IsMainframe(): Bool
  GetNetworkArea(): NetworkAreaControllerPS
  HackingPerformed(): Bool
  EngineeringPerformed(): Bool
  DemolitionPerformed(): Bool
  ActionHacking(context: GetActionsContext): ActionHacking
  OnActionHacking(evt: ActionHacking): EntityNotificationType
  ResolveActionHackingCompleted(evt: ActionHacking): void
  InitializeBackdoorSkillcheck(): void
  ActionEngineering(context: GetActionsContext): ActionEngineering
  OnActionEngineering(evt: ActionEngineering): EntityNotificationType
  ActionDemolition(context: GetActionsContext): ActionDemolition
  OnActionDemolition(evt: ActionDemolition): EntityNotificationType
  OnResolveSkillchecksEvent(evt: ResolveSkillchecksEvent): EntityNotificationType
  ResolveOtherSkillchecks(): void
  GetSkillCheckContainer(): BaseSkillCheckContainer
  HasAnySkillCheckActive(): Bool
  IsHackingSkillCheckActive(): Bool
  IsDemolitionSkillCheckActive(): Bool
  IsEngineeringSkillCheckActive(): Bool
  CanPassEngineeringSkillCheck(requester: GameObject): Bool
  CanPassDemolitionSkillCheck(requester: GameObject): Bool
  CanPassHackingSkillCheck(requester: GameObject): Bool
  CanPassAnySkillCheck(requester: GameObject): Bool
  CanPassAnySkillCheckOnMaster(requester: GameObject): Bool
  IsSkillCheckActive(): Bool
  WasHackingSkillCheckActive(): Bool
  WasDemolitionSkillCheckActive(): Bool
  WasEngineeringSkillCheckActive(): Bool
  PushSkillCheckActions(outActions: DeviceAction[], context: GetActionsContext): Bool
  HasCyberdeck(): Bool
  ShouldPersonalLinkBlockActions(): Bool
  CreateSkillcheckInfo(context: GetActionsContext): UIInteractionSkillCheck[]
  IsSpiderbotActionsConditionsFulfilled(): Bool
  ActionSpiderbotDistraction(): SpiderbotDistraction
  ActionQuickHackDistraction(): QuickHackDistraction
  IsInvestigated(): Bool
  FinishDistraction(): void
  OnQuickHackDistraction(evt: QuickHackDistraction): EntityNotificationType
  OnQuickHackAuthorization(evt: QuickHackAuthorization): EntityNotificationType
  GetConnectionHighlightObjects(): NodeRef[]
  ShouldDrawGridLink(): Bool
  IsLinkDynamic(): Bool
  ShouldRevealDevicesGrid(): Bool
  CanRevealDevicesGridWhenUnpowered(): Bool
  GetVirtualNetworkShapeID(): TweakDBID
  GetCityLightSystem(): CityLightSystem
  GetEquipmentSystem(): EquipmentSystem
  CheckIfMyBackdoorsWereRevealedInNetworkPing(): Bool
  ShouldRevealNetworkGrid(): Bool
  SetFocusModeData(isHighlighted: Bool): void
  OnForceUpdateDefaultHighlightEvent(evt: ForceUpdateDefaultHighlightEvent): EntityNotificationType
  RevealNetworkGrid(shouldDraw: Bool, ownerEntityPosition?: Vector4, fxDefault?: FxResource, fxBreached?: FxResource, isPing?: Bool, lifetime?: number, revealSlave?: Bool, revealMaster?: Bool, ignoreRevealed?: Bool): void
  FinalizeNetworkLinkRegistration(registerAsMaster: Bool, relevantDevices: DeviceComponentPS[], breachedResource: FxResource, defaultResource: FxResource, isPing: Bool, lifetime: number, revealSlave?: Bool, revealMaster?: Bool): void
  RevealDevicesGrid(shouldDraw: Bool, ownerEntityPosition?: Vector4, fxDefault?: FxResource, isPing?: Bool, lifetime?: number, revealSlave?: Bool, revealMaster?: Bool, ignoreRevealed?: Bool): void
  RevealDevicesGridOnEntity_Event(shouldDraw: Bool, target: EntityID): void
  OnRevealNetworkGridEvent(evt: RevealNetworkGridEvent): EntityNotificationType
  OnRevealDevicesGridEvent(evt: RevealDevicesGridEvent): EntityNotificationType
  OnPingNetworkGridEvent(evt: PingNetworkGridEvent): EntityNotificationType
  ShouldDebug(): Bool
  GetDebugName(): string
  GetDebugPath(): CName
  GetDebugTags(): string
  LogActionDetails(action: ScriptableDeviceAction, cachedStatus?: BaseDeviceStatus, context?: string, status?: string, overrideStatus?: Bool): void
  GetWidgetTypeName(): CName
  GetDeviceIconPath(): string
  GetDeviceIconID(): CName
  OnRequestActionWidgetsUpdate(evt: RequestActionWidgetsUpdateEvent): void
  OnRequestUIRefresh(evt: RequestUIRefreshEvent): void
  ResloveUIOnAction(action: ScriptableDeviceAction): void
  GetInkWidgetTweakDBID(context: GetActionsContext): TweakDBID
  OnThumbnailUI(evt: ThumbnailUI): EntityNotificationType
  RefreshUI(blackboard: IBlackboard): void
  RequestBreadCrumbUpdate(blackboard: IBlackboard, data: SBreadCrumbUpdateData): void
  ResolveDeviceWidgetTweakDBData(data: SDeviceWidgetPackage): SDeviceWidgetPackage
  GetWidgetVisualState(): EWidgetState
  GetDeviceWidget(context: GetActionsContext): SDeviceWidgetPackage
  GetThumbnailWidget(): SThumbnailWidgetPackage
  GetActionWidgets(context: GetActionsContext): SActionWidgetPackage[]
  RequestActionWidgetsUpdate(blackboard: IBlackboard): void
  RequestDeviceWidgetsUpdate(blackboard: IBlackboard): void
  ResolveBaseActionOperation(action: ScriptableDeviceAction): void
  GetDeviceOperationsContainer(): DeviceOperationsContainer
  StorePerformedActionID(oryginalAction: ScriptableDeviceAction): void
  ResetPerformedActionsStorage(): void
  GetPerformedActionsIDs(): CName[]
  GetPerformedActions(): SPerformedActions[]
  WasActionPerformed(actionID: CName): number
  WasDeviceActionPerformed(actionID: CName): Bool
  WasActionPerformed(actionID: CName, context: EActionContext): Bool
  IsIniatialStateOperationPerformed(): Bool
  SetInitialStateOperataionPerformed(value: Bool): void
  DetermineInteractionState(interactionComponent: InteractionComponent, context: GetActionsContext): void
  /** @noSelf **/
  SetActionsInactiveAll(actions: DeviceAction[], reason?: string, exludedAction?: CName): void
  PushInactiveInteractionChoice(context: GetActionsContext, choices: InteractionChoice[]): void
  DetermineAreaHintIndicatorState(context: GetActionsContext): void
  PushChoicesToInteractionComponent(interactionComponent: InteractionComponent, context: GetActionsContext, choices: InteractionChoice[]): void
  TutorialProcessSkillcheck(choices: InteractionChoice[]): void
  GenerateContext(requestType: gamedeviceRequestType, providedClearance: Clearance, providedProcessInitiator?: GameObject, providedRequestor?: EntityID): GetActionsContext
  DetermineGameplayViability(context: GetActionsContext, hasActiveActions: Bool): Bool
  PushReturnActions(outActions: DeviceAction[], context: GetActionsContext): Bool
  SetActionIllegality(outActions: DeviceAction[], isIllegal: Bool): void
  GetRemoteActions(outActions: DeviceAction[], context: GetActionsContext): void
  EvaluateActionsRPGAvailabilty(outActions: DeviceAction[], context: GetActionsContext): void
  SetActionsQuickHacksExecutioner(outActions: DeviceAction[]): void
  MarkActionsAsQuickHacks(actionsToMark: DeviceAction[]): void
  MarkActionsAsSpiderbotActions(actionsToMark: DeviceAction[]): void
  ExtractActions(actionNames: CName[]): DeviceAction[]
  GetQuestActions(outActions: DeviceAction[], context: GetActionsContext): void
  ActionDeviceStatus(): BaseDeviceStatus
  ActionToggleActivation(): ToggleActivation
  OnToggleActivation(evt: ToggleActivation): EntityNotificationType
  ActionToggleActivate(): ToggleActivate
  OnToggleActivate(evt: ToggleActivate): EntityNotificationType
  ActionActivateDevice(): ActivateDevice
  OnActivateDevice(evt: ActivateDevice): EntityNotificationType
  ActionDeactivateDevice(): DeactivateDevice
  OnDeactivateDevice(evt: DeactivateDevice): EntityNotificationType
  ActionTogglePower(): TogglePower
  OnTogglePower(evt: TogglePower): EntityNotificationType
  ActionToggleON(): ToggleON
  OnToggleON(evt: ToggleON): EntityNotificationType
  ActionSetDeviceON(): SetDeviceON
  OnSetDeviceON(evt: SetDeviceON): EntityNotificationType
  ActionSetDeviceOFF(): SetDeviceOFF
  OnSetDeviceOFF(evt: SetDeviceOFF): EntityNotificationType
  ActionSetDevicePowered(): SetDevicePowered
  OnSetDevicePowered(evt: SetDevicePowered): EntityNotificationType
  ActionSetDeviceUnpowered(): SetDeviceUnpowered
  OnSetDeviceUnpowered(evt: SetDeviceUnpowered): EntityNotificationType
  ActionTogglePersonalLink(executor: GameObject, questForcesDisconnection?: Bool, skipMinigame?: Bool): TogglePersonalLink
  OnTogglePersonalLink(evt: TogglePersonalLink): EntityNotificationType
  ResolvePersonalLinkConnection(evt: TogglePersonalLink, abortOperations: Bool): void
  DisconnectPersonalLink(executor: GameObject, layer: CName, isForcedByQuest?: Bool): void
  DisconnectPersonalLink(evt: ScriptableDeviceAction, isForcedByQuest?: Bool): void
  ActionRemoteBreach(): RemoteBreach
  OnActionRemoteBreach(evt: RemoteBreach): EntityNotificationType
  ActionPing(): PingDevice
  OnActionPing(evt: PingDevice): EntityNotificationType
  GetNetworkBlackboardDef(): NetworkBlackboardDef
  GetNetworkBlackboard(): IBlackboard
  OnPingSquadEvent(evt: ForwardPingToSquadEvent): EntityNotificationType
  PingSquad(): void
  ActionToggleNetrunnerDive(abortDive: Bool, skipMinigame?: Bool, isRemote?: Bool): ToggleNetrunnerDive
  OnToggleNetrunnerDive(evt: ToggleNetrunnerDive): EntityNotificationType
  ResolveDive(isBackdoor: Bool): void
  HackingMinigameEnded(state: HackingMinigameState): void
  SetMinigameState(state: HackingMinigameState): void
  WasHackingMinigameSucceeded(): Bool
  WashackingMinigameFailed(): Bool
  FinalizeNetrunnerDive(state: HackingMinigameState): void
  ActionToggleZoomInteraction(): ToggleZoomInteraction
  ActionQuestForceCameraZoom(value: Bool): QuestForceCameraZoom
  ActionQuestForceCameraZoomNoWorkspot(value: Bool): QuestForceCameraZoom
  ActionOpenFullscreenUI(): OpenFullscreenUI
  OnToggleZoomInteraction(evt: ToggleZoomInteraction): EntityNotificationType
  OnQuestForceCameraZoom(evt: QuestForceCameraZoom): EntityNotificationType
  OnSetCustomPersonalLinkReason(evt: SetCustomPersonalLinkReason): EntityNotificationType
  OnOpenFullscreenUI(evt: OpenFullscreenUI): EntityNotificationType
  ActionDisassembleDevice(): DisassembleDevice
  ActionFixDevice(): FixDevice
  OnFixDevice(evt: FixDevice): EntityNotificationType
  OnDisassembleDevice(evt: DisassembleDevice): EntityNotificationType
  ActionToggleJuryrigTrap(): ToggleJuryrigTrap
  OnToggleJuryrigTrap(evt: ToggleJuryrigTrap): EntityNotificationType
  ActionScavenge(context: GetActionsContext): ActionScavenge
  OnActionScavenge(evt: ActionScavenge): EntityNotificationType
  ActionSetExposeQuickHacks(): SetExposeQuickHacks
  OnSetExposeQuickHacks(evt: SetExposeQuickHacks): EntityNotificationType
  OnRevokeQuickHackAccess(evt: RevokeQuickHackAccess): Bool
  ActionQuickHackToggleON(): QuickHackToggleON
  OnQuickHackToggleOn(evt: QuickHackToggleON): EntityNotificationType
  ActionGlitchScreen(actionID: TweakDBID, programID: TweakDBID, timeout?: number): GlitchScreen
  OnGlitchScreen(evt: GlitchScreen): EntityNotificationType
  ActionQuestForceEnabled(): QuestForceEnabled
  OnQuestForceEnabled(evt: QuestForceEnabled): EntityNotificationType
  ActionQuestForceDisabled(): QuestForceDisabled
  OnQuestForceDisabled(evt: QuestForceDisabled): EntityNotificationType
  ActionQuestForcePower(): QuestForcePower
  OnQuestForcePower(evt: QuestForcePower): EntityNotificationType
  ActionQuestForceUnpower(): QuestForceUnpower
  OnQuestForceUnpower(evt: QuestForceUnpower): EntityNotificationType
  ActionQuestForceON(): QuestForceON
  OnQuestForceON(evt: QuestForceON): EntityNotificationType
  ActionQuestForceOFF(): QuestForceOFF
  OnQuestForceOFF(evt: QuestForceOFF): EntityNotificationType
  ActionQuestForceAuthorizationEnabled(): QuestForceAuthorizationEnabled
  OnQuestForceAuthorizationEnabled(evt: QuestForceAuthorizationEnabled): EntityNotificationType
  ActionQuestEnableFixing(): QuestEnableFixing
  ActionQuestDisableFixing(): QuestDisableFixing
  OnQuestEnableFixing(evt: QuestEnableFixing): EntityNotificationType
  OnQuestDisableFixing(evt: QuestDisableFixing): EntityNotificationType
  ActionQuestRemoveQuickHacks(): QuestRemoveQuickHacks
  OnQuestRemoveQuickHacks(evt: QuestRemoveQuickHacks): EntityNotificationType
  ActionQuestResetPerfomedActionsStorage(): QuestResetPerformedActionsStorage
  OnQuestResetPerfomedActionsStorage(evt: QuestResetPerformedActionsStorage): EntityNotificationType
  ActionQuestBreachAccessPoint(): QuestBreachAccessPoint
  OnQuestBreachAccessPoint(evt: QuestBreachAccessPoint): EntityNotificationType
  ActionQuestForceAuthorizationDisabled(): QuestForceAuthorizationDisabled
  OnQuestForceAuthorizationDisabled(evt: QuestForceAuthorizationDisabled): EntityNotificationType
  ActionQuestForceDisconnectPersonalLink(): QuestForceDisconnectPersonalLink
  OnQuestForceDisconnectPersonalLink(evt: QuestForceDisconnectPersonalLink): EntityNotificationType
  ActionQuestForcePersonalLinkUnderStrictQuestControl(): QuestForcePersonalLinkUnderStrictQuestControl
  OnQuestForcePersonalLinkUnderStrictQuestControl(evt: QuestForcePersonalLinkUnderStrictQuestControl): EntityNotificationType
  ActionQuestForceJuryrigTrapArmed(): QuestForceJuryrigTrapArmed
  OnQuestForceJuryrigTrapArmed(evt: QuestForceJuryrigTrapArmed): EntityNotificationType
  ActionQuestForceJuryrigTrapDeactivated(): QuestForceJuryrigTrapDeactivated
  OnQuestForceJuryrigTrapDeactivated(evt: QuestForceJuryrigTrapDeactivated): EntityNotificationType
  ActionQuestResetDeviceToInitialState(): QuestResetDeviceToInitialState
  OnQuestResetDeviceToInitialState(evt: QuestResetDeviceToInitialState): EntityNotificationType
  ActionQuestStartGlitch(): QuestStartGlitch
  OnQuestStartGlitch(evt: QuestStartGlitch): EntityNotificationType
  ActionQuestStopGlitch(): QuestStopGlitch
  OnQuestStopGlitch(evt: QuestStopGlitch): EntityNotificationType
  OnSetAsQuestImportantEvent(evt: SetAsQuestImportantEvent): EntityNotificationType
  ActionQuestForceSecuritySystemSafe(): QuestForceSecuritySystemSafe
  OnQuestForceSecuritySystemSafe(evt: QuestForceSecuritySystemSafe): EntityNotificationType
  ActionQuestForceSecuritySystemAlarmed(): QuestForceSecuritySystemAlarmed
  OnQuestForceSecuritySystemAlarmed(evt: QuestForceSecuritySystemAlarmed): EntityNotificationType
  ActionQuestForceSecuritySystemArmed(): QuestForceSecuritySystemArmed
  OnQuestForceSecuritySystemArmed(evt: QuestForceSecuritySystemArmed): EntityNotificationType
  ActionQuestForceTakeControlOverCamera(): QuestForceTakeControlOverCamera
  ActionQuestForceTakeControlOverCameraWithChain(): QuestForceTakeControlOverCameraWithChain
  ActionQuestForceStopTakeControlOverCamera(): QuestForceStopTakeControlOverCamera
  ActionQuestForceActivate(): QuestForceActivate
  OnQuestForceActivate(evt: QuestForceActivate): EntityNotificationType
  ActionQuestForceDeactivate(): QuestForceDeactivate
  OnQuestForceDeactivate(evt: QuestForceDeactivate): EntityNotificationType
  ActionTakeOverSecuritySystem(executor: GameObject): TakeOverSecuritySystem
  OnSecuritySystemOutput(evt: SecuritySystemOutput): EntityNotificationType
  OnSecuritySystemForceAttitudeChange(evt: SecuritySystemForceAttitudeChange): EntityNotificationType
  OnSecurityAlarmBreachResponse(evt: SecurityAlarmBreachResponse): EntityNotificationType
  OnSecurityAreaCrossingPerimeter(evt: SecurityAreaCrossingPerimeter): EntityNotificationType
  OnTargetAssessmentRequest(evt: TargetAssessmentRequest): EntityNotificationType
  OnActionForceResetDevice(evt: ActionForceResetDevice): EntityNotificationType
  OnFullSystemRestart(evt: FullSystemRestart): EntityNotificationType
  PerformRestart(): void
  TriggerWakeUpDelayedEvent(duration: number): void
  OnWakeUpEvent(evt: WakeUpFromRestartEvent): EntityNotificationType
  CanPerformReprimand(): Bool
  ActionSetDeviceAttitude(): SetDeviceAttitude
  Notify(notifier: ActionNotifier, action: ScriptableDeviceAction): void
  SendPSChangedEvent(): void
  NotifyParents(): void
  NotifyParents_Event(): void
  OnNotifyParents(evt: NotifyParentsEvent): EntityNotificationType
  UseNotifier(action: ScriptableDeviceAction): void
  SendActionFailedEvent(failedAction: ScriptableDeviceAction, whereToSend: EntityID, context?: string): EntityNotificationType
  WakeUpDevice(): Bool
  PowerDevice(): void
  UnpowerDevice(): void
  DisableDevice(): void
  ForceDisableDevice(): void
  ForceEnableDevice(): void
  ForceDeviceON(): void
  BreakDevice(): void
  EnableDevice(): void
  GetFullAuthorizationData(): SecurityAccessLevelEntryClient[]
  IsAuthorizationValid(): Bool
  GetFullAuthorizationDataSegregated(passwords: CName[], keycards: TweakDBID[]): void
  GetPasswords(): CName[]
  GetKeycards(): TweakDBID[]
  ExtractKeycardsFromAuthorizationData(data: SecurityAccessLevelEntryClient[]): TweakDBID[]
  ExtractPasswordsFromAuthorizationData(data: SecurityAccessLevelEntryClient[]): CName[]
  ExtractKeycardsFromAuthorizationData(data: SecurityAccessLevelEntry[]): TweakDBID[]
  ExtractPasswordsFromAuthorizationData(data: SecurityAccessLevelEntry[]): CName[]
  FindCurrentAuthorizationLevelForUser(user: EntityID): ESecurityAccessLevel
  AddUser(user: EntityID, level: ESecurityAccessLevel): Bool
  OnAddUserEvent(evt: AddUserEvent): EntityNotificationType
  IsUserAlreadyOnTheList(entityID: EntityID): number
  RemoveUser(user: EntityID): Bool
  GetKeycardRecord(record: TweakDBID): Item_Record
  GetKeycardLocalizedString(record: TweakDBID): string
  TurnAuthorizationModuleON(): Bool
  TurnAuthorizationModuleOFF(): void
  ExecutePSAction(action: ScriptableDeviceAction, layerTag?: CName): void
  ExecutePSAction(action: ScriptableDeviceAction, persistentState: PersistentState): void
  ExecutePSActionWithDelay(action: ScriptableDeviceAction, persistentState: PersistentState, forcedDelay?: number): void
  OnDelayedActionEvent(evt: DelayedDeviceActionEvent): EntityNotificationType
  ExecuteCurrentSpiderbotActionPerformed(): void
  ExtractIDs(persistentStates: PersistentState[], persistentIDs: PersistentID[]): void
  ExtractEntityID(evt: TriggerEvent): EntityID
  GetAvailableQuickHacks(): CName[]
  HasAnyAvailableQuickHack(): Bool
  HasAnyQuickHack(): Bool
  UpdateAvailAbleQuickHacks(actions: DeviceAction[]): void
  AddAvailableQuickHack(quickHackName: CName): void
  RemoveAvailableQuickHack(quickHackName: CName): void
  ClearAvailableQuickHacks(): void
  GetAvailableSpiderbotActions(): CName[]
  HasAnyAvailableSpiderbotActions(): Bool
  HasAnySpiderbotAction(): Bool
  UpdateAvailableSpiderbotActions(actions: DeviceAction[]): void
  AddAvailableSpiderbotActions(SpiderbotActionName: CName): void
  RemoveAvailableSpiderbotActions(SpiderbotActionName: CName): void
  ClearAvailableSpiderbotActions(): void
  GetPlayerEntityID(): EntityID
  GetPlayerMainObject(): GameObject
  GetLocalPlayerControlledGameObject(): GameObject
  GetLocalPlayer(): GameObject
  RegisterDebugEnableQuickHacksListener(): void
  EnableDebugQuickHacks(val: number): void
  GetMasterDevicesTweaks(): TweakDBID[]
  IsLogInExclusiveMode(): Bool
  OnNotifyHighlightedDevice(evt: NotifyHighlightedDevice): EntityNotificationType
  SetDurabilityType(durabilityType: EDeviceDurabilityType): void
  SetJuryrigTrapActiveState(newState: Bool): void
  SetJuryrigTrapArmedState(newState: EJuryrigTrapState): void
  SetDurabilityState(newState: EDeviceDurabilityState): void
  GetDistractionDuration(effectName: CName): number
  GetUniqueConnectionTypes(): DeviceConnectionScannerData[]
  GetDistractionDuration(action: ScriptableDeviceAction): number
  IsConnectedToActionsSequencer(): Bool
  GetActionsSequencer(): ActionsSequencerControllerPS
  OnSequencerLock(evt: SequencerLock): EntityNotificationType
  IsLockedViaSequencer(): Bool
  IsControlledByThePlayer(): Bool
  IsBroken(): Bool
  SetAdvancedInteractionModeOn(value: Bool): void
  CanBeScavenged(): Bool
  IsConnectedToMaintenanceSystem(): Bool
  PushPersistentData(data: BaseDeviceData): void
  PushResaveData(data: BaseResaveData): void
  LogResaveInfo(): void
  SendSpiderbotToPerformAction(action: ScriptableDeviceAction, oryginalExecutor: GameObject): void
  QuestResolveSkillchecks(): void
  QuestSetSkillchecks(container: BaseSkillCheckContainer): void
  ErasePassedSkillchecks(): void
  OnActionCooldownEvent(evt: ActionCooldownEvent): EntityNotificationType
  GetHudManager(): HUDManager
  GetTakeOverControlSystem(): TakeOverControlSystem
  IsConnectedToCLS(): Bool
  OnToggleTakeOverControl(evt: ToggleTakeOverControl): EntityNotificationType
  ActionToggleTakeOverControl(): ToggleTakeOverControl
  OnTCSTakeOverControlActivate(evt: TCSTakeOverControlActivate): EntityNotificationType
  SendDeviceNotOperationalEvent(): void
  OnTCSTakeOverControlDeactivate(evt: TCSTakeOverControlDeactivate): EntityNotificationType
  SetPSMPostpondedParameterBool(value: Bool): void
  ActionProgramSetDeviceOff(): ProgramSetDeviceOff
  OnProgramSetDeviceOff(evt: ProgramSetDeviceOff): EntityNotificationType
  ActionProgramSetDeviceAttitude(): ProgramSetDeviceAttitude
  OnProgramSetDeviceAttitude(evt: ProgramSetDeviceAttitude): EntityNotificationType
  AddWillingInvestigator(id: EntityID): void
  HasWillingInvestigator(id: EntityID): Bool
  GetWillingInvestigators(): EntityID[]
  ClearWillingInvestigators(): void
  IsSomeoneUsingNPCWorkspot(): Bool
  ActionOverloadDevice(): OverloadDevice
  OnOverloadDevice(evt: OverloadDevice): EntityNotificationType
  ShouldNPCWorkspotFinishLoop(): Bool
  HasNPCWorkspotKillInteraction(): Bool
}

declare interface DeviceSystem extends IDeviceSystem {

  GetNodePosition(entityID: EntityID, position: Vector4): Bool
  GetAllAncestors(entityID: EntityID, outDevices: DeviceComponentPS[]): void
  GetParents(entityID: EntityID, outDevices: DeviceComponentPS[]): void
  GetChildren(entityID: EntityID, outDevices: DeviceComponentPS[]): void
  GetAllDescendants(entityID: EntityID, outDevices: DeviceComponentPS[]): void
  AddDynamicConnection(deviceEntityID: PersistentID, deviceClassName: CName, parentEntityID: PersistentID, parentClassName: CName): void
  RemoveDynamicConnection(deviceEntityID: PersistentID, parentEntityID: PersistentID): void
  DEBUG_GetAncestorsData(entityID: EntityID, outDevicesData: DeviceRef[]): void
  DEBUG_GetParentsData(entityID: EntityID, outDevicesData: DeviceRef[]): void
  DEBUG_GetChildrenData(entityID: EntityID, outDevicesData: DeviceRef[]): void
  DEBUG_GetDescendantsData(entityID: EntityID, outDevicesData: DeviceRef[]): void
}

declare interface GameAttachedEvent extends Event {

}

declare interface gameStatModifierData extends IScriptable {

}

declare interface gameConstantStatModifierData extends gameStatModifierData {

}

declare interface LevelAssignmentSystem extends ILevelAssignmentSystem {

  LockLevelAssignment(levelAssignmentTDBID: TweakDBID): void
  IsLocked(levelAssignmentTDBID: TweakDBID): Bool
  GetLevelAssignment(levelAssignmentTDBID: TweakDBID): number
  MarkPlayerLevelRestored(playerLevelRestored?: Bool): void
}

declare interface StatsSystem extends IStatsSystem {

  GetStatType(damageType: gamedataDamageType): gamedataStatType
  GetDamageType(statType: gamedataStatType): gamedataDamageType
  GetDamageRecordId(damageType: gamedataDamageType): TweakDBID
  GetDamageTypeByRecordID(damageTypeRecordId: TweakDBID): gamedataDamageType
  GetDamageRecordFromId(damageTypeRecordId: TweakDBID): DamageType_Record
  GetDamageRecordFromType(damageType: gamedataDamageType): DamageType_Record
  GetStatValue(objID: StatsObjectID, statType: gamedataStatType): number
  GetStatBoolValue(objID: StatsObjectID, statType: gamedataStatType): Bool
  GetStatValueFromDamageType(objId: StatsObjectID, damageType: gamedataDamageType): number
  GetStatDetails(objID: StatsObjectID): gameStatDetailedData[]
  AddModifier(objID: StatsObjectID, modifierData: gameStatModifierData): Bool
  AddModifiers(objID: StatsObjectID, modifierData: gameStatModifierData[]): Bool
  AddSavedModifier(objID: StatsObjectID, modifierData: gameStatModifierData): Bool
  RemoveModifier(objID: StatsObjectID, modifierData: gameStatModifierData): Bool
  RemoveAllModifiers(objID: StatsObjectID, statType: gamedataStatType, removeSavedModifiers?: Bool): Bool
  DefineModifierGroupFromRecord(groupID: number, recordID: TweakDBID): Bool
  UndefineModifierGroup(groupID: number): Bool
  ApplyModifierGroup(objID: StatsObjectID, groupID: number): Bool
  RemoveModifierGroup(objID: StatsObjectID, groupID: number): Bool
  RegisterListener(objID: StatsObjectID, listener: IStatsListener): void
  UnregisterListener(objID: StatsObjectID, listener: IStatsListener): void
}

declare interface RPGManager extends IScriptable {

  /** @noSelf **/
  GetItemData(gi: GameInstance, owner: GameObject, itemID: ItemID): gameItemData
  /** @noSelf **/
  GetInnerItemDataQuality(itemData: InnerItemData): gamedataQuality
  /** @noSelf **/
  GetItemDataQuality(itemData: gameItemData): gamedataQuality
  /** @noSelf **/
  GetFloatItemQuality(qualityStat: number): gamedataQuality
  /** @noSelf **/
  IsInnerItemDataIconic(itemData: InnerItemData): Bool
  /** @noSelf **/
  IsItemDataIconic(itemData: gameItemData): Bool
  /** @noSelf **/
  IsItemBroken(itemData: gameItemData): Bool
  /** @noSelf **/
  IsPercentageStat(stat: gamedataStatType): Bool
  /** @noSelf **/
  ApplyAbilityArray(owner: GameObject, abilities: GameplayAbility_Record[]): void
  /** @noSelf **/
  ShouldFlipNegativeValue(record: Stat_Record): Bool
  /** @noSelf **/
  ShouldSlotBeAvailable(owner: GameObject, item: ItemID, attachmentSlotRecord: AttachmentSlot_Record): Bool
  /** @noSelf **/
  CalculateStatModifiers(modifiers: StatModifier_Record[], context: GameInstance, root: GameObject, targetID: StatsObjectID, instigator?: StatsObjectID, itemStatsID?: StatsObjectID): number
  /** @noSelf **/
  CalculateAdditiveModifiers(modifiers: StatModifier_Record[], context: GameInstance, root: GameObject, targetID: StatsObjectID, instigator?: StatsObjectID, itemStatsID?: StatsObjectID): number
  /** @noSelf **/
  CalculateMultiplierModifiers(modifiers: StatModifier_Record[], context: GameInstance, root: GameObject, targetID: StatsObjectID, instigator?: StatsObjectID, itemStatsID?: StatsObjectID): number
  /** @noSelf **/
  CalculateAdditiveMultiplierModifiers(modifiers: StatModifier_Record[], context: GameInstance, root: GameObject, targetID: StatsObjectID, instigator?: StatsObjectID, itemStatsID?: StatsObjectID): number
  /** @noSelf **/
  CalculateStatModifier(modifier: StatModifier_Record, context: GameInstance, root: GameObject, targetID: StatsObjectID, instigator?: StatsObjectID, itemStatsID?: StatsObjectID): number
  /** @noSelf **/
  CalculateConstantModifier(modifier: ConstantStatModifier_Record): number
  /** @noSelf **/
  CalculateRandomModifier(modifier: RandomStatModifier_Record): number
  /** @noSelf **/
  CalculateCurveModifier(modifier: CurveStatModifier_Record, context: GameInstance, root: GameObject, targetID: StatsObjectID, instigator?: StatsObjectID, itemStatsID?: StatsObjectID): number
  /** @noSelf **/
  CalculateCombinedModifier(modifier: CombinedStatModifier_Record, context: GameInstance, root: GameObject, targetID: StatsObjectID, instigator?: StatsObjectID, itemStatsID?: StatsObjectID): number
  /** @noSelf **/
  GetRefObjectID(refObjectName: CName, context: GameInstance, root: GameObject, targetID: StatsObjectID, instigator?: StatsObjectID, itemStatsID?: StatsObjectID): StatsObjectID
  /** @noSelf **/
  CalculateBuyPrice(context: GameInstance, vendor: GameObject, itemID: ItemID, multiplier: number): number
  /** @noSelf **/
  CalculateSellPrice(context: GameInstance, vendor: GameObject, itemID: ItemID): number
  /** @noSelf **/
  CalculateSellPriceItemData(context: GameInstance, vendor: GameObject, itemData: gameItemData): number
  /** @noSelf **/
  CalculateStatModifiers(addValue: number, multValue: number, addMultValue: number, modifiers: StatModifier_Record[], context: GameInstance, root: GameObject, targetID: StatsObjectID, instigator?: StatsObjectID, itemStatsID?: StatsObjectID): number
  /** @noSelf **/
  InjectStatModifier(gi: GameInstance, obj: GameObject, modifier: gameStatModifierData): void
  /** @noSelf **/
  InjectStatModifierToItem(gi: GameInstance, itemData: gameItemData, modifier: gameStatModifierData): void
  /** @noSelf **/
  IsDamageStat(stat: gamedataStatType): Bool
  /** @noSelf **/
  GetStatValueFromObject(gi: GameInstance, object: GameObject, stat: gamedataStatType): number
  /** @noSelf **/
  CheckPrereqs(prereqs: IPrereq_Record[], target: GameObject): Bool
  /** @noSelf **/
  CheckPrereq(prereqRecord: IPrereq_Record, target: GameObject): Bool
  /** @noSelf **/
  GetRarityMultiplier(puppet: NPCPuppet, curveName: CName): number
  /** @noSelf **/
  ResistancesList(): gamedataStatType[]
  /** @noSelf **/
  ApplyAbility(owner: GameObject, ability: GameplayAbility_Record): void
  /** @noSelf **/
  RemoveAbility(owner: GameObject, ability: GameplayAbility_Record): void
  /** @noSelf **/
  ApplyAbilityGroup(owner: GameObject, group: GameplayAbilityGroup_Record): void
  /** @noSelf **/
  RemoveAbilityGroup(owner: GameObject, group: GameplayAbilityGroup_Record): void
  /** @noSelf **/
  ApplyGLP(owner: GameObject, package: GameplayLogicPackage_Record): void
  /** @noSelf **/
  RemoveGLP(owner: GameObject, package: GameplayLogicPackage_Record): void
  /** @noSelf **/
  ApplyGLPArray(owner: GameObject, arr: GameplayLogicPackage_Record[], ignoreAppliedPackages?: Bool): void
  /** @noSelf **/
  ApplyEffectorsArray(owner: GameObject, arr: Effector_Record[]): void
  /** @noSelf **/
  RemoveEffectorsArray(owner: GameObject, arr: Effector_Record[]): void
  /** @noSelf **/
  ApplyStatModifierGroups(owner: GameObject, arr: StatModifierGroup_Record[]): void
  /** @noSelf **/
  RemoveStatModifierGroups(owner: GameObject, arr: StatModifierGroup_Record[]): void
  /** @noSelf **/
  GetLevelPercentage(obj: GameObject): number
  /** @noSelf **/
  GetItemQualityFromRecord(itemRecord: Item_Record): gamedataQuality
  /** @noSelf **/
  GetItemQuality(itemData: InnerItemData): gamedataQuality
  /** @noSelf **/
  GetItemQuality(itemData: gameItemData): gamedataQuality
  /** @noSelf **/
  IsItemIconic(itemData: gameItemData): Bool
  /** @noSelf **/
  IsItemIconic(itemData: InnerItemData): Bool
  /** @noSelf **/
  IsItemMaxLevel(itemData: gameItemData): Bool
  /** @noSelf **/
  IsItemWeapon(itemID: ItemID): Bool
  /** @noSelf **/
  IsItemClothing(itemID: ItemID): Bool
  /** @noSelf **/
  GetItemQuality(qualityStat: number): gamedataQuality
  /** @noSelf **/
  GetCraftingMaterialRecord(quality: gamedataQuality, alternateVariant?: Bool): Item_Record
  /** @noSelf **/
  GetAvailableSlotsForQuality(itemData: gameItemData, quality: gamedataQuality): number
  /** @noSelf **/
  GetListOfRandomStatsFromEvolutionType(evolution: gamedataWeaponEvolution): Stat_Record[]
  /** @noSelf **/
  GetDominatingDamageType(gi: GameInstance, itemData: gameItemData): gamedataDamageType
  /** @noSelf **/
  SetDroppedWeaponQuality(npc: ScriptedPuppet, itemData: gameItemData): void
  /** @noSelf **/
  ForceItemQuality(obj: GameObject, itemData: gameItemData, forcedQuality: CName): void
  /** @noSelf **/
  ProcessOnLootedPackages(owner: GameObject, itemID: ItemID): void
  /** @noSelf **/
  GetItemQualityFromName(qualityName: CName): number
  /** @noSelf **/
  HasItem(obj: GameObject, id: TweakDBID): Bool
  /** @noSelf **/
  HasItem(obj: GameObject, id: ItemID): Bool
  /** @noSelf **/
  GetItemType(itemID: ItemID): gamedataItemType
  /** @noSelf **/
  GetItemCategory(itemID: ItemID): gamedataItemCategory
  /** @noSelf **/
  GetWeaponEvolution(itemID: ItemID): gamedataWeaponEvolution
  /** @noSelf **/
  GetItemWeight(itemData: gameItemData): number
  /** @noSelf **/
  GetItemStackWeight(owner: GameObject, itemData: gameItemData): number
  /** @noSelf **/
  IsItemSingleInstance(itemData: gameItemData): Bool
  /** @noSelf **/
  GetItemFromInventory(object: GameObject, item: TweakDBID): ItemID
  /** @noSelf **/
  GetAttachmentSlotIDs(): TweakDBID[]
  /** @noSelf **/
  GetModsSlotIDs(type: gamedataItemType): TweakDBID[]
  /** @noSelf **/
  IsInventoryEmpty(object: GameObject): Bool
  /** @noSelf **/
  ProcessReadAction(choice: InteractionChoiceEvent): void
  /** @noSelf **/
  ToggleLootHighlight(obj: GameObject, enable: Bool): void
  /** @noSelf **/
  CreateStatModifier(statType: gamedataStatType, modType: gameStatModifierType, value: number): gameStatModifierData
  /** @noSelf **/
  CreateStatModifierUsingCurve(statType: gamedataStatType, modType: gameStatModifierType, refStat: gamedataStatType, curveName: CName, columnName: CName): gameStatModifierData
  /** @noSelf **/
  CreateCombinedStatModifier(statType: gamedataStatType, modType: gameStatModifierType, refStat: gamedataStatType, opSymbol: gameCombinedStatOperation, value: number, refObject: gameStatObjectsRelation): gameStatModifierData
  /** @noSelf **/
  CreateCurveModifier(statRecord: CurveStatModifier_Record): gameStatModifierData
  /** @noSelf **/
  StatRecordToModifier(statRecord: StatModifier_Record): gameStatModifierData
  /** @noSelf **/
  GetPowerLevelFromContentAssignment(gi: GameInstance, contentAssignmentID: TweakDBID): number
  /** @noSelf **/
  CheckDifficultyToStatValue(gi: GameInstance, skill: gamedataStatType, difficulty: EGameplayChallengeLevel, id: EntityID): number
  /** @noSelf **/
  GetCheckValue(gi: GameInstance, powerLevel: number, difficulty: EGameplayChallengeLevel): number
  /** @noSelf **/
  CheckDifficultyToPerkLevel(perk: gamedataPerkType, difficulty: EGameplayChallengeLevel, id: EntityID): number
  /** @noSelf **/
  GetBuildScore(player: GameObject, buildToCheck: PlayerBuild_Record): number
  /** @noSelf **/
  GetBluelineBuildCheckValue(player: GameObject, contentAssignment: ContentAssignment_Record, difficulty: EGameplayChallengeLevel): number
  /** @noSelf **/
  GetBluelinePaymentValue(player: GameObject, contentAssignment: ContentAssignment_Record, difficulty: EGameplayChallengeLevel): number
  /** @noSelf **/
  GetStatRecord(type: gamedataStatType): Stat_Record
  /** @noSelf **/
  GetProficiencyRecord(type: gamedataProficiencyType): Proficiency_Record
  /** @noSelf **/
  GetTraitRecord(type: gamedataTraitType): Trait_Record
  /** @noSelf **/
  GetResistanceTypeFromDamageType(damageType: gamedataDamageType): gamedataStatType
  /** @noSelf **/
  CalculatePowerDifferential(target: GameObject): EPowerDifferential
  /** @noSelf **/
  CalculatePowerDifferential(level: number): EPowerDifferential
  /** @noSelf **/
  CalculateThreatValue(obj: GameObject): number
  /** @noSelf **/
  GetScannerResistanceDetails(obj: GameObject, statType: gamedataStatType, player?: GameObject): ScannerStatDetails
  /** @noSelf **/
  GetCharacterWeakspotCount(puppet: gamePuppet): number
  /** @noSelf **/
  GetStatValues(obj: GameObject, stats: gamedataStatType[]): gameStatTotalValue[]
  /** @noSelf **/
  GetMinStats(obj: GameObject, stats: gamedataStatType[]): gameStatTotalValue[]
  /** @noSelf **/
  GetMaxStats(obj: GameObject, stats: gamedataStatType[]): gameStatTotalValue[]
  /** @noSelf **/
  GetLowestResistances(obj: GameObject): gameStatTotalValue[]
  /** @noSelf **/
  GetHighestResistances(obj: GameObject): gameStatTotalValue[]
  /** @noSelf **/
  CanPlayerCraftFromInventory(obj: GameObject): Bool
  /** @noSelf **/
  CanPlayerUpgradeFromInventory(obj: GameObject): Bool
  /** @noSelf **/
  AwardExperienceFromDamage(hitEvent: gameHitEvent, damagePercentage: number): void
  /** @noSelf **/
  GiveReward(gi: GameInstance, rewardID: TweakDBID, target?: StatsObjectID, moneyMultiplier?: number): void
  /** @noSelf **/
  SendAddAchievementRequest(gi: GameInstance, achievement: gamedataAchievement, achievementRecord: Achievement_Record): void
  /** @noSelf **/
  SendPhotoModeItemUnlockRequest(gi: GameInstance, photoModeItm: PhotoModeItem_Record): void
  /** @noSelf **/
  GiveScavengeReward(gi: GameInstance, rewardID: TweakDBID, scavengeTargetEntityID: EntityID): void
  /** @noSelf **/
  PrepareGameEffectAttack(gi: GameInstance, instigator: GameObject, source: GameObject, attackName: TweakDBID, position?: Vector4, hitFlags?: SHitFlag[], target?: GameObject): Attack_GameEffect
  /** @noSelf **/
  ExtractItemsOfEquipArea(type: gamedataEquipmentArea, input: gameItemData[], output: gameItemData[]): Bool
  /** @noSelf **/
  GetAmmoCount(owner: GameObject, itemID: ItemID): string
  /** @noSelf **/
  GetAmmoCountValue(owner: GameObject, itemID: ItemID): number
  /** @noSelf **/
  GetWeaponAmmoTDBID(weaponID: ItemID): TweakDBID
  /** @noSelf **/
  GetItemRecord(itemID: ItemID): Item_Record
  /** @noSelf **/
  GetAttachmentSlotID(slot: string): TweakDBID
  /** @noSelf **/
  ForceEquipItemOnPlayer(puppet: GameObject, itemTDBID: TweakDBID, addToInv: Bool): void
  /** @noSelf **/
  GetItemActions(itemID: ItemID): ObjectAction_Record[]
  /** @noSelf **/
  IsTechPierceEnabled(gi: GameInstance, owner: GameObject, itemID: ItemID): Bool
  /** @noSelf **/
  IsRicochetChanceEnabled(gi: GameInstance, owner: GameObject, itemID: ItemID): Bool
  /** @noSelf **/
  HasSmartLinkRequirement(itemData: gameItemData): Bool
  /** @noSelf **/
  CanPartBeUnequipped(itemID: ItemID): Bool
  /** @noSelf **/
  CanItemBeDropped(puppet: GameObject, itemData: gameItemData): Bool
  /** @noSelf **/
  CanItemBeDisassembled(gameInstance: GameInstance, itemID: ItemID): Bool
  /** @noSelf **/
  HasDownloadFundsAction(itemID: ItemID): Bool
  /** @noSelf **/
  CanDownloadFunds(gi: GameInstance, itemID: ItemID): Bool
  /** @noSelf **/
  CanItemBeDisassembled(gameInstance: GameInstance, itemData: gameItemData): Bool
  /** @noSelf **/
  IsItemEquipped(owner: GameObject, itemID: ItemID): Bool
  /** @noSelf **/
  IsItemCrafted(itemData: gameItemData): Bool
  /** @noSelf **/
  ConsumeItem(obj: GameObject, evt: InteractionChoiceEvent): Bool
  /** @noSelf **/
  IsWeaponMelee(type: gamedataItemType): Bool
  /** @noSelf **/
  BreakItem(gi: GameInstance, owner: GameObject, itemID: ItemID): Bool
  /** @noSelf **/
  DropManyItems(gameInstance: GameInstance, obj: GameObject, items: ItemModParams[]): void
  /** @noSelf **/
  GetRandomizedHealingConsumable(puppet: ScriptedPuppet): TweakDBID
  /** @noSelf **/
  GetRandomizedGadget(puppet: ScriptedPuppet): TweakDBID
  /** @noSelf **/
  ForceUnequipItemFromPlayer(puppet: GameObject, slotTDBID: TweakDBID, removeItem: Bool): void
  /** @noSelf **/
  ToggleHolsteredArmAppearance(puppet: GameObject, setHoleInArm: Bool): void
  /** @noSelf **/
  TogglePersonalLinkAppearance(puppet: GameObject): void
  /** @noSelf **/
  HasStatFlag(owner: GameObject, flag: gamedataStatType): Bool
  /** @noSelf **/
  GetPlayerQuickHackList(player: PlayerPuppet): TweakDBID[]
  /** @noSelf **/
  GetPlayerQuickHackListWithPenetration(player: PlayerPuppet): PlayerQuickhackData[]
  /** @noSelf **/
  GetPlayerQuickHackListByType(player: PlayerPuppet, quickHackType: gamedataObjectActionType): TweakDBID[]
  /** @noSelf **/
  GetPlayerCurrentHealthPercent(gi: GameInstance): number
  /** @noSelf **/
  GetStockItemRequirement(record: VendorItem_Record): SItemStackRequirementData
  /** @noSelf **/
  HealPuppetAfterQuickhack(gi: GameInstance, executor: GameObject): void
  /** @noSelf **/
  ForceEquipStrongArms(player: PlayerPuppet): Bool
  /** @noSelf **/
  ForceUnequipStrongArms(player: PlayerPuppet): Bool
  /** @noSelf **/
  ForceEquipPersonalLink(player: PlayerPuppet): Bool
  /** @noSelf **/
  ForceUnequipPersonalLink(player: PlayerPuppet): Bool
}

declare interface gameItemData extends IScriptable {

  GetID(): ItemID
  GetName(): CName
  GetNameAsString(): string
  GetQuantity(): number
  HasAttachmentSlot(slotID: TweakDBID): Bool
  HasPlacementSlot(slotID: TweakDBID): Bool
  HasTag(tag: CName): Bool
  SetDynamicTag(tag: CName): Bool
  RemoveDynamicTag(tag: CName): Bool
  GetTimestamp(): GameTime
  GetStatValueByType(type: gamedataStatType): number
  HasStatData(type: gamedataStatType): Bool
  GetStatsObjectID(): StatsObjectID
  HasPartInSlot(slotID: TweakDBID): Bool
  GetItemPart(part: InnerItemData, slotId: TweakDBID): void
  GetItemParts(parts: InnerItemData[]): void
  GetTemporaryStatBundle(): StatsBundleHandler
  GetItemType(): gamedataItemType
  GetLocalizedItemType(): CName
}

declare interface IPrereq extends IScriptable {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
  RegisterEntity(game: GameInstance, entityId: EntityID): PrereqState
  /** @noSelf **/
  CreatePrereq(id: TweakDBID): IPrereq
}

declare interface gamePuppet extends gamePuppetBase {

  GetVelocity(): Vector4
  GetSenses(): SenseComponent
  GetAttitude(): AttitudeAgent
  GetVisibleObject(): VisibleObjectComponent
  GetBlackboard(): IBlackboard
  GetTargetTracker(): TargetTrackerComponent
  HideIrreversibly(): void
  SetCPOMissionData(hasCPOMissionData: Bool): void
  HasCPOMissionData(): Bool
  SetCPOMissionVoted(deviceGroup: CName, hasVoted: Bool): void
  GetCPOMissionVoted(deviceGroup: CName): Bool
  GetResolvedGenderName(): CName
  GetBodyType(): CName
  GenerateLoot(): void
  GenerateLootWithStats(lootModifiers: gameStatModifierData[]): void
  DropWeapons(): void
  DropAmmo(): void
  HasRuntimeAnimsetTags(tagList: CName[]): Bool
  HasCrowdStaticLOD(): Bool
  IsLooted(): Bool
  CacheLootForDroping(): void
  DropLootBag(): void
  InitializeBaseInventory(): void
  WasLootGenerated(): Bool
  GetCurrentNavmeshPosition(position: Vector4): navNaviPositionType
  CanRagdoll(): Bool
  GetLastValidNavmeshPoint(): Vector4
}

declare interface IComponent extends IScriptable {

  GetEntity(): Entity
  FindComponentByName(componentName: CName): IComponent
  GetName(): CName
  IsEnabled(): Bool
  Toggle(on: Bool): void
  QueueEntityEvent(ev: Event): void
  RegisterRenderDebug(filterName: string, functionName: CName): void
}

declare interface IPlacedComponent extends IComponent {

  GetLocalToWorld(): Matrix
  GetInitialPosition(): Vector4
  GetInitialOrientation(): Quaternion
  GetInitialTransform(): Matrix
  GetLocalPosition(): Vector4
  GetLocalOrientation(): Quaternion
  GetLocalTransform(): Matrix
  SetLocalPosition(pos: Vector4): void
  SetLocalOrientation(rot: Quaternion): void
  SetLocalTransform(pos: Vector4, rot: Quaternion): void
}

declare interface GameComponent extends IComponent {

  GetPS(): GameComponentPS
  GetBasePS(): GameComponentPS
  GetPersistentID(): PersistentID
}

declare interface ScriptedPuppet extends gamePuppet {

  GetKiller(): Entity
  SetKiller(killer: Entity): void
  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnDetach(): Bool
  OnEvaluateMinigame(evt: EvaluateMinigame): Bool
  ProcessLootMinigame(baseMoney: number, baseUncommonMaterials: number, baseRareMaterials: number, baseEpicMaterials: number, baseLegendaryMaterials: number, baseShardDropChance: number, TS: TransactionSystem): void
  GenerateMaterialDrops(baseUncommonMaterials: number, baseRareMaterials: number, baseEpicMaterials: number, baseLegendaryMaterials: number, TS: TransactionSystem): void
  GetWeakspotComponent(): WeakspotComponent
  Update(dt: number): void
  UpdateQuickHackableState(isQuickHackable: Bool): void
  GetCooldownStorage(): CooldownStorage
  GetItemMinigameAttempted(itemID: ItemID): Bool
  SetItemMinigameAttempted(itemID: ItemID): void
  GetLinkedStatusEffect(): LinkedStatusEffect
  AddLinkedStatusEffect(netrunner: EntityID, target: EntityID, actionEffects?: ObjectActionEffect_Record[]): void
  RemoveLinkedStatusEffects(): Bool
  ClearLinkedStatusEffect(): void
  RemoveLinkedStatusEffectsFromTarget(sourceID: EntityID): Bool
  RemoveLink(): void
  OnExitShapeEvent(evt: ExitShapeEvent): Bool
  ToggleInteractionLayers(): void
  CreateListeners(): void
  RemoveListeners(): void
  /** @noSelf **/
  CreateCustomBlackboard(obj: GameObject, blackboard: IBlackboard): void
  /** @noSelf **/
  CreateCustomBlackboardFromDef(obj: GameObject, blackboardDef: CustomBlackboardDef): void
  GetMasterConnectedClassTypes(): ConnectedClassTypes
  OnCreateCustomBlackboard(evt: CreateCustomBlackboardEvent): Bool
  GetCustomBlackboard(): IBlackboard
  /** @noSelf **/
  OnAddOrRemoveListener(evt: AddOrRemoveListenerEvent): Bool
  NotifyHitReactionTypeChanged(hitType: number): void
  NotifyHitReactionSourceChanged(hitSource: number): void
  GetAIControllerComponent(): AIHumanComponent
  GetMovePolicesComponent(): MovePoliciesComponent
  GetSignalHandlerComponent(): AISignalHandlerComponent
  GetHitReactionComponent(): HitReactionComponent
  GetStimReactionComponent(): ReactionManagerComponent
  GetDismembermentComponent(): DismembermentComponent
  GetCrowdMemberComponent(): CrowdMemberBaseComponent
  GetTargetTrackerComponent(): TargetTrackerComponent
  GetTargetTrackingExension(): TargetTrackingExtension
  GetObjectSelectionComponent(): ObjectSelectionComponent
  GetPuppetStateBlackboard(): IBlackboard
  GetHitRepresantationSlotComponent(): SlotComponent
  GetSlotComponent(): SlotComponent
  GetCombatHUDManagerComponent(): CombatHUDManager
  GetSensesComponent(): SenseComponent
  GetVisibleObjectComponent(): VisibleObjectComponent
  GetSensorObjectComponent(): SensorObjectComponent
  GetAttitudeAgent(): AttitudeAgent
  GetStatesComponent(): NPCStatesComponent
  GetBumpComponent(): BumpComponent
  GetSignalTable(): gameBoolSignalTable
  GetTransformHistoryComponent(): TransformHistoryComponent
  GetAnimationControllerComponent(): AnimationControllerComponent
  GetAreIncomingSecuritySystemEventsSuppressed(): Bool
  GetRecord(): Character_Record
  GetNPCType(): gamedataNPCType
  IsAndroid(): Bool
  IsHuman(): Bool
  IsHumanoid(): Bool
  IsMechanical(): Bool
  /** @noSelf **/
  IsMechanical(self: ScriptedPuppet): Bool
  GetNPCRarity(): gamedataNPCRarity
  GetPS(): ScriptedPuppetPS
  GetPuppetPS(): ScriptedPuppetPS
  GetHighLevelStateFromBlackboard(): gamedataNPCHighLevelState
  GetUpperBodyStateFromBlackboard(): gamedataNPCUpperBodyState
  GetDefenseModeStateFromBlackboard(): gamedataDefenseMode
  GetStanceStateFromBlackboard(): gamedataNPCStanceState
  GetHitReactionModeFromBlackboard(): EHitReactionMode
  GetCurrentWorkspotTags(): CName[]
  HasWorkspotTag(tag: CName): Bool
  IsPuppet(): Bool
  IsOfficer(): Bool
  RegisterSubCharacter(): void
  UnregisterSubCharacter(): void
  /** @noSelf **/
  IsBoss(obj: GameObject): Bool
  IsBoss(): Bool
  IsMassive(): Bool
  IsDrone(): Bool
  IsVendor(): Bool
  GetVendorType(): gamedataVendorType
  RefreshCachedReactionPresetData(): void
  RefreshCachedDataCharacterTags(): void
  IsCharacterCyberpsycho(): Bool
  IsCharacterCivilian(): Bool
  IsCharacterPolice(): Bool
  IsCharacterGanger(): Bool
  IsCharacterChildren(): Bool
  GetCrowd(): Bool
  IsCrowd(): Bool
  AwardsExperience(): Bool
  /** @noSelf **/
  IsAlive(obj: GameObject): Bool
  /** @noSelf **/
  IsDefeated(obj: GameObject): Bool
  /** @noSelf **/
  IsUnconscious(obj: GameObject): Bool
  /** @noSelf **/
  EvaluateApplyingStatusEffectsFromMountedObjectToPlayer(npc: GameObject, player: GameObject): void
  /** @noSelf **/
  IsNanoWireHacked(obj: GameObject): Bool
  /** @noSelf **/
  IsActive(obj: GameObject): Bool
  /** @noSelf **/
  IsTurnedOff(obj: GameObject): Bool
  IsTurnedOffNoStatusEffect(): Bool
  IsActiveInternal(): Bool
  IsActive(): Bool
  IsPrevention(): Bool
  IsDead(): Bool
  IsDeadNoStatPool(): Bool
  GetReactionPresetID(): TweakDBID
  SetReactionPresetID(presetID: TweakDBID): void
  IsAggressive(): Bool
  IsOnAutonomousAI(): Bool
  /** @noSelf **/
  IsDeaf(obj: GameObject): Bool
  /** @noSelf **/
  IsBlinded(obj: GameObject): Bool
  /** @noSelf **/
  IsBeingGrappled(obj: GameObject): Bool
  /** @noSelf **/
  GetGrappleParent(obj: GameObject): GameObject
  /** @noSelf **/
  GetGrappleChild(obj: GameObject): GameObject
  /** @noSelf **/
  IsOnOffMeshLink(obj: GameObject): Bool
  CanBeTagged(): Bool
  IsPlayerCompanion(): Bool
  /** @noSelf **/
  IsPlayerCompanion(obj: GameObject): Bool
  /** @noSelf **/
  IsPlayerCompanion(obj: GameObject, companion: GameObject): Bool
  /** @noSelf **/
  SendActionSignal(puppet: ScriptedPuppet, signalName: CName, duration?: number): Bool
  /** @noSelf **/
  ResetActionSignal(puppet: ScriptedPuppet, signalName: CName): Bool
  Kill(instigator?: GameObject, skipNPCDeathAnim?: Bool, disableNPCRagdoll?: Bool): void
  /** @noSelf **/
  GetActiveWeapon(obj: GameObject): WeaponObject
  /** @noSelf **/
  GetWeaponRight(obj: GameObject): WeaponObject
  /** @noSelf **/
  GetWeaponLeft(obj: GameObject): WeaponObject
  HasHeadUnderwater(): Bool
  IsUnderwater(howDeep?: number): Bool
  /** @noSelf **/
  ReevaluateOxygenConsumption(puppet: ScriptedPuppet): void
  OnReevaluateOxygenEvent(evt: ReevaluateOxygenEvent): Bool
  PuppetSubmergedRequestRemovingStatusEffects(obj: GameObject): void
  StartOxygenDecay(): void
  StopOxygenDecay(): void
  OnRequestDismemberment(evt: RequestDismembermentEvent): Bool
  OnResetSignalAIEventReceived(evt: ResetSignal): Bool
  OnStatusEffectApplied(evt: ApplyStatusEffectEvent): Bool
  SendAIDeathSignal(): void
  OnStatusEffectRemoved(evt: RemoveStatusEffect): Bool
  OnSetLootInteractionAccessEvent(evt: SetLootInteractionAccessibilityEvent): Bool
  /** @noSelf **/
  SendResurrectEvent(obj: GameObject): void
  /** @noSelf **/
  SendDefeatedEvent(obj: GameObject): void
  /** @noSelf **/
  SendAndroidTurnOnEvent(obj: GameObject): void
  /** @noSelf **/
  SendAndroidTurnOffEvent(obj: GameObject): void
  /** @noSelf **/
  SendNameplateVisibleEvent(obj: GameObject, visible: Bool): void
  OnDefeated(evt: DefeatedEvent): Bool
  OnDeath(evt: gameDeathEvent): Bool
  OnDied(): void
  SquadUpdate(leaveSquad: Bool, squadType: AISquadType): void
  OnIncapacitated(): void
  OnResurrect(evt: ResurrectEvent): Bool
  OnResurrected(): void
  RewardKiller(killer: GameObject, killType: gameKillType, isAnyDamageNonlethal: Bool): void
  OnDamageReceived(evt: gameDamageReceivedEvent): Bool
  LogDamageReceived(evt: gameDamageReceivedEvent, instigator: GameObject, dmgSituation: gameTelemetryDamageSituation): void
  OnDamageDealt(evt: gameTargetDamageEvent): Bool
  OnKillRewardEvent(evt: KillRewardEvent): Bool
  LogEnemyDown(evt: KillRewardEvent, dmgSituation: gameTelemetryDamageSituation): void
  HasCalculatedEquipment(equipmentPriority: EquipmentPriority, characterRecord: Character_Record): Bool
  HasEquipment(equipmentPriority: EquipmentPriority): Bool
  GiveEquipment(equipmentPriority: EquipmentPriority, characterRecord: Character_Record, powerLevel: number): void
  AddRecordEquipment(equipmentPriority: EquipmentPriority, powerLevel?: number): void
  /** @noSelf **/
  GetEquipment(self: ScriptedPuppet): gameItemData[]
  /** @noSelf **/
  GenerateLootModifiers(self: ScriptedPuppet, lootModifiers: gameStatModifierData[]): void
  /** @noSelf **/
  ProcessLoot(self: ScriptedPuppet): void
  /** @noSelf **/
  DropHeldItems(self: ScriptedPuppet): Bool
  /** @noSelf **/
  ScaleDroppedItem(itemData: gameItemData, owner: ScriptedPuppet): void
  /** @noSelf **/
  DropItemFromSlot(obj: GameObject, slot: TweakDBID): void
  /** @noSelf **/
  DropWeaponFromSlot(obj: GameObject, slot: TweakDBID): void
  /** @noSelf **/
  ProcessSupportiveItems(self: ScriptedPuppet): void
  /** @noSelf **/
  HasLootableItems(self: ScriptedPuppet): Bool
  OnAttitudeChanged(evt: AttitudeChangedEvent): Bool
  RevokeAllTickets(): void
  OnHackPlayerEvent(evt: HackPlayerEvent): Bool
  ProcessEnemyNetrunnerTutorialFact(): void
  OnRemoveLinkEvent(evt: RemoveLinkEvent): Bool
  OnRemoveLinkedStatusEffectsEvent(evt: RemoveLinkedStatusEffectsEvent): Bool
  OnNetworkLinkQuickhackEvent(evt: NetworkLinkQuickhackEvent): Bool
  EnableLootInteractionWithDelay(puppet: gamePuppet): void
  OnLootPickupDelayEvent(evt: LootPickupDelayEvent): Bool
  OnInteractionActivated(evt: InteractionEvent): Bool
  OnInteractionUsed(evt: InteractionChoiceEvent): Bool
  ExecuteAction(choice: InteractionChoice): void
  OnExecutePuppetAction(evt: ExecutePuppetActionEvent): Bool
  OnCommunicationEvent(evt: CommunicationEvent): Bool
  ShowQuickHackDuration(action: ScriptableDeviceAction): void
  ExecuteAction(action: ScriptableDeviceAction): void
  OnInteraction(choiceEvent: InteractionChoiceEvent): Bool
  LootAllItems(choiceEvent: InteractionChoiceEvent): void
  OnWorkspotStartedEvent(evt: WorkspotStartedEvent): Bool
  OnWorkspotFinishedEvent(evt: WorkspotFinishedEvent): Bool
  ProcessSyncedAnimationPuppetActions(evt: InteractionChoiceEvent): void
  PushTakedownActionEventToPSM(evt: InteractionChoiceEvent): void
  CreateTakedownEventOnLayerActivation(evt: InteractionEvent): void
  OrderChoice(choiceEvent: InteractionChoiceEvent): void
  OnDelayedTakedownGameEffectEvent(evt: DelayedGameEffectEvent): Bool
  SendInteractionChoiceToPSM(choiceEvent: InteractionChoiceEvent, id: CName, isChoiceActive: Bool): void
  EnableSensesComponent(b: Bool): void
  EnableInteraction(layer: CName, b: Bool): void
  IsQuest(): Bool
  OnRegisterPostion(evt: RegisterPostionEvent): Bool
  /** @noSelf **/
  RequestRevealOutline(obj: GameObject, doReveal: Bool, whoWantsToReveal: EntityID): void
  OnRevealRequest(evt: RevealRequestEvent): Bool
  RequestRevealOutline(shouldIncreaseCounter: Bool, requester: EntityID): void
  /** @noSelf **/
  ForceVisionAppearanceNetrunner(target: GameObject, sourceID: EntityID, sourceName: CName, toggle: Bool): void
  IsRevealed(): Bool
  GetPuppetRarity(): NPCRarity_Record
  GetPuppetRarityEnum(): gamedataNPCRarity
  GetPuppetReactionPresetType(): gamedataReactionPresetType
  CreateClearOutlinesRequest(): void
  OnClearOutlinesRequest(evt: ClearOutlinesRequestEvent): void
  OnOutlineRequestEvent(evt: OutlineRequestEvent): Bool
  PropagateOutlineToCurrentlyUsedItems(evt: OutlineRequestEvent): void
  PropagateFadeOutlinesRequestToItems(): void
  GetCurrentlyEquippedItems(heldObjects: ItemObject[]): Bool
  OnToggleTargetingComponentsEvent(evt: ToggleTargetingComponentsEvent): Bool
  OnPulseEvent(evt: gameVisionModeUpdateVisuals): Bool
  OnScanningEvent(evt: ScanningEvent): Bool
  OnScanningLookAtEvent(evt: ScanningLookAtEvent): Bool
  UpdateScannerLookAtBB(b: Bool): void
  ShouldPulseNetwork(): Bool
  IsBackdoor(): Bool
  IsActiveBackdoor(): Bool
  IsConnectedToBackdoorDevice(): Bool
  IsNetworkKnownToPlayer(): Bool
  IsHackingPlayer(): Bool
  IsQuickHackAble(): Bool
  IsQuickHacksExposed(): Bool
  IsBreached(): Bool
  GetNetworkLinkSlotName(): CName
  GetNetworkLinkSlotName(transform: WorldTransform): CName
  IsNetworkLinkDynamic(): Bool
  ShouldShowScanner(): Bool
  StartPingingNetwork(): void
  PulseNetwork(revealNetworkAtEnd: Bool): void
  OnRevealNetworkGridOnPulse(evt: RevealNetworkGridOnPulse): Bool
  CanOverrideNetworkContext(): Bool
  StopPingingNetwork(): void
  GetFxResourceByKey(key: CName): FxResource
  OnSetExposeQuickHacks(evt: SetExposeQuickHacks): Bool
  GetDeviceLink(): PuppetDeviceLinkPS
  OnAccessPointMiniGameStatus(evt: AccessPointMiniGameStatus): Bool
  OnDiveFinished(reason: CName): void
  GetNetworkBlackboard(): IBlackboard
  GetNetworkBlackboardDef(): NetworkBlackboardDef
  OnRevealDeviceRequest(evt: RevealDeviceRequest): Bool
  /** @noSelf **/
  RequestDeviceDebug(obj: GameObject, device: Device): void
  /** @noSelf **/
  SetBloodPuddleSettings(puppet: GameObject, shouldSpawnBloodPuddle: Bool): void
  OnSetBloodPuddleSettingsEvent(evt: SetBloodPuddleSettingsEvent): Bool
  ShouldSpawnBloodPuddle(): Bool
  OnBloodPuddleEvent(evt: BloodPuddleEvent): Bool
  ShouldSkipDeathAnimation(): Bool
  SetSkipDeathAnimation(value: Bool): void
  IsConnectedToSecuritySystem(): Bool
  IsTargetTresspassingMyZone(target: GameObject): Bool
  GetDeterminatedSecurityAreaType(): ESecurityAreaType
  MySecuritySystemState(): ESecuritySystemState
  GetSecuritySystem(): SecuritySystemControllerPS
  OnSuppressNPCInSecuritySystem(evt: SuppressNPCInSecuritySystem): Bool
  TriggerSecuritySystemNotification(lastKnownPosition: Vector4, threat: GameObject, type: ESecurityNotificationType, stimType?: gamedataStimType): void
  OnSecuritySupportThreshold(above: Bool): void
  OnSecurityAreaCrossingPerimeter(evt: SecurityAreaCrossingPerimeter): Bool
  OnItemAddedToSlot(evt: ItemAddedToSlot): Bool
  OnItemRemovedFromSlot(evt: ItemRemovedFromSlot): Bool
  HandleSquadAction(actionName: CName, verb: EAISquadVerb): void
  OnSignalSquadActionSignal(signalId: number, newValue: Bool): void
  OnSignalNPCStateChangeSignal(signalId: number, newValue: Bool, userData: NPCStateChangeSignal): void
  OnSignalForcedRagdollDeathSignal(signalId: number, newValue: Bool, userData: ForcedRagdollDeathSignal): void
  DeterminGameplayRole(): EGameplayRole
  ResolveQualityRangeInteractionLayer(): void
  IsQualityRangeInteractionLayer(layerTag: CName): Bool
  UpdateLootInteraction(): void
  EvaluateLootQualityEvent(): void
  /** @noSelf **/
  EvaluateLootQuality(self: GameObject): void
  OnEvaluateLootQuality(evt: EvaluateLootQualityEvent): Bool
  EvaluateLootQuality(): Bool
  GetLootQuality(): gamedataQuality
  GetIsIconic(): Bool
  IsContainer(): Bool
  HasLoot(): Bool
  HasValidLootQuality(): Bool
  OnInventoryEmptyEvent(evt: OnInventoryEmptyEvent): Bool
  OnItemRemoveddEvent(evt: ItemBeingRemovedEvent): Bool
  OnItemAddedEvent(evt: ItemAddedEvent): Bool
  OnInventoryChangedEvent(evt: InventoryChangedEvent): Bool
  GetDefaultHighlight(): FocusForcedHighlightData
  GetCurrentOutline(): EFocusOutlineType
  OnRevealStateChanged(evt: RevealStateChangedEvent): Bool
  OnHUDInstruction(evt: HUDInstruction): Bool
  OnHit(evt: gameHitEvent): Bool
  GetLastDamageTimeFrom(threat: GameObject, isMelee: Bool): number
  GetGender(): CName
  ShouldRegisterToHUD(): Bool
  CanRevealRemoteActionsWheel(): Bool
  HasDirectActionsActive(): Bool
  GetBlackboardIntVariable(id: BlackboardID_Int): number
  SendQuickhackCommands(shouldOpen: Bool): void
  GetPingDuration(): number
  GetQuickHackDuration(quickHackID: TweakDBID, rootObject: GameObject, targetID: StatsObjectID, instigatorID: EntityID): number
  TranslateChoicesIntoQuickSlotCommands(choices: InteractionChoice[], commands: QuickhackData[]): void
  GetIgnoredDurationStats(): StatusEffect_Record[]
  GetICELevel(): number
  OnQuickSlotCommandUsed(evt: QuickSlotCommandUsed): Bool
  OnQuickHackPanelStateChanged(evt: QuickHackPanelStateEvent): Bool
  HasActiveQuickHackUpload(): Bool
  IsInvestigating(): Bool
  IsInvestigatingObject(object: GameObject): Bool
  DetermineInteractionState(): void
  IsPlayerAround(): Bool
  ShouldEnableRemoteLayer(): Bool
  GetObjectToForwardHighlight(): GameObject[]
  SetSenseObjectType(type: gamedataSenseObjectType): void
  HasPrimaryOrSecondaryEquipment(): Bool
  SetMainTrackedObject(target: GameObject): void
  GetDistToTraceEndFromPosToMainTrackedObject(traceSource: AdditionalTraceType): number
  OnStartEndPhoneCallEvent(evt: StartEndPhoneCallEvent): Bool
  OnPauseResumePhoneCallEvent(evt: PauseResumePhoneCallEvent): Bool
  ShowPhoneCallDuration(duration: number, statType: gamedataStatType, statPoolType: gamedataStatPoolType, statPoolID: TweakDBID): void
  PausePhoneCallDuration(statPoolType: gamedataStatPoolType): void
  ResumePhoneCallDuration(statPoolType: gamedataStatPoolType, initialDuration: number): void
  HidePhoneCallDuration(statPoolType: gamedataStatPoolType): void
  OnUploadProgressStateChanged(evt: UploadProgramProgressEvent): Bool
  GetPhoneCallIndicatorSlotName(): CName
  IsPerformingCallReinforcements(): Bool
  EquipSavedLoadout(): void
  OnMinigameFailEvent(evt: MinigameFailEvent): Bool
  CreateObjectActionsCallbackController(instigator: Entity): void
  DestroyObjectActionsCallbackController(): void
  OnObjectActionRefreshEvent(evt: gameObjectActionRefreshEvent): Bool
}

declare interface EntityRequestComponentsInterface {

  /** @noSelf **/
  RequestComponent(self: EntityRequestComponentsInterface, componentName: CName, componentType: CName, mandatory: Bool): void
}

declare interface ScanningComponent extends GameComponent {

  GetScanningProgress(): number
  GetTimeNeeded(): number
  GetBoundingSphere(): Sphere
  IsScanned(): Bool
  IsScanning(): Bool
  SetIsScanned_Event(val: Bool): void
  UpdateTooltipData(): void
  IsBlocked(): Bool
  SetBlocked(isBlocked: Bool): void
  GetScanningState(): gameScanningState
  SetScannableThroughWalls(isScannableThroughWalls: Bool): void
  ToggleScanningBlocked(isBlocked: Bool): void
  OnGameAttach(): void
  OnGameDetach(): void
  GetOwner(): GameObject
  GetMyPS(): gameScanningComponentPS
  RestoreClueState(): void
  ReEvaluateGrouppedCluesState(): Bool
  RegisterGrouppedClue(clueIndex: number): Bool
  GetLinkedClueData(clueIndex: number, linkedClueData: LinkedFocusClueData): Bool
  IsBraindanceClue(): Bool
  GetBraindanceLayer(): braindanceVisionMode
  GetObjectDescription(): ObjectScanningDescription
  IsObjectDescriptionEnabled(): Bool
  HasValidObjectDescription(): Bool
  GetAllClues(): FocusClueDefinition[]
  GetScanningBarTextTweak(): TweakDBID
  GetAvailableClueIndex(): number
  GetScannableObjects(arr: ScanningTooltipElementDef[]): void
  GetScannableDataForSingleClueByIndex(index: number, conclusionData: ScanningTooltipElementDef): ScanningTooltipElementDef[]
  IsConclusionActive(clueIndex: number): Bool
  IsBraindanceBlocked(): Bool
  IsPhotoModeBlocked(): Bool
  IsClueLinked(index: number): Bool
  IsActiveClueUsingAutoInspect(): Bool
  IsClueUsingAutoInspect(index: number): Bool
  IsActiveClueLinked(): Bool
  GetClueGroupID(index: number): CName
  GetClueByIndex(index: number): FocusClueDefinition
  GetExtendedClueRecords(clueIndex: number): ClueRecordData[]
  SetClueExtendedDescriptionAsInspected(clueIndex: number, descriptionIndex: number): void
  SetClueState(clueIndex: number, isEnabled: Bool, isInspected: Bool, updateFocusClueSystem: Bool, ignorePS: Bool): void
  SetClueState(clueIndex: number, isEnabled: Bool, updateFocusClueSystem: Bool, ignorePS: Bool): void
  NotifyClueStateChanged(clueIndex: number, ignorePS: Bool, updateFocusClueSystem: Bool): void
  IsScanningCluesBlocked(): Bool
  IsAnyClueEnabled(): Bool
  IsAnyClueValid(): Bool
  IsClueInspected(): Bool
  IsClueProgressing(): Bool
  HasAnyClue(): Bool
  GetClueCount(): number
  HasClueWithID(clueID: number): Bool
  InitializeQuestDBCallbacks(): void
  UnInitializeQuestDBCallbacks(): void
  CancelForcedVisionAppearance(data: FocusForcedHighlightData, fast?: Bool, ignoreStackEvaluation?: Bool): void
  ForceVisionAppearance(data: FocusForcedHighlightData): void
  GetQuestHighlight(highlightInstructions: HighlightInstance): FocusForcedHighlightData
  GetDefaultHighlight(highlightInstructions: HighlightInstance): FocusForcedHighlightData
  GetClueHighlight(highlightInstructions: HighlightInstance): FocusForcedHighlightData
  ToggleHighlight(toggle: Bool, highlightInstructions: HighlightInstance): void
  GetClueHighlightData(highlightInstructions: HighlightInstance): FocusForcedHighlightData
  UpdateDefaultHighlight(): void
  ResolveFocusClueOnScannCompleted(): void
  Script_IsScanningStateTransitionAllowed(currentState: gameScanningState, newState: gameScanningState): Bool
  HighLightWeakspots(): void
  SendHighlightEventToWeakspot(object: GameObject): void
  OnScanningLookedAt(evt: ScanningLookAtEvent): Bool
  ResolveScannerAvailability(): void
  OnEnteventsSetVisibility(evt: enteventsSetVisibility): Bool
  OnScanningEvent(evt: ScanningEvent): Bool
  OnClueLockedByScene(evt: SetExclusiveFocusClueEntityEvent): Bool
  OnActivateConclusionFactChanged(evt: FactChangedEvent): Bool
  OnHUDInstruction(evt: HUDInstruction): Bool
  ProcessHighlightHudInstruction(instruction: HighlightInstance): void
  ProcessScannerHudInstruction(instruction: ScanInstance): void
  ProcessBraindanceHudInstruction(instruction: BraindanceInstance): void
  OnDisableScanner(evt: DisableScannerEvent): Bool
  OnSetGameplayRole(evt: SetGameplayRoleEvent): Bool
  OnDisableObjectDescription(evt: DisableObjectDescriptionEvent): Bool
  OnSetCustomObjectDescription(evt: SetCustomObjectDescriptionEvent): Bool
  OnClearCustomObjectDescription(evt: ClearCustomObjectDescriptionEvent): Bool
  OnSetCurrentGameplayRole(evt: SetCurrentGameplayRoleEvent): Bool
  OnQuestToggleClueConclusion(evt: ToggleClueConclusionEvent): Bool
  SetConclusionAsShown(clueID: number): void
  SetConclusionState(clueID: number, state: EConclusionQuestState): void
  WasConclusionShown(clueID: number): Bool
  OnToggleFocusClue(evt: ToggleFocusClueEvent): Bool
  OnClueStateChanged(evt: FocusClueStateChangeEvent): Bool
  OnLinkedClueUpdateEvent(evt: linkedClueUpdateEvent): Bool
  UpdateLinkedClues(linkedCluekData: LinkedFocusClueData, updatePS: Bool): void
  OnRevealStateChanged(evt: RevealStateChangedEvent): Bool
  OnScannableBraindanceClueEnabledEvent(evt: OnScannableBraindanceClueEnabledEvent): Bool
  OnScannableBraindanceClueDisabledEvent(evt: OnScannableBraindanceClueDisabledEvent): Bool
  OnBraindanceVisionModeChange(value: number): Bool
  OnBraindanceFppChange(fppToggle: Bool): Bool
  ToggleBraindanceScanning(value: Bool): void
  SignalScannablesBlackboard(): void
  ToggleBraindance(value: Bool): void
  StartBraindanceClueEffect(): void
  StopBraindanceClueEffect(): void
  EvaluateBraindanceClueState(): void
  HideMappins(value: Bool): void
  NotifyHudManager(isClue: Bool): void
  RequestHUDRefresh(): void
  GetFocusClueSystem(): FocusCluesSystem
  RequestFocusClueSystemUpdate(clueIndex: number): void
  ForceReEvaluateGameplayRole(): void
}

declare interface FocusClueDefinition {

}

declare interface BraindanceBlackboardDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface gameScanningComponentPS extends GameComponentPS {

  GetOwnerEntityWeak(): Entity
  GetMyEntityID(): EntityID
  IsScanningDisabled(): Bool
  IsDescriptionEnabled(): Bool
  HasAnyStoredClues(): Bool
  GetObjectDecriptionOverride(): ObjectScanningDescription
  HasStoredClue(id: number): Bool
  GetStoredClueData(id: number, data: CluePSData): Bool
  UpdateFocusClueData(id: number, clueData: FocusClueDefinition): Bool
  StoreClueData(id: number, clueData: FocusClueDefinition, isScanned: Bool): void
  OnLinkedClueUpdateEvent(evt: linkedClueUpdateEvent): EntityNotificationType
  OnToggleFocusClue(evt: ToggleFocusClueEvent): EntityNotificationType
  OnClueStateChanged(evt: FocusClueStateChangeEvent): EntityNotificationType
  OnQuestToggleClueConclusion(evt: ToggleClueConclusionEvent): EntityNotificationType
  OnDisableScanner(evt: DisableScannerEvent): EntityNotificationType
  OnDisableObjectDescription(evt: DisableObjectDescriptionEvent): EntityNotificationType
  OnClearCustomObjectDescription(evt: ClearCustomObjectDescriptionEvent): EntityNotificationType
  OnSetCustomObjectDescription(evt: SetCustomObjectDescriptionEvent): EntityNotificationType
  GetFocusClueSystem(): FocusCluesSystem
  RequestFocusClueSystemUpdate(clueData: CluePSData): void
}

declare interface CluePSData extends IScriptable {

  SetupData(id: number, isEnabled: Bool, wasInspected: Bool, isScanned: Bool, conclusionQuestState: EConclusionQuestState): void
  GetID(): number
  IsEnabled(): Bool
  IsScanned(): Bool
  WasInspected(): Bool
  GetConclusionState(): EConclusionQuestState
  SetConclusionState(state: EConclusionQuestState): void
}

declare interface linkedClueUpdateEvent extends Event {

}

declare interface LinkedFocusClueData {

}

declare interface ToggleFocusClueEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface FocusCluesSystem extends ScriptableSystem {

  EnableGroup(groupID: CName): void
  DisableGroup(groupID: CName): void
  AddLinkedClue(clue: LinkedFocusClueData): void
  RemoveLinkedClue(clue: LinkedFocusClueData): void
  RemoveLinkedClueByIndex(clueID: number): void
  HasLinkedClue(clue: LinkedFocusClueData): Bool
  GetLinkedClueGroupData(groupID: CName, clue: LinkedFocusClueData): Bool
  IsRegistered(ownerID: EntityID, groupID: CName): Bool
  IsGroupped(ownerID: EntityID, groupID: CName): Bool
  IsGroupDisabled(groupID: CName): Bool
  GetClueGroupData(groupID: CName, clue: FocusClueDefinition): Bool
  IsGroupTagged(clue: LinkedFocusClueData): Bool
  IsTagged(owner: GameObject): Bool
  UpdateLinkedClues(clue: LinkedFocusClueData): void
  UpdateSingleLinkedClue(clue: LinkedFocusClueData): void
  SendlinkedClueUpdateEvent(linkedClue: LinkedFocusClueData, requester: EntityID): void
  ResolveLinkedCluesTagging(clue: LinkedFocusClueData, tag: Bool): void
  SendlinkedClueTagEvent(linkedClue: LinkedFocusClueData, requester: EntityID, tag: Bool): void
  OnTagLinkedClueRequest(request: TagLinkedCluekRequest): void
  OnRegisterLinkedClueRequest(request: RegisterLinkedCluekRequest): void
  OnUnregisterLinkedClueRequest(request: UnregisterLinkedCluekRequest): void
  OnUpdateLinkedCluesRequest(request: UpdateLinkedClueskRequest): void
  GetActiveLinkedClue(): LinkedFocusClueData
  GetActiveLinkedClueScannableData(): ScanningTooltipElementDef[]
}

declare interface VisionModeSystem extends IVisionModeSystem {

  EnterMode(activator: GameObject, mode: gameVisionModeType): void
  SetEntityVisionMode(id: EntityID, val: Bool): void
  SetChildEntityVisionMode(parentId: EntityID, childNodeRef: NodeRef, enable: Bool): void
  ForceVisionAppearance(entity: GameObject, appearance: VisionAppearance, transitionTime?: number): void
  CancelForceVisionAppearance(entity: GameObject, transitionTime?: number): void
  GetScanningController(): ScanningController
  RegisterActivatorCallback(activator: GameObject, listener: GameObject): Bool
  UnregisterActivatorCallback(activator: GameObject, listener: GameObject): void
  RequestPulse(entity: GameObject, initialAppearance: VisionAppearance, peakAppearance: VisionAppearance, transitionInTime?: number, transitionOutTime?: number): void
  RegisterDelayedReveal(revealEntityId: EntityID, revealId: gameVisionModeSystemRevealIdentifier, delayTime: number): void
  UnregisterDelayedReveal(revealEntityId: EntityID, revealId: gameVisionModeSystemRevealIdentifier): void
  IsDelayedRevealInProgress(revealEntityId: EntityID, revealId: gameVisionModeSystemRevealIdentifier): Bool
  GetDelayedRevealEntries(revealEntityId: EntityID, revealIds: gameVisionModeSystemRevealIdentifier[]): void
}

declare interface ScanningController extends IScriptable {

  IsScanned(object: GameObject): Bool
  SetIsScanned_Event(object: GameObject, val: Bool): Bool
  GetScanProgress(object: GameObject): number
  TagObject(object: GameObject): void
  UntagObject(object: GameObject): number
  UntagAll(): void
  IsTagged(object: GameObject): Bool
  EnterMode(object: GameObject, mode: gameScanningMode): void
  PulseScan(object: GameObject, range3D: number, range2D?: Vector4, startPosition?: Vector4): void
  ImmediateScan(object: GameObject, range3D: number, range2D?: Vector4, startPosition?: Vector4): void
  GetExclusiveFocusClueEntity(): EntityID
}

declare interface PSOwnerData {

}

declare interface linkedClueTagEvent extends Event {

}

declare interface TagLinkedCluekRequest extends ScriptableSystemRequest {

}

declare interface RegisterLinkedCluekRequest extends ScriptableSystemRequest {

}

declare interface UnregisterLinkedCluekRequest extends ScriptableSystemRequest {

}

declare interface UpdateLinkedClueskRequest extends ScriptableSystemRequest {

}

declare interface ScanningTooltipElementDef {

}

declare interface ClueRecordData {

}

declare interface ScriptableSystemsContainer extends gameIScriptableSystemsContainer {

  Get(systemName: CName): ScriptableSystem
  QueueRequest(request: ScriptableSystemRequest): void
}

declare interface FocusClueStateChangeEvent extends Event {

}

declare interface ToggleClueConclusionEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface DisableScannerEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface DisableObjectDescriptionEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface SetCustomObjectDescriptionEvent extends Event {

  GetFriendlyDescription(): string
  GetObjectDescription(): ObjectScanningDescription
}

declare interface PhotoModeSystem extends IPhotoModeSystem {

  UnlockPhotoModeItem(stickerID: TweakDBID): Bool
  IsExitLocked(): Bool
  IsPhotoModeActive(): Bool
  CanPhotoModeBeEnabled(): Bool
  GetCameraLocation(location: WorldPosition): void
}

declare interface entSpawnEffectEvent extends Event {

}

declare interface ToggleGameplayMappinVisibilityEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface entKillEffectEvent extends Event {

}

declare interface ForceUpdateDefaultHighlightEvent extends Event {

}

declare interface HUDManagerRequest extends ScriptableSystemRequest {

  IsValid(): Bool
}

declare interface ClueStatusNotification extends HUDManagerRequest {

}

declare interface NativeHudManager extends ScriptableSystem {

  RegisterActor(actorId: EntityID): HUDActor
  UnregisterActor(actorId: EntityID): Bool
  GetActor(actorId: EntityID): HUDActor
  GetAllActors(): HUDActor[]
  IsQuickHackPanelOpened(): Bool
  SetIsQuickHackPanelOpened(isOpen: Bool): void
}

declare interface HUDManager extends NativeHudManager {

  OnAttach(): void
  OnDetach(): void
  InitializeHUD(): void
  InitializeModules(): void
  UninitializeHUD(): void
  PlayerAttachedCallback(playerPuppet: GameObject): void
  PlayerDetachedCallback(playerPuppet: GameObject): void
  GetPlayerSMBlackboard(): IBlackboard
  OnRegister(request: HUDManagerRegistrationRequest): void
  OnRefreshSingleActor(request: RefreshActorRequest): void
  OnLockQHackInput(request: LockQHackInput): void
  IsQHackInputLocked(): Bool
  /** @noSelf **/
  IsQHackInputLocked(context: GameInstance): Bool
  /** @noSelf **/
  LockQHackInput(context: GameInstance, isLocked: Bool): void
  OnRevealQuickhackMenu(request: RevealQuickhackMenu): void
  CloseQHackMenu(): void
  /** @noSelf **/
  CanCurrentTargetRevealRemoteActionsWheel(context: GameInstance): Bool
  OnRevealActorNotification(request: RevealStatusNotification): void
  OnTagActorNotification(request: TagStatusNotification): void
  OnClueClueLockNotification(request: ClueLockNotification): void
  OnClueActorNotification(request: ClueStatusNotification): void
  OnVisionModeChanged(value: number): Bool
  OnPlayerTargetChanged(value: EntityID): Bool
  OnBraindanceToggle(value: Bool): Bool
  OnPlayerTargetChangedRequest(evt: PlayerTargetChangedRequest): void
  ResolveLookAtTarget(newTarget: EntityID): void
  RegisterToInput(): void
  UnregisterToInput(): void
  IsBraindanceActive(): Bool
  OnQuickHackPanelOpened(value: Bool): Bool
  OnBodyCarryStateChanged(value: Bool): Bool
  OnGrappleStateChanged(value: number): Bool
  OnBreachingNetwork(value: string): Bool
  IsHackingMinigameActive(): Bool
  SendQuickHackPanelStateEvent(isOpened: Bool): void
  /** @noSelf **/
  IsQuickHackPanelOpen(context: GameInstance): Bool
  /** @noSelf **/
  SetQHDescriptionVisibility(context: GameInstance, visible: Bool): void
  OnQuickHackSetDescriptionVisibility(evt: QuickHackSetDescriptionVisibilityRequest): void
  SetQhuickHackDescriptionVisibility(value: Bool): void
  IsQHDescriptionVisible(): Bool
  /** @noSelf **/
  IsQuickHackDescriptionVisible(context: GameInstance): Bool
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
  OnStickInputChanged(value: Vector4): Bool
  JumpToNextTarget(right: Bool): void
  JumpToTarget(inputVector: Vector4, dotThreshold?: number): void
  ClearQuickHackTargetData(targetID: EntityID): void
  LookAtNearestCroshairTarget(targetEntityID?: EntityID): void
  LookAtNewTarget(lookAtComponent: TargetingComponent, vecToNextObject: Vector4): void
  FillLookAtRequestData(lookAtComponent: TargetingComponent): AimRequest
  OnNameplateChanged(value: Variant): Bool
  OnNemaplateChangedRequest(evt: NemaplateChangedRequest): void
  OnScannerTargetChanged(value: EntityID): Bool
  RequestTimeDilation(eventId: CName, val: Bool): void
  OnScannerTargetChangedRequest(request: ScannerTargetChangedRequest): void
  OnResolveRadial(request: ResolveQuickHackRadialRequest): void
  IsRegistered(id: EntityID): Bool
  ProcessRegistration(request: HUDManagerRegistrationRequest): void
  RegisterActor_Script(request: HUDManagerRegistrationRequest): void
  UnregisterActor_Script(request: HUDManagerRegistrationRequest): void
  ResolveCurrentTarget(): Bool
  SetNewTarget(newTarget: HUDActor): Bool
  ReactToTargetChanged(): void
  CanShowHintMessage(): Bool
  IsCyberdeckEquipped(): Bool
  RefreshHUD(): void
  RefreshHudForSingleActor(actor: HUDActor, targetModules?: HUDModule[]): void
  CreateJob(actor: HUDActor): HUDJob
  CreateJobsForClueActors(actors: HUDActor[]): HUDJob[]
  CreateJobsByActorType(actors: HUDActor[], type: HUDActorType): HUDJob[]
  CreateJobs(actors: HUDActor[]): HUDJob[]
  IterateModules(job: HUDJob): void
  IterateModules(jobs: HUDJob[]): void
  SendInstructions(jobs: HUDJob[]): void
  SuppressActor(actor: HUDActor): void
  DEBUGActorArray(countActorTypes?: Bool, createClassCount?: Bool): void
  SendSingleInstruction(entityID: EntityID, evt: Event): void
  PostponeModuleIteration(remainingJobs: HUDJob[]): void
  OnIterateModulesRequest(request: IterateModulesRequest): void
  SendInstructionsByRequest(jobs: HUDJob[]): void
  OnInstructionRequest(request: SendInstructionRequest): void
  GetMaxInstructionsPerFrame(): number
  DetermineActorVisibilityState(id: EntityID): ActorVisibilityStatus
  ForceScannerModule(actor: HUDActor, shouldForce: Bool): void
  RegisterScannerTargetCallback(): void
  RegisterPlayerTargetCallback(): void
  RegisterBraindanceToggleCallback(): void
  RegisterNameplateShownCallback(): void
  UnRegisterPlayerTargetCallback(): void
  RegisterVisionModeCallback(player: GameObject): void
  UnregisterVisionModeCallback(player: GameObject): void
  RegisterHackingMinigameCallback(): void
  UnregisterHackingMinigameCallback(player: GameObject): void
  RegisterUICallbacks(): void
  UnregisterUICallbacks(): void
  OnScannerUIVisibleChanged(visible: Bool): Bool
  OnQuickHackUIVisibleChanged(visible: Bool): Bool
  OnLootDataChanged(value: Variant): Bool
  GetHUDState(): HUDState
  GetActiveMode(): ActiveMode
  /** @noSelf **/
  GetActiveMode(context: GameInstance): ActiveMode
  GetLastTarget(): HUDActor
  GetUiScannerVisible(): Bool
  GetIconsModule(): IconsModule
  GetLockedClueID(): EntityID
  GetLastTargetID(): EntityID
  GetQuickHackTargetID(): EntityID
  GetLootedTargetID(): EntityID
  GetCurrentTarget(): HUDActor
  /** @noSelf **/
  GetCurrentTarget(context: GameInstance): HUDActor
  GetCurrentTargetObject(): GameObject
  GetCurrentTargetID(): EntityID
  HasCurrentTarget(): Bool
  /** @noSelf **/
  HasCurrentTarget(context: GameInstance): Bool
  CanActivateRemoteActionWheel(): Bool
  GetPlayerStateMachineBlackboard(playerPuppet: GameObject): IBlackboard
  IsRequestLegal(requestToValidate: HUDManagerRequest): Bool
  QueueEntityEvent(entityID: EntityID, evt: Event): void
  GetPlayer(): GameObject
  HUDLog(message: string): void
  /** @noSelf **/
  ShowScannerHint(game: GameInstance): void
  /** @noSelf **/
  HideScannerHint(game: GameInstance): void
  /** @noSelf **/
  SetScannerHintMessege(game: GameInstance, text: string): void
  GetPulseDuration(): number
  IsPulseActive(): Bool
  CanPulse(): Bool
  StartPulse(): void
  StopPulse(): void
  OnPingFinishedRequest(request: PulseFinishedRequest): void
  GetNetworkSystem(): NetworkSystem
  RefreshDebug(): void
}

declare interface UI_NameplateDataDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface NetworkBlackboardDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface UI_QuickSlotsDataDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface UIInteractionsDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface HUDModule extends IScriptable {

  GetState(): ModuleState
  IsModuleOperational(): Bool
  InitializeModule(hud: HUDManager, state: ModuleState): void
  UnregisterActor(actor: HUDActor): void
  OverrideInstance(index: number, instance: ModuleInstance): void
  DuplicateLastInstance(actor: HUDActor): ModuleInstance
  IsIndexOK(index: number): Bool
  Iterate(jobs: HUDJob[], forcedMode?: ActiveMode): void
  Iterate(job: HUDJob, forcedMode?: ActiveMode): void
  Suppress(jobs: HUDJob[]): void
  Process(jobs: HUDJob[], mode: ActiveMode): void
  Process(task: HUDJob, mode: ActiveMode): void
  GetPlayer(): GameObject
  GetActiveMode(): ActiveMode
  IsActorLookedAt(actor: HUDActor): Bool
  IsActorQuickHackTarget(actor: HUDActor): Bool
  HasCurrentTarget(): Bool
  IsActorLooted(actor: HUDActor): Bool
}

declare interface ModuleInstance extends IScriptable {

  SetContext(_isLookedAt: Bool, _isRevealed: Bool): void
  /** @noSelf **/
  Construct(self: ModuleInstance, id: EntityID): void
  GetEntityID(): EntityID
  GetState(): InstanceState
  IsLookedAt(): Bool
  IsRevealed(): Bool
  WasProcessed(): Bool
  SetState(newState: InstanceState, _previousInstance: ModuleInstance): void
}

declare interface HUDActor extends IScriptable {

  /** @noSelf **/
  Construct(self: HUDActor, entityID: EntityID, type: HUDActorType, status: HUDActorStatus, visibility: ActorVisibilityStatus): void
  UpdateActorData(updateData: HUDActorUpdateData): void
  AddModule(module: HUDModule): void
  RemoveModule(module: HUDModule): void
  SetStatus(newStatus: HUDActorStatus): void
  SetRemotelyAccessed(value: Bool): void
  SetRevealed(value: Bool): void
  SetTagged(value: Bool): void
  SetClue(value: Bool): void
  SetClueGroup(value: CName): void
  SetCanOpenScannerInfo(value: Bool): void
  SetIsInIconForcedVisibilityRange(value: Bool): void
  SetIsIconForcedVisibileThroughWalls(value: Bool): void
  SetShouldRefreshQHack(value: Bool): void
  GetEntityID(): EntityID
  GetType(): HUDActorType
  GetStatus(): HUDActorStatus
  GetVisibility(): ActorVisibilityStatus
  IsRevealed(): Bool
  IsTagged(): Bool
  IsClue(): Bool
  IsGrouppedClue(): Bool
  IsRemotelyAccessed(): Bool
  CanOpenScannerInfo(): Bool
  IsInIconForcedVisibilityRange(): Bool
  IsIconForcedVisibileThroughWalls(): Bool
  GetShouldRefreshQHack(): Bool
  GetActiveModules(): HUDModule[]
}

declare interface HUDActorUpdateData extends IScriptable {

}

declare interface HUDClueData {

}

declare interface ScannerModule extends HUDModule {

  InitiateFreshScan(): void
  Process(task: HUDJob, mode: ActiveMode): void
  Process(jobs: HUDJob[], mode: ActiveMode): void
  Suppress(jobs: HUDJob[]): void
}

declare interface HUDJob {

}

declare interface HUDInstruction extends Event {

  /** @noSelf **/
  Construct(self: HUDInstruction, id: EntityID): void
}

declare interface ScanInstance extends ModuleInstance {
}

declare interface HighlightInstance extends ModuleInstance {
  IsInstant(): Bool
  GetContext(): HighlightContext
}

declare interface IconsInstance extends ModuleInstance {
}

declare interface BraindanceInstance extends ModuleInstance {

}

declare interface QuickhackInstance extends ModuleInstance {

  ShouldOpen(): Bool
  ShouldProcess(): Bool
  SetContext(_open: Bool): void
}

declare interface BraindanceModule extends HUDModule {

  Process(task: HUDJob, mode: ActiveMode): void
  DuplicateLastInstance(actor: HUDActor): BraindanceInstance
  Process(jobs: HUDJob[], mode: ActiveMode): void
}

declare interface HighlightModule extends HUDModule {

  Process(task: HUDJob, mode: ActiveMode): void
  Process(jobs: HUDJob[], mode: ActiveMode): void
  Suppress(jobs: HUDJob[]): void
  DuplicateLastInstance(actor: HUDActor): HighlightInstance
}

declare interface IconsModule extends HUDModule {

  Process(task: HUDJob, mode: ActiveMode): void
  ShouldDisplayBodyDisposal(actor: HUDActor): Bool
  IsPlayerCarrying(): Bool
  IsEnemyGrappled(): Bool
  Process(jobs: HUDJob[], mode: ActiveMode): void
  Suppress(jobs: HUDJob[]): void
  DuplicateLastInstance(actor: HUDActor): IconsInstance
}

declare interface CrosshairModule extends HUDModule {

}

declare interface AimAssistModule extends HUDModule {

}

declare interface QuickhackModule extends HUDModule {

  SetCalculateClose(value: Bool): void
  IsModuleOperational(): Bool
  Process(task: HUDJob, mode: ActiveMode): void
  Process(jobs: HUDJob[], mode: ActiveMode): void
  Suppress(jobs: HUDJob[]): void
  DuplicateLastInstance(actor: HUDActor): QuickhackInstance
  BaseOpenCheck(): Bool
  /** @noSelf **/
  IsQuickhackBlockedByScene(player: GameObject): Bool
  /** @noSelf **/
  RequestRefreshQuickhackMenu(context: GameInstance, requester: EntityID): void
  /** @noSelf **/
  RequestCloseQuickhackMenu(context: GameInstance, requester: EntityID): void
  /** @noSelf **/
  SendRevealQuickhackMenu(hudManager: HUDManager, requester: EntityID, shouldOpen: Bool): void
  /** @noSelf **/
  TranslateEmptyQuickSlotCommands(context: GameInstance): QuickhackData[]
  SendFakeCommands(commands: QuickhackData[], shouldReveal: Bool): void
  /** @noSelf **/
  CheckCommandDuplicates(commands: QuickhackData[], characterRecord?: Character_Record): void
  /** @noSelf **/
  SortCommandPriority(commands: QuickhackData[], context: GameInstance): void
}

declare interface PlayerGameplayRestrictions extends IScriptable {

  /** @noSelf **/
  RemoveAllGameplayRestrictions(target: GameObject): void
  /** @noSelf **/
  HasRestriction(target: GameObject, gameplayTags: CName[]): Bool
  /** @noSelf **/
  HasRestriction(target: GameObject, gameplayTag: CName): Bool
  /** @noSelf **/
  OnGameplayRestrictionAdded(player: PlayerPuppet, record: StatusEffect_Record, gameplayTags: CName[]): void
  /** @noSelf **/
  OnGameplayRestrictionRemoved(player: PlayerPuppet, evt: RemoveStatusEffect, gameplayTags: CName[]): void
  /** @noSelf **/
  PushForceRefreshInputHintsEventToPSM(requester: GameObject): void
  /** @noSelf **/
  SendBlockMenuRequest(player: PlayerPuppet, blockMenu: Bool): void
  /** @noSelf **/
  RequestFists(player: PlayerPuppet, animType?: gameEquipAnimationType): void
  /** @noSelf **/
  RequestLastUsedWeapon(player: PlayerPuppet, animType?: gameEquipAnimationType): void
  /** @noSelf **/
  ChangeFastTravelSystemState(enable: Bool, reason: CName, player: PlayerPuppet, statusEffectID: TweakDBID): void
  /** @noSelf **/
  IsHotkeyRestricted(game: GameInstance, hotkey: EHotkey): Bool
  /** @noSelf **/
  AcquireHotkeyRestrictionTags(hotkey: EHotkey, hotkeyTags: CName[]): Bool
}

declare interface StatusEffectHelper extends IScriptable {

  /** @noSelf **/
  ApplyStatusEffect(target: GameObject, statusEffectID: TweakDBID, delay?: number): Bool
  /** @noSelf **/
  ApplyStatusEffect(target: GameObject, statusEffectID: TweakDBID, instigatorEntityID: EntityID): Bool
  /** @noSelf **/
  ApplyStatusEffect(target: GameObject, statusEffectID: TweakDBID, instigatorID: TweakDBID): Bool
  /** @noSelf **/
  ApplyStatusEffectForTimeWindow(target: GameObject, statusEffectID: TweakDBID, instigatorEntityID: EntityID, delay: number, duration: number): void
  /** @noSelf **/
  RemoveStatusEffect(target: GameObject, statusEffectID: TweakDBID): Bool
  /** @noSelf **/
  RemoveStatusEffect(target: GameObject, statusEffect: StatusEffect): Bool
  /** @noSelf **/
  RemoveStatusEffectsByInstigatorID(target: GameObject, instigatorID: TweakDBID): void
  /** @noSelf **/
  RemoveAllStatusEffects(target: GameObject): void
  /** @noSelf **/
  RemoveAllStatusEffectsByType(target: GameObject, type: gamedataStatusEffectType): void
  /** @noSelf **/
  RemoveStatusEffectsWithTag(target: GameObject, gameplayTag: CName, delay?: number): void
  /** @noSelf **/
  RemoveAllStatusEffectsWithTagBeside(target: GameObject, gameplayTag: CName, beside: TweakDBID): void
  /** @noSelf **/
  HasStatusEffect(target: GameObject, statusEffectID: TweakDBID): Bool
  /** @noSelf **/
  HasStatusEffect(target: GameObject, statusEffectType: gamedataStatusEffectType): Bool
  /** @noSelf **/
  HasStatusEffectWithTag(target: GameObject, gameplayTag: CName): Bool
  /** @noSelf **/
  GetStatusEffectWithTag(target: GameObject, gameplayTag: CName): StatusEffect
  /** @noSelf **/
  HasStatusEffectWithTagConst(target: GameObject, gameplayTag: CName): Bool
  /** @noSelf **/
  HasTag(record: StatusEffect_Record, tag: CName): Bool
  /** @noSelf **/
  GetAppliedEffects(target: GameObject): StatusEffect[]
  /** @noSelf **/
  GetAppliedEffectsWithTag(target: GameObject, tag: CName, statusEffects: StatusEffect[], instigatorID?: EntityID): Bool
  /** @noSelf **/
  HasStatusEffectFromInstigator(target: GameObject, statusEffectID: TweakDBID, instigator: EntityID): Bool
  /** @noSelf **/
  HasStatusEffectAttack(statusEffect: StatusEffect_Record, statusEffectAttack: Attack_Record): Bool
  /** @noSelf **/
  GetTopPriorityEffect(target: GameObject): StatusEffect
  /** @noSelf **/
  GetTopPriorityEffect(target: GameObject, statusEffectType: gamedataStatusEffectType, discardStatusEffect?: Bool): StatusEffect
  /** @noSelf **/
  GetStatusEffectByID(target: GameObject, statusEffectID: TweakDBID): StatusEffect
  /** @noSelf **/
  CheckStatusEffectBehaviorPrereqs(target: GameObject, statusEffectRecord: StatusEffect_Record): Bool
  /** @noSelf **/
  PopulateStatusEffectAnimData(owner: GameObject, statusEffectRecord: StatusEffect_Record, state: EKnockdownStates, hitDirection: Vector4, animData: AnimFeature_StatusEffect): void
  /** @noSelf **/
  GetStateStartTimeKey(): CName
  /** @noSelf **/
  GetForceKnockdownKey(): CName
  /** @noSelf **/
  GetAppliedStatusEffectKey(): CName
  /** @noSelf **/
  GetCanExitKnockdownKey(): CName
  /** @noSelf **/
  TriggerSecondaryKnockdownKey(): CName
}

declare interface StatusEffectSystem extends IStatusEffectSystem {

  ApplyStatusEffect(objID: EntityID, statusEffectID: TweakDBID, instigatorID?: TweakDBID, instigatorEntityID?: EntityID, applyCount?: number, direction?: Vector4): Bool
  RemoveStatusEffect(objID: EntityID, statusEffectID: TweakDBID, removeCount?: number): Bool
  RemoveAllStatusEffectOfType(objID: EntityID, statusEffectType: gamedataStatusEffectType): Bool
  HasStatusEffect(objID: EntityID, statusEffectID: TweakDBID): Bool
  HasStatusEffectOfType(objID: EntityID, statusEffectType: gamedataStatusEffectType): Bool
  HasStatusEffectWithTag(objID: EntityID, tag: CName): Bool
  GetAppliedEffects(objID: EntityID, appliedEffects: StatusEffect[]): void
  SetStatusEffectRemainingDuration(objID: EntityID, statusEffectID: TweakDBID, duration: number): Bool
  RegisterListener(objID: EntityID, listener: IStatusEffectListener): void
}

declare interface StatusEffectBase extends IScriptable {

}

declare interface ApplyNewStatusEffectEvent extends Event {

  SetEffectID(effectName: string): void
}

declare interface DeviceBase extends GameObject {

  GetServerState(): DeviceReplicatedState
  GetClientState(): DeviceReplicatedState
  ApplyReplicatedState(state: DeviceReplicatedState): void
  GetDeviceStateClass(): CName
  ApplyAnimFeatureToReplicate(obj: GameObject, inputName: CName, value: AnimFeature): void
  IsDeviceMovableScript(): Bool
  IncludeLightsInVisibilityBoundsScript(): Bool
}

declare interface AnimationControllerComponent extends IComponent {

  PushEvent(eventName: CName): void
  SetInputFloat(inputName: CName, value: number): void
  SetInputInt(inputName: CName, value: number): void
  SetInputBool(inputName: CName, value: Bool): void
  SetInputQuaternion(inputName: CName, value: Quaternion): void
  SetInputVector(inputName: CName, value: Vector4): void
  SetUsesSleepMode(allowSleepState: Bool): void
  ScheduleFastForward(): void
  PreloadAnimations(streamingContextName: CName, highPriority: Bool): Bool
  ApplyFeature(inputName: CName, value: AnimFeature): void
  GetAnimationDuration(animationName: CName): number
  OnSetInputVectorEvent(evt: AnimInputSetterVector): Bool
  /** @noSelf **/
  ApplyFeature(obj: GameObject, inputName: CName, value: AnimFeature, delay?: number): void
  /** @noSelf **/
  ApplyFeatureToReplicate(obj: GameObject, inputName: CName, value: AnimFeature, delay?: number): void
  /** @noSelf **/
  ApplyFeatureToReplicateOnHeldItems(obj: GameObject, inputName: CName, value: AnimFeature, delay?: number): void
  /** @noSelf **/
  PushEvent(obj: GameObject, eventName: CName): void
  /** @noSelf **/
  PushEventToObjAndHeldItems(obj: GameObject, eventName: CName): void
  /** @noSelf **/
  PushEventToReplicate(obj: GameObject, eventName: CName): void
  /** @noSelf **/
  SetInputFloat(obj: GameObject, inputName: CName, value: number): void
  /** @noSelf **/
  SetInputFloatToReplicate(obj: GameObject, inputName: CName, value: number): void
  /** @noSelf **/
  SetInputBool(obj: GameObject, inputName: CName, value: Bool): void
  /** @noSelf **/
  SetInputBoolToReplicate(obj: GameObject, inputName: CName, value: Bool): void
  /** @noSelf **/
  SetInputInt(obj: GameObject, inputName: CName, value: number): void
  /** @noSelf **/
  SetInputIntToReplicate(obj: GameObject, inputName: CName, value: number): void
  /** @noSelf **/
  SetInputVector(obj: GameObject, inputName: CName, value: Vector4): void
  /** @noSelf **/
  SetInputVectorToReplicate(obj: GameObject, inputName: CName, value: Vector4): void
  /** @noSelf **/
  SetUsesSleepMode(obj: GameObject, state: Bool): void
  /** @noSelf **/
  SetAnimWrapperWeight(obj: GameObject, key: CName, value: number): void
  /** @noSelf **/
  SetAnimWrapperWeightOnOwnerAndItems(owner: GameObject, key: CName, value: number): void
}

declare interface AnimInputSetter extends Event {

}

declare interface AnimInputSetterVector extends AnimInputSetter {

}

declare interface AnimInputSetterAnimFeature extends AnimInputSetter {

}

declare interface ItemObject extends TimeDilatable {

  GetItemID(): ItemID
  GetItemData(): gameItemData
  QueueEventToChildItems(evt: Event): void
  GetAnimationParameters(): CName[]
  IsClientSideOnlyGadget(): Bool
  IsConnectedWithDrop(): Bool
  GetConnectedItemDrop(): gameItemDropObject
  OnGameAttached(): Bool
  OnItemLooted(evt: ItemLootedEvent): Bool
  OnEvaluateLootQuality(evt: EvaluateLootQualityEvent): Bool
  EvaluateLootQuality(): void
  HasValidLootQuality(): Bool
  IsContainer(): Bool
  GetDefaultHighlight(): FocusForcedHighlightData
  GetCurrentOutline(): EFocusOutlineType
  ShouldRegisterToHUD(): Bool
  IsQuest(): Bool
  DeterminGameplayRole(): EGameplayRole
  GetIsIconic(): Bool
  GetLootQuality(): gamedataQuality
  ToggleLootHighlight(enable: Bool): void
}

declare interface gameLootObject extends GameObject {

  OnInteractionActivated(choiceEvent: InteractionEvent): Bool
  IsQualityRangeInteractionLayer(layerTag: CName): Bool
  SetQualityRangeInteractionLayerState(enable: Bool): void
  ResolveQualityRangeInteractionLayer(itemData?: gameItemData): void
  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  IsInIconForcedVisibilityRange(): Bool
}

declare interface InteractionSetEnableEvent extends Event {

}

declare interface HUDManagerRegistrationRequest extends HUDManagerRequest {

  SetProperties(owner: GameObject, shouldRegister: Bool): void
}

declare interface Device extends DeviceBase {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnMaraudersMapDeviceDebug(sink: MaraudersMapDevicesSink): void
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnDeviceVisible(evt: gameDeviceVisibilityChangedEvent): Bool
  WasVisible(): Bool
  IsVisible(): Bool
  OnVisibilityChanged(): void
  OnGameAttached(): Bool
  ResolveGameplayState(): void
  SetLogicReady(): void
  OnDetach(): Bool
  OnPersitentStateInitialized(evt: GameAttachedEvent): Bool
  OnLogicReady(evt: SetLogicReadyEvent): Bool
  IsInitialized(): Bool
  IsLogicReady(): Bool
  IsDevice(): Bool
  SetClearance(): void
  InitializeScanningData(): void
  ResavePersistentData(ps: PersistentState): Bool
  PushData(): void
  PushPersistentData(): void
  OnDeath(evt: gameDeathEvent): Bool
  OnQuickSlotCommandUsed(evt: QuickSlotCommandUsed): Bool
  ExecuteAction(choice: InteractionChoice, executor: GameObject, layerTag: CName): void
  ExecuteAction(action: DeviceAction, executor?: GameObject): Bool
  GetTweakDBRecord(): TweakDBID
  EnableUpdate(shouldEnable: Bool, time?: number): void
  FireSingleTick(): void
  OnCancelUpdateEvent(evt: CancelDeviceUpdateEvent): Bool
  OnDeviceUpdate(evt: DeviceUpdateEvent): Bool
  DeviceUpdate(): void
  RestoreDeviceState(): void
  UpdateDeviceState(isDelayed?: Bool): Bool
  OnDelayedUpdateDeviceStateEvent(evt: DelayedUpdateDeviceStateEvent): Bool
  OnSlaveStateChanged(evt: PSDeviceChangedEvent): Bool
  OnPSChangedEvent(evt: PSChangedEvent): Bool
  GetDeviceLink(): DeviceLinkComponentPS
  GetController(): ScriptableDC
  GetControllerPersistentState(): DeviceComponentPS
  SendEventToDefaultPS(evt: Event): void
  GetDevicePS(): ScriptableDeviceComponentPS
  GetPSName(): CName
  GetPSClassName(): CName
  NotifyParents(): void
  OnNotifyParents(evt: NotifyParentsEvent): Bool
  GetContext(processInitiator?: GameObject, requestType?: gamedeviceRequestType): GetActionsContext
  /** @noSelf **/
  GetInteractionClearance(): Clearance
  IsPlayerAround(): Bool
  GetInputContextName(): CName
  GetDeviceName(): string
  GetDeviceStatusString(): string
  GetDeviceState(): EDeviceStatus
  IsDeviceSecured(): Bool
  GetLocalization(): LocalizationStringComponent
  GetBlackboardDef(): DeviceBaseBlackboardDef
  GetBlackboard(): IBlackboard
  GetGameController(): DeviceInkGameControllerBase
  GetScreenDefinition(): ScreenDefinitionPackage
  IsUIdirty(): Bool
  IsReadyForUI(): Bool
  GetDebuggerProperties(): DebuggerProperties
  CreateBlackboard(): void
  ShouldEnableRemoteLayer(): Bool
  IsConnectedToBackdoorDevice(): Bool
  IsBackdoor(): Bool
  IsActiveBackdoor(): Bool
  IsQuickHackAble(): Bool
  IsPotentiallyQuickHackable(): Bool
  IsQuickHacksExposed(): Bool
  IsBreached(): Bool
  GetNetworkSecurityLevel(): string
  IsControllingDevices(): Bool
  HasAnySlaveDevices(): Bool
  HasImportantInteraction(): Bool
  ShouldRevealDevicesGrid(): Bool
  GetSecuritySystem(): SecuritySystemControllerPS
  IsConnectedToSecuritySystem(): Bool
  IsConnectedToActionsSequencer(): Bool
  IsLockedViaSequencer(): Bool
  IsTargetTresspassingMyZone(target: GameObject): Bool
  GetFxResourceMapper(): FxResourceMapperComponent
  GetResourceLibrary(): ResourceLibraryComponent
  OnDurabilityLimitReach(evt: DurabilityLimitReach): Bool
  OnChangeJuryrigTrapState(evt: ChangeJuryrigTrapState): Bool
  OnPerformedAction(evt: PerformedAction): Bool
  ResolveIllegalAction(executor: GameObject, duration: number): void
  FastForwardAnimations(): void
  OnToggleON(evt: ToggleON): Bool
  OnToggleActivation(evt: ToggleActivation): Bool
  OnTogglePower(evt: TogglePower): Bool
  OnSetDeviceUnpowered(evt: SetDeviceUnpowered): Bool
  OnSetDevicePowered(evt: SetDevicePowered): Bool
  OnSetON(evt: SetDeviceON): Bool
  OnSetOFF(evt: SetDeviceOFF): Bool
  OnAuthorizeUser(evt: AuthorizeUser): Bool
  OnSetAuthorizationModuleON(evt: SetAuthorizationModuleON): Bool
  OnSetAuthorizationModuleOFF(evt: SetAuthorizationModuleOFF): Bool
  OnDisassembleDevice(evt: DisassembleDevice): Bool
  OnToggleJuryrigTrap(evt: ToggleJuryrigTrap): Bool
  OnTogglePersonalLink(evt: TogglePersonalLink): Bool
  TogglePersonalLink(toggle: Bool, puppet: GameObject): void
  InitiatePersonalLinkWorkspot(puppet: GameObject): void
  GetSlotTag(): CName
  OnRepeatApplyAnimFeatureHACK(evt: RepeatPersonalLinkAnimFeaturesHACK): Bool
  OnToggleZoomInteraction(evt: ToggleZoomInteraction): Bool
  OnQuestForceCameraZoom(evt: QuestForceCameraZoom): Bool
  EvaluateCameraZoomState(executor: GameObject): void
  ShowAdvanceInteractionInputHints(): void
  HideAdvanceInteractionInputHints(): void
  SendGameplayInputHintEvent(show: Bool, data: InputHintData): void
  SendRemoveGameplayInputHintsBySourceEvent(sourceName: CName): void
  ToggleCameraZoom(toggle: Bool): void
  OnIsUIZoomDeviceChange(value: Bool): Bool
  OnUnregisterFromZoomBlackboardEvent(evt: UnregisterFromZoomBlackboardEvent): Bool
  OnOpenFullscreenUI(evt: OpenFullscreenUI): Bool
  RegisterPlayerInputListener(shouldRegister: Bool): void
  OnQuestForceEnabled(evt: QuestForceEnabled): Bool
  OnQuestForceDisabled(evt: QuestForceDisabled): Bool
  OnQuestForcePower(evt: QuestForcePower): Bool
  OnQuestForceUnpower(evt: QuestForceUnpower): Bool
  OnQuestForceEnableAuthorization(evt: QuestForceAuthorizationEnabled): Bool
  OnQuestForceDisableAuthorization(evt: QuestForceAuthorizationDisabled): Bool
  OnQuestForceArmJuryrigTrap(evt: QuestForceJuryrigTrapArmed): Bool
  OnQuestForceDeactivateJuryrigTrap(evt: QuestForceJuryrigTrapDeactivated): Bool
  OnQuestForceON(evt: QuestForceON): Bool
  OnQuestForceOFF(evt: QuestForceOFF): Bool
  OnQuestForceSecuritySystemSafe(evt: QuestForceSecuritySystemSafe): Bool
  OnQuestForceSecuritySystemAlarmed(evt: QuestForceSecuritySystemAlarmed): Bool
  OnQuestForceSecuritySystemArmed(evt: QuestForceSecuritySystemArmed): Bool
  OnAttitudeChanged(evt: AttitudeChangedEvent): Bool
  OnSecuritySystemOutput(evt: SecuritySystemOutput): Bool
  OnSecuritySystemForceAttitudeChange(evt: SecuritySystemForceAttitudeChange): Bool
  OnSecurityAreaCrossingPerimeter(evt: SecurityAreaCrossingPerimeter): Bool
  InitializeScreenDefinition(): void
  ShouldAlwasyRefreshUIInLogicAra(): Bool
  RefreshUI(isDelayed?: Bool): void
  OnToggleUIInteractivity(evt: ToggleUIInteractivity): Bool
  OnUIAction(evt: UIActionEvent): Bool
  OnRequestUiRefresh(evt: RequestUIRefreshEvent): Bool
  OnRequesBreadCrumbBarUpdate(evt: RequestBreadCrumbBarUpdateEvent): Bool
  OnRequestActionWidgetsUpdate(evt: RequestActionWidgetsUpdateEvent): Bool
  OnDeviceWidgetUpdate(evt: RequestDeviceWidgetUpdateEvent): Bool
  RequestActionWidgetsUpdate(blackboard: IBlackboard): void
  RequestDeviceWidgetsUpdate(blackboard: IBlackboard): void
  RequestThumbnailWidgetsUpdate(blackboard: IBlackboard): void
  SetZoomBlackboardValues(newState: Bool): void
  EnterWorkspot(activator: GameObject, freeCamera?: Bool, componentName?: CName, deviceData?: CName): void
  EnterWorkspotWithIK(activator: GameObject, shouldCrouch: Bool, cameraFlavour?: CName, componentName?: CName, cameraPosition?: Vector4, cameraRotation?: Quaternion, rightHandPosition?: Vector4, rightHandRotation?: Quaternion, leftHandPosition?: Vector4, leftHandRotation?: Quaternion): void
  LeaveWorkspot(activator: GameObject): void
  OnWorkspotFinished(componentName: CName): Bool
  OnMissingWorkspotComponentFailsafeEvent(evt: MissingWorkspotComponentFailsafeEvent): Bool
  DetermineInteractionState(context?: GetActionsContext): void
  ResetChoicesByEvent(): void
  AdjustInteractionComponent(): void
  IsDirectInteractionCondition(): Bool
  ExecuteDeviceStateOperation(): void
  ExecuteBaseActionOperation(actionClassName: CName): void
  RestoreBaseActionOperations(): void
  SetJuryrigTrapComponentState(newState: Bool): void
  SetJuryrigTrapState(newState: EJuryrigTrapState): void
  ShouldShowScanner(): Bool
  FillObjectDescription(arr: ScanningTooltipElementDef[]): void
  CompileScannerChunks(): Bool
  GetScannerName(): string
  GetScannerAttitudeTweak(): TweakDBID
  SetScanningProgressBarText(): void
  ShouldShowDamageNumber(): Bool
  ReactToHit(hit: gameHitEvent): void
  GetHitSourcePosition(hitSourceEntityID: EntityID): Vector4
  ControlledDeviceInputAction(isPressed: Bool): void
  PlayEffect(effectEventName: CName, effectEventTag: CName): void
  SetMeshAppearance(appearance: CName): void
  GetPlayerMainObject(): GameObject
  /** @noSelf **/
  GetPlayerMainObjectStatic(context: GameInstance): GameObject
  ExtractEntityID(evt: TriggerEvent): EntityID
  ActivateDevice(): void
  DeactivateDevice(): void
  RestorePower(): void
  CutPower(): void
  TurnAuthorizationModuleON(): void
  TurnAuthorizationModuleOFF(): void
  ArmJuryrigTrap(): void
  DeactivateJuryrigTrap(): void
  TurnOnDevice(): void
  TurnOffDevice(): void
  BreakDevice(): void
  SetStateSafe(): void
  SetStateAlarmed(): void
  SetStateArmed(): void
  GetActionsDebug(context: GetActionsContext, debuggerr: DeviceDebuggerComponent, outActions: DeviceAction[]): Bool
  ShouldInitiateDebug(): Bool
  OnHUDInstruction(evt: HUDInstruction): Bool
  OnScanningActionFinishedEvent(evt: ScanningActionFinishedEvent): Bool
  CanRevealRemoteActionsWheel(): Bool
  OnQuickHackPanelStateChanged(evt: QuickHackPanelStateEvent): Bool
  HasDirectActionsActive(): Bool
  GetBlackboardIntVariable(id: BlackboardID_Int): number
  SendQuickhackCommands(shouldOpen: Bool): void
  TranslateActionsIntoQuickSlotCommands(actions: DeviceAction[], commands: QuickhackData[]): void
  GetICELevel(): number
  GetPlayerCyberDeck(): string[]
  GetMatchingActionProgramName(actions: DeviceAction[], searchWord: string): number
  OnUploadProgressStateChanged(evt: UploadProgramProgressEvent): Bool
  ShowQuickHackDuration(action: ScriptableDeviceAction): void
  CanPlayerUseQuickHackVulnerability(data: TweakDBID): Bool
  ResolveRemoteActions(state: Bool): void
  RefreshInteraction(): void
  OnScanningLookedAt(evt: ScanningLookAtEvent): Bool
  ShouldPulseNetwork(): Bool
  CanOverrideNetworkContext(): Bool
  IsNetworkKnownToPlayer(): Bool
  OnPulseEvent(evt: gameVisionModeUpdateVisuals): Bool
  GetDefaultHighlight(): FocusForcedHighlightData
  GetCurrentOutline(): EFocusOutlineType
  GetDeviceConnectionsHighlightSystem(): DeviceConnectionsHighlightSystem
  OnNotifyHighlightedDevice(evt: NotifyHighlightedDevice): Bool
  NotifyConnectionHighlightSystem(IsHighlightON: Bool, IsNotifiedByMasterDevice: Bool): Bool
  SendSkillCheckInfo(display: Bool): void
  SendDisableAreaIndicatorEvent(): void
  OnDisableAreaIndicator(evt: DisableAreaIndicatorEvent): Bool
  OnAreaEnter(evt: AreaEnteredEvent): Bool
  OnAreaExit(evt: AreaExitedEvent): Bool
  OnHitEvent(hit: gameHitEvent): Bool
  OnProjectileBreachEvent(evt: ProjectileBreachEvent): Bool
  ProjectileExposeQuickHacks(): void
  OnDelayedDeviceOperation(evt: DelayedOperationEvent): Bool
  OndDeviceOperationTriggerDelayed(evt: DelayedDeviceOperationTriggerEvent): Bool
  OnPlayerDetectedVisibleEvent(evt: OnDetectedEvent): Bool
  ResolveDeviceOperationOnFocusMode(visionType: gameVisionModeType, activated: Bool): void
  RegisterPlayerTargetCallback(): void
  UnRegisterPlayerTargetCallback(): void
  GetCurrentHealth(): number
  GetTotalHealth(): number
  ProcessDamagePipeline(evt: gameHitEvent): void
  ApplyDamage(attackData: AttackData): void
  IsHighlightedInFocusMode(): Bool
  TriggerAreaEffectDistractionByName(effectName: CName): void
  TriggerAreaEffectDistractionByAction(action: ScriptableDeviceAction): void
  GetAreaEffectLifetimeByName(effectName: CName): number
  GetAreaEffectLifetimeByAction(action: ScriptableDeviceAction): number
  /** @noSelf **/
  MapStimType(stim: DeviceStimType): gamedataStimType
  GetDefaultDistractionAreaEffectData(): AreaEffectData
  TriggerArreaEffectDistraction(effectData: AreaEffectData, executor?: GameObject): void
  GetNodePosition(nodeRef?: NodeRef): Vector4[]
  GetDistractionPointPosition(device: GameObject): Vector4
  CanBeInvestigated(): Bool
  IsInvestigated(): Bool
  GetWillingInvestigators(): EntityID[]
  OnUpdateWillingInvestigators(evt: UpdateWillingInvestigators): Bool
  CheckQueryStartPoint(transform: WorldTransform): Vector4
  GetEntityFromNode(nodeRef: NodeRef): Entity
  GetStimTarget(): GameObject
  GetDistractionControllerSource(effectData?: AreaEffectData): Entity
  GetDistractionStimLifetime(defaultValue: number): number
  GetNetworkBlackboardDef(): NetworkBlackboardDef
  GetNetworkBlackboard(): IBlackboard
  OnToggleNetrunnerDive(evt: ToggleNetrunnerDive): Bool
  PerformDive(attempt: number, isRemote: Bool): void
  TerminateConnection(): void
  DisplayConnectionWindowOnPlayerHUD(shouldDisplay: Bool, attempt: number): void
  OnQuestMinigameRequest(): void
  OnAccessPointMiniGameStatus(evt: AccessPointMiniGameStatus): Bool
  OnSetExposeQuickHacks(evt: SetExposeQuickHacks): Bool
  IsLookedAt(): Bool
  GetNetworkBeamOffset(): Vector4
  GetNetworkLinkSlotName(): CName
  GetNetworkLinkSlotName(transform: WorldTransform): CName
  GetDefaultDevicesBeamResource(): FxResource
  GetDefaultNetworkBeamResource(): FxResource
  GetBreachedNetworkBeamResource(): FxResource
  IsNetworkLinkDynamic(): Bool
  RevealNetworkGrid_Event(shouldDraw: Bool, ownerEntityPosition?: Vector4, fxDefault?: FxResource, fxBreached?: FxResource): void
  RevealDevicesGrid_Event(shouldDraw: Bool, ownerEntityPosition?: Vector4, fxDefault?: FxResource): void
  PingNetworkGrid_Event(ownerEntityPosition: Vector4, fxResource: FxResource, lifetime: number, pingType: EPingType, revealSlave: Bool, revealMaster: Bool, ignoreRevealed: Bool): void
  RevealNetworkGrid(shouldDraw: Bool): void
  PingNetworkGrid(lifetime: number, pingType: EPingType, revealSlave: Bool, revealMaster: Bool, ignoreRevealed: Bool): void
  PingNetworkGrid(lifetime: number, pingType: EPingType, resource: FxResource, revealSlave: Bool, revealMaster: Bool, ignoreRevealed: Bool): void
  GetNetworkBeamEndpoint(): Vector4
  RevealDevicesGrid(shouldDraw: Bool): void
  OnReavealDevicesGrid(evt: RevealDevicesGridOnEntityEvent): Bool
  ShouldBeHighlightedLongerOnPing(): Bool
  OnRevealDeviceRequest(evt: RevealDeviceRequest): Bool
  OnRevealNetworkGridRequestFromNetworkSystem(evt: RevealNetworkGridNetworkRequest): Bool
  OnRevealNetworkGridOnPulse(evt: RevealNetworkGridOnPulse): Bool
  OnRevealStateChanged(evt: RevealStateChangedEvent): Bool
  StartPingingNetwork(): void
  StopPingingNetwork(): void
  OnActionPing(evt: PingDevice): Bool
  PulseNetwork(revealNetworkAtEnd: Bool): void
  ToggleAreaIndicator(turnOn: Bool): void
  OnTimetableEntryTriggered(evt: DeviceTimetableEvent): Bool
  OnToggleComponents(evt: ToggleComponentsEvent): Bool
  ResolveComponents(componentsData: SComponentOperationData[]): void
  ToggleComponentByName(componentName: CName, toggle: Bool): void
  OnPlayBink(evt: PlayBinkEvent): Bool
  GetFxResourceByKey(key: CName): FxResource
  AddHudButtonHelper(argText: string, argIcon: CName): void
  RemoveHudButtonHelper(): void
  OnFactChanged(evt: FactChangedEvent): Bool
  IsTechie(): Bool
  IsSolo(): Bool
  IsNetrunner(): Bool
  IsCyberdeckEquippedOnPlayer(): Bool
  HasAnyPlaystyle(): Bool
  HasActiveStaticHackingSkillcheck(): Bool
  HasAnySkillCheckActive(): Bool
  CanPassAnySkillCheck(): Bool
  CanPassAnySkillCheckOnMaster(): Bool
  IsHackingSkillCheckActive(): Bool
  IsDemolitionSkillCheckActive(): Bool
  IsEngineeringSkillCheckActive(): Bool
  CanPassEngineeringSkillCheck(): Bool
  CanPassDemolitionSkillCheck(): Bool
  CanPassHackingSkillCheck(): Bool
  HasAnyQuickHackActive(): Bool
  HasAnyActiveQuickHackVulnerabilities(): Bool
  HasAnySpiderBotOrdersActive(): Bool
  HasAnyDistractions(): Bool
  GetDistractionRange(type: DeviceStimType): number
  GetSmallestDistractionRange(type: DeviceStimType): number
  IsQuest(): Bool
  MarkAsQuest(isQuest: Bool): void
  ResolveQuestMarkOnFact(): void
  ResolveQuestImportanceOnPerformedAction(action: ScriptableDeviceAction): void
  HasAnyNetworkLink(): Bool
  HasAnyNetworkLink(ignorePingLinks: Bool): Bool
  IsGameplayRoleValid(role: EGameplayRole): Bool
  IsActive(): Bool
  IsGameplayRelevant(): Bool
  GetContentScale(): TweakDBID
  GetCurrentGameplayRole(): EGameplayRole
  IsGameplayRoleStatic(): Bool
  ReEvaluateGameplayRole(): void
  ForceReEvaluateGameplayRole(): void
  DeterminGameplayRoleMappinVisuaState(data: SDeviceMappinData): EMappinVisualState
  DeterminGameplayRoleMappinRange(data: SDeviceMappinData): number
  OnQuickHackDistraction(evt: QuickHackDistraction): Bool
  OnQuestStartGlitch(evt: QuestStartGlitch): Bool
  OnQuestStopGlitch(evt: QuestStopGlitch): Bool
  OnGlitchScreen(evt: GlitchScreen): Bool
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
  HasActiveDistraction(): Bool
  HasActiveQuickHackUpload(): Bool
  SetGameplayRoleToNone(): void
  SetGameplayRole(role: EGameplayRole): void
  GetPlaystyleMappinSlotWorldPos(): Vector4
  GetPlaystyleMappinSlotWorldTransform(): WorldTransform
  GetPlaystyleMappinLocalPos(): Vector4
  OnSpiderbotOrderCompletedEvent(evt: SpiderbotOrderCompletedEvent): Bool
  OrderSpiderbot(): void
  ShouldAllowSpiderbotToPerformAction(): Bool
  OnSendSpiderbotToPerformActionEvent(evt: SendSpiderbotToPerformActionEvent): Bool
  SendSetIsSpiderbotInteractionOrderedEvent(value: Bool): void
  GetSlotComponent(): SlotComponent
  InitializeGameplayObjectives(): void
  GetGameplayQuestSystem(): GameplayQuestSystem
  ShowGameplayObjective(data: GemplayObjectiveData): void
  CreateGameplayObjective(data: GemplayObjectiveData): void
  SucceedGameplayObjective(data: GemplayObjectiveData): void
  RemoveGameplayObjective(data: GemplayObjectiveData): void
  ResolveGameplayObjectives(show: Bool): void
  OnCommunicationEvent(evt: CommunicationEvent): Bool
  HasWillingInvestigator(id: EntityID): Bool
  CheckDistractionAchievemnt(): void
  ApplyActiveStatusEffect(target: EntityID, statusEffect: TweakDBID): void
  GetActiveStatusEffect(): TweakDBID
  SetActiveStatusEffect(effect: TweakDBID): void
  ClearActiveStatusEffect(): void
  IsActiveStatusEffectValid(): Bool
  SetActiveProgramToUploadOnNPC(program: TweakDBID): void
  GetActiveProgramToUploadOnNPC(): TweakDBID
  ClearActiveProgramToUploadOnNPC(): void
  IsActiveProgramToUploadOnNPCValid(): Bool
  UploadActiveProgramOnNPC(targetID: EntityID): void
  OnQuestResolveSkillchecks(evt: ResolveAllSkillchecksEvent): Bool
  OnQuestSetSkillchecks(evt: SetSkillcheckEvent): Bool
  OnChangeLoopCurveEvent(evt: ChangeLoopCurveEvent): Bool
  OnActionCooldownEvent(evt: ActionCooldownEvent): Bool
  OnDisableRPGRequirementsForQucikHackActions(evt: DisableRPGRequirementsForDeviceActions): Bool
  GetAcousticQuerryStartPoint(): Vector4
  OnToggleTakeOverControl(evt: ToggleTakeOverControl): Bool
  OnTCSTakeOverControlActivate(evt: TCSTakeOverControlActivate): Bool
  OnTCSTakeOverControlDeactivate(evt: TCSTakeOverControlDeactivate): Bool
  TakeControlOverCamera(isOn: Bool): void
  OnPlayerStateMachineZoom(value: number): Bool
  OnTCSInputXAxisEvent(evt: TCSInputXAxisEvent): Bool
  OnTCSInputYAxisEvent(evt: TCSInputYAxisEvent): Bool
  OnTCSInputXYAxisEvent(evt: TCSInputXYAxisEvent): Bool
  OnTCSInputDeviceAttack(evt: TCSInputDeviceAttack): Bool
  OnTCSInputCameraZoom(evt: TCSInputCameraZoom): Bool
  ShouldRegisterToHUD(): Bool
  OnOverloadDevice(evt: OverloadDevice): Bool
  StartOverload(): void
  StopOverload(killDelay: number): void
  KillNPCWorkspotUser(killDelay: number): void
  OnNPCKillDelayEvent(evt: NPCKillDelayEvent): Bool
  CreateEMPGameEffect(range: number): void
  StopEMPGameEffect(): void
  AddActiveContext(context: gamedeviceRequestType): void
  RemoveActiveContext(context: gamedeviceRequestType): void
  EvaluateProximityMappinInteractionLayerState(): void
  EnableProximityMappinInteractionLayer(enable: Bool): void
  ShowMappinOnProximity(): void
  HideMappinOnProximity(): void
  EvaluateProximityRevealInteractionLayerState(): void
  EnableProximityRevealInteractionLayer(enable: Bool): void
  StartRevealingOnProximity(): void
  StopRevealingOnProximity(lifetime: number): void
  GetRevealOnProximityStopLifetimeValue(): number
}

declare interface ScriptableComponent extends GameComponent {

  GetOwner(): GameObject
  GetGameTime(): GameTime
  GetEngineTime(): EngineTime
  GetSimTime(): EngineTime
  GetAudioSystem(): AudioSystem
  GetDebugVisualizerSystem(): DebugVisualizerSystem
  GetDelaySystem(): DelaySystem
  GetGameEffectSystem(): EffectSystem
  GetPlayerSystem(): PlayerSystem
  GetQuestsSystem(): QuestsSystem
  GetStatsSystem(): StatsSystem
  GetStatPoolsSystem(): StatPoolsSystem
  GetTargetingSystem(): TargetingSystem
  GetTimeSystem(): TimeSystem
  GetTransactionSystem(): TransactionSystem
  GetPersistencySystem(): GamePersistencySystem
  GetVisionModeSystem(): VisionModeSystem
}

declare interface GameplayRoleComponent extends ScriptableComponent {

  OnGameAttach(): void
  OnGameDetach(): void
  OnSetGameplayRole(evt: SetGameplayRoleEvent): Bool
  OnSetCurrentGameplayRole(evt: SetCurrentGameplayRoleEvent): Bool
  OnReEvaluateGameplayRole(evt: EvaluateGameplayRoleEvent): Bool
  SetCurrentGameplayRoleWithNotification(role: EGameplayRole): void
  OnLookedAtEvent(evt: LookedAtEvent): Bool
  OnScanningLookedAt(evt: ScanningLookAtEvent): Bool
  IsHighlightedInFocusMode(): Bool
  OnLogicReady(evt: SetLogicReadyEvent): Bool
  OnHUDInstruction(evt: HUDInstruction): Bool
  OnUploadProgressStateChanged(evt: UploadProgramProgressEvent): Bool
  OnPerformedAction(evt: PerformedAction): Bool
  ActivateQuickHackIndicator(visualData: GameplayRoleMappinData): void
  DeactivateQuickHackIndicator(): void
  OnDeactivateQuickHackIndicator(evt: DeactivateQuickHackIndicatorEvent): Bool
  ActivatePhoneCallIndicator(visualData: GameplayRoleMappinData): void
  DeactivatePhoneCallIndicator(): void
  OnEvaluateMappinVisualStateEvent(evt: EvaluateMappinsVisualStateEvent): Bool
  OnShowSingleMappin(evt: ShowSingleMappinEvent): Bool
  OnHideSingleMappin(evt: HideSingleMappinEvent): Bool
  DeterminGamplayRole(): void
  InitializeQuickHackIndicator(): void
  InitializePhoneCallIndicator(): void
  InitializeGamepleyRoleMappin(): void
  GetMappinDataForGamepleyRole(role: EGameplayRole): SDeviceMappinData
  GetCurrentMappinVariant(role: EGameplayRole): gamedataMappinVariant
  GetMinimalisticMappinVariant(): gamedataMappinVariant
  GetPlaystyleMappinVariant(): gamedataMappinVariant
  GetRoleMappinVariant(role: EGameplayRole): gamedataMappinVariant
  HasOffscreenArrow(): Bool
  ReEvaluateGameplayRole(): void
  GetMappinSystem(): MappinSystem
  EvaluateMappins(): void
  EvaluatePositions(): void
  GetNextAxis(currentAxis: EAxisType): EAxisType
  ShowRoleMappins(): void
  CreateRoleMappinData(data: SDeviceMappinData): GameplayRoleMappinData
  CompareRoleMappinsData(data1: GameplayRoleMappinData, data2: GameplayRoleMappinData): Bool
  GetIconIdForMappinVariant(mappinVariant: gamedataMappinVariant): TweakDBID
  HideRoleMappins(): void
  ClearAllRoleMappins(): void
  UnregisterAllRoleMappins(): void
  OnUnregisterAllMappinsEvent(evt: UnregisterAllMappinsEvent): Bool
  UnregisterAllMappins(): void
  HideSingleMappin_Event(index: number): void
  HideSingleMappin(index: number): void
  DeactivateSingleMappin(index: number): void
  ShowSingleMappin_Event(index: number): void
  ShowSingleMappin(index: number, visualData: GameplayRoleMappinData): void
  ShowSingleMappin(index: number): void
  UpdateSingleMappinData(index: number, visualData: GameplayRoleMappinData, shouldUpdateVariant: Bool): void
  ActivateSingleMappin(index: number): void
  HasActiveMappin(mappinVariant: gamedataMappinVariant): Bool
  HasMappin(mappinVariant: gamedataMappinVariant): Bool
  HasMappin(data: SDeviceMappinData): Bool
  HasMappin(gameplayRole: EGameplayRole): Bool
  IsMappinDataValid(mappinData: SDeviceMappinData): Bool
  IsMappinDynamic(): Bool
  IsCurrentTarget(): Bool
  ToggleMappin(mappinVariant: gamedataMappinVariant, enable: Bool, show: Bool, visualData: GameplayRoleMappinData): void
  ToggleMappin(mappinVariant: gamedataMappinVariant, enable: Bool, show: Bool): void
  ToggleMappin(mappinVariant: gamedataMappinVariant, enable: Bool): void
  ToggleMappin(mappinIndex: number, enable: Bool): void
  AddMappin(data: SDeviceMappinData): Bool
  GetCurrentGameplayRole(): EGameplayRole
  IsGameplayRoleStatic(): Bool
  UpdateDefaultHighlight(): void
  IsForceHidden(): Bool
  SetForceHidden(isHidden: Bool): void
  OnToggleGameplayMappinVisibilityEvent(evt: ToggleGameplayMappinVisibilityEvent): Bool
  RequestHUDRefresh(): void
}

declare interface SDeviceMappinData {

}

declare interface MappinScriptData extends IScriptable {

}

declare interface VisionModeComponent extends GameComponent {

  SetHiddenInVisionMode(hidden: Bool, type: gameVisionModeType): void
  OnGameAttach(): void
  OnGameDetach(): void
  OnRestoreRevealEvent(evt: RestoreRevealStateEvent): Bool
  RestoreReveal(): void
  GetMyPS(): gameVisionModeComponentPS
  GetOwner(): GameObject
  AddForcedHighlight(data: FocusForcedHighlightData): void
  RemoveForcedHighlight(data: FocusForcedHighlightData, ignoreStackEvaluation?: Bool): void
  EvaluateForcedHighLightsStack(): void
  OnAIAction(evt: AIEvent): Bool
  UpdateActiveForceHighlight(data: FocusForcedHighlightData): void
  ReactivateForceHighlight(): void
  HasForcedHighlightOnStack(data: FocusForcedHighlightData): Bool
  ForceVisionAppearance(data: FocusForcedHighlightData): void
  CancelForcedVisionAppearance(transitionTime: number): void
  PulseObject(): void
  GetDefaultHighlight(data?: HighlightInstance): FocusForcedHighlightData
  ToggleRevealObject(reveal: Bool, forced?: Bool): void
  IsTagged(): Bool
  AddRevealRequest(data: gameVisionModeSystemRevealIdentifier): number
  RemoveRevealRequest(data: gameVisionModeSystemRevealIdentifier): void
  HasRevealRequest(data: gameVisionModeSystemRevealIdentifier): Bool
  GetRevealRequestIndex(data: gameVisionModeSystemRevealIdentifier): number
  IsRequestTheSame(request1: gameVisionModeSystemRevealIdentifier, request2: gameVisionModeSystemRevealIdentifier): Bool
  IsRevealed(): Bool
  IsRevealRequestIndexValid(index: number): Bool
  UpdateDefaultHighlight(data: FocusForcedHighlightData): void
  RequestHUDRefresh(): void
  GetVisionModeSystem(): VisionModeSystem
  SendRevealStateChangedEvent(state: ERevealState, reason: gameVisionModeSystemRevealIdentifier): void
  ClearAllReavealRequests(): Bool
  ClearForcedHighlights(): Bool
  CompareHighlightData(data1: FocusForcedHighlightData, data2: FocusForcedHighlightData): Bool
  ForwardHighlightToSlaveEntity(data: FocusForcedHighlightData, apply: Bool): void
  OnForceVisionApperance(evt: ForceVisionApperanceEvent): Bool
  OnRevealObject(evt: RevealObjectEvent): Bool
  OnVisionRevealExpiredEvent(evt: gameVisionRevealExpiredEvent): Bool
  RevealObject(reveal: Bool, reason: gameVisionModeSystemRevealIdentifier, lifetime: number): void
  RemoveRevealWithDelay(reason: gameVisionModeSystemRevealIdentifier, lifetime: number): void
  OnForceReactivateHighlights(evt: ForceReactivateHighlightsEvent): Bool
  OnHUDInstruction(evt: HUDInstruction): Bool
  OnPulseEvent(evt: gameVisionModeUpdateVisuals): Bool
  OnDeath(evt: gameDeathEvent): Bool
  OnDefeated(evt: DefeatedEvent): Bool
  CleanUp(): void
  OnForceUpdateDefultHighlight(evt: ForceUpdateDefaultHighlightEvent): Bool
  OnSetForcedDefaultHighlight(evt: SetDefaultHighlightEvent): Bool
  OnRevealQuestTargetEvent(evt: RevealQuestTargetEvent): Bool
  OnSetPersistentForcedHighlightEvent(evt: SetPersistentForcedHighlightEvent): Bool
  OnToggleForcedHighlightEvent(evt: ToggleForcedHighlightEvent): Bool
  ToggleForcedHighlight(sourceName: CName, highlightData: HighlightEditableData, operation: EToggleOperationType): void
  HasDefaultHighlight(): Bool
  HasOutlineOrFill(highlightType: EFocusForcedHighlightType, outlineType: EFocusOutlineType): Bool
  HasHighlight(highlightType: EFocusForcedHighlightType, outlineType: EFocusOutlineType): Bool
  HasHighlight(highlightType: EFocusForcedHighlightType, outlineType: EFocusOutlineType, sourceID: EntityID): Bool
  HasHighlight(highlightType: EFocusForcedHighlightType, outlineType: EFocusOutlineType, sourceID: EntityID, sourceName: CName): Bool
}

declare interface FocusForcedHighlightData extends IScriptable {

  IsValid(): Bool
  InitializeWithHudInstruction(data: HighlightInstance): void
  GetFillColorIndex(): number
  GetOutlineColorIndex(): number
  GetVisionApperance(): VisionAppearance
}

declare interface VisionAppearance {

}

declare interface ForceVisionApperanceEvent extends Event {

}

declare interface gameVisionModeComponentPS extends GameComponentPS {

  StoreHighlightData(data: FocusForcedHighlightData): void
  GetStoredHighlightData(): FocusForcedHighlightData
  OnSetPersistentForcedHighlightEvent(evt: SetPersistentForcedHighlightEvent): EntityNotificationType
}

declare interface FocusForcedHighlightPersistentData extends IScriptable {

  Initialize(data: FocusForcedHighlightData): void
  GetData(): FocusForcedHighlightData
}

declare interface SetPersistentForcedHighlightEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface HighlightEditableData extends IScriptable {

}

declare interface RevealStatusNotification extends HUDManagerRequest {

}

declare interface RevealStateChangedEvent extends Event {

}

declare interface AIEvent extends Event {

  HasTag(tag: CName): Bool
  GetTimeToLive(): number
}

declare interface gameVisionModeSystemRevealIdentifier {

}

declare interface RefreshActorRequest extends HUDManagerRequest {

  /** @noSelf **/
  Construct(requesterID: EntityID, updateData?: HUDActorUpdateData, suggestedModules?: HUDModule[]): RefreshActorRequest
  GetActorUpdateData(): HUDActorUpdateData
  GetRequestedModules(): HUDModule[]
}

declare interface ResponseEvent extends Event {

}

declare interface RevealObjectEvent extends Event {

}

declare interface gameVisionRevealExpiredEvent extends Event {

}

declare interface gameVisionModeUpdateVisuals extends Event {

}

declare interface SetDefaultHighlightEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface RevealQuestTargetEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface ToggleForcedHighlightEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface InteractiveDevice extends Device {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnDetach(): Bool
  ToggleDirectLayer(input: Bool): void
  ToggleLogicLayer(input: Bool): void
  DeactivateDevice(): void
  ActivateDevice(): void
  CutPower(): void
  TurnOnDevice(): void
  TurnOffDevice(): void
  UpdateDeviceState(isDelayed?: Bool): Bool
  TurnOnIndicator(): void
  TurnOffIndicator(): void
  IsPlayerAround(): Bool
  OnInteractionActivated(evt: InteractionEvent): Bool
  OnVisibilityChanged(): void
  SetIsDoorInteractionActiveBB(evt: InteractionEvent, isActive: Bool): void
  GetPlayerStateMachineBB(requester: GameObject): IBlackboard
  OnInteractionUsed(evt: InteractionChoiceEvent): Bool
  OnPerformedAction(evt: PerformedAction): Bool
  EstimateIfPlayerEntersOrLeaves(evt: InteractionEvent): void
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
  OnUIRefreshedEvent(evt: UIRefreshedEvent): Bool
  OnUIUnstreamedEvent(evt: UIUnstreamedEvent): Bool
  RefreshUI(isDelayed?: Bool): void
  OnForceUIRefreshEvent(evt: ForceUIRefreshEvent): Bool
  OnDelayedUIRefreshEvent(evt: DelayedUIRefreshEvent): Bool
  IsReadyForUI(): Bool
  DetermineInteractionState(context?: GetActionsContext): void
  ResetChoicesByEvent(): void
  OnToggleUIInteractivity(evt: ToggleUIInteractivity): Bool
  StartUsing(): void
  StopUsing(): void
  RequestDebuggerRegistration(activator: ScriptedPuppet): void
  UpdateDebugInfo(): void
  PrintWorldSpaceDebug(): void
  GetNetworkBeamEndpoint(): Vector4
  HasAnyDirectInteractionActive(): Bool
  OnEMPHitEvent(evt: EMPHitEvent): Bool
  OnEMPEnded(evt: EMPEnded): Bool
  OnSetUICameraZoomEvent(evt: SetUICameraZoomEvent): Bool
  CreateObjectActionsCallbackController(instigator: Entity): void
  DestroyObjectActionsCallbackController(): void
  OnObjectActionRefreshEvent(evt: gameObjectActionRefreshEvent): Bool
}

declare interface WorkspotResourceComponent extends IPlacedComponent {

}

declare interface EntityResolveComponentsInterface {

  /** @noSelf **/
  GetComponent(self: EntityResolveComponentsInterface, componentName: CName): IComponent
}

declare interface LocalizationStringComponent extends IComponent {

  GetString(key: CName): LocalizationString
  GetString_DemoOnly(key: CName): string
}

declare interface DisassemblableComponent extends ScriptableComponent {

  OnGameAttach(): void
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameDetach(): void
  OnUpdate(deltaTime: number): void
  ObtainParts(): void
  OnTargetRequested(evt: DisassembleTargetRequest): Bool
  OnDisassembled(evt: DisassembleEvent): Bool
}

declare interface PlayerPuppet extends ScriptedPuppet {

  IsPlayer(): Bool
  IsReplacer(): Bool
  IsVRReplacer(): Bool
  IsJohnnyReplacer(): Bool
  IsReplicable(): Bool
  GetReplicatedStateClass(): CName
  IsCoverModifierAdded(): Bool
  IsWorkspotDamageReductionAdded(): Bool
  IsWorkspotVisibilityReductionActive(): Bool
  GetOverlappedSecurityZones(): PersistentID[]
  GetPS(): PlayerPuppetPS
  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  FindVehicleCameraManager(): VehicleCameraManager
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnReleaseControl(): Bool
  OnGameAttached(): Bool
  GracePeriodAfterSpawn(): void
  OnMakePlayerVisibleAfterSpawn(evt: EndGracePeriodAfterSpawn): Bool
  OnWeaponEquipEvent(evt: WeaponEquipEvent): Bool
  EvaluateApplyingReplacerGameplayRestrictions(): void
  ResolveCachedGameplayRestrictions(): void
  AddGameplayRestriction(psmBB: IBlackboard, actionRestrictionRecordID: TweakDBID): void
  RemoveGameplayRestriction(psmBB: IBlackboard, actionRestrictionRecordID: TweakDBID): void
  CacheGameplayRestriction(actionRestrictionRecordID: TweakDBID): void
  PlayerAttachedCallback(playerPuppet: GameObject): void
  PlayerDetachedCallback(playerPuppet: GameObject): void
  OnAttach(): Bool
  OnDetach(): Bool
  ShouldRegisterToHUD(): Bool
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
  CanCycleLootData(): Bool
  KeybaordAndMouseControlsActive(): Bool
  DeductGameInputActionType(): gameinputActionType
  HasPrimaryOrSecondaryEquipment(): Bool
  ActivateIconicCyberware(): void
  ProcessCallVehicleAction(type: gameinputActionType): void
  IsCallingVehicleRestricted(): Bool
  GetUnlockedVehiclesSize(): number
  SendSummonVehicleQuickSlotsManagerRequest(): void
  CheckVehicleSystemGarageState(): Bool
  CheckRadialContextRequest(): Bool
  OnActionMultiplayer(action: ListenerAction, consumer: ListenerActionConsumer): void
  GetCPOQuickSlotID(action: ListenerAction): number
  UpdatePlayerSettings(): void
  GetQuickSlotsManager(): QuickSlotsManager
  GetInspectionComponent(): InspectionComponent
  GetFPPCameraComponent(): FPPCameraComponent
  GetBufferModifier(): number
  SetBufferModifier(i: number): void
  /** @noSelf **/
  GetCriticalHealthThreshold(): number
  /** @noSelf **/
  GetLowHealthThreshold(): number
  /** @noSelf **/
  IsTargetFriendlyNPC(player: PlayerPuppet, target: Entity): Bool
  /** @noSelf **/
  IsTargetChildNPC(player: PlayerPuppet, target: Entity): Bool
  GetPlayerStateMachineBlackboard(): IBlackboard
  GetPlayerPerkDataBlackboard(): IBlackboard
  GetHackingDataBlackboard(): IBlackboard
  /** @noSelf **/
  GetCurrentLocomotionState(player: PlayerPuppet): gamePSMLocomotionStates
  /** @noSelf **/
  GetCurrentHighLevelState(player: PlayerPuppet): gamePSMHighLevel
  /** @noSelf **/
  GetCurrentCombatState(player: PlayerPuppet): gamePSMCombat
  /** @noSelf **/
  GetQuickMeleeCooldown(): number
  GetDamageThresholdParams(): void
  RegisterUIBlackboardListener(): void
  SetupInPlayerDevelopmentSystem(): void
  UpdateVisibilityModifier(): void
  /** @noSelf **/
  SendOnBeingNoticed(player: PlayerPuppet, objectThatNoticed: GameObject): void
  OnBeingNoticed(evt: OnBeingNoticed): Bool
  SetEntityNoticedPlayerBBValue(b: Bool): void
  OnClearBeingNoticedBB(evt: ClearBeingNoticedBB): Bool
  OnBeingTargetByLaserSight(evt: BeingTargetByLaserSightUpdateEvent): Bool
  OnBeingTarget(evt: OnBeingTarget): Bool
  OnInteractionStateChange(value: Variant): Bool
  OnUpdateVisibilityModifierEvent(evt: UpdateVisibilityModifierEvent): Bool
  OnUpdateAutoRevealStatEvent(evt: UpdateAutoRevealStatEvent): Bool
  HasAutoReveal(): Bool
  OnUIContextChange(value: Bool): Bool
  OnUIRadialContextChange(value: Bool): Bool
  OnUIContactListContextChanged(value: Bool): Bool
  OnUIVendorContextChange(value: Bool): Bool
  OnExperienceGained(evt: ExperiencePointsEvent): Bool
  OnLevelUp(evt: LevelUpdateEvent): Bool
  OnRequestStats(evt: RequestStats): Bool
  OnBuyAttribute(evt: RequestBuyAttribute): Bool
  OnItemAddedToSlot(evt: ItemAddedToSlot): Bool
  OnPartAddedToSlotEvent(evt: PartAddedToSlotEvent): Bool
  OnClearItemAppearanceEvent(evt: ClearItemAppearanceEvent): Bool
  OnResetItemAppearanceEvent(evt: ResetItemAppearanceEvent): Bool
  OnItemRemovedFromSlot(evt: ItemRemovedFromSlot): Bool
  /** @noSelf **/
  RemoveItemGameplayPackage(objectToRemoveFrom: GameObject, itemID: ItemID): void
  OnPartRemovedFromSlotEvent(evt: PartRemovedFromSlotEvent): Bool
  OnItemChangedEvent(evt: ItemChangedEvent): Bool
  OnPartRemovedEvent(evt: PartRemovedEvent): Bool
  OnItemAddedToInventory(evt: ItemAddedEvent): Bool
  UpdateInventoryWeight(weightChange: number): void
  OnItemBeingRemovedFromInventory(evt: ItemBeingRemovedEvent): Bool
  OnInventoryEmpty(evt: OnInventoryEmptyEvent): Bool
  EvaluateEncumbrance(): void
  CalculateEncumbrance(): void
  OnEvaluateEncumbranceEvent(evt: EvaluateEncumbranceEvent): Bool
  SendCheckRemovedItemWithSlotActiveItemRequest(item: ItemID): void
  OnTakedownOrder(evt: OrderTakedownEvent): Bool
  OnSpiderbotOrderTargetEvent(evt: SpiderbotOrderDeviceEvent): Bool
  OnHitBlockedOrDeflected(hitEvent: gameHitEvent): void
  OnHitAnimation(hitEvent: gameHitEvent): void
  AddOnHitRumble(hitEvent: gameHitEvent): void
  PushHitDataToGraph(hitEvent: gameHitEvent): void
  SendCameraShakeDataToGraph(hitEvent?: gameHitEvent, shakeStrength?: number): void
  OnHitUI(hitEvent: gameHitEvent): void
  OnHitSounds(hitEvent: gameHitEvent): void
  OnDamageInflicted(evt: DamageInflictedEvent): Bool
  GetLastDamageInflictedTime(): EngineTime
  OnInteraction(choiceEvent: InteractionChoiceEvent): Bool
  OnTogglePlayerFlashlightEvent(evt: TogglePlayerFlashlightEvent): Bool
  OnMagFieldHitEvent(evt: MagFieldHitEvent): Bool
  OnKatanaMagFieldHitDelayEvent(evt: KatanaMagFieldHitDelayEvent): void
  OnResetMagFieldHitsEvent(evt: ResetMagFieldHitsEvent): void
  OnResetTickEvent(evt: ResetTickEvent): Bool
  SendMagFieldAnimFeature(): void
  InitializeTweakDBRecords(): void
  DefineModifierGroups(): void
  RegisterStatListeners(self: PlayerPuppet): void
  UnregisterStatListeners(self: PlayerPuppet): void
  OnCleanUpTimeDilationEvent(evt: CleanUpTimeDilationEvent): Bool
  OnHealthUpdateEvent(evt: HealthUpdateEvent): Bool
  UpdateHealthStateSFX(evt: HealthUpdateEvent): void
  UpdateHealthStateVFX(evt: HealthUpdateEvent): void
  SetZoomBlackboardValues(newState: Bool): void
  GetZoomBlackboardValues(): Bool
  OnRewardEvent(evt: RewardEvent): Bool
  OnManagePersonalLinkChangeEvent(evt: ManagePersonalLinkChangeEvent): Bool
  GetPhoneCallFactName(contactName1: CName, contactName2: CName): string
  TriggerInspect(itemID: string, offset: number, adsOffset: number, timeToScan: number): void
  SetInvisible(isInvisible: Bool): void
  OnHeavyFootstepEvent(evt: HeavyFootstepEvent): Bool
  PlayFootstepCameraShakeBasedOnProximity(evt: HeavyFootstepEvent): void
  UpdateVisibility(): void
  UpdateSecondaryVisibilityOffset(isCrouching: Bool): void
  EnableCombatVisibilityDistances(enable: Bool): void
  OnLocomotionStateChanged(newState: number): Bool
  OnCombatStateChanged(newState: number): Bool
  OnNumberOfCombatantsChanged(value: number): Bool
  OnPlayerCoverStatusChangedEvent(evt: PlayerCoverStatusChangedEvent): Bool
  OnStatusEffectApplied(evt: ApplyStatusEffectEvent): Bool
  DisableFootstepAudio(b: Bool): void
  DisableCameraBobbing(b: Bool): void
  OnAdditiveCameraMovementsSettingChanged(): void
  /** @noSelf **/
  ReevaluateAllBreathingEffects(player: PlayerPuppet): void
  /** @noSelf **/
  CanApplyBreathingEffect(player: PlayerPuppet): Bool
  /** @noSelf **/
  IsJohnnySicknessBreathingEffectActive(player: PlayerPuppet): Bool
  ProcessBreathingEffectApplication(evt: StatusEffectEvent): void
  ProcessTieredDrunkEffect(evt: StatusEffectEvent): void
  ProcessTieredDruggedEffect(evt: StatusEffectEvent): void
  OnStatusEffectRemoved(evt: RemoveStatusEffect): Bool
  OnAttitudeChanged(evt: AttitudeChangedEvent): Bool
  OnAdHocAnimationRequest(evt: AdHocAnimationEvent): Bool
  OnSceneForceWeaponAimEvent(evt: SceneForceWeaponAim): Bool
  OnSceneForceWeaponSafeEvent(evt: SceneForceWeaponSafe): Bool
  OnEnableBraindanceActions(evt: EnableBraindanceActions): Bool
  OnDisableBraindanceActions(evt: DisableBraindanceActions): Bool
  OnForceBraindanceCameraToggle(evt: ForceBraindanceCameraToggle): Bool
  OnPauseBraindance(evt: PauseBraindance): Bool
  OnModifyOverlappedSecurityArease(evt: ModifyOverlappedSecurityAreas): Bool
  AddOverrlappedSecurityZone(zone: PersistentID): void
  RemoveOverrlappedSecurityZone(zone: PersistentID): void
  SendSceneOverridesAnimFeature(sceneOverridesBlackboard: IBlackboard): void
  OnWorkspotStartedEvent(evt: WorkspotStartedEvent): Bool
  OnWorkspotFinishedEvent(evt: WorkspotFinishedEvent): Bool
  GetPlayerCurrentWorkspotTags(): CName[]
  PlayerContainsWorkspotTag(tag: CName): Bool
  IsCooldownForActionActive(actionID: TweakDBID): Bool
  RegisterToFacts(): void
  OnFactChangedEvent(evt: FactChangedEvent): Bool
  OnSysDebuggerEvent(evt: SysDebuggerEvent): Bool
  AllowOuterwearClothing(): void
  DisallowOuterwearClothing(): void
  InitializeFocusModeTagging(): void
  UnInitializeFocusModeTagging(): void
  OnRequestEquipHeavyWeapon(evt: RequestEquipHeavyWeapon): Bool
  OnFillAnimWrapperInfoBasedOnEquippedItem(evt: FillAnimWrapperInfoBasedOnEquippedItem): Bool
  OnIncapacitated(): void
  RefreshCPOVisionAppearance(): void
  OnResurrected(): void
  IsIncapacitated(): Bool
  RegisterCPOMissionDataCallback(): void
  UnregisterCPOMissionDataCallback(): void
  OnCPOMissionDataTransferred(evt: CPOMissionDataTransferred): Bool
  OnCPOMissionDataTransferredServer(evt: CPOMissionDataTransferred): void
  OnCPOMissionDataTransferredClient(evt: CPOMissionDataTransferred): void
  OnCPOMissionDataTransferredChoiceTokenClient(evt: CPOMissionDataTransferred): void
  OnCPOChoiceTokenDrawTextEvent(evt: CPOChoiceTokenDrawTextEvent): Bool
  CPOMissionDataOnPlayerDetach(): void
  OnCPOMissionPlayerVotedEvent(evt: CPOMissionPlayerVotedEvent): Bool
  OnPlayerDamageFromDataEvent(e: PlayerDamageFromDataEvent): Bool
  OnCPOMissionDataUpdateEvent(e: CPOMissionDataUpdateEvent): Bool
  GetCompatibleCPOMissionDeviceName(): CName
  OnCPOMissionDataChanged(hasData: Bool): Bool
  SetHasCPOMissionData(setHasData: Bool, damagesPreset: CName, compatibleDeviceName: CName, ownerDecidesOnTransfer: Bool): void
  OnCPOGiveChoiceTokenEvent(e: MultiplayerGiveChoiceTokenEvent): Bool
  ProcessDamageEvents(addDamage: Bool, damagesPreset: CName): void
  OnDeath(evt: gameDeathEvent): Bool
  ForceCloseRadialWheel(): void
  Revive(percAmount: number): void
  OnTargetNeutraliziedEvent(evt: TargetNeutraliziedEvent): Bool
  OnRewindableSectionEvent(evt: scnRewindableSectionEvent): Bool
  IsInCombat(): Bool
  IsNaked(): Bool
  IsMoving(): Bool
  IsMovingHorizontally(): Bool
  IsMovingVertically(): Bool
  OnZoneChange(value: Variant): Bool
  SetWarningMessage(message: string): void
  StartProcessingVForVendettaAchievement(deathInstigator: GameObject): void
  CreateVendettaTimeDelayEvent(): void
  OnFinishedVendettaTimeEvent(evt: FinishedVendettaTimeEvent): Bool
  CheckVForVendettaAchievement(evt: TargetNeutraliziedEvent): void
  OnProcessVendettaAchievementEvent(evt: ProcessVendettaAchievementEvent): Bool
  OnRemoveConsumableDelayedEvent(evt: RemoveConsumableDelayedEvent): Bool
  GetNetworkLinkSlotName(): CName
  IsNetworkLinkDynamic(): Bool
  RegisterRemoteMappin(): void
  UnregisterRemoteMappin(): void
  OnRegisterFastTravelPoints(evt: RegisterFastTravelPointsEvent): Bool
  ShouldShowScanner(): Bool
  OnWoundedInstigated(evt: WoundedInstigated): Bool
  OnDismembermentInstigated(evt: DismembermentInstigated): Bool
  GetPrimaryTargetingComponent(): TargetingComponent
  /** @noSelf **/
  SetLevel(inst: GameInstance, stringType: string, stringVal: string, levelGainReason: telemetryLevelGainReason): void
  /** @noSelf **/
  SetBuild(inst: GameInstance, stringType: string): void
  ApplyNPCLevelAndProgressionBuild(npc: GameObject, actionName: CName): void
  OnMeleeHitEvent(evt: MeleeHitEvent): Bool
  OnMeleeHitSloMo(evt: MeleeHitSlowMoEvent): Bool
  FindBuildSpacing(enumType: string, buildNameStringPart: string): number
  GotKeycardNotification(): void
  OnHackPlayerEvent(evt: HackPlayerEvent): Bool
  OnCarHitPlayer(evt: OnCarHitPlayer): Bool
  OnDistrictChanged(evt: PlayerEnteredNewDistrictEvent): Bool
  GetGunshotRange(): number
  GetExplosionRange(): number
  GetMinigamePrograms(): MinigameProgramData[]
  OnUpdateMiniGameProgramsEvent(evt: UpdateMiniGameProgramsEvent): Bool
  UpdateMinigamePrograms(program: MinigameProgramData, add: Bool): void
  RestoreMinigamePrograms(): void
  GetMinigameBlackboard(): IBlackboard
  InitInterestingFacts(): void
  ApplyAimAssistSettings(configName?: string): void
  RegisterInterestingFactsListeners(): void
  UnregisterInterestingFactsListeners(): void
  SetBlackboardIntVariable(id: BlackboardID_Int, value: number): void
  InvalidateZone(): void
  OnZoneFactChanged(val: number): void
  SetSecurityAreaTypeE3HACK(securityAreaType: ESecurityAreaType): void
  OnEnterUndefinedZone(): void
  OnEnterPublicZone(): void
  OnExitPublicZone(): void
  OnEnterSafeZone(): void
  OnExitSafeZone(): void
  OnEnterRestrictedZone(): void
  OnEnterDangerousZone(): void
  GetCurrentZoneType(factValue: number): gameCityAreaType
  GetCurrentSecurityZoneType(owner: GameObject): gameCityAreaType
  OnInvalidateVisionModeController(evt: PlayerVisionModeControllerInvalidateEvent): Bool
}

declare interface GameObjectPS extends PersistentState {

}

declare interface GamePuppetPS extends GameObjectPS {

  GetGender(): CName
  WasQuickHacked(): Bool
  SetWasQuickHacked(newValue: Bool): void
  HasNPCTriggeredCombatInSecuritySystem(): Bool
  SetHasNPCTriggeredCombatInSecuritySystem(set: Bool): void
  HasAlternativeName(): Bool
  SetCrouch(set: Bool): void
  IsCrouch(): Bool
  OnNotifiedSecSysAboutCombat(evt: NotifiedSecSysAboutCombat): EntityNotificationType
}

declare interface ScriptedPuppetPS extends GamePuppetPS {

  OnInstantiated(): Bool
  Initialize(): void
  IsInitialized(): Bool
  WasAttached(): Bool
  OnGameAttached(evt: GameAttachedEvent): EntityNotificationType
  InitializeCooldownStorage(): void
  ExecutePSAction(action: ScriptableDeviceAction, persistentState: PersistentState): void
  GetCooldownStorage(): CooldownStorage
  GetPlayerCooldownStorage(): CooldownStorage
  GetPlayerMainObject(): GameObject
  GetSecurityAreas(includeInactive?: Bool, returnOnlyDirectlyConnected?: Bool): SecurityAreaControllerPS[]
  GetSecuritySystem(): SecuritySystemControllerPS
  OnSecuritySystemOutput(evt: SecuritySystemOutput): EntityNotificationType
  DetermineSecurityAreaTypeForEntityID(entityID: EntityID): ESecurityAreaType
  GetAccessPoint(): AccessPointControllerPS
  GetWasIncapacitated(): Bool
  IsConnectedToAccessPoint(): Bool
  IsConnectedToSecuritySystem(): Bool
  GetNPCsConnectedToThisAPCount(): number
  GetNetworkName(): string
  CheckMasterConnectedClassTypes(): ConnectedClassTypes
  GetActiveContexts(): gamedeviceRequestType[]
  HasDirectInteractionChoicesActive(): Bool
  SetHasDirectInteractionChoicesActive(hasInteraction: Bool): void
  GetLeftHandLoadout(): ItemID
  GetRightHandLoadout(): ItemID
  DrawBetweenEntities(shouldDraw: Bool, focusModeOnly: Bool, fxResource: FxResource, masterID: EntityID, slaveID: EntityID, revealMaster: Bool, revealSlave: Bool, onlyRemoveWeakLink?: Bool, isEyeContact?: Bool): void
  GetOwnerEntity(): ScriptedPuppet
  CanPerformReprimend(): Bool
  IsQuickHacksExposed(): Bool
  WasRevealedInNetworkPing(): Bool
  SetRevealedInNetworkPing(wasRevealed: Bool): void
  GetNetworkSystem(): NetworkSystem
  OnDeviceAttachment(evt: DeviceLinkEstablished): EntityNotificationType
  OnSetWasQuickHacked(evt: SetQuickHackEvent): EntityNotificationType
  OnSetWasQuickHackedAtempt(evt: SetQuickHackAttemptEvent): EntityNotificationType
  GetDeviceLink(): PuppetDeviceLinkPS
  OnAcquireDeviceLink(evt: AcquireDeviceLink): EntityNotificationType
  SetIsBreached(isBreached: Bool): void
  IsBreached(): Bool
  GetOwnerEntityWeak(): Entity
  GetMyEntityID(): EntityID
  SetWasIncapacitated(wasIncapacitated: Bool): void
  OnCacheLoadout(evt: CacheItemEquippedToHandsEvent): EntityNotificationType
  DetermineInteractionState(interaction: InteractionComponent, context: GetActionsContext, objectActionsCallbackController: gameObjectActionsCallbackController): void
  GetValidChoices(actions: ObjectAction_Record[], context: GetActionsContext, objectActionsCallbackController: gameObjectActionsCallbackController, checkPlayerQuickHackList: Bool, choices: InteractionChoice[]): void
  GetAction(id: TweakDBID): PuppetAction
  GetAllChoices(actions: ObjectAction_Record[], context: GetActionsContext, choices: InteractionChoice[]): void
  /** @noSelf **/
  RemoveDuplicatedChoices(choices: InteractionChoice[]): void
  PushChoicesToInteractionComponent(interactionComponent: InteractionComponent, context: GetActionsContext, choices: InteractionChoice[]): void
  PushAerialTakedownActionEventToPSM(target: GameObject): void
  GenerateContext(requestType: gamedeviceRequestType, providedClearance: Clearance, providedProcessInitiator?: GameObject, providedRequestor?: EntityID): GetActionsContext
  OnObjectAction(evt: ScriptableDeviceAction): EntityNotificationType
  /** @noSelf **/
  ActionSecurityBreachNotificationStatic(lastKnownPosition: Vector4, whoBreached: GameObject, reporterHandle: GameObject, type: ESecurityNotificationType): SecuritySystemInput
  CheckFlatheadTakedownAvailability(context: GetActionsContext): Bool
  OnSetExposeQuickHacks(evt: SetExposeQuickHacks): EntityNotificationType
  FilterRedundantPrograms(programs: TweakDBID[]): void
  ForceExposeQuickHack(shouldForce: Bool): void
  IsActionReady(actionID: TweakDBID): Bool
  OnActionCooldownEvent(evt: ActionCooldownEvent): EntityNotificationType
  ManuallyTriggerActionCooldown(actionID: TweakDBID): void
  ActionSetExposeQuickHacks(): SetExposeQuickHacks
  GetNumberActions(): number
  HasActiveContext(context: gamedeviceRequestType): Bool
  AddActiveContext(context: gamedeviceRequestType): void
  RemoveActiveContext(context: gamedeviceRequestType): void
  SetReactionPresetID(presetID: TweakDBID): void
  GetReactionPresetID(): TweakDBID
  IsDefeatMechanicActive(): Bool
  SetIsDefeatMechanicActive(isDefeatMechanicActive: Bool): void
  CheckMasterRunnerAchievement(minigameProgramsCompleted: number): void
  SetIsDead(isDead: Bool): void
  GetIsDead(): Bool
  SetIsIncapacitated(isIncapacitated: Bool): void
  GetIsIncapacitated(): Bool
  SetIsAndroidTurnedOff(isAndroidTurnedOff: Bool): void
  GetIsAndroidTurnedOff(): Bool
  GetHudManager(): HUDManager
  OnTargetAssessmentRequest(evt: TargetAssessmentRequest): EntityNotificationType
  OnPingSquad(evt: PingSquad): EntityNotificationType
}

declare interface CooldownStorage extends IScriptable {

  Initialize(id: PersistentID, className: CName, gameInstanceHack: GameInstance): void
  StartSimpleCooldown(action: BaseScriptableAction): CooldownStorageID
  StartCooldownRequest(request: CooldownRequest): CooldownStorageID
  IsInitialized(): EBOOL
  IsActionReady(action: TweakDBID): Bool
  IsActionReady(id: CooldownStorageID): Bool
  IsActionReady(index: number): Bool
  CancelCooldown(id: CooldownStorageID): Bool
  CancelCooldown(action: TweakDBID): Bool
  ResolveCooldownEvent(evt: ActionCooldownEvent): void
  RemoveCooldown(label: CooldownStorageID): Bool
  RemoveCooldown(action: TweakDBID): Bool
  RemoveCooldown(index: number): Bool
  GetPackage(label: CooldownStorageID): CooldownPackage
  ManuallyTriggerCooldown(actionID: TweakDBID): Bool
  GetPackage(action: TweakDBID): CooldownPackage
  FindPackageIndexByID(label: CooldownStorageID): number
  FindPackageIndexByAction(actionID: TweakDBID): number
  ProcessNewPackage(request: CooldownRequest): CooldownStorageID
  TriggerPackageListeners(package: CooldownPackage): void
  UpdateMap(label: CooldownStorageID, ids: DelayID[]): void
  AttachUniqueLabel(): CooldownStorageID
  GenerateLabel(id: number): CooldownStorageID
  CancelDelayEvents(package: CooldownPackage): void
  RemoveMapEntry(index: number): Bool
  FindMapEntry(id: CooldownStorageID): number
  FindMapEntry(package: CooldownPackage): number
}

declare interface DeviceAction extends Event {

  SetUp(ps: PersistentState): void
  GetProperties(): DeviceActionProperty[]
  GetPersistentID(): PersistentID
  GetDeviceClassName(): CName
  GetCurrentDisplayString(): string
}

declare interface CooldownRequest extends IScriptable {

  SetUp(action: BaseScriptableAction, shouldTriggerCooldownImmediately: Bool): void
  SetUp(action: BaseScriptableAction, go: GameObject, shouldTriggerCooldownImmediately: Bool): void
  SetUp(action: BaseScriptableAction, ps: PersistentState, shouldTriggerCooldownImmediately: Bool): void
  SetUpAdvanced(action: BaseScriptableAction, addressees: PSOwnerData[], shouldTriggerCooldownImmediately: Bool): void
  GetAction(): BaseScriptableAction
  GetContactBook(): PSOwnerData[]
  GetTriggerRequestType(): RequestType
  SetUpTriggerType(shouldTriggerImmediately: Bool): void
}

declare interface CooldownPackage extends IScriptable {

  InitializePackage(request: CooldownRequest, label: CooldownStorageID): void
  GetActionID(): TweakDBID
  GetInitialCooldown(): number
  GetAddressees(): PSOwnerData[]
  GetLabel(): CooldownStorageID
  GetPackageStatus(): PackageStatus
  UpdatePackageStatus(newStatus: PackageStatus): void
  SetUpInitialPackageStatus(requestType: RequestType): void
}

declare interface BaseScriptableAction extends DeviceAction {

  GetOwnerPS(game: GameInstance): PersistentState
  RegisterAsRequester(id: EntityID): void
  GetRequesterID(): EntityID
  SetExecutor(executor: GameObject): void
  GetExecutor(): GameObject
  GetActionID(): CName
  GetObjectActionRecord(): ObjectAction_Record
  GetObjectActionID(): TweakDBID
  GetGameplayCategoryID(): TweakDBID
  GetGameplayCategoryRecord(): ObjectActionGameplayCategory_Record
  SetObjectActionID(id: TweakDBID): void
  GetTweakDBChoiceRecord(): string
  GetTweakDBChoiceID(): TweakDBID
  SetIsActionRPGCheckDissabled(value: Bool): void
  GetIsActionRPGCheckDissabled(): Bool
  SetInactive(): void
  SetActive(): void
  IsInactive(): Bool
  IsInteractionChoiceValid(): Bool
  ProduceInteractionPart(): void
  IsPossible(target: GameObject, actionRecord?: ObjectAction_Record, objectActionsCallbackController?: gameObjectActionsCallbackController): Bool
  IsVisible(context: GetActionsContext, objectActionsCallbackController?: gameObjectActionsCallbackController): Bool
  ProcessRPGAction(gameInstance: GameInstance): void
  StartAction(gameInstance: GameInstance): void
  CompleteAction(gameInstance: GameInstance): void
  StartUpload(gameInstance: GameInstance): void
  ProcessStatusEffects(actionEffects: ObjectActionEffect_Record[], gameInstance: GameInstance): void
  ProcessEffectors(actionEffects: ObjectActionEffect_Record[], gameInstance: GameInstance): void
  GetActivationTime(): number
  GetCooldownDuration(): number
  CanPayCost(user?: GameObject): Bool
  PayCost(): Bool
  GetCost(): number
  GetBaseCost(): number
  /** @noSelf **/
  GetBaseCostStatic(executor: GameObject, actionRecord: ObjectAction_Record): number
  /** @noSelf **/
  GetCostMods(costComponents: ObjectActionCost_Record[], costMods: StatModifier_Record[]): void
  GetPowerLevelDiff(): number
}

declare interface InteractionChoiceCaptionPart extends IScriptable {

  GetType(): gamedataChoiceCaptionPartType
}

declare interface InteractionChoiceCaptionScriptPart extends InteractionChoiceCaptionPart {

  GetPartType(): gamedataChoiceCaptionPartType
}

declare interface InteractionChoiceMetaData {

  /** @noSelf **/
  GetTweakData(metaData: InteractionChoiceMetaData): InteractionBase_Record
}

declare interface InteractionChoice {

}

declare interface InteractionChoiceCaption {

  /** @noSelf **/
  AddPartFromRecordID(self: InteractionChoiceCaption, recordId: TDBID): void
  /** @noSelf **/
  AddPartFromRecord(self: InteractionChoiceCaption, record: ChoiceCaptionPart_Record): void
  /** @noSelf **/
  AddTextPart(self: InteractionChoiceCaption, text: string): void
  /** @noSelf **/
  AddTagPart(self: InteractionChoiceCaption, tag: string): void
  /** @noSelf **/
  AddScriptPart(self: InteractionChoiceCaption, part: InteractionChoiceCaptionScriptPart): void
  /** @noSelf **/
  Clear(self: InteractionChoiceCaption): void
}

declare interface InteractionChoiceCaptionQuickhackCostPart extends InteractionChoiceCaptionScriptPart {

  GetPartType(): gamedataChoiceCaptionPartType
}

declare interface ChoiceTypeWrapper {

  /** @noSelf **/
  IsType(context: ChoiceTypeWrapper, type: gameinteractionsChoiceType): Bool
  /** @noSelf **/
  SetType(context: ChoiceTypeWrapper, type: gameinteractionsChoiceType): void
  /** @noSelf **/
  ClearType(context: ChoiceTypeWrapper, type: gameinteractionsChoiceType): void
}

declare interface gameObjectActionsCallbackController extends IScriptable {

  /** @noSelf **/
  Create(target: Entity, instigator: Entity, gameInstance: GameInstance): gameObjectActionsCallbackController
  AddObjectAction(objectActionRecord: ObjectAction_Record): void
  HasObjectAction(objectActionRecord: ObjectAction_Record): Bool
  ClearAllObjectActions(): void
  IsObjectActionTargetPrereqFulfilled(objectActionRecord: ObjectAction_Record): Bool
  IsObjectActionInstigatorPrereqFulfilled(objectActionRecord: ObjectAction_Record): Bool
  UnlockNotifications(): void
  RegisterSkillCheckCallbacks(): void
  UnregisterSkillCheckCallbacks(): void
}

declare interface GetActionsContext {

}

declare interface ObjectActionEffect_Record extends TweakDBRecord {

  EffectorToTrigger(): Effector_Record
  StatusEffect(): StatusEffect_Record
  Recipient(): ObjectActionReference_Record
}

declare interface ObjectActionReference_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataObjectActionReference
}

declare interface EffectorSystem extends IEffectorSystem {

  ApplyEffector(objID: EntityID, instigator: GameObject, recordID: TweakDBID, parentRecordID?: TweakDBID): void
  RemoveEffector(objID: EntityID, recordID: TweakDBID): void
  IsEffectorPresent(objID: EntityID, recordID: TweakDBID): Bool
  GetEffectorsList(objID: EntityID, outEffectors: Effector[]): void
  GetEffectorsByID(objID: EntityID, recordID: TweakDBID, outEffectors: Effector[]): void
  RemoveEffectorsByID(objID: EntityID, recordID: TweakDBID): Bool
}

declare interface PlayerScriptableSystemRequest extends ScriptableSystemRequest {

}

declare interface GenericNotificationViewData extends IScriptable {

  CanMerge(data: GenericNotificationViewData): Bool
  OnRemoveNotification(data: IScriptable): Bool
  GetPriority(): number
}

declare interface CraftingSystem extends ScriptableSystem {

  OnAttach(): void
  OnPlayerAttach(request: PlayerAttachRequest): void
  OnPlayerDetach(request: PlayerDetachRequest): void
  OnRestored(saveVersion: number, gameVersion: number): void
  /** @noSelf **/
  GetInstance(gameInstance: GameInstance): CraftingSystem
  GetPlayerCraftBook(): CraftBook
  GetPlayerCraftableItems(): Item_Record[]
  GetItemFinalUpgradeCost(itemData: gameItemData): IngredientData[]
  GetItemBaseUpgradeCost(itemType: gamedataItemType, quality: gamedataQuality): IngredientData[]
  GetItemCraftingCost(itemData: gameItemData): IngredientData[]
  GetItemCraftingCost(craftingData: RecipeElement_Record[]): IngredientData[]
  CanItemBeDisassembled(owner: GameObject, itemID: ItemID): Bool
  CanItemBeDisassembled(itemData: gameItemData): Bool
  CanItemBeCrafted(itemData: gameItemData): Bool
  EnoughIngredientsForCrafting(itemData: gameItemData): Bool
  EnoughIngredientsForUpgrading(itemData: gameItemData): Bool
  CanItemBeUpgraded(itemData: gameItemData): Bool
  HasIngredients(required: IngredientData[]): Bool
  CanCraftGivenQuality(itemData: gameItemData, quality: gamedataQuality): Bool
  IsRecipeKnown(recipe: TweakDBID, playerCraftBook: CraftBook): Bool
  OnCraftItemRequest(request: CraftItemRequest): void
  OnDisassembleItemRequest(request: DisassembleItemRequest): void
  OnUpgradeItemRequest(request: UpgradeItemRequest): void
  OnAddRecipeRequest(request: AddRecipeRequest): void
  OnHideRecipeRequest(request: HideRecipeRequest): void
  OnShowRecipeRequest(request: ShowRecipeRequest): void
  GetLastActionStatus(): Bool
  CraftItem(target: GameObject, itemRecord: Item_Record, amount: number): gameItemData
  MarkItemAsCrafted(itemData: gameItemData): void
  ClearNonIconicSlots(itemData: gameItemData): void
  /** @noSelf **/
  MarkItemAsCrafted(target: GameObject, itemData: gameItemData): void
  SetItemLevel(itemData: gameItemData): void
  /** @noSelf **/
  SetItemLevel(target: GameObject, itemData: gameItemData): void
  CalculateCraftingLevelBoost(): number
  ProcessProgramCrafting(itemTDBID: TweakDBID): void
  GetDisassemblyResultItems(target: GameObject, itemID: ItemID, amount: number, restoredAttachments: ItemAttachments[]): IngredientData[]
  DisassembleItem(target: GameObject, itemID: ItemID, amount: number): void
  UpgradeItem(owner: GameObject, itemID: ItemID): void
  ProcessUpgradingPerksData(target: GameObject, itemRecord: Item_Record): void
  ProcessCraftingPerksData(target: GameObject, itemRecord: Item_Record, craftedItem: gameItemData): void
  ProcessDisassemblingPerks(disassembleResult: IngredientData[], itemData: gameItemData, restoredAttachments: ItemAttachments[]): IngredientData[]
  ProcessCraftSkill(xpAmount: number, craftedItem: StatsObjectID): void
  GetRecipeData(itemRecord: Item_Record): RecipeData
  GetUpgradeRecipeData(itemID: ItemID): RecipeData
  GetIngredientQuality(data: IngredientData): gamedataQuality
  CreateIngredientData(ingredientData: RecipeElement_Record): IngredientData
  CreateIngredientData(item: Item_Record, amount: number): IngredientData
  UpdateBlackboard(lastCommand: CraftingCommands, lastItem?: ItemID, lastIngredients?: IngredientData[]): void
  SendItemCraftedDataTrackingRequest(targetItem: ItemID): void
  ProcessIconicRevampRestoration(): void
  AddAmmoRecipes(): void
}

declare interface CraftBook extends IScriptable {

  InitializeCraftBookOwner(owner: GameObject): void
  InitializeCraftBook(owner: GameObject, recipes: Craftable_Record): void
  GetCraftableItems(): Item_Record[]
  GetRecipeData(Recipe: TweakDBID): ItemRecipe
  GetRecipeIndex(recipe: TweakDBID): number
  AddRecipe(targetItem: TweakDBID, hideOnItemsAdded?: Item_Record[], amount?: number): void
  HideRecipe(recipe: TweakDBID, shouldHide: Bool): Bool
  GetOwner(): GameObject
  ResetRecipeCraftedAmount(): void
}

declare interface Craftable_Record extends TweakDBRecord {

  CraftableItem(outList: Item_Record[]): void
  GetCraftableItemCount(): number
  GetCraftableItemItem(index: number): Item_Record
  CraftableItemContains(item: Item_Record): Bool
}

declare interface ItemRecipe {

}

declare interface ItemID {

  /** @noSelf **/
  IsValid(itemID: ItemID): Bool
  /** @noSelf **/
  (): ItemID
  /** @noSelf **/
  FromTDBID(tdbID: TweakDBID): ItemID
  /** @noSelf **/
  GetTDBID(itemID: ItemID): TweakDBID
  /** @noSelf **/
  CreateQuery(tdbID: TweakDBID): ItemID
  /** @noSelf **/
  IsOfTDBID(itemID: ItemID, tdbID: TweakDBID): Bool
  /** @noSelf **/
  IsQuery(itemID: ItemID): Bool

  // VARIABLES //
  id: TweakDBID
}

declare interface TransactionSystem extends ITransactionSystem {

  PrefetchItemAppearance(obj: GameObject, itemID: ItemID, newAppearanceName: CName): void
  ChangeItemAppearance(obj: GameObject, itemID: ItemID, newAppearanceName: CName, useSuffixes?: Bool): void
  GetItemAppearance(obj: GameObject, itemID: ItemID): CName
  ResetItemAppearance(obj: GameObject, itemID: ItemID): void
  RemoveMoney(obj: GameObject, amount: number, currency: CName): Bool
  GiveMoney(source: GameObject, target: GameObject, amount: number, currency: CName): Bool
  RemoveItem(obj: GameObject, itemID: ItemID, amount: number): Bool
  RemoveItemByTDBID(obj: GameObject, tdbID: TweakDBID, amount: number): Bool
  GiveItem(obj: GameObject, itemID: ItemID, amount: number): Bool
  GiveItemByTDBID(obj: GameObject, tdbID: TweakDBID, amount: number): Bool
  GiveItems(obj: GameObject, itemList: ItemModParams[]): Bool
  GiveItemByItemData(obj: GameObject, itemData: gameItemData): Bool
  GivePreviewItemByItemData(obj: GameObject, itemData: gameItemData): Bool
  GiveItemByItemQuery(obj: GameObject, itemQueryTDBID: TweakDBID, amount?: number, seed?: number, telemetryLogSource?: string): Bool
  GiveItemByItemArrayQuery(obj: GameObject, itemQueryTDBID: TweakDBID, seed?: number): Bool
  TransferItem(source: GameObject, target: GameObject, itemID: ItemID, amount: number): Bool
  TransferAllItems(source: GameObject, target: GameObject): Bool
  TakeItem(newOwner: GameObject, itemToLoot: ItemObject): Bool
  SellItem(seller: GameObject, buyer: GameObject, itemID: ItemID, amount: number, currency: CName, price?: number): Bool
  SellItemStrict(seller: GameObject, buyer: GameObject, itemID: ItemID, amount: number, currency: CName, price?: number): Bool
  HasItem(obj: GameObject, itemID: ItemID): Bool
  GetNumItems(obj: GameObject, tagFilters?: CName[]): number
  GetTotalItemQuantity(obj: GameObject): number
  HasTag(obj: GameObject, tag: CName, itemID: ItemID): Bool
  GetItemData(obj: GameObject, itemID: ItemID): gameItemData
  GetItemDataByOwnerEntityId(id: EntityID, itemID: ItemID): gameItemData
  GetItemQuantity(obj: GameObject, itemID: ItemID): number
  GetItemQuantityByTag(obj: GameObject, tag: CName): number
  GetItemList(obj: GameObject, itemList: gameItemData[]): Bool
  GetItemListByTag(obj: GameObject, tag: CName, itemList: gameItemData[]): Bool
  GetItemListByTags(obj: GameObject, tagList: CName[], itemList: gameItemData[]): Bool
  RemoveAllItems(obj: GameObject): Bool
  InitializeSlots(obj: GameObject, slotIDList: TweakDBID[]): Bool
  RefreshAttachment(obj: GameObject, slotID: TweakDBID, keepWorldTransform?: Bool): void
  AddItemToSlot(obj: GameObject, slotID: TweakDBID, itemID: ItemID, highPriority?: Bool, itemObject?: ItemObject, plane?: ERenderingPlane, keepWorldTransform?: Bool, ignoreRestrictions?: Bool): Bool
  RemoveItemFromSlot(obj: GameObject, slotID: TweakDBID, shouldDestroyEntity?: Bool, keepWorldTransform?: Bool, skipSendAnimEquipEvents?: Bool): Bool
  RemoveItemFromAnySlot(obj: GameObject, itemID: ItemID, shouldDestroyEntity?: Bool, keepWorldTransform?: Bool): Bool
  ChangeItemToSlot(obj: GameObject, newSlotID: TweakDBID, itemID: ItemID): Bool
  ClearAllSlots(obj: GameObject): Bool
  IsSlotEmpty(obj: GameObject, slotID: TweakDBID): Bool
  IsSlotEmptySpawningItem(obj: GameObject, slotID: TweakDBID): Bool
  HasItemDataInSlot(obj: GameObject, slotID: TweakDBID, itemID: ItemID): Bool
  HasItemInSlot(obj: GameObject, slotID: TweakDBID, itemID: ItemID): Bool
  HasItemInAnySlot(obj: GameObject, itemID: ItemID): Bool
  CanPlaceItemInSlot(obj: GameObject, slotID: TweakDBID, itemID: ItemID): Bool
  GetItemInSlot(obj: GameObject, slotID: TweakDBID): ItemObject
  GetItemInSlotByItemID(obj: GameObject, itemID: ItemID): ItemObject
  MatchVisualTag(entity: Entity, tag: CName, matchUsingDefaultAppearance?: Bool): Bool
  CycleActiveItemInSlot(obj: GameObject, slotID: TweakDBID): ItemID
  SetActiveItemInSlot(obj: GameObject, slotID: TweakDBID, itemID: ItemID): Bool
  EquipActiveItemInSlot(obj: GameObject, slotID: TweakDBID, highPriority: Bool): Bool
  GetActiveItemInSlot(obj: GameObject, slotID: TweakDBID): ItemID
  CanItemBeActiveInSlot(obj: GameObject, slotID: TweakDBID, itemID: ItemID): Bool
  GetNextActiveItemInSlot(obj: GameObject, slotID: TweakDBID): ItemID
  RemovePart(obj: GameObject, itemID: ItemID, slotID: TweakDBID, shouldUpdateEntity?: Bool): ItemID
  AddPart(obj: GameObject, itemID: ItemID, partItemID: ItemID, slotID?: TweakDBID): Bool
  ForcePartInSlot(obj: GameObject, itemID: ItemID, partItemID: ItemID, slotID: TweakDBID): Bool
  GetEmptySlotsOnItem(obj: GameObject, itemID: ItemID, emptySlots: TweakDBID[]): void
  GetAvailableSlotsOnItem(obj: GameObject, itemID: ItemID, availableSlots: TweakDBID[]): void
  GetUsedSlotsOnItem(obj: GameObject, itemID: ItemID, used: TweakDBID[]): void
  GetItemsInstallableInSlot(obj: GameObject, itemID: ItemID, slotID: TweakDBID, installableItems: ItemID[]): void
  ReinitializeStatsOnEntityItems(obj: GameObject): void
  CalculateTemporaryStatsBundle(obj: GameObject, rootPartID: ItemID, replacementPartID: ItemID, slotIdForReplacement: TweakDBID): StatsBundleHandler
  ReleaseItem(owner: GameObject, item: ItemObject): Bool
  ThrowItem(owner: GameObject, item: GameObject, setUpAndLaunchEvent: gameprojectileSetUpAndLaunchEvent): Bool
  RegisterInventoryListener(owner: GameObject, callback: InventoryScriptCallback): InventoryScriptListener
  RegisterAttachmentSlotListener(owner: GameObject, callback: AttachmentSlotsScriptCallback): AttachmentSlotsScriptListener
  UnregisterInventoryListener(owner: GameObject, listener: InventoryScriptListener): void
  UnregisterAttachmentSlotListener(owner: GameObject, listener: AttachmentSlotsScriptListener): void
  OnItemAddedToEquipmentSlot(owner: GameObject, itemID: ItemID): Bool
  OnItemRemovedFromEquipmentSlot(owner: GameObject, itemID: ItemID): Bool
}

declare interface gameprojectileLaunchEvent extends Event {

}

declare interface InventoryListener extends IScriptable {

}

declare interface AttachmentSlotsListener extends IScriptable {

}

declare interface UIGenderHelper extends IScriptable {

  /** @noSelf **/
  GetIconGender(playerPuppet: PlayerPuppet): ItemIconGender
}

declare interface InventoryScriptCallback extends IScriptable {

  OnItemNotification(itemID: ItemID, itemData: gameItemData): void
  OnItemAdded(itemID: ItemID, itemData: gameItemData, flaggedAsSilent: Bool): void
  OnItemRemoved(itemID: ItemID, difference: number, currentQuantity: number): void
  OnItemQuantityChanged(itemID: ItemID, diff: number, total: number, flaggedAsSilent: Bool): void
  OnItemExtracted(itemID: ItemID): void
  OnPartAdded(itemID: ItemID, partID: ItemID): void
  OnPartRemoved(partID: ItemID, formerItemID: ItemID): void
}

declare interface CraftingSystemInventoryCallback extends InventoryScriptCallback {

  OnItemAdded(itemID: ItemID, itemData: gameItemData, flaggedAsSilent: Bool): void
}

declare interface ItemRecipe_Record extends Item_Record {

  CraftingResult(): CraftingResult_Record
  HideOnItemsAdded(outList: Item_Record[]): void
  GetHideOnItemsAddedCount(): number
  GetHideOnItemsAddedItem(index: number): Item_Record
  HideOnItemsAddedContains(item: Item_Record): Bool
}

declare interface AddRecipeRequest extends PlayerScriptableSystemRequest {

}

declare interface CraftingResult_Record extends TweakDBRecord {

  Item(): Item_Record
  Amount(): number
}

declare interface SimpleScreenMessage {

}

declare interface UI_NotificationsDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface ItemCategory_Record extends TweakDBRecord {

  Name(): CName
  LocalizedCategory(): CName
  Type(): gamedataItemCategory
}

declare interface GameplayLogicPackageSystem extends IGameplayLogicPackageSystem {

  ApplyPackage(object: GameObject, instigator: GameObject, packageID: TweakDBID): void
  ApplyPackages(object: GameObject, instigator: GameObject, packageID: TweakDBID, applyCount: number): void
  RemovePackage(object: GameObject, packageID: TweakDBID): void
  RemovePackages(object: GameObject, packageID: TweakDBID, removeCount: number): void
  GetAppliedPackages(object: GameObject, outPackageIDs: TweakDBID[]): void
  RemoveEntry(entityID: EntityID): void
}

declare interface UpgradingData_Record extends TweakDBRecord {

  Ingredients(outList: RecipeElement_Record[]): void
  GetIngredientsCount(): number
  GetIngredientsItem(index: number): RecipeElement_Record
  IngredientsContains(item: RecipeElement_Record): Bool
}

declare interface RecipeElement_Record extends TweakDBRecord {

  Ingredient(): Item_Record
  Amount(): number
}

declare interface IngredientData {

}

declare interface CraftingPackage_Record extends TweakDBRecord {

  CraftingRecipe(outList: RecipeElement_Record[]): void
  GetCraftingRecipeCount(): number
  GetCraftingRecipeItem(index: number): RecipeElement_Record
  CraftingRecipeContains(item: RecipeElement_Record): Bool
  CraftingExpModifier(): number
  OvercraftPenaltyModifier(): number
}

declare interface EquipmentSystem extends ScriptableSystem {

  /** @noSelf **/
  GetInstance(owner: GameObject): EquipmentSystem
  CalculateSuffix(itemId: ItemID, owner: GameObject, suffixRecord: ItemsFactoryAppearanceSuffixBase_Record): string
  GetHairSuffix(itemId: ItemID, owner: GameObject, suffixRecord: ItemsFactoryAppearanceSuffixBase_Record): string
  OnPlayerAttach(request: PlayerAttachRequest): void
  OnPlayerDetach(request: PlayerDetachRequest): void
  GetPlayerData(owner: GameObject): EquipmentSystemPlayerData
  OnRestored(saveVersion: number, gameVersion: number): void
  PrintEquipment(): void
  GetItemInEquipSlot(owner: GameObject, equipArea: gamedataEquipmentArea, slotIndex: number): ItemID
  IsEquipped(owner: GameObject, item: ItemID): Bool
  IsEquipped(owner: GameObject, item: ItemID, equipmentArea: gamedataEquipmentArea): Bool
  GetActiveItem(owner: GameObject, area: gamedataEquipmentArea): ItemID
  GetActiveWeaponObject(owner: GameObject, area: gamedataEquipmentArea): ItemObject
  GetAllInstalledCyberwareAbilities(owner: GameObject): SEquipSlot[]
  /** @noSelf **/
  GetLastUsedItemByType(owner: GameObject, type: ELastUsed): ItemID
  GetItemSlotIndex(owner: GameObject, item: ItemID): number
  /** @noSelf **/
  IsCyberdeckEquipped(owner: GameObject): Bool
  /** @noSelf **/
  GetPlacementSlot(item: ItemID): TweakDBID
  /** @noSelf **/
  GetEquipAreaType(item: ItemID): gamedataEquipmentArea
  /** @noSelf **/
  GetEquipAreaTypeForDpad(item: ItemID): gamedataEquipmentArea
  IsItemInHotkey(owner: GameObject, itemID: ItemID): Bool
  GetHotkeyTypeForItemID(owner: GameObject, itemID: ItemID): EHotkey
  GetHotkeyTypeFromItemID(owner: GameObject, itemID: ItemID): EHotkey
  GetItemIDFromHotkey(owner: GameObject, hotkey: EHotkey): ItemID
  /** @noSelf **/
  GetData(owner: GameObject): EquipmentSystemPlayerData
  /** @noSelf **/
  GetSlotActiveItem(owner: GameObject, requestSlot: EquipmentManipulationRequestSlot): ItemID
  /** @noSelf **/
  GetItemsInArea(owner: GameObject, area: gamedataEquipmentArea): ItemID[]
  /** @noSelf **/
  HasItemInArea(owner: GameObject, area: gamedataEquipmentArea): Bool
  /** @noSelf **/
  FindItemInWeaponEqArea(owner: GameObject, item: ItemID): ItemID
  /** @noSelf **/
  GetFirstMeleeWeapon(owner: GameObject): ItemID
  /** @noSelf **/
  GetFirstRangedWeapon(owner: GameObject): ItemID
  /** @noSelf **/
  GetFirstAvailableWeapon(owner: GameObject): ItemID
  /** @noSelf **/
  HasTag(item: ItemObject, tag: CName): Bool
  /** @noSelf **/
  IsClothing(item: ItemID): Bool
  /** @noSelf **/
  GetClothingEquipmentAreas(): gamedataEquipmentArea[]
  GetEquipAreaFromItemID(owner: GameObject, item: ItemID): SEquipArea
  OnEquipRequest(request: EquipRequest): void
  OnGameplayEquipRequest(request: GameplayEquipRequest): void
  OnClearAllWeaponSlotsRequest(request: ClearAllWeaponSlotsRequest): void
  OnUnequipRequest(request: UnequipRequest): void
  OnUnequipItemsRequest(request: UnequipItemsRequest): void
  OnHotkeyRefreshRequest(request: HotkeyRefreshRequest): void
  OnHotkeyAssignmentRequest(request: HotkeyAssignmentRequest): void
  OnAssignHotkeyIfEmptySlot(request: AssignHotkeyIfEmptySlot): void
  OnThrowEquipmentRequest(request: ThrowEquipmentRequest): void
  OnInstallCyberwareRequest(request: InstallCyberwareRequest): void
  OnUninstallCyberwareRequest(request: UninstallCyberwareRequest): void
  OnDrawItemRequest(request: DrawItemRequest): void
  OnPartInstallRequest(request: PartInstallRequest): void
  OnPartUninstallRequest(request: PartUninstallRequest): void
  OnClearEquipmentRequest(request: ClearEquipmentRequest): void
  OnSaveEquipmentSetRequest(request: SaveEquipmentSetRequest): void
  OnLoadEquipmentSetRequest(request: LoadEquipmentSetRequest): void
  OnDeleteEquipmentSetRequest(request: DeleteEquipmentSetRequest): void
  OnAssignToCyberwareWheelRequest(request: AssignToCyberwareWheelRequest): void
  OnEquipmentUIBBRequest(request: EquipmentUIBBRequest): void
  OnCheckRemovedItemWithSlotActiveItem(request: CheckRemovedItemWithSlotActiveItem): void
  OnSynchronizeAttachmentSlotRequest(request: SynchronizeAttachmentSlotRequest): void
  OnDrawItemByContextRequest(request: DrawItemByContextRequest): void
  OnUnequipByTDBIDRequest(request: UnequipByTDBIDRequest): void
  OnUnequipByContextRequest(request: UnequipByContextRequest): void
  Debug_SetupEquipmentSystemOverlay(dataOwner: GameObject): void
  /** @noSelf **/
  ComposeSDORootPath(ownerGameObject: GameObject, suffix?: string): string
  Debug_SetupESAreaButton(equipArea: SEquipArea, ownerGameObject: GameObject): void
  Debug_SetupESSlotButton(slotIndex: number, areaStr: string, ownerGameObject: GameObject): void
  Debug_SetESSlotData(slotIndex: number, areaStr: string, ownerGameObject: GameObject): void
  Debug_FillESSlotData(slotIndex: number, area: gamedataEquipmentArea, itemID: ItemID, ownerGameObject: GameObject): void
  Debug_FillESSlotData(slotIndex: number, areaStr: string, itemID: ItemID, ownerGameObject: GameObject): void
  OnEquipmentSystemWeaponManipulationRequest(request: EquipmentSystemWeaponManipulationRequest): void
  OnSetActiveItemInEquipmentArea(request: SetActiveItemInEquipmentArea): void
  GetInventoryManager(owner: GameObject): InventoryDataManagerV2
}

declare interface EquipmentSystemPlayerData extends IScriptable {

  OnAttach(): void
  OnDetach(): void
  OnInitialize(): void
  OnRestored(): void
  HotkeysOnRestore(): void
  SetOwner(owner: ScriptedPuppet): void
  GetOwner(): ScriptedPuppet
  GetOwnerID(): EntityID
  GetEquipment(): SLoadout
  GetLastUsedStruct(): SLastUsedWeapon
  ClearLastUsedStruct(): void
  GetSlotActiveItemStruct(): SSlotActiveItems
  InitializeEquipment(): void
  InitializeEquipmentArea(equipAreaRecord: EquipmentArea_Record): void
  InitializeClothingSlotsInfo(): void
  CreateSlotInfo(area: gamedataEquipmentArea, slot: string, visualTag: CName): SSlotInfo
  EquipItem(itemID: ItemID, addToInventory?: Bool, blockActiveSlotsUpdate?: Bool, forceEquipWeapon?: Bool): void
  EquipItem(itemID: ItemID, slotIndex: number, addToInventory?: Bool, blockActiveSlotsUpdate?: Bool, forceEquipWeapon?: Bool): void
  ProcessGadgetsTutorials(item: ItemID): void
  OnEquipProcessVisualTags(itemID: ItemID): void
  ClearItemAppearanceEvent(areaType: gamedataEquipmentArea): void
  OnClearItemAppearance(resetItemID: ItemID): void
  ClearItemAppearance(transactionSystem: TransactionSystem, area: gamedataEquipmentArea): void
  OnUnequipProcessVisualTags(currentItem: ItemID, isUnequipping: Bool): void
  ResetItemAppearanceEvent(area: gamedataEquipmentArea): void
  OnResetItemAppearance(resetItemID: ItemID): void
  ResetItemAppearance(transactionSystem: TransactionSystem, area: gamedataEquipmentArea): void
  UpdateInnerChest(ts: TransactionSystem): void
  UpdateVisualTagProcessingInfo(area: gamedataEquipmentArea, show: Bool): void
  FinalizeVisualTagProcessing(): void
  IsItemHidden(id: ItemID): Bool
  IsUnderwearHidden(): Bool
  IsUnderwearTopHidden(): Bool
  RemoveHiddenItem(id: ItemID): void
  AddHiddenItem(id: ItemID): void
  GetVisualTagByAreaType(area: gamedataEquipmentArea): CName
  IsVisualTagActive(tag: CName): Bool
  IsPartialVisualTagActive(itemID: ItemID, ts: TransactionSystem): Bool
  IsPartialVisualTagActive(): Bool
  GetVisualTagsByItem(activeItem: GameObject, tags: SSlotInfo[]): Bool
  EvaluateUnderwearVisibility(unequippedItem: ItemID): Bool
  EvaluateUnderwearTopVisibility(unequippedItem: ItemID): Bool
  UnderwearEquipFailsafe(): void
  UnderwearTopEquipFailsafe(): void
  GetHighestPriorityMovementAudio(): CName
  IsItemAWeapon(item: ItemID): Bool
  IsItemOfCategory(item: ItemID, category: gamedataItemCategory): Bool
  IsItemConstructed(item: ItemID): Bool
  IsEquippable(itemData: gameItemData): Bool
  IsItemInHotkey(itemID: ItemID): Bool
  GetHotkeyTypeForItemID(itemID: ItemID): EHotkey
  GetHotkeyTypeFromItemID(itemID: ItemID): EHotkey
  GetItemIDFromHotkey(hotkey: EHotkey): ItemID
  CheckEquipPrereqs(itemID: ItemID): Bool
  AssignNextValidItemToHotkey(currentItem: ItemID): Bool
  OnHotkeyRefreshRequest(requst: HotkeyRefreshRequest): void
  OnHotkeyAssignmentRequest(request: HotkeyAssignmentRequest): void
  OnAssignHotkeyIfEmptySlot(request: AssignHotkeyIfEmptySlot): void
  AssignItemToHotkey(newID: ItemID, hotkey: EHotkey): void
  ClearItemFromHotkey(hotkey: EHotkey): void
  SyncHotkeyData(hotkey: EHotkey): void
  ShouldPickedUpItemBeAddedToHotkey(itemID: ItemID, hotkey: EHotkey): Bool
  GetNextItemInList(arr: ItemID[], fromIndex: number): ItemID
  UnequipItem(itemID: ItemID): void
  UnequipItem(equipAreaIndex: number, slotIndex?: number): void
  ClearEquipment(): void
  HandleStrongArmsEquip(strongArmsID: ItemID): void
  ManageCyberwareFragments(itemID: ItemID): void
  HandleStrongArmsUnequip(): void
  EquipBaseFists(): ItemID
  ApplyEquipGLPs(itemID: ItemID): void
  RemoveEquipGLPs(itemID: ItemID): void
  GetLastUsedItemID(type: ELastUsed): ItemID
  SetLastUsedItem(item: ItemID): void
  SetSlotActiveItem(slot: EquipmentManipulationRequestSlot, item: ItemID): void
  GetSlotActiveItem(slot: EquipmentManipulationRequestSlot): ItemID
  RemoveItemFromSlotActiveItem(item: ItemID): void
  DrawItem(itemToDraw: ItemID, drawAnimationType: gameEquipAnimationType): void
  /** @noSelf **/
  UpdateArmSlot(owner: PlayerPuppet, itemToDraw: ItemID, unequip?: Bool): void
  SaveEquipmentSet(setName: string, setType: EEquipmentSetType): void
  LoadEquipmentSet(setName: string): void
  DeleteEquipmentSet(setName: string): void
  GetEquipAreaIndex(equipAreaID: TweakDBID): number
  GetEquipAreaIndex(areaType: gamedataEquipmentArea): number
  GetEquipArea(areaType: gamedataEquipmentArea): SEquipArea
  GetActiveItemID(equipAreaIndex: number): ItemID
  GetEquipAreaFromItemID(item: ItemID): SEquipArea
  GetItemInEquipSlot(equipAreaIndex: number, slotIndex: number): ItemID
  GetNextActiveItemIndex(equipAreaIndex: number): number
  GetNextActiveItemIndex(equipAreaIndex: number, requiredTags: CName[]): number
  CheckTagsInItem(itemID: ItemID, requiredTags: CName[]): Bool
  GetPlacementSlot(equipAreaIndex: number, slotIndex: number): TweakDBID
  HasItemInInventory(item: ItemID): Bool
  HasItemEquipped(equipAreaIndex: number, slotIndex?: number): Bool
  GetSlotIndex(itemID: ItemID): number
  GetSlotIndex(itemID: ItemID, equipAreaType: gamedataEquipmentArea): number
  GetOwnerGender(): CName
  GetItemAppearanceForGender(itemID: ItemID): CName
  GetItemInEquipSlot(areaType: gamedataEquipmentArea, slotIndex: number): ItemID
  GetNumberOfSlots(areaType: gamedataEquipmentArea): number
  GetNumberOfItemsInEquipmentArea(areaType: gamedataEquipmentArea): number
  GetNumberEquippedWeapons(): number
  GetEquippedQuestItems(): ItemID[]
  GetActiveItem(equipArea: gamedataEquipmentArea): ItemID
  GetActiveWeaponObject(equipArea: gamedataEquipmentArea): ItemObject
  GetNextActiveItem(equipArea: gamedataEquipmentArea): ItemID
  GetActiveConsumable(): ItemID
  GetNextWeaponWheelItem(): ItemID
  GetActiveHeavyWeapon(): ItemID
  GetActiveGadget(): ItemID
  GetActiveCyberware(): ItemID
  GetAllAbilityCyberwareSlots(): SEquipSlot[]
  GetActiveMeleeWare(): ItemID
  IsEquipped(item: ItemID): Bool
  IsEquipped(item: ItemID, equipmentArea: gamedataEquipmentArea): Bool
  PrintEquipment(): void
  GetLastUsedWeaponItemID(): ItemID
  GetActiveWeaponToUnequip(): ItemID
  GetActiveWeapon(): ItemID
  GetSlotActiveWeapon(): ItemID
  GetFirstMeleeWeaponItemID(): ItemID
  GetLastUsedMeleeWeaponItemID(): ItemID
  GetLastUsedOrFirstAvailableWeapon(): ItemID
  GetLastUsedOrFirstAvailableRangedWeapon(): ItemID
  GetLastUsedOrFirstAvailableMeleeWeapon(): ItemID
  GetLastUsedOrFirstAvailableOneHandedRangedWeapon(): ItemID
  GetWeaponSlotItem(weaponSlot: number): ItemID
  CycleWeapon(cycleNext: Bool, onlyCheck: Bool): ItemID
  CheckWeaponAgainstGameplayRestrictions(weaponItem: ItemID): Bool
  SendPSMWeaponManipulationRequest(reqType: EquipmentManipulationRequestType, reqSlot: EquipmentManipulationRequestSlot, equipAnim: gameEquipAnimationType): void
  FindItemInEqArea(item: ItemID, area: gamedataEquipmentArea): ItemID
  FindItemInEqAreaByTag(tag: CName, area: gamedataEquipmentArea): ItemID
  RemoveItemFromEquipSlot(item: ItemID): void
  UpdateWeaponWheel(): void
  ClearAllWeaponSlots(): void
  UpdateQuickWheel(): void
  GetFistsItemID(): ItemID
  GetBaseFistsItemID(): ItemID
  GetMeleewareOrFistsItemID(): ItemID
  UpdateActiveWheelItem(itemID: ItemID): void
  UpdateEquipAreaActiveIndex(newCurrentItem: ItemID): void
  UpdateEquipmentUIBB(paperDollEqData: SPaperdollEquipData, restored?: Bool): void
  GetPaperDollEquipAreas(): SEquipArea[]
  GetPaperDollItems(): ItemID[]
  GetPaperDollSlots(): gamedataEquipmentArea[]
  ShouldShowGenitals(): Bool
  IsBuildCensored(): Bool
  OnEquipRequest(request: EquipRequest): void
  OnGameplayEquipRequest(request: GameplayEquipRequest): void
  ProcessEquipRequest(owner: GameObject, slotIndex: number, addToInventory: Bool, itemID: ItemID, equipToCurrentActiveSlot: Bool, blockUpdateWeaponActiveSlots?: Bool, forceEquipWeapon?: Bool): void
  OnAssignToCyberwareWheelRequest(request: AssignToCyberwareWheelRequest): void
  OnUnequipRequest(request: UnequipRequest): void
  OnUnequipItemsRequest(request: UnequipItemsRequest): void
  OnUnequipByTDBIDRequest(request: UnequipByTDBIDRequest): void
  OnThrowEquipmentRequest(request: ThrowEquipmentRequest): void
  OnInstallCyberwareRequest(request: InstallCyberwareRequest): void
  OnUninstallCyberwareRequest(request: UninstallCyberwareRequest): void
  OnDrawItemRequest(request: DrawItemRequest): void
  OnPartInstallRequest(request: PartInstallRequest): void
  OnPartUninstallRequest(request: PartUninstallRequest): void
  OnClearEquipmentRequest(request: ClearEquipmentRequest): void
  OnSaveEquipmentSetRequest(request: SaveEquipmentSetRequest): void
  OnLoadEquipmentSetRequest(request: LoadEquipmentSetRequest): void
  OnDeleteEquipmentSetRequest(request: DeleteEquipmentSetRequest): void
  OnEquipmentUIBBRequest(request: EquipmentUIBBRequest): void
  OnCheckRemovedItemWithSlotActiveItem(request: CheckRemovedItemWithSlotActiveItem): void
  OnSynchronizeAttachmentSlotRequest(request: SynchronizeAttachmentSlotRequest): void
  OnEquipmentSystemWeaponManipulationRequest(request: EquipmentSystemWeaponManipulationRequest): void
  OnClearAllWeaponSlotsRequest(request: ClearAllWeaponSlotsRequest): void
  CreateUnequipWeaponManipulationRequest(): void
  CreateUnequipGadgetWeaponManipulationRequest(): void
  CreateUnequipConsumableWeaponManipulationRequest(): void
  IsEquipmentManipulationAnUnequipRequest(eqManipulationAction: EquipmentManipulationAction): Bool
  GetRequestSlotFromEquipmentManipulationAction(eqManipulationAction: EquipmentManipulationAction): EquipmentManipulationRequestSlot
  GetRequestSlotFromItemID(item: ItemID): EquipmentManipulationRequestSlot
  GetItemIDfromEquipmentManipulationAction(eqManipulationAction: EquipmentManipulationAction): ItemID
  CheckCyberwareItemForActivatedAction(item: ItemID): Bool
  OnSetActiveItemInEquipmentArea(request: SetActiveItemInEquipmentArea): void
  CheckCyberjunkieAchievement(): void
  GetInventoryManager(): InventoryDataManagerV2
}

declare interface HotkeyManager {

  /** @noSelf **/
  InitializeHotkeys(hotkeys: Hotkey[]): void
  /** @noSelf **/
  IsItemInHotkey(hotkeys: Hotkey[], itemID: ItemID): Bool
  /** @noSelf **/
  GetHotkeyTypeForItemID(owner: GameObject, hotkeys: Hotkey[], itemID: ItemID): EHotkey
  /** @noSelf **/
  GetHotkeyTypeFromItemID(hotkeys: Hotkey[], itemID: ItemID): EHotkey
  /** @noSelf **/
  GetItemIDFromHotkey(hotkeys: Hotkey[], hotkey: EHotkey): ItemID
}

declare interface Hotkey extends IScriptable {

  /** @noSelf **/
  Construct(hotk: EHotkey, id?: ItemID): Hotkey
  StoreItem(id: ItemID): void
  IsEmpty(): Bool
  GetItemID(): ItemID
  GetHotkey(): EHotkey
  GetScope(): gamedataItemType[]
  IsCompatible(type: gamedataItemType): Bool
  SetScope(itemTypes: gamedataItemType[]): void
  /** @noSelf **/
  IsCompatible(hotkey: EHotkey, type: gamedataItemType): Bool
  /** @noSelf **/
  GetScope(hotkey: EHotkey): gamedataItemType[]
}

declare interface InventoryDataManagerV2 extends IScriptable {

  Initialize(player: PlayerPuppet, owner?: inkHUDGameController): void
  UnInitialize(): void
  RegisterToBB(): void
  UnregisterFromBB(): void
  OnMarkForRebuild(value: Variant): Bool
  OnWeaponDataChanged(value: Variant): Bool
  GetPlayerItems(): gameItemData[]
  GetTransactionSystem(): TransactionSystem
  GetPlayerItemData(itemId: ItemID): gameItemData
  GetIconGender(): ItemIconGender
  GetPlayerInventoryItems(additionalTagFilters?: CName[]): gameItemData[]
  GetPlayerInventoryItemsExcludingLoadout(): gameItemData[]
  GetPlayerInventoryItemsExcludingCraftingMaterials(): InventoryItemData[]
  GetPlayerInventoryDataExcludingLoadout(): InventoryItemData[]
  GetPlayerInventoryData(additionalTagFilters?: CName[]): InventoryItemData[]
  GetPlayerInventoryData(equipArea: gamedataEquipmentArea, skipEquipped?: Bool, filteredItems?: ItemModParams[]): InventoryItemData[]
  GetPlayerInventoryData(equipAreas: gamedataEquipmentArea[], skipEquipped?: Bool, filteredItems?: ItemModParams[]): InventoryItemData[]
  GetPlayerInventoryDataRef(equipAreas: gamedataEquipmentArea[], skipEquipped?: Bool, filteredItems?: ItemModParams[], outputItems?: InventoryItemData[]): void
  GetPlayerInventoryParts(slotId: TweakDBID): InventoryItemData[]
  GetPlayerInventoryPartsForItem(item: ItemID, slotID: TweakDBID): InventoryItemData[]
  GetPlayerInventoryPartsForItem(item: ItemID, slotIDs: TweakDBID[]): InventoryItemData[]
  GetPlayerInventoryPartsForItemRef(item: ItemID, slotID: TweakDBID, outputItems: InventoryItemData[]): void
  GetItemSlotsIDs(gameObject: GameObject, itemID: ItemID): TweakDBID[]
  GetPlayerInventoryPartsForItemRef(item: ItemID, slotIDs: TweakDBID[], outputItems: InventoryItemData[]): void
  PlacementSlotsContains(staticData: Item_Record, slotID: TweakDBID): Bool
  GetPlayerInventoryPartsDataForItem(item: ItemID, slotIDs: TweakDBID[]): gameItemData[]
  GetEquippedItemIdInArea(equipArea: gamedataEquipmentArea, slot?: number): ItemID
  GetItemDataFromIDInLoadout(id: ItemID): InventoryItemData
  GetItemDataEquippedInArea(equipArea: gamedataEquipmentArea, slot?: number): InventoryItemData
  GetEquipment(): InventoryItemData[]
  GetInventoryCyberware(): InventoryItemData[]
  GetInventoryCyberwareSize(): number
  GetWeaponEquippedInSlot(slot: number): InventoryItemData
  GetEquippedWeapons(): InventoryItemData[]
  GetEquippedWeaponsIDs(): ItemID[]
  GetEquippedQuickSlots(): InventoryItemData[]
  GetEquippedConsumables(): InventoryItemData[]
  GetPlayerCraftingMaterials(): InventoryItemData[]
  GetPlayerItemsByType(type: gamedataItemType, skipEquippedItems?: Bool, additionalTagFilters?: CName[], filteredItems?: ItemModParams[]): InventoryItemData[]
  GetPlayerItemsIDsByType(type: gamedataItemType, items: ItemID[]): void
  GetPlayerInventory(additionalTagFilters?: CName[]): gameItemData[]
  EquipmentAreaToItemTypes(area: gamedataEquipmentArea): gamedataItemType[]
  GetPlayerItemsIDsByTypes(types: gamedataItemType[], items: ItemID[]): void
  GetPlayerItemsIDs(item?: InventoryItemData, slotID?: TweakDBID, itemType?: gamedataItemType, equipmentArea?: gamedataEquipmentArea, skipEquipped?: Bool, items?: ItemID[]): void
  GetPlayerItemsIDsFast(item?: ItemID, slotID?: TweakDBID, itemType?: gamedataItemType, equipmentArea?: gamedataEquipmentArea, skipEquipped?: Bool, items?: ItemID[]): void
  GetHotkeyItemData(hotkey: EHotkey): InventoryItemData
  GetHotkeyTypeForItemID(itemID: ItemID, hotkey: EHotkey): Bool
  GetHotkeyTypeFromItemID(itemID: ItemID, hotkey: EHotkey): Bool
  GetInventoryItemData(itemData: gameItemData): InventoryItemData
  GetInventoryItemDataForDryItem(itemData: gameItemData): InventoryItemData
  ShouldItemBeFiltered(item: ItemID, filteredItems: ItemModParams[]): Bool
  GetQunatityToFilterOut(item: ItemID, filteredItems: ItemModParams[]): number
  GetInventoryItemData(owner: GameObject, itemData: gameItemData, forceShowCurrencyOnHUDTooltip?: Bool, isRadialQuerying?: Bool): InventoryItemData
  GetInventoryItemDataFromItemRecord(itemRecord: Item_Record): InventoryItemData
  GetPartInventoryItemData(owner: GameObject, itemData: gameItemData): InventoryItemData
  GetPartInventoryItemData(owner: GameObject, slotData: SPartSlots, itemData: gameItemData): InventoryItemData
  GetPlayerAmmoCount(targetItem: TweakDBID): number
  GetPlayerAmmoCount(itemRecord: Item_Record): number
  GetAmmoTypeForWeapon(targetItem: TweakDBID): TweakDBID
  GetPartInventoryItemData(owner: GameObject, itemId: ItemID, innerItemData: InnerItemData, itemData?: gameItemData, record?: Item_Record): InventoryItemData
  GetTooltipDataForInventoryItem(tooltipItemData: InventoryItemData, equipped: Bool, iconErrorInfo: DEBUG_IconErrorInfo, vendorItem?: Bool, overrideRarity?: Bool): InventoryTooltipData
  GetTooltipDataForInventoryItem(tooltipItemData: InventoryItemData, equipped: Bool, vendorItem?: Bool, overrideRarity?: Bool): InventoryTooltipData
  GetMinimalTooltipData(): void
  GetGrenadeTooltipData(tooltipItemData: InventoryItemData): InventoryTooltiData_GrenadeData
  GetGrenadeTooltipData(itemID: TweakDBID, itemData: gameItemData): InventoryTooltiData_GrenadeData
  GetGrenadeContinousEffector(attackRecord: Attack_Record): ContinuousAttackEffector_Record
  GetGrenadeTotalDamageFromStats(itemData: gameItemData): number
  GetGrenadeDamageStats(itemData: gameItemData, outputArray: InventoryTooltiData_GrenadeDamageData[]): void
  GetGrenadeDoTTickDamage(continuousAttackEffector: ContinuousAttackEffector_Record): number
  GetGrenadeRange(grenadeRecord: Grenade_Record): number
  GetGrenadeDuration(attackRecord: Attack_Record): number
  GetGrenadeDelay(continuousAttackEffector: ContinuousAttackEffector_Record): number
  GetIgnoredDurationStats(): StatusEffect_Record[]
  GetQuickhackTooltipData(tooltipItemData: InventoryItemData): InventoryTooltipData_QuickhackData
  GetQuickhackTooltipData(itemID: TweakDBID): InventoryTooltipData_QuickhackData
  GetQuickhackBaseObjectActionRecord(): ObjectAction_Record
  GetBaseQuickhackCooldownRecord(): StatModifierGroup_Record
  StatModifiersExcept(statModifiers: StatModifier_Record[], except: StatModifier_Record[]): StatModifier_Record[]
  /** @noSelf **/
  ProcessQuickhackEffects(player: GameObject, statusEffectRecord: StatusEffect_Record, result: DamageEffectUIEntry[]): Bool
  GetTooltipForEmptySlot(slot: string): MessageTooltipData
  GetPlayerItemStats(itemId: ItemID, compareItemId?: ItemID): ItemViewData
  GetItemStatsByData(itemData: gameItemData, compareWithData?: gameItemData): ItemViewData
  GetSellPrice(owner: GameObject, itemID: ItemID): number
  GetSellPrice(owner: GameObject, itemData: gameItemData): number
  GetSellPrice(itemID: ItemID): number
  GetSellPrice(itemData: gameItemData): number
  GetBuyPrice(owner: GameObject, itemID: ItemID): number
  GetBuyPrice(itemID: ItemID): number
  GetPlayerStats(statsList: StatViewData[]): void
  GetPlayerInventoryStats(statsList: StatViewData[]): void
  GetPlayerDPSStats(statsList: StatViewData[]): void
  GetPlayerArmorStats(statsList: StatViewData[]): void
  GetPlayerHealthStats(statsList: StatViewData[]): void
  GetPlayerOtherStats(statsList: StatViewData[]): void
  GetPlayerStatsFromMap(statsList: StatViewData[], uiMap: string): void
  GetLocalizedStatName(statRecord: Stat_Record): string
  SetActiveWeapon(activeWeapon: ItemID): void
  MarkToRebuild(): void
  EquipItem(itemId: ItemID, slot: number): void
  UnequipItem(equipArea: gamedataEquipmentArea, slot: number): void
  InstallPart(itemData: InventoryItemData, partID: ItemID, slotID: TweakDBID): void
  CanInstallPart(itemData: InventoryItemData): Bool
  InstallPart(itemId: ItemID, partId: ItemID, slotID: TweakDBID): void
  RemovePart(itemId: ItemID, slotId: TweakDBID): void
  SwapPart(itemId: ItemID, partId: ItemID, slotId: TweakDBID): void
  IsAttachmentDedicated(slotID: TweakDBID): Bool
  IsFilledWithDummyPart(innerItemData: InnerItemData): Bool
  GetAttachements(owner: GameObject, itemIData: gameItemData, attachments: InventoryItemAttachments[], abilities: InventoryItemAbility[]): void
  GetAttachements(owner: GameObject, itemId: ItemID, itemData: gameItemData, attachments: InventoryItemAttachments[], abilities: InventoryItemAbility[]): void
  GetAttachements(owner: GameObject, itemData: gameItemData, usedSlots: TweakDBID[], emptySlots: TweakDBID[], mods: MinimalItemTooltipModData[], dedicatedMods: MinimalItemTooltipModAttachmentData[]): void
  FillSpecialAbilities(itemRecord: Item_Record, abilities: InventoryItemAbility[], itemData?: gameItemData, partItemData?: InnerItemData): void
  GetStatsUIMapName(itemData: gameItemData): string
  GetStatsUIMapName(itemId: ItemID): string
  GetStatsList(mapPath: TweakDBID, itemData: InnerItemData, primeStatsList: StatViewData[], secondStatsList: StatViewData[], compareWithData?: gameItemData): void
  GetStatsList(mapPath: TweakDBID, itemData: gameItemData, primeStatsList: StatViewData[], secondStatsList: StatViewData[], compareWithData?: gameItemData): void
  GetStatsList(mapPath: TweakDBID, itemData: InventoryItemData, primeStatsList: StatViewData[], secondStatsList: StatViewData[], compareWithData: InventoryItemData): void
  GetStatsList(mapPath: TweakDBID, statProvider: StatProvider, primeStatsList: StatViewData[], secondStatsList: StatViewData[], compareWithData?: StatProvider): void
  FillStatsList(statProvider: StatProvider, statRecords: Stat_Record[], statList: StatViewData[], compareStatRecords: Stat_Record[], compareWithData?: StatProvider): void
  PushComparisonTooltipsData(tooltipsData: ATooltipData[], equippedItem: InventoryItemData, inspectedItemData: InventoryItemData, iconErrorInfo?: DEBUG_IconErrorInfo, overrideRarity?: Bool): void
  PushIdentifiedComparisonTooltipsData(tooltipsData: ATooltipData[], name1: CName, name2: CName, equippedItem: InventoryItemData, inspectedItemData: InventoryItemData, iconErrorInfo?: DEBUG_IconErrorInfo, overrideRarity?: Bool): void
  PushIdentifiedProgramComparisionTooltipsData(tooltipsData: ATooltipData[], name1: CName, name2: CName, equippedItem: InventoryItemData, inspectedItemData: InventoryItemData, iconErrorInfo?: DEBUG_IconErrorInfo, overrideRarity?: Bool): void
  PushIdentifiedProgramComparisionTooltipsData(tooltipsData: ATooltipData[], equippedItem: InventoryItemData, inspectedItemData: InventoryItemData, iconErrorInfo?: DEBUG_IconErrorInfo, overrideRarity?: Bool): void
  PushProgramComparisionTooltipsData(tooltipsData: ATooltipData[], equippedItem: InventoryItemData, inspectedItemData: InventoryItemData, iconErrorInfo?: DEBUG_IconErrorInfo, overrideRarity?: Bool): void
  GetProgramComparisionTooltipsData(equippedItem: InventoryItemData, inspectedItemData: InventoryItemData, equipped?: Bool, iconErrorInfo?: DEBUG_IconErrorInfo, overrideRarity?: Bool): InventoryTooltipData
  GetComparisonTooltipsData(equippedItem: InventoryItemData, inspectedItemData: InventoryItemData, equipped?: Bool, iconErrorInfo?: DEBUG_IconErrorInfo, overrideRarity?: Bool): InventoryTooltipData
  GetMinimalComparisionLootingData(): void
  CanCompareItems(itemId: ItemID, compareItemId: ItemID): Bool
  GetDPS(data: InventoryItemData): number
  GetItemsToCompare(equipmentArea: gamedataEquipmentArea): InventoryItemData[]
  GetItemsIDsToCompare(equipmentArea: gamedataEquipmentArea): ItemID[]
  IsAreaSelfComparable(equipmentArea: gamedataEquipmentArea): Bool
  GetItemsToCompare(item: InventoryItemData): InventoryItemData[]
  GetItemToCompare(equipmentArea: gamedataEquipmentArea): InventoryItemData
  GetItemIDToCompare(equipmentArea: gamedataEquipmentArea): ItemID
  GetPrefferedEquipedItemToCompare(item: InventoryItemData): number
  GetPrefferedEquipedItemToCompare(item: InventoryItemData, itemsToCompare: InventoryItemData[]): number
  GetPrefferedEquipedItemToCompareRef(item: InventoryItemData, itemsToCompare: InventoryItemData[]): number
  GetPrefferedEquipedItemIDToCompare(item: InventoryItemData, itemsToCompare: InventoryItemData[]): number
  GetPrefferedEquipedItemIDToCompare(item: gameItemData, itemRecord: Item_Record, equipmentArea: gamedataEquipmentArea, idsToCompare: ItemID[]): number
  GetEquippedCounterpartForInventroyItem(inspectedItemData: InventoryItemData): InventoryItemData
  GetAmmoForWeaponType(itemData: InventoryItemData): number
  GetPrefferedComparisonItem(item: InventoryItemData, comparableItems: InventoryItemData[]): InventoryItemData
  GetPrefferedComparisonItemID(item: gameItemData, itemRecord: Item_Record, equipmentArea: gamedataEquipmentArea, comparableItems: ItemID[]): ItemID
  GetComparisonItems(item: InventoryItemData): InventoryItemData[]
  GetComparisonItemsIDs(itemID: ItemID, equipmentArea: gamedataEquipmentArea): ItemID[]
  GetAllComparisonItems(equipmentArea: gamedataEquipmentArea): InventoryItemData[]
  GetPrefferedComparableItem(item: InventoryItemData, comparableItems: InventoryItemData[]): InventoryItemData
  FilterOutEmptyItems(items: InventoryItemData[]): InventoryItemData[]
  FilterOutInvalidIDs(ids: ItemID[]): ItemID[]
  FilterComparableItems(itemToCompare: ItemID, items: InventoryItemData[]): InventoryItemData[]
  FilterComparableItemsIDs(itemToCompare: ItemID, ids: ItemID[]): ItemID[]
  GetAmmoCountForAllAmmoTypes(): InventoryItemData[]
  GetCraftingCountForAllCraftingMaterialTypes(): InventoryItemData[]
  GetCommonsCraftingMaterialTypes(): InventoryItemData[]
  GetHackingCraftingMaterialTypes(): InventoryItemData[]
  GetItemFromRecord(tweakPath: string): InventoryItemData
  GetItemFromRecord(id: TweakDBID): InventoryItemData
  GetAllCyberwareAbilities(): AbilityData[]
  GetAbilityData(itemId: ItemID): AbilityData
  GetExternalGameItemData(ownerId: EntityID, externalItemId: ItemID): gameItemData
  GetExternalGameObject(entityId: EntityID): GameObject
  GetExternalItemData(ownerId: EntityID, externalItemId: ItemID, forceShowCurrencyOnHUDTooltip?: Bool): InventoryItemData
  GetExternalItemData(ownerId: EntityID, externalItem: gameItemData, forceShowCurrencyOnHUDTooltip?: Bool): InventoryItemData
  GetEquipmentAreaLocalizedName(equipmentArea: gamedataEquipmentArea): string
  GetNumberOfSlots(equipmentArea: gamedataEquipmentArea): number
  SortDataByRarity(items: InventoryItemData[]): InventoryItemData[]
  GetExternalItemStats(ownerId: EntityID, externalItemId: ItemID, compareItemId?: ItemID): ItemViewData
  /** @noSelf **/
  GetInventoryEquipmentAreas(): gamedataEquipmentArea[]
  /** @noSelf **/
  GetInventoryCyberwareAreas(): gamedataEquipmentArea[]
  /** @noSelf **/
  GetInventoryWeaponTypes(): gamedataItemType[]
  /** @noSelf **/
  GetAttachmentsTypes(): gamedataItemType[]
  /** @noSelf **/
  IsAttachmentType(type: gamedataItemType): Bool
  /** @noSelf **/
  GetInventoryPocketAreas(): gamedataEquipmentArea[]
  /** @noSelf **/
  IsEquipmentAreaCyberware(areaType: gamedataEquipmentArea): Bool
  /** @noSelf **/
  IsEquipmentAreaCyberware(areaTypes: gamedataEquipmentArea[]): Bool
  /** @noSelf **/
  GetAllCyberwareAreas(): gamedataEquipmentArea[]
  /** @noSelf **/
  GetItemTypesForSorting(): gamedataItemType[]
  /** @noSelf **/
  GetRarityTypesForSorting(): gamedataQuality[]
  /** @noSelf **/
  GetWeaponSlotsNum(): number
  /** @noSelf **/
  GetQuickSlotsNum(): number
  /** @noSelf **/
  GetConsumablesNum(): number
  /** @noSelf **/
  GetAttachmentSlotsForInventory(): TweakDBID[]
  /** @noSelf **/
  IsProgramSlot(slotID: TweakDBID): Bool
  FilterOutWorsePrograms(items: ItemID[]): ItemID[]
  DistinctPrograms(items: ItemID[]): ItemID[]
  FilterHotkeyConsumables(items: ItemID[]): ItemID[]
  /** @noSelf **/
  IsItemBlacklisted(itemData: gameItemData, forceShowCurrencyOnHUDTooltip?: Bool, isRadialQuerying?: Bool, additionalTags?: CName[]): Bool
  /** @noSelf **/
  IsItemCraftingMaterial(itemData: gameItemData): Bool
  /** @noSelf **/
  GetWeaponDamageType(statList: StatViewData[]): gamedataDamageType
  SetPlayerStats(inventoryItemData: InventoryItemData): void
  HasPlayerSmartGunLink(): Bool
  GetPlayerLevel(): number
  GetPlayerStrength(): number
  GetPlayerReflex(): number
  GetPlayerStreetCred(): number
  /** @noSelf **/
  HasPlayerSmartGunLink(player: PlayerPuppet, statsystem: StatsSystem): Bool
  /** @noSelf **/
  PlayerLevel(player: PlayerPuppet, statsystem: StatsSystem): number
  /** @noSelf **/
  PlayerStrength(player: PlayerPuppet, statsystem: StatsSystem): number
  /** @noSelf **/
  PlayerReflexes(player: PlayerPuppet, statsystem: StatsSystem): number
  /** @noSelf **/
  PlayerStreetCred(player: PlayerPuppet, statsSystem: StatsSystem): number
  CanUninstallMod(itemType: gamedataItemType, slot: TweakDBID): Bool
  IsNonModifableSlot(slot: TweakDBID): Bool
  GetGame(): GameInstance
  /** @noSelf **/
  GetAttachmentSlotByItemID(itemData: InventoryItemData, attachmentID: ItemID): TweakDBID
}

declare interface inkIGameController extends IScriptable {

  GetRootWidget(): inkWidget
  GetRootCompoundWidget(): inkCompoundWidget
  GetWidget(path: inkWidgetPath): inkWidget
  GetController(path?: inkWidgetPath): inkLogicController
  GetControllerByType(controllerType: CName, path?: inkWidgetPath): inkLogicController
  GetControllers(path?: inkWidgetPath): inkLogicController[]
  GetControllersByType(controllerType: CName, path?: inkWidgetPath): inkLogicController[]
  GetNumControllers(path?: inkWidgetPath): number
  GetNumControllersOfType(controllerType: CName, path?: inkWidgetPath): number
  RequestSetFocus(widget: inkWidget): void
  GetChildWidgetByPath(widgetNamePath: CName): inkWidget
  GetChildControllerByPath(widgetNamePath: CName): inkLogicController
  GetWidget(widgetNamePath: CName): inkWidget
  GetController(widgetNamePath: CName): inkLogicController
  SpawnFromLocal(parentWidget: inkWidget, libraryID: CName): inkWidget
  SpawnFromExternal(parentWidget: inkWidget, resourcePath: ResRef, libraryID: CName): inkWidget
  AsyncSpawnFromLocal(parentWidget: inkWidget, libraryID: CName, callbackObject?: IScriptable, callbackFunctionName?: CName, userData?: IScriptable): void
  AsyncSpawnFromExternal(parentWidget: inkWidget, resourcePath: ResRef, libraryID: CName, callbackObject?: IScriptable, callbackFunctionName?: CName, userData?: IScriptable): void
  HasLocalLibrary(libraryID: CName): Bool
  HasExternalLibrary(resourcePath: ResRef, libraryID?: CName): Bool
  CallCustomCallback(eventName: CName): void
  RegisterToCallback(eventName: CName, object: IScriptable, functionName: CName): void
  UnregisterFromCallback(eventName: CName, object: IScriptable, functionName: CName): void
  RegisterToGlobalInputCallback(eventName: CName, object: IScriptable, functionName: CName): void
  UnregisterFromGlobalInputCallback(eventName: CName, object: IScriptable, functionName: CName): void
  PlayLibraryAnimation(animationName: CName, playbackOptions?: inkAnimOptions): inkAnimProxy
  PlayLibraryAnimationOnTargets(animationName: CName, targets: inkWidgetsSet, playbackOptions?: inkAnimOptions): inkAnimProxy
  PlayLibraryAnimationOnAutoSelectedTargets(animationName: CName, target: inkWidget, playbackOptions?: inkAnimOptions): inkAnimProxy
  GetSystemRequestsHandler(): inkISystemRequestsHandler
  QueueEvent(evt: Event): void
  ReadUICondition(condition: gamedataUICondition): Bool
  FindLibraryID(widgetRecord: WidgetDefinition_Record, screenTypeRecord?: DeviceScreenType_Record, styleRecord?: WidgetStyle_Record, id?: CName, path?: ResRef): CName
  RequestWidgetFromLibrary(parentWidget: inkWidget, widgetRecord: WidgetDefinition_Record, screenTypeRecord?: DeviceScreenType_Record, styleRecord?: WidgetStyle_Record, id?: CName, path?: ResRef, spawnData?: AsyncSpawnData): CName
  FindWidgetInLibrary(parentWidget: inkWidget, widgetRecord: WidgetDefinition_Record, screenTypeRecord?: DeviceScreenType_Record, styleRecord?: WidgetStyle_Record, id?: CName, path?: ResRef): inkWidget
  FindWidgetDataInLibrary(parentWidget: inkWidget, widgetRecord: WidgetDefinition_Record, screenTypeRecord?: DeviceScreenType_Record, styleRecord?: WidgetStyle_Record, id?: CName, path?: ResRef): SWidgetPackageBase
  CreateWidget(parentWidget: inkWidget, id: CName, path: ResRef): inkWidget
  CreateWidgetAsync(parentWidget: inkWidget, id: CName, path: ResRef, spawnData: AsyncSpawnData): Bool
}

declare interface inkWidget extends IScriptable {

  GetName(): CName
  SetName(widgetName: CName): void
  GetController(): inkLogicController
  GetControllerByType(controllerType: CName): inkLogicController
  GetControllerByBaseType(controllerType: CName): inkLogicController
  GetControllers(): inkLogicController[]
  GetControllersByType(controllerType: CName): inkLogicController[]
  GetNumControllers(): number
  GetNumControllersOfType(controllerType: CName): number
  GetStylePath(): ResRef
  SetStyle(styleResPath: ResRef): void
  GetState(): CName
  SetState(state: CName): void
  /** @noSelf **/
  DefaultState(): CName
  IsVisible(): Bool
  SetVisible(visible: Bool): void
  IsInteractive(): Bool
  SetInteractive(value: Bool): void
  SetLayout(layout: inkWidgetLayout): void
  GetAffectsLayoutWhenHidden(): Bool
  SetAffectsLayoutWhenHidden(affectsLayoutWhenHidden: Bool): void
  GetMargin(): inkMargin
  SetMargin(margin: inkMargin): void
  SetMargin(left: number, top: number, right: number, bottom: number): void
  UpdateMargin(left: number, top: number, right: number, bottom: number): void
  GetPadding(): inkMargin
  SetPadding(padding: inkMargin): void
  SetPadding(left: number, top: number, right: number, bottom: number): void
  GetHAlign(): inkEHorizontalAlign
  SetHAlign(hAlign: inkEHorizontalAlign): void
  GetVAlign(): inkEVerticalAlign
  SetVAlign(vAlign: inkEVerticalAlign): void
  GetAnchor(): inkEAnchor
  SetAnchor(anchor: inkEAnchor): void
  GetAnchorPoint(): Vector2
  SetAnchorPoint(anchorPoint: Vector2): void
  SetAnchorPoint(x: number, y: number): void
  GetSizeRule(): inkESizeRule
  SetSizeRule(sizeRule: inkESizeRule): void
  GetSizeCoefficient(): number
  SetSizeCoefficient(sizeCoefficient: number): void
  GetFitToContent(): Bool
  SetFitToContent(fitToContent: Bool): void
  GetSize(): Vector2
  SetSize(size: Vector2): void
  SetSize(width: number, height: number): void
  GetWidth(): number
  GetHeight(): number
  SetWidth(width: number): void
  SetHeight(height: number): void
  GetDesiredSize(): Vector2
  GetDesiredWidth(): number
  GetDesiredHeight(): number
  GetTintColor(): HDRColor
  SetTintColor(color: HDRColor): void
  SetTintColor(r: number, g: number, b: number, a: number): void
  SetTintColor(color: Color): void
  GetOpacity(): number
  SetOpacity(opacity: number): void
  GetRenderTransformPivot(): Vector2
  SetRenderTransformPivot(pivot: Vector2): void
  SetRenderTransformPivot(x: number, y: number): void
  SetScale(scale: Vector2): void
  GetScale(): Vector2
  SetShear(shear: Vector2): void
  GetShear(): Vector2
  SetRotation(angleInDegrees: number): void
  GetRotation(): number
  SetTranslation(translationVector: Vector2): void
  GetTranslation(): Vector2
  ChangeTranslation(translationVector: Vector2): void
  SetTranslation(x: number, y: number): void
  PlayAnimation(animationDefinition: inkAnimDef): inkAnimProxy
  PlayAnimationWithOptions(animationDefinition: inkAnimDef, playbackOptions: inkAnimOptions): inkAnimProxy
  StopAllAnimations(): void
  CallCustomCallback(eventName: CName): void
  RegisterToCallback(eventName: CName, object: IScriptable, functionName: CName): void
  UnregisterFromCallback(eventName: CName, object: IScriptable, functionName: CName): void
  SetEffectEnabled(effectType: inkEffectType, effectName: CName, enabled: Bool): void
  GetEffectEnabled(effectType: inkEffectType, effectName: CName): Bool
  GetEffectParamValue(effectType: inkEffectType, effectName: CName, paramName: CName): number
  SetEffectParamValue(effectType: inkEffectType, effectName: CName, paramName: CName, paramValue: number): number
  HasUserDataObject(userDataTypeName: CName): Bool
  GetUserDataObjectCount(userDataTypeName: CName): number
  GetUserData(userDataTypeName: CName): inkUserData
  GetUserDataArray(userDataTypeName: CName): inkUserData[]
  GatherUserData(userDataTypeName: CName, userDataCollection: inkUserData[]): void
  BindProperty(propertyName: CName, stylePath: CName): Bool
  UnbindProperty(propertyName: CName): Bool
  Reparent(newParent: inkCompoundWidget, index?: number): void
}

declare interface inkILogicController extends IScriptable {

}

declare interface inkMargin {

  /** @noSelf **/
  SetUniform(self: inkMargin, uniformThickness: number): void
}

declare interface Vector2 {

}

declare interface Color {

  /** @noSelf **/
  ToHDRColorDirect(color: Color): HDRColor
}

declare interface HDRColor {

}

declare interface SWidgetPackageBase {

  /** @noSelf **/
  ResolveWidgetTweakDBData(widgetTweakDBID: TweakDBID, id: CName, path: ResRef): Bool
  /** @noSelf **/
  GetLibraryPath(widgetDef: WidgetDefinition_Record): ResRef
  /** @noSelf **/
  GetLibraryID(widgetDef: WidgetDefinition_Record, screenTypeDef: DeviceScreenType_Record, styleDef: WidgetStyle_Record): string
  /** @noSelf **/
  GetLibraryIDPackage(widgetDef: WidgetDefinition_Record, screenTypeDef: DeviceScreenType_Record, styleDef: WidgetStyle_Record): string[]
}

declare interface WidgetStyle_Record extends TweakDBRecord {

  EnumName(): string
}

declare interface WidgetRatio_Record extends TweakDBRecord {

  EnumName(): string
}

declare interface AsyncSpawnData extends IScriptable {

  Initialize(callbackTarget: IScriptable, functionName: CName, widgetData: Variant, controller?: IScriptable): void
}

declare interface worlduiIGameController extends inkIGameController {

  ProjectWorldToScreen(worldPosition: Vector4): Vector2
  QueueBroadcastEvent(evt: Event): void
  ShowGameNotification(data: inkGameNotificationData): inkGameNotificationToken
}

declare interface inkUserData extends IScriptable {

}

declare interface inkGameController extends worlduiIGameController {

  GetOwnerEntity(): Entity
  GetPlayerControlledObject(): GameObject
  GetBlackboardSystem(): BlackboardSystem
  PlaySound(widgetName: CName, eventName: CName, actionKey?: CName): void
  GetUIBlackboard(): IBlackboard
  GetPSMBlackboard(playerPuppet: GameObject): IBlackboard
  RegisterDebugCommand(debugFunctionName: CName): void
  SetCursorContext(context: CName, data?: inkUserData): void
  SetCursorOverWidget(widget: inkWidget): void
}

declare interface ItemModificationSystem extends ScriptableSystem {

  OnAttach(): void
  InstallItemPart(obj: GameObject, itemID: ItemID, partItemID: ItemID, slotID?: TweakDBID): Bool
  RemoveItemPart(obj: GameObject, itemID: ItemID, slotID: TweakDBID, shouldUpdateEntity: Bool): ItemID
  RemoveLowerShards(obj: GameObject, item: ItemID, shardID: ItemID): void
  SetPingTutorialFact(itemID: ItemID, isUnequip: Bool, obj: GameObject): void
  RemovePartEquipGLPs(obj: GameObject, itemID: ItemID): void
  SwapItemPart(obj: GameObject, itemID: ItemID, partItemID: ItemID, slotID: TweakDBID): Bool
  /** @noSelf **/
  IsBasePart(obj: GameObject, itemID: ItemID, slotID: TweakDBID): Bool
  /** @noSelf **/
  IsItemSlotTaken(obj: GameObject, itemID: ItemID, slotID: TweakDBID): Bool
  /** @noSelf **/
  GetAllSlots(obj: GameObject, item: ItemID): SPartSlots[]
  /** @noSelf **/
  GetAllSlots(itemData: gameItemData): SPartSlots[]
  /** @noSelf **/
  GetattachementFromBlueprint(blueprintRecord: ItemBlueprintElement_Record, attachments: AttachmentSlot_Record[]): void
  /** @noSelf **/
  HasBetterShardInstalled(obj: GameObject, cyberdeckID: ItemID, shardID: ItemID): Bool
  SendCallback(): void
  OnInstallItemPart(request: InstallItemPart): void
  OnRemoveItemPart(request: RemoveItemPart): void
  OnSwapItemPart(request: SwapItemPart): void
}

declare interface ItemType_Record extends TweakDBRecord {

  Name(): CName
  LocalizedType(): CName
  AnimFeatureIndex(): number
  Type(): gamedataItemType
}

declare interface InnerItemData {

  /** @noSelf **/
  GetItemID(innerItemData: InnerItemData): ItemID
  /** @noSelf **/
  GetSlotID(innerItemData: InnerItemData): TweakDBID
  /** @noSelf **/
  GetStaticData(innerItemData: InnerItemData): Item_Record
  /** @noSelf **/
  HasStatData(innerItemData: InnerItemData, type: gamedataStatType): Bool
  /** @noSelf **/
  GetStatValueByType(innerItemData: InnerItemData, type: gamedataStatType): number
}

declare interface Quality_Record extends TweakDBRecord {

  Name(): string
  StatModifier(): StatModifier_Record
  Value(): number
  Type(): gamedataQuality
}

declare interface PartUninstallRequest extends PlayerScriptableSystemRequest {

}

declare interface PartInstallRequest extends PlayerScriptableSystemRequest {

}

declare interface SPartSlots {

}

declare interface ItemBlueprintElement_Record extends TweakDBRecord {

  Slot(): AttachmentSlot_Record
  PrereqID(): IPrereq_Record
  ChildElements(outList: ItemBlueprintElement_Record[]): void
  GetChildElementsCount(): number
  GetChildElementsItem(index: number): ItemBlueprintElement_Record
  ChildElementsContains(item: ItemBlueprintElement_Record): Bool
}

declare interface ItemBlueprint_Record extends TweakDBRecord {

  RootElement(): ItemBlueprintElement_Record
}

declare interface SlotItemPartPreset_Record extends TweakDBRecord {

  Slot(): AttachmentSlot_Record
  ItemPartPreset(): Item_Record
  ItemPartList(outList: ItemPartListElement_Record[]): void
  GetItemPartListCount(): number
  GetItemPartListItem(index: number): ItemPartListElement_Record
  ItemPartListContains(item: ItemPartListElement_Record): Bool
}

declare interface UI_ItemModSystemDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface InstallItemPart extends ScriptableSystemRequest {

  Set(object: GameObject, item: ItemID, part: ItemID, placementSlotID: TweakDBID): void
}

declare interface RemoveItemPart extends ScriptableSystemRequest {

  Set(object: GameObject, item: ItemID, slot: TweakDBID): void
}

declare interface SwapItemPart extends ScriptableSystemRequest {

  Set(object: GameObject, item: ItemID, part: ItemID, slot: TweakDBID): void
}

declare interface UILocalizationMap extends IScriptable {

  Init(): void
  AddRecord(tag: CName, value: string): void
  Localize(tag: CName): string
}

declare interface UILocRecord {

}

declare interface UI_EquipmentDataDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface UI_EquipmentDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface SlotWeaponData {

}

declare interface SlotDataHolder extends IScriptable {

}

declare interface SLoadout {

}

declare interface SEquipArea {

}

declare interface SEquipSlot {

}

declare interface InventoryItemData {

  /** @noSelf **/
  SetEmpty(self: InventoryItemData, empty: Bool): void
  /** @noSelf **/
  IsEmpty(self: InventoryItemData): Bool
  /** @noSelf **/
  SetID(self: InventoryItemData, id: ItemID): void
  /** @noSelf **/
  GetID(self: InventoryItemData): ItemID
  /** @noSelf **/
  SetSlotID(self: InventoryItemData, id: TweakDBID): void
  /** @noSelf **/
  GetSlotID(self: InventoryItemData): TweakDBID
  /** @noSelf **/
  SetName(self: InventoryItemData, Name: string): void
  /** @noSelf **/
  GetName(self: InventoryItemData): string
  /** @noSelf **/
  SetQuality(self: InventoryItemData, quality: CName): void
  /** @noSelf **/
  GetQuality(self: InventoryItemData): CName
  /** @noSelf **/
  SetQuantity(self: InventoryItemData, quantity: number): void
  /** @noSelf **/
  GetQuantity(self: InventoryItemData): number
  /** @noSelf **/
  SetAmmo(self: InventoryItemData, ammo: number): void
  /** @noSelf **/
  GetAmmo(self: InventoryItemData): number
  /** @noSelf **/
  SetShape(self: InventoryItemData, shape: EInventoryItemShape): void
  /** @noSelf **/
  GetShape(self: InventoryItemData): EInventoryItemShape
  /** @noSelf **/
  SetItemShape(self: InventoryItemData, shape: EInventoryItemShape): void
  /** @noSelf **/
  GetItemShape(self: InventoryItemData): EInventoryItemShape
  /** @noSelf **/
  SetIconPath(self: InventoryItemData, iconPath: string): void
  /** @noSelf **/
  GetIconPath(self: InventoryItemData): string
  /** @noSelf **/
  SetCategoryName(self: InventoryItemData, categoryName: string): void
  /** @noSelf **/
  GetCategoryName(self: InventoryItemData): string
  /** @noSelf **/
  SetItemType(self: InventoryItemData, itemType: gamedataItemType): void
  /** @noSelf **/
  GetItemType(self: InventoryItemData): gamedataItemType
  /** @noSelf **/
  SetLocalizedItemType(self: InventoryItemData, localizedItemType: string): void
  /** @noSelf **/
  GetLocalizedItemType(self: InventoryItemData): string
  /** @noSelf **/
  SetDescription(self: InventoryItemData, description: string): void
  /** @noSelf **/
  GetDescription(self: InventoryItemData): string
  /** @noSelf **/
  SetAdditionalDescription(self: InventoryItemData, description: string): void
  /** @noSelf **/
  GetAdditionalDescription(self: InventoryItemData): string
  /** @noSelf **/
  SetPrice(self: InventoryItemData, price: number): void
  /** @noSelf **/
  GetPrice(self: InventoryItemData): number
  /** @noSelf **/
  SetBuyPrice(self: InventoryItemData, price: number): void
  /** @noSelf **/
  GetBuyPrice(self: InventoryItemData): number
  /** @noSelf **/
  SetUnlockProgress(self: InventoryItemData, unlockProgress: number): void
  /** @noSelf **/
  GetUnlockProgress(self: InventoryItemData): number
  /** @noSelf **/
  SetRequiredLevel(self: InventoryItemData, requiredLevel: number): void
  /** @noSelf **/
  GetRequiredLevel(self: InventoryItemData): number
  /** @noSelf **/
  SetItemLevel(self: InventoryItemData, itemLevel: number): void
  /** @noSelf **/
  GetItemLevel(self: InventoryItemData): number
  /** @noSelf **/
  SetDamageType(self: InventoryItemData, damageType: gamedataDamageType): void
  /** @noSelf **/
  GetDamageType(self: InventoryItemData): gamedataDamageType
  /** @noSelf **/
  SetEquipmentArea(self: InventoryItemData, equipmentArea: gamedataEquipmentArea): void
  /** @noSelf **/
  GetEquipmentArea(self: InventoryItemData): gamedataEquipmentArea
  /** @noSelf **/
  SetComparedQuality(self: InventoryItemData, comparedQuality: gamedataQuality): void
  /** @noSelf **/
  GetComparedQuality(self: InventoryItemData): gamedataQuality
  /** @noSelf **/
  SetIsPart(self: InventoryItemData, isPart: Bool): void
  /** @noSelf **/
  IsPart(self: InventoryItemData): Bool
  /** @noSelf **/
  SetIsCraftingMaterial(self: InventoryItemData, isCraftingMaterial: Bool): void
  /** @noSelf **/
  IsCraftingMaterial(self: InventoryItemData): Bool
  /** @noSelf **/
  SetIsEquipped(self: InventoryItemData, isEquipped: Bool): void
  /** @noSelf **/
  IsEquipped(self: InventoryItemData): Bool
  /** @noSelf **/
  SetIsNew(self: InventoryItemData, isNew: Bool): void
  /** @noSelf **/
  IsNew(self: InventoryItemData): Bool
  /** @noSelf **/
  SetIsAvailable(self: InventoryItemData, isAvailable: Bool): void
  /** @noSelf **/
  IsAvailable(self: InventoryItemData): Bool
  /** @noSelf **/
  SetIsVendorItem(self: InventoryItemData, isVendorItem: Bool): void
  /** @noSelf **/
  IsVendorItem(self: InventoryItemData): Bool
  /** @noSelf **/
  SetIsBroken(self: InventoryItemData, isBroken: Bool): void
  /** @noSelf **/
  IsBroken(self: InventoryItemData): Bool
  /** @noSelf **/
  SetSlotIndex(self: InventoryItemData, slotIndex: number): void
  /** @noSelf **/
  GetSlotIndex(self: InventoryItemData): number
  /** @noSelf **/
  SetPositionInBackpack(self: InventoryItemData, positionInBackpack: number): void
  /** @noSelf **/
  GetPositionInBackpack(self: InventoryItemData): number
  /** @noSelf **/
  SetIconGender(self: InventoryItemData, iconGender: ItemIconGender): void
  /** @noSelf **/
  GetIconGender(self: InventoryItemData): ItemIconGender
  /** @noSelf **/
  SetGameItemData(self: InventoryItemData, gameItemData: gameItemData): void
  /** @noSelf **/
  GetGameItemData(self: InventoryItemData): gameItemData
  /** @noSelf **/
  SetHasPlayerSmartGunLink(self: InventoryItemData, hasPlayerSmartGunLink: Bool): void
  /** @noSelf **/
  HasPlayerSmartGunLink(self: InventoryItemData): Bool
  /** @noSelf **/
  SetPlayerLevel(self: InventoryItemData, playerLevel: number): void
  /** @noSelf **/
  GetPlayerLevel(self: InventoryItemData): number
  /** @noSelf **/
  SetPlayerStrenght(self: InventoryItemData, playerStrenght: number): void
  /** @noSelf **/
  GetPlayerStrenght(self: InventoryItemData): number
  /** @noSelf **/
  SetPlayerReflexes(self: InventoryItemData, playerReflexes: number): void
  /** @noSelf **/
  GetPlayerReflexes(self: InventoryItemData): number
  /** @noSelf **/
  SetPlayerStreetCred(self: InventoryItemData, playerStreetCred: number): void
  /** @noSelf **/
  GetPlayerStreetCred(self: InventoryItemData): number
  /** @noSelf **/
  SetIsRequirementMet(self: InventoryItemData, isRequirementMet: Bool): void
  /** @noSelf **/
  IsRequirementMet(self: InventoryItemData): Bool
  /** @noSelf **/
  SetRequirement(self: InventoryItemData, requirement: SItemStackRequirementData): void
  /** @noSelf **/
  GetRequirement(self: InventoryItemData): SItemStackRequirementData
  /** @noSelf **/
  SetIsEquippable(self: InventoryItemData, isEquippable: Bool): void
  /** @noSelf **/
  IsEquippable(self: InventoryItemData): Bool
  /** @noSelf **/
  SetEquipRequirement(self: InventoryItemData, requirement: SItemStackRequirementData): void
  /** @noSelf **/
  GetEquipRequirement(self: InventoryItemData): SItemStackRequirementData
  /** @noSelf **/
  SetLootItemType(self: InventoryItemData, lootItemType: LootItemType): void
  /** @noSelf **/
  GetLootItemType(self: InventoryItemData): LootItemType
  /** @noSelf **/
  GetAttachmentsSize(self: InventoryItemData): number
  /** @noSelf **/
  GetAttachments(self: InventoryItemData): InventoryItemAttachments[]
  /** @noSelf **/
  GetAttachment(self: InventoryItemData, index: number): InventoryItemAttachments
  /** @noSelf **/
  SetAttachments(self: InventoryItemData, attachments: InventoryItemAttachments[]): void
  /** @noSelf **/
  GetAbilitiesSize(self: InventoryItemData): number
  /** @noSelf **/
  GetAbilities(self: InventoryItemData): InventoryItemAbility[]
  /** @noSelf **/
  GetAbility(self: InventoryItemData, index: number): InventoryItemAbility
  /** @noSelf **/
  SetAbilities(self: InventoryItemData, abilities: InventoryItemAbility[]): void
  /** @noSelf **/
  PlacementSlotsContains(self: InventoryItemData, slot: TweakDBID): Bool
  /** @noSelf **/
  AddPlacementSlot(self: InventoryItemData, slot: TweakDBID): void
  /** @noSelf **/
  GetPrimaryStatsSize(self: InventoryItemData): number
  /** @noSelf **/
  GetPrimaryStats(self: InventoryItemData): StatViewData[]
  /** @noSelf **/
  GetPrimaryStat(self: InventoryItemData, index: number): StatViewData
  /** @noSelf **/
  SetPrimaryStats(self: InventoryItemData, primaryStats: StatViewData[]): void
  /** @noSelf **/
  GetSecondaryStatsSize(self: InventoryItemData): number
  /** @noSelf **/
  GetSecondaryStats(self: InventoryItemData): StatViewData[]
  /** @noSelf **/
  GetSecondaryStat(self: InventoryItemData, index: number): StatViewData
  /** @noSelf **/
  SetSecondaryStats(self: InventoryItemData, secondaryStats: StatViewData[]): void
  /** @noSelf **/
  GetDPS(self: InventoryItemData): number
  /** @noSelf **/
  GetDPSF(self: InventoryItemData): number
}

declare interface StatViewData {

}

declare interface UIItemsHelper extends IScriptable {

  /** @noSelf **/
  QualityStringToStateName(quality: string): CName
  /** @noSelf **/
  QualityToLocalizationKey(quality: gamedataQuality): string
  /** @noSelf **/
  QualityEnumToName(quality: gamedataQuality): CName
  /** @noSelf **/
  QualityNameToEnum(quality: CName): gamedataQuality
  /** @noSelf **/
  QualityEnumToInt(quality: gamedataQuality): number
  /** @noSelf **/
  QualityEnumToString(quality: gamedataQuality): string
  /** @noSelf **/
  QualityIntToName(quality: number): CName
  /** @noSelf **/
  QualityStringToInt(quality: string): number
  /** @noSelf **/
  QualityNameToInt(quality: CName): number
  /** @noSelf **/
  QualityToInt(quality: gamedataQuality): number
  /** @noSelf **/
  IntToQuality(quality: number): gamedataQuality
  /** @noSelf **/
  GetStateNameForDamageType(damageType: gamedataDamageType): CName
  /** @noSelf **/
  GetIconNameForDamageType(damageType: gamedataDamageType): string
  /** @noSelf **/
  GetTweakDBIDForDamageType(damageType: gamedataDamageType): TweakDBID
  /** @noSelf **/
  GetStateNameForType(damageType: gamedataDamageType): CName
  /** @noSelf **/
  GetStateNameForStat(statType: gamedataStatType): CName
  /** @noSelf **/
  GetIconNameForStat(statType: gamedataStatType): CName
  /** @noSelf **/
  GetBGIconNameForStat(statType: gamedataStatType): CName
  /** @noSelf **/
  GetWeaponTypeIcon(itemType: gamedataItemType): CName
  /** @noSelf **/
  GetSlotShadowIcon(slotID: TweakDBID, itemType: gamedataItemType, equipmentArea: gamedataEquipmentArea): CName
  /** @noSelf **/
  GetSlotShadowIcon(itemType: gamedataItemType, equipmentArea: gamedataEquipmentArea): CName
  /** @noSelf **/
  GetSlotShadowIcon(equipmentArea: gamedataEquipmentArea): CName
  /** @noSelf **/
  GetLootingtShadowIcon(slotID: TweakDBID, itemType: gamedataItemType, equipmentArea: gamedataEquipmentArea): CName
  /** @noSelf **/
  GetLootingtShadowIcon(itemType: gamedataItemType, equipmentArea: gamedataEquipmentArea): CName
  /** @noSelf **/
  GetLootingtShadowIcon(equipmentArea: gamedataEquipmentArea): CName
  /** @noSelf **/
  GetSlotName(slotID: TweakDBID, itemType: gamedataItemType, equipmentArea: gamedataEquipmentArea): string
  /** @noSelf **/
  GetSlotName(itemType: gamedataItemType, equipmentArea: gamedataEquipmentArea): string
  /** @noSelf **/
  GetSlotName(equipmentArea: gamedataEquipmentArea): string
  /** @noSelf **/
  GetItemTypeKey(itemType: gamedataItemType, weaponEvolutionType: gamedataWeaponEvolution): string
  /** @noSelf **/
  GetEvolutionWeaponType(itemType: gamedataItemType): string
  /** @noSelf **/
  GetItemTypeKey(itemType: gamedataItemType): string
  /** @noSelf **/
  GetEmptySlotName(slotId: TweakDBID): string
  /** @noSelf **/
  GetTooltipItemName(data: InventoryTooltipData): string
  /** @noSelf **/
  GetTooltipItemName(itemID: TweakDBID, itemData: gameItemData, fallbackName: string): string
  /** @noSelf **/
  GetItemName(itemData: InventoryItemData): string
  /** @noSelf **/
  GetItemName(itemID: TweakDBID, itemData: gameItemData): string
  /** @noSelf **/
  GetItemName(itemRecord: Item_Record, itemData: gameItemData): string
}

declare interface ATooltipData extends IScriptable {

}

declare interface InventoryTooltipData extends ATooltipData {

  /** @noSelf **/
  FromItemViewData(itemViewData: ItemViewData): InventoryTooltipData
  FillPrimaryStats(rawStats: StatViewData[]): void
  FillRecipeDamageTypeData(gi: GameInstance, itemData: gameItemData): void
  FillRecipeStatsData(rawStats: Stat_Record[]): void
  FillDetailedStats(rawStats: StatViewData[]): void
  /** @noSelf **/
  FromInventoryItemData(itemData: InventoryItemData): InventoryTooltipData
  /** @noSelf **/
  FromRecipeAndItemData(context: GameInstance, recipe: RecipeData, itemData: InventoryItemData, recipeOutcome: InventoryItemData, recipeGameItemData: gameItemData): InventoryTooltipData
  ToCollapsedVersion(): void
  SetCyclingDots(selectedDot: number, numberOfDots: number): void
}

declare interface ItemViewData {

}

declare interface InventoryTooltipData_StatData {

}

declare interface DamageType_Record extends TweakDBRecord {

  EnumName(): string
  AssociatedStat(): Stat_Record
  Resistances(outList: StatDistributionData_Record[]): void
  GetResistancesCount(): number
  GetResistancesItem(index: number): StatDistributionData_Record
  ResistancesContains(item: StatDistributionData_Record): Bool
  Tags(): CName[]
  GetTagsCount(): number
  GetTagsItem(index: number): CName
  TagsContains(item: CName): Bool
  DamageType(): gamedataDamageType
}

declare interface InventoryItemAttachments {

}

declare interface RecipeData extends IScriptable {

}

declare interface WeaponEvolution_Record extends TweakDBRecord {

  Name(): string
  Type(): gamedataWeaponEvolution
}

declare interface UIStatsMap_Record extends TweakDBRecord {

  TypesToCompareWith(outList: ItemType_Record[]): void
  GetTypesToCompareWithCount(): number
  GetTypesToCompareWithItem(index: number): ItemType_Record
  TypesToCompareWithContains(item: ItemType_Record): Bool
  StatsToCompare(outList: Stat_Record[]): void
  GetStatsToCompareCount(): number
  GetStatsToCompareItem(index: number): Stat_Record
  StatsToCompareContains(item: Stat_Record): Bool
  PrimaryStats(outList: Stat_Record[]): void
  GetPrimaryStatsCount(): number
  GetPrimaryStatsItem(index: number): Stat_Record
  PrimaryStatsContains(item: Stat_Record): Bool
  SecondaryStats(outList: Stat_Record[]): void
  GetSecondaryStatsCount(): number
  GetSecondaryStatsItem(index: number): Stat_Record
  SecondaryStatsContains(item: Stat_Record): Bool
}

declare interface GameplayLogicPackage_Record extends TweakDBRecord {

  UIData(): GameplayLogicPackageUIData_Record
  StatPools(outList: StatPool_Record[]): void
  GetStatPoolsCount(): number
  GetStatPoolsItem(index: number): StatPool_Record
  StatPoolsContains(item: StatPool_Record): Bool
  Effectors(outList: Effector_Record[]): void
  GetEffectorsCount(): number
  GetEffectorsItem(index: number): Effector_Record
  EffectorsContains(item: Effector_Record): Bool
  Stats(outList: StatModifier_Record[]): void
  GetStatsCount(): number
  GetStatsItem(index: number): StatModifier_Record
  StatsContains(item: StatModifier_Record): Bool
  Items(outList: InventoryItem_Record[]): void
  GetItemsCount(): number
  GetItemsItem(index: number): InventoryItem_Record
  ItemsContains(item: InventoryItem_Record): Bool
  AnimationWrapperOverrides(): CName[]
  GetAnimationWrapperOverridesCount(): number
  GetAnimationWrapperOverridesItem(index: number): CName
  AnimationWrapperOverridesContains(item: CName): Bool
  Prereq(): CName
  Stackable(): Bool
}

declare interface InventoryItemAbility {

}

declare interface GameplayLogicPackageUIData_Record extends TweakDBRecord {

  LocalizedDescription(): string
  LocalizedName(): string
  FloatValues(): number[]
  GetFloatValuesCount(): number
  GetFloatValuesItem(index: number): number
  FloatValuesContains(item: number): Bool
  IntValues(): number[]
  GetIntValuesCount(): number
  GetIntValuesItem(index: number): number
  IntValuesContains(item: number): Bool
  NameValues(): CName[]
  GetNameValuesCount(): number
  GetNameValuesItem(index: number): CName
  NameValuesContains(item: CName): Bool
  Stats(outList: Stat_Record[]): void
  GetStatsCount(): number
  GetStatsItem(index: number): Stat_Record
  StatsContains(item: Stat_Record): Bool
  IconPath(): CName
}

declare interface UILocalizationDataPackage extends IScriptable {

  /** @noSelf **/
  FromLogicUIDataPackage(uiData: GameplayLogicPackageUIData_Record, item?: gameItemData, partItemData?: InnerItemData): UILocalizationDataPackage
  /** @noSelf **/
  FromPerkUIDataPackage(uiData: PerkLevelUIData_Record): UILocalizationDataPackage
  /** @noSelf **/
  FromPassiveUIDataPackage(uiData: PassiveProficiencyBonusUIData_Record): UILocalizationDataPackage
  InvalidateTextParams(): void
  GetParamsCount(): number
  GetTextParams(): inkTextParams
}

declare interface inkTextParams extends IScriptable {

  AddString(value: string): void
  AddString(key: string, value: string): void
  UpdateString(index: number, value: string): void
  UpdateString(key: string, value: string): void
  AddLocalizedString(valueLocKey: string): void
  AddLocalizedString(key: string, valueLocKey: string): void
  UpdateLocalizedString(index: number, valueLocKey: string): void
  UpdateLocalizedString(key: string, valueLocKey: string): void
  AddLocalizedName(valueLocKey: CName): void
  AddLocalizedName(key: string, valueLocKey: CName): void
  UpdateLocalizedName(index: number, valueLocKey: CName): void
  UpdateLocalizedName(key: string, valueLocKey: CName): void
  AddNumber(value: number): void
  AddNumber(key: string, value: number): void
  UpdateNumber(index: number, value: number): void
  UpdateNumber(key: string, value: number): void
  AddNumber(value: number): void
  AddNumber(key: string, value: number): void
  UpdateNumber(index: number, value: number): void
  UpdateNumber(key: string, value: number): void
  AddMeasurement(value: number, valueUnit: EMeasurementUnit): void
  AddMeasurement(key: string, value: number, valueUnit: EMeasurementUnit): void
  UpdateMeasurement(index: number, value: number, valueUnit: EMeasurementUnit): void
  UpdateMeasurement(key: string, value: number, valueUnit: EMeasurementUnit): void
  AddTime(valueSeconds: number): void
  AddTime(value: GameTime): void
  AddTime(key: string, valueSeconds: number): void
  AddTime(key: string, value: GameTime): void
  UpdateTime(index: number, valueSeconds: number): void
  UpdateTime(index: number, value: GameTime): void
  UpdateTime(key: string, valueSeconds: number): void
  UpdateTime(key: string, value: GameTime): void
  AddNCGameTime(value: GameTime): void
  AddNCGameTime(key: string, value: GameTime): void
  AddCurrentDate(): void
  AddCurrentDate(key: string): void
  UpdateCurrentDate(index: number): void
  UpdateCurrentDate(key: string): void
  Internal_AddString(value: string, key?: string): void
  Internal_UpdateString(index: number, value: string): void
  Internal_UpdateStringKey(key: string, value: string): void
  Internal_AddLocalizedString(valueLocKey: string, key?: string): void
  Internal_UpdateLocalizedString(index: number, valueLocKey: string): void
  Internal_UpdateLocalizedStringKey(key: string, valueLocKey: string): void
  Internal_AddLocalizedName(valueLocKey: CName, key?: string): void
  Internal_UpdateLocalizedName(index: number, valueLocKey: CName): void
  Internal_UpdateLocalizedNameKey(key: string, valueLocKey: CName): void
  Internal_AddInteger(value: number, key?: string): void
  Internal_UpdateInteger(index: number, value: number): void
  Internal_UpdateIntegerKey(key: string, value: number): void
  Internal_AddFloat(value: number, key?: string): void
  Internal_UpdateFloat(index: number, value: number): void
  Internal_UpdateFloatKey(key: string, value: number): void
  Internal_AddMeasurement(value: number, valueUnit: EMeasurementUnit, key?: string): void
  Internal_UpdateMeasurement(index: number, value: number, valueUnit: EMeasurementUnit): void
  Internal_UpdateMeasurementKey(key: string, value: number, valueUnit: EMeasurementUnit): void
  Internal_AddTime(valueSeconds: number, key?: string): void
  Internal_UpdateTime(index: number, valueSeconds: number): void
  Internal_UpdateTimeKey(key: string, valueSeconds: number): void
  Internal_AddNCGameTime(valueSeconds: number, key?: string): void
  Internal_AddCurrentDate(key?: string): void
  Internal_UpdateCurrentDate(index: number): void
  Internal_UpdateCurrentDateKey(key: string): void
}

declare interface GameTime {

  /** @noSelf **/
  MakeGameTime(days: number, hours: number, minutes?: number, seconds?: number): GameTime
  /** @noSelf **/
  Day(): GameTime
  /** @noSelf **/
  Hour(): GameTime
  /** @noSelf **/
  Minute(): GameTime
  /** @noSelf **/
  GetSeconds(self: GameTime): number
  /** @noSelf **/
  Seconds(self: GameTime): number
  /** @noSelf **/
  Minutes(self: GameTime): number
  /** @noSelf **/
  Hours(self: GameTime): number
  /** @noSelf **/
  Days(self: GameTime): number
  /** @noSelf **/
  ToString(self: GameTime): string
  /** @noSelf **/
  IsAfter(self: GameTime, other: GameTime): Bool
}

declare interface StatProvider extends IScriptable {

  Setup(gameItemData: gameItemData): void
  Setup(inventoryItemData: InventoryItemData): void
  Setup(partData: InnerItemData): void
  HasStatData(type: gamedataStatType): Bool
  GetStatValueByType(type: gamedataStatType): number
  GetStatValueFByType(type: gamedataStatType): number
}

declare interface IMarketSystem extends ScriptableSystem {

  AddVendorHashMap(key: EntityID, tweakID: TweakDBID, vendor: IScriptable): Bool
  ClearVendorHashMap(): void
  GetVendorHashMap(key: EntityID): IScriptable
  GetVendorTBIDHashMap(key: TweakDBID): IScriptable
}

declare interface MarketSystem extends IMarketSystem {

  OnDetach(): void
  OnRestored(saveVersion: number, gameVersion: number): void
  GetVendor(vendorObject: GameObject): Vendor
  GetVendorByTDBID(vendorDataID: TweakDBID): Vendor
  AddVendor(vendorObject: GameObject): Vendor
  /** @noSelf **/
  IsAccessible(player: PlayerPuppet, vendorID: TweakDBID): Bool
  /** @noSelf **/
  IsVisibleOnMap(player: PlayerPuppet, vendorID: TweakDBID): Bool
  /** @noSelf **/
  GetBuyPrice(vendorObject: GameObject, itemID: ItemID): number
  /** @noSelf **/
  GetBuyPrice(game: GameInstance, vendorID: EntityID, itemID: ItemID): number
  /** @noSelf **/
  Money(): ItemID
  /** @noSelf **/
  OnVendorMenuOpen(vendorObject: GameObject): void
  /** @noSelf **/
  GetVendorMoney(vendorObject: GameObject): number
  /** @noSelf **/
  GetVendorItemsForSale(vendorObject: GameObject, checkPlayerCanBuy: Bool): SItemStack[]
  /** @noSelf **/
  GetVendorCyberwareForSale(vendorObject: GameObject, checkPlayerCanBuy: Bool): SItemStack[]
  /** @noSelf **/
  GetItemsPlayerCanSell(vendorObject: GameObject, allowQuestItems: Bool, excludeEquipped: Bool): SItemStack[]
  /** @noSelf **/
  CanPlayerSellItem(vendorObject: GameObject, itemID: ItemID, allowQuestItems: Bool, excludeEquipped: Bool): Bool
  /** @noSelf **/
  GetVendorID(vendor: GameObject): TweakDBID
  /** @noSelf **/
  GetInstance(gameInstance: GameInstance): MarketSystem
  OnAttachVendorRequest(request: AttachVendorRequest): void
  OnBuyRequest(request: BuyRequest): void
  OnBuybackRequest(request: BuybackRequest): void
  OnSellRequest(request: SellRequest): void
  OnDispenseRequest(request: DispenseRequest): void
  OnAddItemToStockRequest(request: AddItemToVendorRequest): void
  OnSetPriceModifierRequest(request: SetVendorPriceMultiplierRequest): void
}

declare interface Vendor extends IScriptable {

  Initialize(gameInstance: GameInstance, vendorID: TweakDBID, vendorObject: GameObject): void
  OnAttach(owner: GameObject): void
  OnRestored(gameInstance: GameInstance): void
  GetStock(): SItemStack[]
  LazyInitStock(): void
  GetMaxItemStacksPerVendor(): number
  GetVendorPersistentID(): PersistentID
  GetVendorTweakID(): TweakDBID
  GetVendorType(): gamedataVendorType
  GetVendorRecord(): Vendor_Record
  GetVendorObject(): GameObject
  GetPriceMultiplier(): number
  GetItemsForSale(checkPlayerCanBuy: Bool): SItemStack[]
  GetMoney(): number
  GetCyberwareForSale(checkPlayerCanBuy: Bool): SItemStack[]
  GetItemsPlayerCanSell(allowQuestItems: Bool, excludeEquipped: Bool): SItemStack[]
  OnVendorMenuOpen(): void
  SetPriceMultiplier(value: number): void
  SetPersistentID(persistentID: PersistentID): void
  PlayerCanSell(itemID: ItemID, allowQuestItems: Bool, excludeEquipped: Bool): Bool
  PlayerCanBuy(itemStack: SItemStack): Bool
  FillVendorInventory(allowRegeneration: Bool): void
  InitializeStock(): void
  RegenerateStock(): void
  CreateStacksFromVendorItem(vendorItem: VendorItem_Record, player: PlayerPuppet): SItemStack[]
  CreateDynamicStockFromPlayerProgression(player: GameObject): SItemStack[]
  ShouldRegenerateStock(): Bool
  ShouldRegenerateItem(itemTDBID: TweakDBID): Bool
  SellItemToVendor(itemStack: SItemStack): void
  SellItemsToVendor(itemsStack: SItemStack[]): void
  BuyItemFromVendor(itemStack: SItemStack): void
  BuyItemsFromVendor(itemsStack: SItemStack[]): void
  BuybackItemFromVendor(itemStack: SItemStack): void
  BuybackItemsFromVendor(itemsStack: SItemStack[]): void
  DispenseItemFromVendor(position: Vector4, itemID?: ItemID): void
  GetRandomStockItem(): ItemID
  PerformItemTransfer(buyer: GameObject, seller: GameObject, itemTransaction: SItemTransaction): Bool
  AddItemsToStock(itemStack: SItemStack): void
  RemoveItemsFromStock(itemStack: SItemStack): Bool
  GetItemIndex(itemID: ItemID): number
}

declare interface Vendor_Record extends TweakDBRecord {

  LocalizedDescription(): string
  LocalizedName(): string
  Faction(): Affiliation_Record
  VendorType(): VendorType_Record
  VendorFilterTags(): CName[]
  GetVendorFilterTagsCount(): number
  GetVendorFilterTagsItem(index: number): CName
  VendorFilterTagsContains(item: CName): Bool
  ItemStock(outList: VendorItem_Record[]): void
  GetItemStockCount(): number
  GetItemStockItem(index: number): VendorItem_Record
  ItemStockContains(item: VendorItem_Record): Bool
  AccessPrereqs(outList: IPrereq_Record[]): void
  GetAccessPrereqsCount(): number
  GetAccessPrereqsItem(index: number): IPrereq_Record
  AccessPrereqsContains(item: IPrereq_Record): Bool
  ExperienceStock(outList: VendorExperience_Record[]): void
  GetExperienceStockCount(): number
  GetExperienceStockItem(index: number): VendorExperience_Record
  ExperienceStockContains(item: VendorExperience_Record): Bool
  VendorInverseFilterTags(): CName[]
  GetVendorInverseFilterTagsCount(): number
  GetVendorInverseFilterTagsItem(index: number): CName
  VendorInverseFilterTagsContains(item: CName): Bool
  CustomerInverseFilterTags(): CName[]
  GetCustomerInverseFilterTagsCount(): number
  GetCustomerInverseFilterTagsItem(index: number): CName
  CustomerInverseFilterTagsContains(item: CName): Bool
  CustomerFilterTags(): CName[]
  GetCustomerFilterTagsCount(): number
  GetCustomerFilterTagsItem(index: number): CName
  CustomerFilterTagsContains(item: CName): Bool
  MapVisibilityPrereqs(outList: IPrereq_Record[]): void
  GetMapVisibilityPrereqsCount(): number
  GetMapVisibilityPrereqsItem(index: number): IPrereq_Record
  MapVisibilityPrereqsContains(item: IPrereq_Record): Bool
  Craftbooks(outList: VendorCraftable_Record[]): void
  GetCraftbooksCount(): number
  GetCraftbooksItem(index: number): VendorCraftable_Record
  CraftbooksContains(item: VendorCraftable_Record): Bool
  InGameTimeToRestock(): number
}

declare interface VendorItem_Record extends VendorWare_Record {

  Item(): Item_Record
}

declare interface SItemStack {

}

declare interface MathHelper extends IScriptable {

  /** @noSelf **/
  PositiveInfinity(): number
  /** @noSelf **/
  NegativeInfinity(): number
  /** @noSelf **/
  EulerNumber(): number
  /** @noSelf **/
  IsFloatInRange(value: number, min: number, max: number, leftClosed?: Bool, rightClosed?: Bool): Bool
  /** @noSelf **/
  NormalizeF(value: number, min: number, max: number): number
  /** @noSelf **/
  RandFromNormalDist(mean?: number, stdDev?: number): number
}

declare interface VendorType_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataVendorType
}

declare interface PlayerDevelopmentSystem extends ScriptableSystem {

  /** @noSelf **/
  GetInstance(owner: GameObject): PlayerDevelopmentSystem
  OnPlayerAttach(request: PlayerAttachRequest): void
  OnPlayerDetach(request: PlayerDetachRequest): void
  GetDevelopmentData(owner: GameObject): PlayerDevelopmentData
  /** @noSelf **/
  GetData(owner: GameObject): PlayerDevelopmentData
  OnRestored(saveVersion: number, gameVersion: number): void
  IsProficiencyMaxLvl(owner: GameObject, type: gamedataProficiencyType): Bool
  GetProficiencyLevel(owner: GameObject, type: gamedataProficiencyType): number
  GetProficiencyAbsoluteMaxLevel(owner: GameObject, type: gamedataProficiencyType): number
  GetCurrentLevelProficiencyExp(owner: GameObject, type: gamedataProficiencyType): number
  GetTotalProfExperience(owner: GameObject, type: gamedataProficiencyType): number
  GetRemainingExpForLevelUp(owner: GameObject, type: gamedataProficiencyType): number
  GetDominatingCombatProficiency(owner: GameObject): gamedataProficiencyType
  GetDevPoints(owner: GameObject, type: gamedataDevelopmentPointType): number
  GetPerkLevel(owner: GameObject, type: gamedataPerkType): number
  GetPerkMaxLevel(owner: GameObject, type: gamedataPerkType): number
  HasPerk(owner: GameObject, type: gamedataPerkType): Bool
  GetPerks(owner: GameObject): SPerk[]
  IsPerkImplemented(owner: GameObject, perk: gamedataPerkType): Bool
  BuyAttribute(owner: GameObject, obj: GameObject, type: gamedataStatType): Bool
  SetAttribute(owner: GameObject, obj: GameObject, type: gamedataStatType, amount: number): void
  GetAttributes(owner: GameObject): SAttribute[]
  GetHighestCompletedMinigameLevel(owner: GameObject): number
  GetLifePath(owner: GameObject): gamedataLifePath
  OnExperienceQueued(request: QueueCombatExperience): void
  OnProcessQueuedExperience(request: ProcessQueuedCombatExperience): void
  OnExperienceAdded(request: AddExperience): void
  OnSetProficiencyLevel(request: SetProficiencyLevel): void
  OnPerkBought(request: BuyPerk): void
  OnTraitLevelIncreased(request: IncreaseTraitLevel): void
  OnPerkRemoved(request: RemovePerk): void
  OnAllPerksRemoved(request: RemoveAllPerks): void
  OnUnlockPerkArea(request: UnlockPerkArea): void
  OnLockPerkArea(request: LockPerkArea): void
  OnAttributeSet(request: SetAttribute): void
  OnAttributeBuy(request: BuyAttribute): void
  OnDevelopmentPointsAdded(request: AddDevelopmentPoints): void
  OnSkillCheckPrereqModified(request: ModifySkillCheckPrereq): void
  OnStatCheckPrereqModified(request: ModifyStatCheckPrereq): void
  OnUpdatePlayerDevelopment(request: UpdatePlayerDevelopment): void
  OnSetProgressionBuild(request: SetProgressionBuild): void
  OnSetProgressionBuild(request: questSetProgressionBuildRequest): void
  OnSetProgressionBuild(request: gameSetProgressionBuildRequest): void
  OnRefreshPerkAreas(request: RefreshPerkAreas): void
  OnSetLifePath(request: questSetLifePathRequest): void
  OnBumpNetrunnerMinigameLevel(request: BumpNetrunnerMinigameLevel): void
  GetProficiencyRecord(type: gamedataProficiencyType): Proficiency_Record
  OnRequestStatsBB(request: RequestStatsBB): void
}

declare interface PlayerDevelopmentData extends IScriptable {

  OnAttach(): void
  OnDetach(): void
  OnNewGame(): void
  OnRestored(gameInstance: GameInstance): void
  SetOwner(owner: GameObject): void
  GetOwner(): GameObject
  GetOwnerID(): EntityID
  GetLifePath(): gamedataLifePath
  GetProficiencyLevel(type: gamedataProficiencyType): number
  GetProficiencyAbsoluteMaxLevel(type: gamedataProficiencyType): number
  GetCurrentLevelProficiencyExp(type: gamedataProficiencyType): number
  GetTotalProfExperience(type: gamedataProficiencyType): number
  GetRemainingExpForLevelUp(type: gamedataProficiencyType): number
  GetDominatingCombatProficiency(): gamedataProficiencyType
  GetHighestCompletedMinigameLevel(): number
  GetProficiencyRecordByIndex(index: number): Proficiency_Record
  SetProficiencies(): void
  GetProficiencyIndexByType(type: gamedataProficiencyType): number
  ResetProficiencyLevel(type: gamedataProficiencyType): void
  GetProficiencyMaxLevel(type: gamedataProficiencyType): number
  GetProficiencyExpCurveNames(type: gamedataProficiencyType, curvName: CName, colName: CName): void
  ModifyProficiencyLevel(type: gamedataProficiencyType): void
  ModifyProficiencyLevel(proficiencyIndex: number): void
  ProcessTutorialFacts(): void
  SendMaxStreetCredLevelReachedTrackingRequest(): void
  CheckSpecialistAchievement(index: number): void
  SetAchievementProgress(index: number): void
  AddProficiencyStat(type: gamedataProficiencyType, level: number): void
  ProcessProficiencyPassiveBonus(profIndex: number): void
  RemoveProficiencyStat(type: gamedataProficiencyType): void
  RefreshProficiencyStats(): void
  UpdateProficiencyMaxLevels(): void
  AddProficiency(type: gamedataProficiencyType): void
  AddExperience(amount: number, type: gamedataProficiencyType, telemetryGainReason: telemetryLevelGainReason): void
  UpdatePlayerXP(): void
  QueueCombatExperience(amount: number, type: gamedataProficiencyType, entity: EntityID): void
  ProcessQueuedCombatExperience(entity: EntityID): void
  CanGainNextProficiencyLevel(pIndex: number): Bool
  GetExperienceForNextLevel(type: gamedataProficiencyType): number
  GetExperiencePercentage(): number
  AddLevels(type: gamedataProficiencyType, amount?: number): void
  SetLevel(type: gamedataProficiencyType, lvl: number, telemetryGainReason: telemetryLevelGainReason): void
  BumpNetrunnerMinigameLevel(value: number): void
  IsProficiencyMaxLvl(type: gamedataProficiencyType): Bool
  GetDevPoints(type: gamedataDevelopmentPointType): number
  GetDevPointsIndex(type: gamedataDevelopmentPointType): number
  SetDevelopmentPoints(): void
  ModifyDevPoints(type: gamedataProficiencyType, level: number): void
  GetDevPointsForLevel(level: number, profType: gamedataProficiencyType, devPtsType: gamedataDevelopmentPointType): number
  AddDevelopmentPoints(amount: number, type: gamedataDevelopmentPointType): void
  SpendDevelopmentPoint(type: gamedataDevelopmentPointType): void
  ResetDevelopmentPoints(type: gamedataDevelopmentPointType): void
  ResetAllDevPoints(): void
  ClearAllDevPoints(): void
  InitializePerkAreas(): void
  InitializePerkArea(areaType: gamedataPerkArea): void
  InitializePerk(perkType: gamedataPerkType): SPerk
  IncreasePerkLevel(areaIndex: number, perkIndex: number): void
  RefreshPerkAreas(): void
  EvaluatePerkAreas(prof: gamedataProficiencyType): void
  GetPerkAreaIndex(areaType: gamedataPerkArea): number
  GetPerkIndex(areaIndex: number, perkType: gamedataPerkType): number
  GetPerkIndex(areaType: gamedataPerkArea, perkType: gamedataPerkType): number
  GetPerkIndex(perkType: gamedataPerkType): number
  UnlockPerkArea(areaType: gamedataPerkArea): void
  LockPerkArea(areaType: gamedataPerkArea): void
  BuyPerk(perkType: gamedataPerkType): Bool
  RemovePerk(perkType: gamedataPerkType): Bool
  RemoveAllPerks(): void
  RemovePerkRecipes(perkType: gamedataPerkType): void
  GetPerkRecord(perkType: gamedataPerkType): Perk_Record
  GetPerkAreaRecord(areaType: gamedataPerkArea): PerkArea_Record
  GetPerkPackageTDBID(areaIndex: number, perkIndex: number): TweakDBID
  GetPerkPackageTDBID(perkType: gamedataPerkType): TweakDBID
  HasPerk(perkType: gamedataPerkType): Bool
  GetInvestedPerkPoints(profType: gamedataProficiencyType): number
  ShouldPerkAreaBeAvailable(areaType: gamedataPerkArea): Bool
  IsPerkAreaUnlocked(area: gamedataPerkArea): Bool
  IsPerkAreaUnlocked(aIndex: number): Bool
  IsPerkAreaValid(areaType: gamedataPerkArea): Bool
  IsPerkMaxLevel(perkType: gamedataPerkType): Bool
  GetPerkMaxLevel(perkType: gamedataPerkType): number
  GetPerkLevel(perkType: gamedataPerkType): number
  CanPerkBeBought(perkType: gamedataPerkType): Bool
  CanTraitBeBought(): Bool
  IsPerkAreaReqMet(areaRecord: PerkArea_Record): Bool
  IsPerkAreaMasteryReqMet(areaRecord: PerkArea_Record): Bool
  IsPerkAreaBaseReqMet(areaRecord: PerkArea_Record): Bool
  GetRemainingRequiredPerkPoints(areaRecord: PerkArea_Record, amount: number): Bool
  GetRemainingRequiredPerkPoints(traitRecord: Trait_Record, amount: number): Bool
  GetPerkAreaFromPerk(perkType: gamedataPerkType): gamedataPerkArea
  GetProficiencyFromPerkArea(perkArea: gamedataPerkArea): gamedataProficiencyType
  GetProficiencyIndexFromPerkArea(perkArea: gamedataPerkArea): number
  ActivatePerkLevelData(areaIndex: number, perkIndex: number): void
  DeactivatePerkLevelData(areaIndex: number, perkIndex: number): void
  GetPerks(): SPerk[]
  InitializeTraits(): void
  AddTrait(traitType: gamedataTraitType): void
  IncreaseTraitLevel(traitType: gamedataTraitType): Bool
  RemoveTrait(traitType: gamedataTraitType): Bool
  EvaluateTraitInfiniteData(traitIndex: number): void
  EvaluateTrait(profType: gamedataProficiencyType): void
  ActivateTraitBase(traitType: gamedataTraitType): void
  IsTraitUnlocked(traitType: gamedataTraitType): Bool
  IsTraitUnlocked(traitIndex: number): Bool
  IsTraitReqMet(traitType: gamedataTraitType): Bool
  GetTraitLevel(traitType: gamedataTraitType): number
  GetTraitLevel(traitIndex: number): number
  GetTraitIndex(traitType: gamedataTraitType): number
  GetTraitRecord(traitType: gamedataTraitType): Trait_Record
  BuyAttribute(type: gamedataStatType): Bool
  SetAttribute(type: gamedataStatType, amount: number): void
  GetAttributes(): SAttribute[]
  SetAttributes(): void
  ModifyAttribute(type: gamedataStatType, amount: number): void
  GetAttributeIndex(type: gamedataStatType): number
  GetAttributeDevCap(type: gamedataStatType): number
  CanAttributeBeBought(type: gamedataStatType): Bool
  IsStatValid(type: gamedataStatType): Bool
  /** @noSelf **/
  IsAttribute(type: gamedataStatType): Bool
  GetAttributeNextLevelCost(type: gamedataStatType): number
  GetAttributeRecord(type: gamedataStatType): Stat_Record
  RegisterSkillCheckPrereq(skillPrereq: SkillCheckPrereqState): void
  RegisterStatCheckPrereq(statPrereq: StatCheckPrereqState): void
  UnregisterSkillCheckPrereq(skillPrereq: SkillCheckPrereqState): void
  UnregisterStatCheckPrereq(statPrereq: StatCheckPrereqState): void
  UpdateSkillPrereqs(changedSkill: gamedataProficiencyType, newLevel: number): void
  UpdateStatPrereqs(changedStat: gamedataStatType, newValue: number): void
  SetProgressionBuild(build: gamedataBuildType): void
  SetProgressionBuild(buildID: TweakDBID): void
  SetLifePath(lifePath: TweakDBID): void
  UpdateAttributes(attributes: CharacterCustomizationAttribute[]): void
  ProcessProgressionBuild(buildRecord: ProgressionBuild_Record): void
  ScaleItems(): void
  FlushDevelopment(): void
  ProcessBuildEquipment(equipment: BuildEquipment_Record[], randomizeClothing: Bool): void
  ProcessBuildCyberware(cyberware: BuildCyberware_Record[]): void
  ProcessBuildAttributes(attributes: BuildAttribute_Record[]): void
  ProcessBuildProficiencies(proficiencies: BuildProficiency_Record[]): void
  ProcessBuildPerks(perks: BuildPerk_Record[]): void
  ProcessBuildItems(items: InventoryItem_Record[]): void
  ProcessCraftbook(recipes: Craftable_Record): void
  ProcessLifePath(lifePath: LifePath_Record): void
  RandomizeClothing(): void
  RefreshDevelopmentSystemOnNewGameStarted(): void
  RefreshDevelopmentSystem(): void
  UpdatePerkAreaBB(areaIndex: number): void
  UpdateUIBB(): void
}

declare interface SProficiency {

}

declare interface Proficiency_Record extends TweakDBRecord {

  Loc_desc_key(): string
  Loc_name_key(): string
  EnumComment(): string
  DisplayName(): string
  Trait(): Trait_Record
  TiedAttribute(): Stat_Record
  PerkAreas(outList: PerkArea_Record[]): void
  GetPerkAreasCount(): number
  GetPerkAreasItem(index: number): PerkArea_Record
  PerkAreasContains(item: PerkArea_Record): Bool
  PassiveBonuses(outList: PassiveProficiencyBonus_Record[]): void
  GetPassiveBonusesCount(): number
  GetPassiveBonusesItem(index: number): PassiveProficiencyBonus_Record
  PassiveBonusesContains(item: PassiveProficiencyBonus_Record): Bool
  Packages(outList: GameplayLogicPackage_Record[]): void
  GetPackagesCount(): number
  GetPackagesItem(index: number): GameplayLogicPackage_Record
  PackagesContains(item: GameplayLogicPackage_Record): Bool
  EnumName(): CName
  CurveSetName(): CName
  CurveName(): CName
  IconPath(): CName
  MaxLevel(): number
  MinLevel(): number
  Type(): gamedataProficiencyType
}

declare interface SAttribute {

}

declare interface StatsDataSystem extends IStatsDataSystem {

  GetDifficulty(): gameDifficulty
  SetDifficulty(difficulty: gameDifficulty): void
  GetValueFromCurve(curveSetName: CName, argumentValue: number, curveName?: CName, difficulty?: gameDifficulty): number
  GetMinValueFromCurve(curveSetName: CName, curveName?: CName, difficulty?: gameDifficulty): number
  GetMaxValueFromCurve(curveSetName: CName, curveName?: CName, difficulty?: gameDifficulty): number
}

declare interface SPerkArea {

}

declare interface PerkArea_Record extends TweakDBRecord {

  DisplayName(): string
  Loc_name_key(): string
  EnumComment(): string
  Loc_desc_key(): string
  Requirement(): IPrereq_Record
  Curve(): Curve_Record
  Proficiency(): Proficiency_Record
  MasteryLevel(): StatPrereq_Record
  Perks(outList: Perk_Record[]): void
  GetPerksCount(): number
  GetPerksItem(index: number): Perk_Record
  PerksContains(item: Perk_Record): Bool
  EnumName(): CName
  MinLevel(): number
  MaxLevel(): number
  Type(): gamedataPerkArea
}

declare interface STrait {

}

declare interface SDevelopmentPoints {

}

declare interface LevelUpData {

}

declare interface PassiveProficiencyBonus_Record extends TweakDBRecord {

  EffectorToTrigger(): Effector_Record
  StatGroup(): StatModifierGroup_Record
  UiData(): PassiveProficiencyBonusUIData_Record
}

declare interface UI_LevelUpDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface SetAchievementProgressRequest extends PlayerScriptableSystemRequest {

}

declare interface DataTrackingSystem extends ScriptableSystem {

  OnAttach(): void
  OnDetach(): void
  OnRestored(saveVersion: number, gameVersion: number): void
  AddFlag(achievement: gamedataAchievement): void
  GetNameFromDataTrackingFactEnum(dataTrackingFact: ETelemetryData): CName
  GetCountFromDataTrackingFactEnum(dataTrackingFact: ETelemetryData): number
  OnModifyTelemetryVariable(request: ModifyTelemetryVariable): void
  OnModifyNPCTelemetryVariable(request: ModifyNPCTelemetryVariable): void
  ProcessTutorialFact(telemetryData: ETelemetryData): void
  OnAddAchievementRequest(request: AddAchievementRequest): void
  OnSetAchievementProgressRequest(request: SetAchievementProgressRequest): void
  UnlockAchievement(achievementRecord: Achievement_Record): void
  SetAchievementProgress(achievementRecord: Achievement_Record, currentValue: number, maxValue: number): void
  OnBluelineSelectedRequest(request: BluelineSelectedRequest): void
  OnSendItemCraftedDataTrackingRequest(request: ItemCraftedDataTrackingRequest): void
  ProcessHandyManAchievement(targetItem: ItemID): void
  ProcessBreathtakingAchievement(): void
  IsSourcePlayer(attackData: AttackData): Bool
  CheckTimeDilationSources(): Bool
  OnNPCKillDataTrackingRequest(request: NPCKillDataTrackingRequest): void
  OnTakedownActionDataTrackingRequest(request: TakedownActionDataTrackingRequest): void
  ProcessDataTrackingFacts(): void
  ProcessNotTheMobileAchievement(damageEntry: DamageHistoryEntry): void
  ProcessIntCompareAchievement(achievement: gamedataAchievement, trackedData: number, thresholdValue: number): void
  GetAchievementRecordFromGameDataAchievement(achievement: gamedataAchievement): Achievement_Record
  ProcessTwoHeadsOneBulletAchievement(request: NPCKillDataTrackingRequest): void
  ProcessGunKataAchievement(request: NPCKillDataTrackingRequest): void
  ProcessHardForKneesAchievement(): void
  IsAchievementUnlocked(achievement: gamedataAchievement): Bool
  OnUpdateShardFailedDrops(request: UpdateShardFailedDropsRequest): void
  GetFailedShardDrops(): number
  OnResetKilledRequest(request: ResetNPCKilledDelayedRequest): void
  OnResetFinishedRequest(request: ResetNPCFinishedDelayedRequest): void
  OnResetDefeatedRequest(request: ResetNPCDefeatedDelayedRequest): void
  OnResetIncapacitatedRequest(request: ResetNPCIncapacitatedDelayedRequest): void
  OnResetDownedRequest(request: ResetNPCDownedDelayedRequest): void
  OnResetMeleeAttackRequest(request: ResetMeleeAttackDelayedRequest): void
  OnResetRangedAttackRequest(request: ResetRangedAttackDelayedRequest): void
  OnResetQuickhackRequest(request: ResetAttackDelayedRequest): void
  OnResetLightHitsReceivedRequest(request: ResetLightHitsReceivedRequest): void
  OnResetStrongHitsReceivedRequest(request: ResetStrongHitsReceivedRequest): void
  OnResetFinalComboHitsReceivedRequest(request: ResetFinalComboHitsReceivedRequest): void
  OnResetBlockAttackHitsReceivedRequest(request: ResetBlockAttackHitsReceivedRequest): void
  OnResetBlockedHitsRequest(request: ResetBlockedHitsRequest): void
  OnUnlockAllAchievementsRequest(request: UnlockAllAchievementsRequest): void
}

declare interface ModifyTelemetryVariable extends PlayerScriptableSystemRequest {

}

declare interface ResetMeleeAttackDelayedRequest extends ScriptableSystemRequest {

}

declare interface ResetRangedAttackDelayedRequest extends ScriptableSystemRequest {

}

declare interface AchievementSystem extends IAchievementSystem {

  UnlockAchievement(achievement: Achievement_Record): void
  SetAchievementProgress(achievement: Achievement_Record, precentComplete: number): void
}

declare interface Achievement_Record extends TweakDBRecord {

  LocalizedDescription(): string
  GOGKey(): string
  XB1Key(): string
  SteamKey(): string
  Tags(): CName[]
  GetTagsCount(): number
  GetTagsItem(index: number): CName
  TagsContains(item: CName): Bool
  DisplayName(): CName
  EnumName(): CName
  PS4Key(): number
  Type(): gamedataAchievement
}

declare interface ResetAttackDelayedRequest extends ScriptableSystemRequest {

}

declare interface ResetNPCKilledDelayedRequest extends ScriptableSystemRequest {

}

declare interface ModifyNPCTelemetryVariable extends PlayerScriptableSystemRequest {

}

declare interface AddAchievementRequest extends PlayerScriptableSystemRequest {

}

declare interface ItemCraftedDataTrackingRequest extends PlayerScriptableSystemRequest {

}

declare interface AttackData extends IScriptable {

  SetAttackType(attackTypeOverride: gamedataAttackType): void
  /** @noSelf **/
  IsMelee(attackType: gamedataAttackType): Bool
  /** @noSelf **/
  IsQuickMelee(attackType: gamedataAttackType): Bool
  /** @noSelf **/
  IsLightMelee(attackType: gamedataAttackType): Bool
  /** @noSelf **/
  IsStrongMelee(attackType: gamedataAttackType): Bool
  /** @noSelf **/
  IsBullet(attackType: gamedataAttackType): Bool
  /** @noSelf **/
  IsExplosion(attackType: gamedataAttackType): Bool
  /** @noSelf **/
  IsPressureWave(attackType: gamedataAttackType): Bool
  /** @noSelf **/
  IsAreaOfEffect(attackType: gamedataAttackType): Bool
  /** @noSelf **/
  IsDismembermentCause(attackType: gamedataAttackType): Bool
  /** @noSelf **/
  IsEffect(attackType: gamedataAttackType): Bool
  /** @noSelf **/
  IsDoT(attackType: gamedataAttackType): Bool
  PreAttack(): void
  Initialize(): void
  SetInstigator(i: GameObject): void
  SetSource(s: GameObject): void
  SetWeapon(w: WeaponObject): void
  SetAttackDefinition(a: IAttack): void
  SetHitType(h: gameuiHitType): void
  SetAttackPosition(position: Vector4): void
  SetWeaponCharge(charge: number): void
  SetVehicleImpactForce(force: number): void
  SetAdditionalCritChance(f: number): void
  GetInstigator(): GameObject
  GetSource(): GameObject
  GetWeapon(): WeaponObject
  GetAttackDefinition(): IAttack
  GetAttackPosition(): Vector4
  GetAttackType(): gamedataAttackType
  GetStatusEffects(): SHitStatusEffect[]
  GetHitType(): gameuiHitType
  GetWeaponCharge(): number
  GetNumRicochetBounces(): number
  GetVehicleImpactForce(): number
  GetAdditionalCritChance(): number
  GetAttackSubtype(): gamedataAttackSubtype
  /** @noSelf **/
  CanEffectCriticallyHit(attackData: AttackData): Bool
  /** @noSelf **/
  IsPlayerInCombat(attackData: AttackData): Bool
  /** @noSelf **/
  CanGrenadeCriticallyHit(attackData: AttackData): Bool
  WasBlocked(): Bool
  WasDeflected(): Bool
  DoesAttackWeaponHaveTag(tag: CName): Bool
  ClearDamage(): void
  AddStatusEffect(effect: TweakDBID, stacks: number): void
  HasFlag(flag: hitFlag): Bool
  /** @noSelf **/
  HasFlag(flags: SHitFlag[], flag: hitFlag): Bool
  AddFlag(flag: hitFlag, source: CName): void
  RemoveFlag(flag: hitFlag, source: CName): void
  GetFlags(): SHitFlag[]
}

declare interface IAttack extends IScriptable {

  /** @noSelf **/
  Create(context: AttackInitContext): IAttack
  GetParameterBool(parameterName: CName, defaultValue?: Bool): Bool
  GetParameterFloat(parameterName: CName, defaultValue?: number): number
  GetParameterInt(parameterName: CName, defaultValue?: number): number
  GetParameterName(parameterName: CName, defaultValue?: CName): CName
  GetRecord(): Attack_Record
  GetStatModList(statModList: gameStatModifierData[]): void
  StartAttack(): Bool
  SetPreviewActive(previewActive: Bool): void
  SetDamageProjectionActive(active: Bool): void
  GetDebugData(): AttackDebugData
}

declare interface AttackType_Record extends TweakDBRecord {

  Name(): string
  Comment(): string
  Type(): gamedataAttackType
}

declare interface DamageManager extends IScriptable {

  /** @noSelf **/
  PreAttack(attackData: AttackData): void
  /** @noSelf **/
  ModifyHitData(hitEvent: gameHitEvent): void
  /** @noSelf **/
  ProcessDodgeOpportunity(attackData: AttackData): void
  /** @noSelf **/
  IsValidDirectionToDefendMeleeAttack(attackerForward: Vector4, defenderForward: Vector4): Bool
  /** @noSelf **/
  ProcessDefensiveState(hitEvent: gameHitEvent): void
  /** @noSelf **/
  SendNameEventToPSM(eventName: CName, hitEvent: gameHitEvent): void
  /** @noSelf **/
  PostProcess(hitEvent: gameHitEvent): void
  /** @noSelf **/
  CalculateSourceModifiers(hitEvent: gameHitEvent): void
  /** @noSelf **/
  CalculateTargetModifiers(hitEvent: gameHitEvent): void
  /** @noSelf **/
  CalculateGlobalModifiers(hitEvent: gameHitEvent): void
  /** @noSelf **/
  GetScriptedPuppetTarget(hitEvent: gameHitEvent): ScriptedPuppet
  /** @noSelf **/
  DealStaminaDamage(hitEvent: gameHitEvent, targetID: StatsObjectID, statSystem: StatsSystem): void
}

declare interface BaseStimuliEvent extends AIEvent {

}

declare interface TargetingSystem extends ITargetingSystem {

  GetTargetParts(instigator: GameObject, query: TargetSearchQuery, parts: TS_TargetPartInfo[]): Bool
  GetObjectClosestToCrosshair(instigator: GameObject, angleDistance: EulerAngles, query: TargetSearchQuery): GameObject
  GetComponentClosestToCrosshair(instigator: GameObject, angleDistance: EulerAngles, query: TargetSearchQuery): IPlacedComponent
  GetCrosshairData(instigator: GameObject, crosshairPosition: Vector4, crosshairForward: Vector4): void
  GetDefaultCrosshairData(instigator: GameObject, crosshairPosition: Vector4, crosshairForward: Vector4): void
  GetDefaultCrosshairPositionProvider(instigator: GameObject, offsetEntitySpace?: Vector3): IPositionProvider
  GetDefaultCrosshairOrientationProvider(instigator: GameObject, orientationEntitySpace?: Quaternion): IOrientationProvider
  GetLookAtObject(instigator: GameObject, withLOS?: Bool, ignoreTranparent?: Bool): GameObject
  GetLookAtComponent(instigator: GameObject, withLOS?: Bool, ignoreTranparent?: Bool): IComponent
  GetCurrentSpread(instigator: GameObject): Vector4
  GetPuppetBlackboardUpdater(): PuppetBlackboardUpdater
  AimSnap(instigator: GameObject): void
  LookAt(instigator: GameObject, params: AimRequest): void
  BreakAimSnap(instigator: GameObject): void
  BreakLookAt(instigator: GameObject): void
  OnAimStartBegin(instigator: GameObject): void
  OnAimStartEnd(instigator: GameObject): void
  OnAimStop(instigator: GameObject): void
  SetAimAssistConfig(owner: GameObject, presetId: TweakDBID): void
  GetAimAssistConfig(owner: GameObject): TweakDBID
  ProcessLookAtFilter(instigator: GameObject, filter: TargetFilter): void
  RegisterLookAtFilter(instigator: GameObject, filter: TargetFilter): TargetFilterTicket
  UnregisterLookAtFilter(instigator: GameObject, filterTicket: TargetFilterTicket): void
  AddIgnoredLookAtEntity(instigator: GameObject, ignoredEntityId: EntityID): void
  RemoveIgnoredLookAtEntity(instigator: GameObject, ignoredEntityId: EntityID): void
  AddIgnoredCollisionEntities(entity: GameObject): void
  RemoveIgnoredCollisionEntities(entity: GameObject): void
  SetIsMovingFast(instigator: GameObject, isFast: Bool): void
  IsVisibleTarget(instigator: GameObject, target: GameObject): Bool
  GetTargetingSet(instigator: GameObject, object: GameObject): TargetingSet
  GetBestComponentOnTargetObject(shootStartPosition: Vector4, shootStartForward: Vector4, target: GameObject, componentFilter: TargetComponentFilterType): TargetingComponent
  IsAnyEnemyVisible(instigator: GameObject, distance?: number): Bool
  IsAnyEnemyOrSensorVisible(instigator: GameObject, distance?: number): Bool
}

declare interface TargetSearchQuery {

  /** @noSelf **/
  SetComponentFilter(self: TargetSearchQuery, componentFilter: TargetComponentFilterType): void
}

declare interface StimuliEvent extends BaseStimuliEvent {

  SetStimType(stimType: gamedataStimType): void
  SetStimTags(record: Stim_Record): void
  SetMovePositions(position: Vector4[]): void
  SetStimPriority(priority: gamedataStimPriority): void
  SetStimPropagation(propagation: gamedataStimPropagation): void
  SetStimCategory(category: CName): void
  SetStimInvestigateData(data: stimInvestigateData): void
  IsTagInStimuli(tag: CName): Bool
  GetStimType(): gamedataStimType
  GetStimTags(): CName[]
  GetStimPriority(): gamedataStimPriority
  GetStimPropagation(): gamedataStimPropagation
  GetStimCategory(): CName
  GetStimInvestigateData(): stimInvestigateData
  GetSourcePositions(): Vector4[]
}

declare interface Stim_Record extends TweakDBRecord {

  Propagation(): StimPropagation_Record
  Type(): StimType_Record
  Priority(): StimPriority_Record
  Tags(): CName[]
  GetTagsCount(): number
  GetTagsItem(index: number): CName
  TagsContains(item: CName): Bool
  Category(): CName
  Interval(): number
  Radius(): number
  Fear(): number
  Aggressive(): number
  IsReactionStim(): Bool
}

/** @customConstructor Vector4.new */
declare class Vector4 {
  x: number
  y: number
  z: number
  w: number
  constructor(x: number, y: number, z: number, w: number)
  /** @noSelf **/
  Dot2D(a: Vector4, b: Vector4): number
  /** @noSelf **/
  Dot(a: Vector4, b: Vector4): number
  /** @noSelf **/
  Cross(a: Vector4, b: Vector4): Vector4
  /** @noSelf **/
  Length2D(a: Vector4): number
  /** @noSelf **/
  LengthSquared(a: Vector4): number
  /** @noSelf **/
  Length(a: Vector4): number
  /** @noSelf **/
  Normalize2D(a: Vector4): Vector4
  /** @noSelf **/
  Normalize(a: Vector4): Vector4
  /** @noSelf **/
  Rand2D(): Vector4
  /** @noSelf **/
  Rand(): Vector4
  /** @noSelf **/
  RandRing(minRadius: number, maxRadius: number): Vector4
  /** @noSelf **/
  RandCone(coneDir: number, coneAngle: number, minRadius: number, maxRadius: number): Vector4
  /** @noSelf **/
  RandRingStatic(seed: number, minRadius: number, maxRadius: number): Vector4
  /** @noSelf **/
  Mirror(dir: Vector4, normal: Vector4): Vector4
  /** @noSelf **/
  Distance(from: Vector4, to: Vector4): number
  /** @noSelf **/
  DistanceSquared(from: Vector4, to: Vector4): number
  /** @noSelf **/
  Distance2D(from: Vector4, to: Vector4): number
  /** @noSelf **/
  DistanceSquared2D(from: Vector4, to: Vector4): number
  /** @noSelf **/
  DistanceToEdge(point: Vector4, a: Vector4, b: Vector4): number
  /** @noSelf **/
  NearestPointOnEdge(point: Vector4, a: Vector4, b: Vector4): Vector4
  /** @noSelf **/
  ToRotation(dir: Vector4): EulerAngles
  /** @noSelf **/
  Heading(dir: Vector4): number
  /** @noSelf **/
  FromHeading(heading: number): Vector4
  /** @noSelf **/
  Transform(m: Matrix, point: Vector4): Vector4
  /** @noSelf **/
  TransformDir(m: Matrix, point: Vector4): Vector4
  /** @noSelf **/
  TransformH(m: Matrix, point: Vector4): Vector4
  /** @noSelf **/
  GetAngleBetween(from: Vector4, to: Vector4): number
  /** @noSelf **/
  GetAngleDegAroundAxis(dirA: Vector4, dirB: Vector4, axis: Vector4): number
  /** @noSelf **/
  ProjectPointToPlane(p1: Vector4, p2: Vector4, p3: Vector4, toProject: Vector4): Vector4
  /** @noSelf **/
  RotateAxis(vector: Vector4, axis: Vector4, angle: number): Vector4
  /** @noSelf **/
  RotByAngleXY(vec: Vector4, angleDeg: number): Vector4
  /** @noSelf **/
  Interpolate(v1: Vector4, v2: Vector4, ratio: number): Vector4
  /** @noSelf **/
  ToString(vec: Vector4): string
  /** @noSelf **/
  ToStringPrec(vec: Vector4, precision: number): string
  /** @noSelf **/
  Zero(self: Vector4): void
  /** @noSelf **/
  IsZero(self: Vector4): Bool
  /** @noSelf **/
  IsXYZZero(self: Vector4): Bool
  /** @noSelf **/
  IsFloatZero(self: Vector4): Bool
  /** @noSelf **/
  IsXYZFloatZero(self: Vector4): Bool
  /** @noSelf **/
  EmptyVector(): Vector4
  /** @noSelf **/
  ClampLength(self: Vector4, min: number, max: number): Vector4
  /** @noSelf **/
  Vector3To4(v3: Vector3): Vector4
  /** @noSelf **/
  Vector4To3(v4: Vector4): Vector3
}

declare interface Vector3 {

}

declare interface gameHitEvent extends Event {

}

declare interface HitRepresentationQueryResult {

}

declare interface DamageSystemHelper extends IScriptable {

  /** @noSelf **/
  GetHitShape(hitEvent: gameHitEvent): HitShapeData
  /** @noSelf **/
  GetHitShapeUserDataBase(data: HitShapeData): HitShapeUserDataBase
  /** @noSelf **/
  GetLocalizedDamageMultiplier(type: EHitShapeType): number
  /** @noSelf **/
  GetHitShapeTypeFromData(data: HitShapeData): EHitShapeType
  /** @noSelf **/
  IsProtectionLayer(data: HitShapeData): Bool
}

declare interface HitShapeUserData extends IScriptable {

}

declare interface HitShapeUserDataBase extends HitShapeUserData {

  /** @noSelf **/
  GetHitShapeDamageMod(userData: HitShapeUserDataBase): number
  /** @noSelf **/
  IsProtectionLayer(userData: HitShapeUserDataBase): Bool
  /** @noSelf **/
  IsInternalWeakspot(userData: HitShapeUserDataBase): Bool
  IsHead(): Bool
  GetShapeType(): EHitShapeType
  /** @noSelf **/
  DisableHitShape(gameObj: GameObject, shapeName: CName, hierarchical: Bool): void
  /** @noSelf **/
  EnableHitShape(gameObj: GameObject, shapeName: CName, hierarchical: Bool): void
  /** @noSelf **/
  GetHitReactionZone(userData: HitShapeUserDataBase): EHitReactionZone
  /** @noSelf **/
  GetDismembermentBodyPart(userData: HitShapeUserDataBase): gameDismBodyPart
  /** @noSelf **/
  IsHitReactionZoneHead(userData: HitShapeUserDataBase): Bool
  /** @noSelf **/
  IsHitReactionZoneTorso(userData: HitShapeUserDataBase): Bool
  /** @noSelf **/
  IsHitReactionZoneLeftArm(userData: HitShapeUserDataBase): Bool
  /** @noSelf **/
  IsHitReactionZoneRightArm(userData: HitShapeUserDataBase): Bool
  /** @noSelf **/
  IsHitReactionZoneRightLeg(userData: HitShapeUserDataBase): Bool
  /** @noSelf **/
  IsHitReactionZoneLeftLeg(userData: HitShapeUserDataBase): Bool
  /** @noSelf **/
  IsHitReactionZoneLeg(userData: HitShapeUserDataBase): Bool
  /** @noSelf **/
  IsHitReactionZoneLimb(userData: HitShapeUserDataBase): Bool
}

declare interface ToggleHitShapeEvent extends Event {

}

declare interface HitShapeData {

}

declare interface SHitFlag {

}

declare interface StatPoolsSystem extends IStatPoolsSystem {

  RequestAddingStatPool(objID: StatsObjectID, statPoolRecordID: TweakDBID, forceCreateStatPools?: Bool): void
  RequestRemovingStatPool(objID: StatsObjectID, statPoolType: gamedataStatPoolType): void
  GetStatPoolMaxPointValue(objID: StatsObjectID, statPoolType: gamedataStatPoolType): number
  GetStatPoolValue(objID: StatsObjectID, statPoolType: gamedataStatPoolType, perc?: Bool): number
  GetStatPoolValueCustomLimit(objID: StatsObjectID, statPoolType: gamedataStatPoolType, perc?: Bool): number
  GetBonus(objID: StatsObjectID, statPoolType: gamedataStatPoolType, perc?: Bool): number
  IsStatPoolAdded(objID: StatsObjectID, statPoolType: gamedataStatPoolType): Bool
  HasActiveStatPool(objID: StatsObjectID, statPoolType: gamedataStatPoolType): Bool
  HasStatPoolValueReachedMin(objID: StatsObjectID, statPoolType: gamedataStatPoolType): Bool
  HasStatPoolValueReachedMax(objID: StatsObjectID, statPoolType: gamedataStatPoolType): Bool
  HasStatPoolValueReachedCustomLimit(objID: StatsObjectID, statPoolType: gamedataStatPoolType): Bool
  RequestSettingStatPoolMinValue(objID: StatsObjectID, statPoolType: gamedataStatPoolType, instigator: GameObject): void
  RequestSettingStatPoolMaxValue(objID: StatsObjectID, statPoolType: gamedataStatPoolType, instigator: GameObject): void
  RequestSettingStatPoolValue(objID: StatsObjectID, statPoolType: gamedataStatPoolType, newValue: number, instigator: GameObject, perc?: Bool): void
  RequestSettingStatPoolValueCustomLimit(objID: StatsObjectID, statPoolType: gamedataStatPoolType, newValue: number, instigator: GameObject, perc?: Bool): void
  RequestSettingStatPoolValueIgnoreChangeMode(objID: StatsObjectID, statPoolType: gamedataStatPoolType, newValue: number, instigator: GameObject, perc?: Bool): void
  RequestChangingStatPoolValue(objID: StatsObjectID, statPoolType: gamedataStatPoolType, diff: number, instigator: GameObject, forceChunkTransfering: Bool, perc?: Bool): void
  RequestSettingStatPoolBonus(objID: StatsObjectID, statPoolType: gamedataStatPoolType, bonus: number, instigator: GameObject, persistentBonus: Bool, perc?: Bool): void
  GetModifier(objID: StatsObjectID, statPoolType: gamedataStatPoolType, type: gameStatPoolModificationTypes, modifier: StatPoolModifier): Bool
  RequestSettingModifier(objID: StatsObjectID, statPoolType: gamedataStatPoolType, type: gameStatPoolModificationTypes, modifier: StatPoolModifier): void
  RequestSettingModifierWithRecord(objID: StatsObjectID, statPoolType: gamedataStatPoolType, type: gameStatPoolModificationTypes, modifierRecordID: TweakDBID): void
  RequestResetingModifier(objID: StatsObjectID, statPoolType: gamedataStatPoolType, type: gameStatPoolModificationTypes): void
  GetActiveModifierRecordID(objID: StatsObjectID, statPoolType: gamedataStatPoolType, type: gameStatPoolModificationTypes, isModifierDefault: Bool): TweakDBID
  ToPercentage(objID: StatsObjectID, statPoolType: gamedataStatPoolType, value: number): number
  ToPoints(objID: StatsObjectID, statPoolType: gamedataStatPoolType, percValue: number): number
  RequestRegisteringListener(objID: StatsObjectID, statPoolType: gamedataStatPoolType, listener: IStatPoolsListener): void
  RequestUnregisteringListener(objID: StatsObjectID, statPoolType: gamedataStatPoolType, listener: IStatPoolsListener): void
  /** @noSelf **/
  GetStatPoolType(damageType: gamedataDamageType): gamedataStatPoolType
}

declare interface gameAttackComputed extends IScriptable {

  GetTotalAttackValue(statPoolType: gamedataStatPoolType): number
  GetAttackValue(damageType: gamedataDamageType): number
  SetAttackValue(value: number, damageType?: gamedataDamageType): void
  AddAttackValue(value: number, damageType?: gamedataDamageType): void
  MultAttackValue(value: number, damageType?: gamedataDamageType): void
  GetAttackValues(): number[]
  SetAttackValues(attackValues: number[]): void
  GetOriginalAttackValues(): number[]
  GetDominatingDamageType(): gamedataDamageType
}

declare interface AnimExternalEvent extends Event {

}

declare interface PSMBaseEvent extends Event {

}

declare interface PSMPostponedParameterBase extends PSMBaseEvent {

}

declare interface PSMPostponedParameterBool extends PSMPostponedParameterBase {

}

declare interface AIComponent extends GameComponent {

  SetBehaviorArgument(n: CName, nv: Variant): void
  GetBehaviorArgument(n: CName): Variant
  GetFriendlyFireSystem(): IFriendlyFireSystem
  GetLoSFinderSystem(): ILoSFinderSystem
  GetSignals(): gameBoolSignalTable
  SendCommand(cmd: AICommand): Bool
  CancelCommand(cmd: AICommand): Bool
  CancelCommandById(cmdId: number): Bool
  StartExecutingCommand(cmd: AICommand): Bool
  StopExecutingCommand(cmd: AICommand, success: Bool): Bool
  IsCommandExecuting(commandName: CName, useInheritance: Bool): Bool
  IsCommandWaiting(commandName: CName, useInheritance: Bool): Bool
  GetCommandState(cmd: AICommand): AICommandState
  DebugLog(category: CName, message: string): void
  GetHighLevelState(): gamedataNPCHighLevelState
  GetAIRole(): AIRole
  SetAIRole(role: AIRole): void
  InvokeBehaviorCallback(cbName: CName): void
  GetLOD(): number
  GetStoryTier(): gameStoryTier
  SetCombatSpaceSize(combatSpaceSize: AICombatSpaceSize): void
  GetCombatSpaceSize(): AICombatSpaceSize
  SetCombatSpaceSizeMultiplier(multiplier: number): void
  GetCombatSpaceSizeMultiplier(): number
  GetUpdateTickCount(): number
  ForceTickNextFrame(): void
  EnableCollider(): void
  DisableCollider(): void
  GetOrCreateBlackboard(definition: BlackboardDefinition, cache: IBlackboard): IBlackboard
  GetCurrentReactionPreset(): ReactionPreset_Record
  /** @noSelf **/
  InvokeBehaviorCallback(obj: ScriptedPuppet, cbName: CName): void
  /** @noSelf **/
  SendCommand(obj: ScriptedPuppet, cmd: AICommand): void
  /** @noSelf **/
  CancelCommand(obj: ScriptedPuppet, cmd: AICommand): void
}

declare interface ReactionManagerComponent extends ScriptableComponent {

  OnGameAttach(): void
  OnPlayerMuntedToMyVehicle(evt: PlayerMuntedToMyVehicle): Bool
  OnSenseVisibilityEvent(evt: SenseVisibilityEvent): Bool
  OnLookedAtEvent(evt: LookedAtEvent): Bool
  OnDetectedEvent(evt: OnDetectedEvent): Bool
  OnSecurityAreaCrossingPerimeter(evt: SecurityAreaCrossingPerimeter): Bool
  OnSecuritySystemOutput(evt: SecuritySystemOutput): Bool
  OnReprimandEscalationEvent(evt: ReprimandEscalationEvent): Bool
  StartEscalateReprimand(): void
  ReprimandEscalation(): void
  DeescalateReprimand(): void
  OnReprimandUpdate(evt: ReprimandUpdate): Bool
  RecentReaction(behaviorName: gamedataOutput): Bool
  OnSuspiciousObjectEvent(evt: SuspiciousObjectEvent): Bool
  HelpAlly(ally: GameObject, attacker?: Entity): void
  ReactToSecurityOutput(evt: SecuritySystemOutput): void
  ReflectSecSysStateToHLS(securityState: ESecuritySystemState): Bool
  TriggerAlerted(): void
  TriggerCombat(trespasser: GameObject): void
  OnReactionBehaviorStatus(evt: ReactionBehaviorStatus): Bool
  OnEndLookatEvent(evt: EndLookatEvent): Bool
  OnTerminateReactionLookatEvent(evt: TerminateReactionLookatEvent): Bool
  OnRepeatLookatEvent(evt: RepeatLookatEvent): Bool
  OnEventReceived(stimEvent: StimuliEvent): Bool
  OnAIEvent(aiEvent: AIEvent): Bool
  Initialiaze(): void
  CacheEvent(stimEvent: StimuliEvent): void
  CacheReaction(reactionData: AIReactionData): void
  IsEventDuplicated(stimEvent: StimuliEvent): Bool
  IsDuplicate(stimEvent: StimuliEvent, cacheStim: StimuliEvent): Bool
  OnStimThresholdEvent(thresholdEvent: StimThresholdEvent): Bool
  OnStealthStimThresholdEvent(thresholdEvent: StealthStimThresholdEvent): Bool
  GetIgnoreList(): EntityID[]
  IsStimuliEventValid(stimEvent: StimuliEvent): Bool
  ShouldEventBeProcessed(stimEvent: StimuliEvent): Bool
  ShouldStimBeProcessed(stimEvent: StimuliEvent): Bool
  ProcessStimParams(stimEvent: StimuliEvent): StimParams
  FillStimData(stimEvent: StimuliEvent): StimEventData
  IsReactionAvailableInPreset(stimTrigger: gamedataStimType): Bool
  CreateFearThreashold(): void
  AddReactionValueToStatPool(reactionData: AIReactionData): void
  GetRules(): Rule_Record[]
  GetReactionOutput(stimType: gamedataStimType, rules: Rule_Record[]): ReactionOutput
  StimRule(rule: Rule_Record, stimType: gamedataStimType): Bool
  ProcessReactionOutput(stimEvent: StimuliEvent, stimParams: StimParams): void
  UpdateActiveReaction(reaction: ReactionOutput, stimEvent: StimuliEvent, stimData: StimEventData, updateByActive: Bool): void
  TriggerBehaviorReaction(reaction: ReactionOutput, stimEvent: StimuliEvent, stimData: StimEventData): void
  GetStimSource(stimEvent: StimuliEvent): Vector4
  TriggerCombatFromHostileStim(stimType: gamedataStimType): Bool
  TriggerAlertedFromHostileStim(stimEvent: StimuliEvent): Bool
  IsSquadMateInDanger(reaction: gamedataOutput): Bool
  FirstSquadMemberReaction(): Bool
  TriggerPendingReaction(): void
  TriggerReactionBehaviorForCrowd(stimEvent: StimuliEvent, reaction: gamedataOutput, initAnimInWorkspot: Bool): void
  TriggerReactionBehaviorForCrowd(target: GameObject, reaction: gamedataOutput, initAnimInWorkspot: Bool, sourcePosition?: Vector4): void
  OnDelayStimEvent(evt: DelayStimEvent): Bool
  ProcessEnvironmentalHazard(stimEvent: StimuliEvent): void
  DelayEnvironmentalHazardEvent(stimEvent: StimuliEvent): DelayID
  OnCleanEnvironmentalHazardEvent(cleanEnvironmentalHazardEvent: CleanEnvironmentalHazardEvent): Bool
  InitCrowd(): void
  ShouldStimBeProcessedByCrowd(stimEvent: StimuliEvent): Bool
  HandleCrowdReaction(stimEvent: StimuliEvent): void
  OnCrowdReaction(reactionDelayEvent: DelayedCrowdReactionEvent): Bool
  SpreadFear(instigator: GameObject, phase: number): void
  ShouldFearInPlace(stimEvent: StimuliEvent): Bool
  TriggerFacialLookAtReaction(forceFear?: Bool, playVO?: Bool): void
  TriggerFearFacial(phase: number): void
  ResetFacial(cooldown: number): void
  OnResetLookatReactionEvent(evt: ResetLookatReactionEvent): Bool
  OnResetFacialEvent(evt: ResetFacialEvent): Bool
  CanTriggerExpressionLookAt(): Bool
  IsPlayerFearThreat(): Bool
  IsPlayerCarryingBody(playerPuppet: PlayerPuppet): Bool
  SetCrowdRunningAwayAnimFeature(stimType: gamedataStimType): void
  SafeToExitFear(): Bool
  SafeToExitPanicFear(): Bool
  SurrenderToLeave(): Bool
  CanTriggerReprimandOrder(): Bool
  CanAskToHolsterWeapon(): Bool
  NotifySecuritySystem(stimType: gamedataStimType, stimObject: GameObject): void
  SetWarningMessage(lockey: string): void
  OnTriggerDelayedReactionEvent(evt: TriggerDelayedReactionEvent): Bool
  OnExitWorkspotSequenceEvent(evt: ExitWorkspotSequenceEvent): Bool
  OnCrowdSettingsEvent(evt: CrowdSettingsEvent): Bool
  GetFearReactionPhase(stimEvent: StimuliEvent): number
  ShouldInterruptCurrentFearStage(fearPhase: number): Bool
  ConvertFearStageToFearPhase(fearStage: gameFearStage): number
  GetSpreadFearPhase(stimEvent: StimuliEvent): number
  CanReactInVehicle(stimEvent: StimuliEvent): Bool
  OnCrowdCallingPoliceEvent(evt: CrowdCallingPoliceEvent): Bool
  CheckStalk(target: GameObject, timeout: number): void
  CheckComfortZone(): void
  OnDisturbingComfortZoneEvent(evt: DisturbingComfortZone): Bool
  OnCheckComfortZoneEvent(evt: CheckComfortZoneEvent): Bool
  GetOutputPriority(output: gamedataOutput): number
  DelayReaction(stimType: gamedataStimType): Bool
  SelectFacialEmotion(lookAtData: LookAtData): void
  MapLookAtVO(lookAtData: LookAtData, vo: CName): void
  ActivateReactionLookAt(targetEntity: Entity, end?: Bool, repeat?: Bool, duration?: number, upperBody?: Bool): Bool
  DeactiveLookAt(repeat?: Bool): Bool
  OnReactionStarted(reactionData: AIReactionData): void
  GetCurrentStimTimeStamp(): number
  GetCurrentStimThresholdValue(): number
  GetCurrentStealthStimTimeStamp(): number
  GetCurrentStealthStimThresholdValue(): number
  AddInvestigatedBody(bodyID: EntityID): void
  OnAddInvestigatedBodyEvent(evt: AddInvestigatorEvent): Bool
  InformInvestigators(): void
  OnBodyPickedUp(evt: SetBodyPositionEvent): Bool
  OnReactionEnded(): void
  OnResetReactionEvent(evt: ResetReactionEvent): Bool
  /** @noSelf **/
  BodyInvestigated(owner: ScriptedPuppet): void
  OnBodyInvestigated(evt: BodyInvestigatedEvent): Bool
  CheckSquadInvestigation(stimEventData: StimEventData): Bool
  GetOwnerPuppet(): ScriptedPuppet
  HasCombatTarget(): Bool
  PickCloserTarget(newStimEvent: StimuliEvent, updateByActive: Bool): void
  DidTargetMakeMeAlerted(target: GameObject): Bool
  IsTargetInterestingForRecentSquadMates(target: GameObject, ally: GameObject): Bool
  IsPlayerAiming(): Bool
  GetDesiredReactionData(): AIReactionData
  GetActiveReactionData(): AIReactionData
  GetDesiredReactionName(): gamedataOutput
  GetReactionBehaviorName(): gamedataOutput
  GetReactionCache(): AIReactionData[]
  GetStimuliCache(): StimuliEvent[]
  GetReceivedStimType(): gamedataStimType
  GetWorkSpotReactionFlag(): Bool
  IsTargetInterestingForPerception(target: GameObject): Bool
  GetPuppetReactionBlackboard(): IBlackboard
  IsInitAnimShock(behavior: gamedataOutput): Bool
  IsInitAnimCall(stim: gamedataStimType): Bool
  StartProcess(affected: Bool): void
  GetInPendingBehavior(): Bool
  GetReactionPreset(): ReactionPreset_Record
  IsInPendingBehavior(): Bool
  IsAlertedByDeadBody(): Bool
  GetPreviousFearPhase(): number
  GetEnvironmentalHazards(): StimuliEvent[]
  GetActiveStimPriority(): gamedataStimPriority
  GetActiveStimTarget(): GameObject
  GetActiveStimSource(): Vector4
  IsInProcess(): Bool
  ShouldUpdateThreatPosition(stimEvent: StimuliEvent): Bool
  ShouldTriggerGrenadeDodgeBehavior(stimEvent: StimuliEvent): Bool
  CanTriggerPanicInCombat(stimEvent: StimuliEvent): Bool
  CanStimInterruptCombat(stimEvent: StimuliEvent): Bool
  ShouldAddToIgnoreList(stimType: gamedataStimType): Bool
  IsTargetVisible(target: GameObject): Bool
  IsTargetDetected(target: GameObject): Bool
  SourceAttitude(source: GameObject, attitude: EAIAttitude): Bool
  IsTargetInFront(target: GameObject, frontAngle?: number, meInFrontOfTarget?: Bool): Bool
  IsTargetBehind(target: GameObject, angle?: number, meBehindOfTarget?: Bool): Bool
  IsTargetInMovementDirection(target: GameObject): Bool
  IsTargetClose(target: GameObject, distance?: number): Bool
  TargetVerticalCheck(target: GameObject, distance?: number): Bool
  /** @noSelf **/
  ReactOnPlayerStealthStim(owner: GameObject, target: GameObject): Bool
  CheckHearingDistance(stimEvent: StimuliEvent): Bool
  CheckVisibilityRaycast(stimEvent: StimuliEvent): Bool
  ValidVisualGunshotTarget(stimEvent: StimuliEvent, reactionData: AIReactionData): Bool
  IsDirectStimuli(stimType: gamedataStimType): Bool
  IsPublicZone(stimEvent: StimuliEvent): Bool
  IsPlayerInZone(zone: gamePSMZones): Bool
  /** @noSelf **/
  HasStimTag(stimEvent: StimuliEvent, tag: CName): Bool
  IgnoreStimIfNonFriendly(stimEvent: StimuliEvent): Bool
  IsSameStimulus(stimEvent: StimuliEvent): Bool
  IsSameSourceObject(stimEvent: StimuliEvent): Bool
  IgnoreStimIfFromSameSource(stimEvent: StimuliEvent): Bool
  IsInList(list: StimEventData[], stimData: StimEventData): Bool
  IsCategory(stimEvent: StimuliEvent, category: CName): Bool
  IsStimPriorityValid(stimEvent: StimuliEvent, activePriority: gamedataStimPriority): Bool
  IsTargetSquadAlly(target: GameObject): Bool
  IsTargetMelee(target: GameObject): Bool
  IsTargetArmed(target: GameObject): Bool
  IsTargetRecentSquadAlly(target: GameObject): Bool
  ShouldHelpAlly(stimType: gamedataStimType): Bool
  ShouldPoliceReact(stimEvent: StimuliEvent): Bool
  ShouldBeDetected(stimType: gamedataStimType): Bool
  SetBaseReactionPreset(ignoreSavedPreset?: Bool): void
  SetReactionPreset(reactionPreset: ReactionPreset_Record): void
  MapReactionPreset(mappingName: string): void
  ReevaluateReactionPreset(ignoreSavedPreset?: Bool): void
  CheckCrowd(): void
  SetDeadBodyVisibleComponent(killer: GameObject): void
  /** @noSelf **/
  SendVOEventToSquad(owner: GameObject, voEvent: CName, setOwnerAsAnsweringEntity?: Bool): void
  SendEventToSquad(ignoreListEvent?: IgnoreListEvent): void
  GetThreatDistanceSquared(threat: GameObject): number
  GetFearAnimWrapper(fearPhase: number): CName
  GetRandomFearLocomotionAnimWrapper(fearPhase: number, stimType?: gamedataStimType): CName
  ResetAllFearAnimWrappers(): void
  IsFearLocomotionWrapperSet(): Bool
  ReevaluateReaction(): void
  OnStanceLevelChanged(evt: StanceStateChangeEvent): Bool
  OnHighLevelStateDataEvent(evt: gameHighLevelStateDataEvent): Bool
  OnRagdollEnabledEvent(evt: RagdollNotifyEnabledEvent): Bool
  OnGameDetach(): void
  OnDeadBodyEvent(evt: DeadBodyEvent): Bool
  OnIgnoreListEvent(evt: IgnoreListEvent): Bool
  OnNPCRoleChangeEvent(evt: NPCRoleChangeEvent): Bool
  OnWorkspotStartedEvent(evt: WorkspotStartedEvent): Bool
  OnWorkspotFinishedEvent(evt: WorkspotFinishedEvent): Bool
  OnStatusEffectApplied(evt: ApplyStatusEffectEvent): Bool
  OnStatusEffectRemoved(evt: RemoveStatusEffect): Bool
  OnReactionFinishedEvent(evt: ReactionFinishedEvent): Bool
  OnReevaluatePresetEvent(evt: ReevaluatePresetEvent): Bool
  OnReactionChangeRequestEvent(evt: ReactionChangeRequestEvent): Bool
  OnPendingBehaviorChanged(value: Bool): Bool
  OnAttitudeGroupChanged(evt: AttitudeGroupChangedEvent): Bool
  OnCrosswalkEvent(evt: CrosswalkEvent): Bool
  OnBumpEvent(evt: BumpEvent): Bool
  PlayBumpInWorkspot(side: gameinteractionsBumpSide, direction: Vector4): void
  OnVehicleHit(evt: gameVehicleHitEvent): Bool
  OnPlayerProximityStartEvent(evt: PlayerProximityStartEvent): Bool
  OnPlayerProximityStopEvent(evt: PlayerProximityStopEvent): Bool
  OnProximityLookatEvent(evt: ProximityLookatEvent): Bool
  OnInCrowd(evt: InCrowd): Bool
  OnOutOfCrowd(evt: OutOfCrowd): Bool
  IsInTrafficLane(): Bool
  OnSwapPreset(evt: SwapPresetEvent): Bool
  OnRainEvent(evt: RainEvent): Bool
  OnDistrurbComfortZoneAggressiveEvent(evt: DistrurbComfortZoneAggressiveEvent): Bool
  OnAreaEnter(trigger: AreaEnteredEvent): Bool
  OnAreaExit(trigger: AreaExitedEvent): Bool
  OnExplorationEnteredEvent(evt: ExplorationEnteredEvent): Bool
  OnExplorationLeftEvent(evt: ExplorationLeftEvent): Bool
}

declare interface AIActionHelper extends IScriptable {

  /** @noSelf **/
  ActionDebugHelper(entity: Entity, actionName: string): Bool
  /** @noSelf **/
  ActionDebugHelper(actionNameCheck: string, entity: Entity, actionName: string): Bool
  /** @noSelf **/
  ActionDebugHelper(actionNameCheck: string, actionName: string): Bool
  /** @noSelf **/
  SetActionExclusivity(owner: GameObject, active: Bool): void
  /** @noSelf **/
  HasLostTarget(owner: ScriptedPuppet, target: GameObject): Bool
  /** @noSelf **/
  HasCombatAICommand(owner: ScriptedPuppet): Bool
  /** @noSelf **/
  HasWorkspotAICommand(owner: ScriptedPuppet): Bool
  /** @noSelf **/
  HasFollowerCombatAICommand(owner: ScriptedPuppet): Bool
  /** @noSelf **/
  GetActionBlackboard(owner: ScriptedPuppet): IBlackboard
  /** @noSelf **/
  GetShootingBlackboard(owner: ScriptedPuppet): IBlackboard
  /** @noSelf **/
  ShouldShootDirectlyAtTarget(weaponOwner: GameObject, weapon: WeaponObject, targetPosition: Vector4): Bool
  /** @noSelf **/
  GetTargetSlotPosition(target: GameObject, slotName: CName, slotPosition: Vector4): Bool
  /** @noSelf **/
  GetTargetPositionFromPast(target: GameObject, delay: number, position: Vector4): Bool
  /** @noSelf **/
  GetTargetSlotTransform(target: GameObject, slotName: CName, slotTransform: WorldTransform): Bool
  /** @noSelf **/
  AnimationsLoadedSignal(ownerPuppet: ScriptedPuppet): void
  /** @noSelf **/
  CombatQueriesInit(ownerPuppet: ScriptedPuppet): void
  /** @noSelf **/
  TryChangingAttitudeToHostile(owner: ScriptedPuppet, target: GameObject): Bool
  /** @noSelf **/
  SetCommandCombatTarget(context: ScriptExecutionContext, target: GameObject, persistenceSource: number): Bool
  /** @noSelf **/
  ClearCommandCombatTarget(context: ScriptExecutionContext, persistenceSource: number): void
  /** @noSelf **/
  IsCommandCombatTargetValid(context: ScriptExecutionContext, commandName: CName): Bool
  /** @noSelf **/
  TargetAllSquadMembers(owner: GameObject): void
  /** @noSelf **/
  SetFriendlyTargetAllSquadMembers(owner: GameObject): void
  /** @noSelf **/
  ChangeAttitudeToFriendlyAllSquad(owner: GameObject, squadMembers: EntityID[]): void
  /** @noSelf **/
  GetActiveTopHostilePuppetThreat(puppet: ScriptedPuppet, threat: TrackedLocation): Bool
  /** @noSelf **/
  GetAnimWrapperNameBasedOnItemID(itemID: ItemID): CName
  /** @noSelf **/
  GetAnimWrapperNameBasedOnItemTag(owner: GameObject, itemID: ItemID): CName
  /** @noSelf **/
  SendItemHandling(owner: GameObject, itemRecord: Item_Record, animFeatureName: CName, equipped: Bool): void
  /** @noSelf **/
  GetReactionPresetGroup(puppet: ScriptedPuppet): string
  /** @noSelf **/
  PlayWeaponEffect(weapon: WeaponObject, effectName: CName, eventTag?: CName): void
  /** @noSelf **/
  BreakWeaponEffectLoop(weapon: WeaponObject, effectName: CName): void
  /** @noSelf **/
  KillWeaponEffect(weapon: WeaponObject, effectName: CName): void
  /** @noSelf **/
  CheckFlatheadStatPoolRequirements(game: GameInstance, actionName: string): Bool
  /** @noSelf **/
  IsCurrentlyCrouching(puppet: ScriptedPuppet): Bool
  /** @noSelf **/
  IsCurrentlyExposedInCover(puppet: ScriptedPuppet): Bool
  /** @noSelf **/
  IsCurrentlyInCoverAttackAction(puppet: ScriptedPuppet): Bool
  /** @noSelf **/
  GetItemsFromWeaponSlots(owner: GameObject, items: ItemObject[]): Bool
  /** @noSelf **/
  HasEquippedWeaponWithTag(owner: GameObject, tag: CName): Bool
  /** @noSelf **/
  IsInWorkspot(owner: GameObject): Bool
  /** @noSelf **/
  IsPointInRestrictedMovementArea(ownerPuppet: ScriptedPuppet, point: Vector4): Bool
  /** @noSelf **/
  IsPointInRMA(ownerPuppet: ScriptedPuppet, point: Vector4): Bool
  /** @noSelf **/
  GetCurrentStrongArmsTrailEffect(weapon: ItemObject): CName
  /** @noSelf **/
  StartCooldown(self: GameObject, record: AIActionCooldown_Record): number
  /** @noSelf **/
  StartCooldown(self: GameObject, cooldownName: CName, duration: number): number
  /** @noSelf **/
  IsCooldownActive(self: GameObject, record: AIActionCooldown_Record): Bool
  /** @noSelf **/
  GetBaseShootingPatternPackages(patternPackages: AIPatternsPackage_Record[]): Bool
  /** @noSelf **/
  ClearWorkspotCommand(puppet: ScriptedPuppet): Bool
  /** @noSelf **/
  GetDistanceRangeFromRingType(ringRecord: AIRingType_Record, distanceRange: Vector2): Bool
  /** @noSelf **/
  GetDistanceRangeFromRingType(ringRecord: AIRingType_Record, condition: AIOptimalDistanceCond_Record, distanceRange: Vector2): Bool
  /** @noSelf **/
  GetDistanceRangeFromRingType(ringRecord: AIRingType_Record, condition: MovementPolicy_Record, distanceRange: Vector2): Bool
  /** @noSelf **/
  GetDistanceAndToleranceFromRingType(record: MovementPolicy_Record, distance: number, tolerance: number): Bool
  /** @noSelf **/
  GetAdditionalTraceTypeValueFromTweakEnum(value: gamedataAIAdditionalTraceType): AdditionalTraceType
  /** @noSelf **/
  GetLatestActiveRingTypeRecord(puppet: ScriptedPuppet): AIRingType_Record
  /** @noSelf **/
  WeaponHasTriggerModes(weapon: WeaponObject, weaponRecord: WeaponItem_Record, triggerModes: TriggerMode_Record[]): Bool
  /** @noSelf **/
  WeaponHasTriggerMode(weapon: WeaponObject, weaponRecord: WeaponItem_Record, triggerMode: TriggerMode_Record): Bool
  /** @noSelf **/
  WeaponHasTriggerMode(weapon: WeaponObject, weaponRecord: WeaponItem_Record, triggerMode: gamedataTriggerMode): Bool
  /** @noSelf **/
  WeaponHasTriggerMode(weapon: WeaponObject, triggerMode: gamedataTriggerMode): Bool
  /** @noSelf **/
  WeaponHasTriggerMode(weapon: WeaponObject, triggerMode: TriggerMode_Record): Bool
  /** @noSelf **/
  GetLastRequestedTriggerMode(weapon: WeaponObject): gamedataTriggerMode
  /** @noSelf **/
  UpdateLinkedStatusEffects(owner: GameObject, linkedStatusEffect: LinkedStatusEffect): void
  /** @noSelf **/
  QueuePullSquadSync(owner: GameObject): void
  /** @noSelf **/
  QueueSecuritySystemCombatNotification(owner: GameObject): void
  /** @noSelf **/
  PreloadBaseAnimations(puppet: ScriptedPuppet, melee?: Bool): Bool
  /** @noSelf **/
  PreloadCoreAnimations(puppet: ScriptedPuppet, melee?: Bool): Bool
  /** @noSelf **/
  PreloadAllBaseAnimations(puppet: ScriptedPuppet): void
  /** @noSelf **/
  PreloadAnimations(puppet: ScriptedPuppet, streamingContextName: CName, highPriority: Bool): Bool
  /** @noSelf **/
  QueuePreloadCoreAnimationsEvent(puppet: ScriptedPuppet): void
  /** @noSelf **/
  QueuePreloadBaseAnimationsEvent(puppet: ScriptedPuppet): void
  /** @noSelf **/
  CheckAbility(object: GameObject, ability: GameplayAbility_Record): Bool
  /** @noSelf **/
  SetItemsEquipData(puppet: ScriptedPuppet, itemsToEquip: NPCItemToEquip[]): void
  /** @noSelf **/
  SetItemsUnequipData(puppet: ScriptedPuppet, itemsToUnequip: NPCItemToEquip[], dropItem: Bool): void
  /** @noSelf **/
  ClearItemsToEquip(puppet: ScriptedPuppet): void
  /** @noSelf **/
  ClearItemsToUnequip(puppet: ScriptedPuppet): void
  /** @noSelf **/
  ClearItemsUnequipped(puppet: ScriptedPuppet): void
  /** @noSelf **/
  ClearItemsForceUnequipped(puppet: ScriptedPuppet): void
}

declare interface PuppetStateDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface TargetTrackerComponent extends IComponent {

  RegisterListener(et: Entity, listener: AIScriptsTargetTrackingListener): void
  GetThreats(onlyVisible: Bool): TrackedLocation[]
  GetHostileThreats(onlyVisible: Bool): TrackedLocation[]
  GetTopHostileThreat(onlyVisible: Bool, threat: TrackedLocation): Bool
  ThreatFromEntity(et: Entity, threat: TrackedLocation): Bool
  HasHostileThreat(onlyVisible: Bool): Bool
  AddThreat(et: Entity, isHostile: Bool, pos: Vector4, accuracy: number, cooldown: number, isPersistent: Bool): number
  AddThreatOnPosition(pos: Vector4, timeToLive: number): number
  SetThreatPersistence(et: Entity, isPersistent: Bool, src: number): void
  GetThreatPersistence(et: Entity): AIThreatPersistenceStatus
  SetCurrentThreatsPersistence(isPersistent: Bool, src: number): void
  SetThreatBaseMul(et: Entity, threatValue: number): void
  ClearThreats(): void
  SetThreatAccuracy(et: Entity, accuracy: number): void
  SetThreatBeliefAccuracy(et: Entity, accuracy: number): void
  RequestThreatBeliefAccuracyMinValue(et: Entity, reason: CName, minAccuracy: number): void
  RemoveThreatBeliefAccuracyMinValue(et: Entity, reason: CName): void
  RemoveThreat(id: number): void
  MapThreat(et: Entity): number
  ResetDroppingCooldown(et: Entity): void
  AddDroppingCooldown(et: Entity, value: number): void
  GetDroppingCooldown(et: Entity): number
  GetCurrentPreset(): TweakDBID
  SetCurrentPreset(presetId: TweakDBID): void
  PushSquadSync(sqType: AISquadType): void
  PullSquadSync(sqType: AISquadType): void
  SetThreatPriorityDmgCurve(curveName: CName): Bool
  SetThreatPriorityDistCurve(curveName: CName): Bool
  SetThreatPriorityHisteresisCurve(curveName: CName): Bool
  SetThreatPriorityAttackersCurve(curveName: CName): Bool
  GetThreatPriorityModFromDmgCurve(timeSinceLastDmg: number): number
  GetThreatPriorityModFromDistCurve(distanceFromThreat: number): number
  GetThreatPriorityModFromHisteresisCurve(timeSinceTargetChange: number): number
  GetThreatPriorityModFromAttackersCurve(attackers: number): number
  CollectTrackers(onlyHostiles: Bool, onlyInContact: Bool): Entity[]
  IsPositionValid(pos: Vector4): Bool
  GetThreatLastKnownPositionProvider(threat: Entity, offset?: Vector3, failIfVisible?: Bool, slotName?: CName, failSafeProvider?: IPositionProvider): IPositionProvider
  GetThreatBeliefPositionProvider(threat: Entity, offset?: Vector3, failIfVisible?: Bool, slotName?: CName, failSafeProvider?: IPositionProvider): IPositionProvider
  GetThreatSharedLastKnownPositionProvider(threat: Entity, offset?: Vector3, failIfVisible?: Bool, slotName?: CName, failSafeProvider?: IPositionProvider): IPositionProvider
  GetThreatSharedBeliefPositionProvider(threat: Entity, offset?: Vector3, failIfVisible?: Bool, slotName?: CName, failSafeProvider?: IPositionProvider): IPositionProvider
}

declare interface AIITargetTrackingListener extends IScriptable {

}

declare interface AIHumanComponent extends AIComponent {

  SetMovementParams(params: MovementParameters): void
  GetMovementParams(type: moveMovementType): MovementParameters
  SetTDBMovementParams(paramsID: TweakDBID): Bool
  GetFriendlyFireCheckID(): number
  /** @noSelf **/
  Get(owner: ScriptedPuppet, aiComponent: AIHumanComponent): Bool
  GetGame(): GameInstance
  OnAttach(): void
  ResetBehaviorCoverArguments(): void
  OnDetach(): void
  OnDeath(evt: gameDeathEvent): Bool
  OnDefeated(evt: DefeatedEvent): Bool
  OnPlayerCombatChanged(value: number): Bool
  OnDelayPassiveConditionEvaluationEvent(evt: DelayPassiveConditionEvaluationEvent): Bool
  GetNPCRarity(): gamedataNPCRarity
  IsOfficer(): Bool
  GetCoverBlackboard(): IBlackboard
  GetShootingBlackboard(): IBlackboard
  GetCombatGadgetBlackboard(): IBlackboard
  GetActionBlackboard(): IBlackboard
  GetAIPatrolBlackboard(): IBlackboard
  GetAIAlertedPatrolBlackboard(): IBlackboard
  GetCurrentRole(): AIRole
  GetAssignedVehicleId(): EntityID
  GetAssignedVehicleSlot(): MountingSlotId
  HasVehicleAssigned(): Bool
  OnVehicleAssign(evt: MountAIEvent): Bool
  GetAssignedVehicleData(vehicleID: EntityID, vehicleSlot: MountingSlotId): Bool
  GetAssignedVehicle(gi: GameInstance, vehicle: GameObject): Bool
  /** @noSelf **/
  GetLastUsedVehicleSlot(owner: ScriptedPuppet, vehicleSlotName: CName): Bool
  /** @noSelf **/
  GetLastUsedVehicleSlot(owner: ScriptedPuppet, vehicleSlot: MountingSlotId): Bool
  /** @noSelf **/
  GetAssignedVehicle(owner: ScriptedPuppet, vehicle: GameObject): Bool
  OnAIRoleChanged(newRole: AIRole, oldRole: AIRole): void
  /** @noSelf **/
  SetCurrentRole(owner: GameObject, newRole: AIRole): void
  IsPlayerCompanion(): Bool
  GetFriendlyTargetAsPlayer(player: PlayerPuppet): Bool
  GetFriendlyTarget(friendlyTarget: GameObject): Bool
  GetActionAnimationScriptProxy(): ActionAnimationScriptProxy
  OnSignalCombatQueriesRequest(signalId: number, newValue: Bool): void
  IsFriendlyFiring(): Bool
  FriendlyFireCheck(): Bool
  FriendlyFireCheckInit(): Bool
  FriendlyFireTargetUpdateInit(): void
  LoSFinderCheckInit(): Bool
  CombatQueriesSystemInit(): Bool
  OnStartGrenadeThrowQueryEvent(evt: StartGrenadeThrowQueryEvent): Bool
  StartGrenadeThrowQuery(target: GameObject): void
  CanThrowGrenadeAtTarget(target: GameObject, throwPositions: Vector4, throwAngle: number, throwStartType: gameGrenadeThrowStartType): Bool
  CacheThrowGrenadeAtTargetQuery(target: GameObject): Bool
  NULLCachedThrowGrenadeAtTargetQuery(): void
  OnSetScriptExecutionContext(evt: SetScriptExecutionContextEvent): Bool
  /** @noSelf **/
  GetScriptContext(puppet: ScriptedPuppet, context: ScriptExecutionContext): Bool
  GetScriptContext(context: ScriptExecutionContext): Bool
  CheckTweakCondition(ActionConditionName: string): Bool
  TryBulletDodgeOpportunity(): Bool
  OnHitAiEventReceived(hitAIEvent: AIEvent): Bool
  UpdateMyAttackBlockedCount(resetBB: Bool): void
  UpdateMyAttackParriedCount(resetBB: Bool): void
  UpdateMyAttackDodgedCount(resetBB: Bool): void
  OnCommandStateChanged(command: AICommand, oldState: AICommandState, newState: AICommandState): void
  OnSignalCommandSignal(signalId: number, newValue: Bool): void
  TrackActionCommandID(commandClassNames: CName[]): void
  ClearActionCommandID(commandClassNames: CName[]): void
  IsCommandReceivedOrOverriden(commandClassName: CName): Bool
  IsCommandReceivedOrOverriden(commandID: number): Bool
  IsCommandActive(commandClassName: CName): Bool
  GetActiveCommandsCount(): number
  IsCommandActive(commandID: number): Bool
  GetActiveCommandID(commandClassName: CName): number
  OnStatusEffectApplied(evt: ApplyStatusEffectEvent): Bool
  OnStatusEffectRemoved(evt: ApplyStatusEffectEvent): Bool
  OnNewThreat(evt: NewThreat): Bool
  OnHostileThreatDetected(evt: HostileThreatDetected): Bool
  OnEnemyThreatDetected(evt: EnemyThreatDetected): Bool
  OnThreatRemoved(evt: ThreatRemoved): Bool
  OnAnimParamsEvent(evt: AnimParamsEvent): Bool
}

declare interface AIRole extends IScriptable {

  GetRoleTweakRecord(): AIRole_Record
  GetRoleEnum(): EAIRole
  GetTweakRecordId(): TweakDBID
  OnRoleSet(owner: GameObject): void
  OnRoleCleared(owner: GameObject): void
  OnHighLevelStateEnter(owner: GameObject, newState: gamedataNPCHighLevelState, previousState: gamedataNPCHighLevelState): void
  OnHighLevelStateExit(owner: GameObject, leftState: gamedataNPCHighLevelState, nextState: gamedataNPCHighLevelState): void
}

declare interface AIRole_Record extends TweakDBRecord {

  EnumComment(): string
  RolePackage(): GameplayLogicPackage_Record
  EnumName(): CName
  Type(): gamedataAIRole
}

declare interface CoverManager extends ICoverManager {

  RegisterCoverOccupant(coverId: number, occupant: GameObject): void
  UnregisterCoverOccupant(occupant: GameObject): void
  IsCoverAvailable(coverId: number, occupant: GameObject): Bool
  GetCoverHeight(coverId: number): gameCoverHeight
  GetCoverPosition(coverId: number): Vector4
  GetCoverWorldForward(coverId: number): Vector4
  GetCoverWorldUp(coverId: number): Vector4
  GetCoverRemainingHealthPercentage(coverId: number): number
  IsProtectingHorizontallyAgainstObject(coverId: number, object: GameObject, angleMultiplier: number): Bool
  GetThreatsNotProtectedFrom(coverId: number, occupant: GameObject, angleMultiplier: number, predictionTime: number, trackingMode: gamedataTrackingMode): TrackedLocation[]
  GetUsableExposureSpotsForCover(coverId: number, threat: GameObject): gameAvailableExposureMethodResult[]
  GetUsableExposureSpotsForCoverTolerance(coverId: number, threat: GameObject, maxTolerance: number): gameAvailableExposureMethodResult[]
  GetUsableExposureSpotsForCoverOccupant(occupant: GameObject, threat: GameObject): gameAvailableExposureMethodResult[]
  GetCurrentCover(occupant: GameObject): number
  NodeRefToObjectId(nodeRef: NodeRef): number
  GetDemandCoverHolder(nodeRef: NodeRef): CoverDemandHolder
  LeaveCoverImmediately(occupant: GameObject): void
  IsEnteringOrLeavingCover(occupant: GameObject): Bool
  GetCoverActionType(occupant: GameObject): AIUninterruptibleActionType
  NotifyGotDamageInCover(coverId: number, damageTime: EngineTime, executingCoverAction: Bool, isShooting: Bool): void
  IsCoverRegular(coverIdValue: number): Bool
  IsShootingSpot(coverIdValue: number): Bool
  SetMaxAllowedActionHalfAngleDeg(angleDeg: number): void
  NotifyBehaviourCoverArgumentChanged(entity: GameObject, behaviorArgumentName: CName, prevValue: number, currentValue: number): void
  IsCoverValid(coverId: number): Bool
}

declare interface ScriptExecutionContext {

  /** @noSelf **/
  GetOwner(context: ScriptExecutionContext): gamePuppet
  /** @noSelf **/
  GetAITime(context: ScriptExecutionContext): EngineTime
  /** @noSelf **/
  GetArgumentBool(context: ScriptExecutionContext, entry: CName): Bool
  /** @noSelf **/
  SetArgumentBool(context: ScriptExecutionContext, entry: CName, value: Bool): void
  /** @noSelf **/
  GetArgumentInt(context: ScriptExecutionContext, entry: CName): number
  /** @noSelf **/
  SetArgumentInt(context: ScriptExecutionContext, entry: CName, value: number): void
  /** @noSelf **/
  GetArgumentUint64(context: ScriptExecutionContext, entry: CName): number
  /** @noSelf **/
  SetArgumentUint64(context: ScriptExecutionContext, entry: CName, value: number): void
  /** @noSelf **/
  GetArgumentFloat(context: ScriptExecutionContext, entry: CName): number
  /** @noSelf **/
  SetArgumentFloat(context: ScriptExecutionContext, entry: CName, value: number): void
  /** @noSelf **/
  GetArgumentName(context: ScriptExecutionContext, entry: CName): CName
  /** @noSelf **/
  SetArgumentName(context: ScriptExecutionContext, entry: CName, value: CName): void
  /** @noSelf **/
  GetArgumentVector(context: ScriptExecutionContext, entry: CName): Vector4
  /** @noSelf **/
  SetArgumentVector(context: ScriptExecutionContext, entry: CName, value: Vector4): void
  /** @noSelf **/
  GetArgumentObject(context: ScriptExecutionContext, entry: CName): GameObject
  /** @noSelf **/
  SetArgumentObject(context: ScriptExecutionContext, entry: CName, value: GameObject): void
  /** @noSelf **/
  GetArgumentScriptable(context: ScriptExecutionContext, entry: CName): IScriptable
  /** @noSelf **/
  SetArgumentScriptable(context: ScriptExecutionContext, entry: CName, value: IScriptable): void
  /** @noSelf **/
  GetArgumentNodeRef(context: ScriptExecutionContext, entry: CName): NodeRef
  /** @noSelf **/
  SetArgumentNodeRef(context: ScriptExecutionContext, entry: CName, value: NodeRef): void
  /** @noSelf **/
  GetArgumentGlobalNodeId(context: ScriptExecutionContext, entry: CName): GlobalNodeID
  /** @noSelf **/
  SetArgumentGlobalNodeId(context: ScriptExecutionContext, entry: CName, value: GlobalNodeID): void
  /** @noSelf **/
  GetMappingValue(context: ScriptExecutionContext, mapping: AIArgumentMapping): Variant
  /** @noSelf **/
  GetScriptableMappingValue(context: ScriptExecutionContext, mapping: AIArgumentMapping): IScriptable
  /** @noSelf **/
  GetTweakDBIDMappingValue(context: ScriptExecutionContext, mapping: AIArgumentMapping): TweakDBID
  /** @noSelf **/
  SetMappingValue(context: ScriptExecutionContext, mapping: AIArgumentMapping, value: Variant): Bool
  /** @noSelf **/
  SetEnumMappingValue(context: ScriptExecutionContext, mapping: AIArgumentMapping, value: number): Bool
  /** @noSelf **/
  GetDelegate(context: ScriptExecutionContext): BehaviorDelegate
  /** @noSelf **/
  GetClosestDelegate(context: ScriptExecutionContext): BehaviorDelegate
  /** @noSelf **/
  CreateActionID(context: ScriptExecutionContext, actionStringName: string, actionPackageType: AIactionParamsPackageTypes): TweakDBID
  /** @noSelf **/
  CreateActionParamID(context: ScriptExecutionContext, actionStringName: string, paramName: string): TweakDBID
  /** @noSelf **/
  GetOverriddenNode(context: ScriptExecutionContext, nodeId: TweakDBID, result: AIRecord_Record, lookupDefault: Bool): Bool
  /** @noSelf **/
  PuppetRefToObject(context: ScriptExecutionContext, puppetRef: EntityReference): GameObject
  /** @noSelf **/
  AddBehaviorCallback(context: ScriptExecutionContext, cbName: CName, callback: IScriptable): number
  /** @noSelf **/
  RemoveBehaviorCallback(context: ScriptExecutionContext, id: number): Bool
  /** @noSelf **/
  InvokeBehaviorCallback(context: ScriptExecutionContext, cbName: CName): void
  /** @noSelf **/
  GetLOD(context: ScriptExecutionContext): number
  /** @noSelf **/
  GetTweakActionSystem(context: ScriptExecutionContext): AITweakActionSystem
  /** @noSelf **/
  DebugLog(context: ScriptExecutionContext, category: CName, message: string): void
}

declare interface BehaviorBlackboard extends IScriptable {

}

declare interface CActionScriptProxy extends IScriptable {

  Bind(go: GameObject): void
  Launch(): void
  Stop(): void
  GetStatus(): gameEActionStatus
}

declare interface DeviceComponent extends GameComponent {

}

declare interface ScriptableDC extends DeviceComponent {

  GetPS(): ScriptableDeviceComponentPS
  GetDeviceComponentPS(): DeviceComponentPS
  GetPSID(): PersistentID
  GetPSName(): CName
}

declare interface VehicleComponent extends ScriptableDC {

  OnGameAttach(): void
  OnGameDetach(): void
  /** @noSelf **/
  IsDestroyed(gi: GameInstance, vehicleID: EntityID): Bool
  /** @noSelf **/
  GetDriverSlotName(): CName
  /** @noSelf **/
  GetFrontPassengerSlotName(): CName
  /** @noSelf **/
  GetBackLeftPassengerSlotName(): CName
  /** @noSelf **/
  GetBackRightPassengerSlotName(): CName
  /** @noSelf **/
  GetPassengersSlotNames(slotNames: CName[]): void
  /** @noSelf **/
  GetDriverSlotID(): MountingSlotId
  /** @noSelf **/
  IsMountedToVehicle(gi: GameInstance, owner: GameObject): Bool
  /** @noSelf **/
  IsMountedToVehicle(gi: GameInstance, ownerID: EntityID): Bool
  /** @noSelf **/
  IsMountedToProvidedVehicle(gi: GameInstance, ownerID: EntityID, vehicle: VehicleObject): Bool
  /** @noSelf **/
  IsDriver(gi: GameInstance, owner: GameObject): Bool
  /** @noSelf **/
  IsDriver(gi: GameInstance, ownerID: EntityID): Bool
  /** @noSelf **/
  GetVehicle(gi: GameInstance, owner: GameObject, vehicle: GameObject): Bool
  /** @noSelf **/
  GetVehicle(gi: GameInstance, owner: GameObject, vehicle: VehicleObject): Bool
  /** @noSelf **/
  GetVehicle(gi: GameInstance, ownerID: EntityID, vehicle: VehicleObject): Bool
  /** @noSelf **/
  GetVehicleFromID(gi: GameInstance, vehicleID: EntityID, vehicle: VehicleObject): Bool
  /** @noSelf **/
  GetVehicleID(gi: GameInstance, owner: GameObject, vehicleID: EntityID): Bool
  /** @noSelf **/
  GetVehicleID(gi: GameInstance, ownerID: EntityID, vehicleID: EntityID): Bool
  /** @noSelf **/
  GetVehicleRecord(gi: GameInstance, owner: GameObject, vehicleRecord: Vehicle_Record): Bool
  /** @noSelf **/
  GetVehicleRecord(gi: GameInstance, ownerID: EntityID, vehicleRecord: Vehicle_Record): Bool
  /** @noSelf **/
  GetVehicleRecord(vehicle: VehicleObject, vehicleRecord: Vehicle_Record): Bool
  /** @noSelf **/
  GetVehicleRecordFromID(gi: GameInstance, vehicleID: EntityID, vehicleRecord: Vehicle_Record): Bool
  /** @noSelf **/
  GetDriver(gi: GameInstance, vehicleID: EntityID): GameObject
  /** @noSelf **/
  CanBeDriven(gi: GameInstance, ownerID: EntityID): Bool
  /** @noSelf **/
  CanBeDriven(gi: GameInstance, vehicle: VehicleObject): Bool
  /** @noSelf **/
  HasActiveAutopilot(gi: GameInstance, vehicle: VehicleObject): Bool
  /** @noSelf **/
  HasActiveAutopilot(gi: GameInstance, ownerID: EntityID): Bool
  /** @noSelf **/
  IsExecutingAnyCommand(gi: GameInstance, vehicle: VehicleObject): Bool
  /** @noSelf **/
  HasActiveDriver(gi: GameInstance, vehicleID: EntityID): Bool
  /** @noSelf **/
  QueueEventToAllPassengers(gi: GameInstance, vehicleID: EntityID, evt: Event, delay?: number): Bool
  /** @noSelf **/
  QueueEventToAllPassengers(gi: GameInstance, vehicle: VehicleObject, evt: Event, delay?: number): Bool
  /** @noSelf **/
  QueueEventToAllNonFriendlyAggressivePassengers(gi: GameInstance, vehicleID: EntityID, evt: Event, delay?: number): Bool
  /** @noSelf **/
  QueueEventToPassengers(gi: GameInstance, vehicleID: EntityID, evt: Event, passengers: GameObject[], delay?: Bool): Bool
  /** @noSelf **/
  QueueEventToAllNonFriendlyNonDeadPassengers(gi: GameInstance, vehicleID: EntityID, evt: Event, executionOwner: GameObject, broadcastHijack?: Bool, delay?: Bool): Bool
  /** @noSelf **/
  CheckIfPassengersCanLeaveCar(gi: GameInstance, vehicleID: EntityID, passengersCanLeaveCar: GameObject[], passengersCantLeaveCar: GameObject[]): void
  /** @noSelf **/
  IsAnyPassengerCrowd(gi: GameInstance, vehicle: VehicleObject): Bool
  /** @noSelf **/
  IsSlotAvailable(gi: GameInstance, vehicle: VehicleObject, slotName: CName): Bool
  /** @noSelf **/
  IsSlotOccupied(gi: GameInstance, vehicleID: EntityID, slotName: CName): Bool
  /** @noSelf **/
  IsSlotOccupied(gi: GameInstance, vehicleID: EntityID, vehicleSlotID: MountingSlotId): Bool
  /** @noSelf **/
  IsSlotOccupiedByActivePassenger(gi: GameInstance, vehicleID: EntityID, slotName: CName): Bool
  /** @noSelf **/
  IsSlotOccupiedByActivePassenger(gi: GameInstance, vehicleID: EntityID, vehicleSlotID: MountingSlotId): Bool
  /** @noSelf **/
  HasOnlyOneActivePassenger(gi: GameInstance, vehicleID: EntityID): Bool
  /** @noSelf **/
  GetNumberOfActivePassengers(gi: GameInstance, vehicleID: EntityID, activePassangers: number): Bool
  /** @noSelf **/
  IsVehicleOccupied(gi: GameInstance, vehicle: VehicleObject): Bool
  /** @noSelf **/
  IsVehicleOccupiedByHostile(vehicleID: EntityID, passanger: GameObject): Bool
  IsVehicleParked(): Bool
  /** @noSelf **/
  SetAnimsetOverrideForPassenger(passenger: GameObject, value: number): CName[]
  /** @noSelf **/
  SetAnimsetOverrideForPassenger(passenger: GameObject, vehicleID: EntityID, slotName: CName, value: number): CName[]
  /** @noSelf **/
  CheckVehicleDesiredTag(vehicle: VehicleObject, desiredTag: CName): Bool
  /** @noSelf **/
  CheckVehicleDesiredTag(gi: GameInstance, owner: GameObject, desiredTag: CName): Bool
  /** @noSelf **/
  GetVehicleType(gi: GameInstance, owner: GameObject, type: string): Bool
  /** @noSelf **/
  GetAttitudeOfPassenger(gi: GameInstance, ownerID: EntityID, slotID: MountingSlotId, attitude: EAIAttitude): Bool
  /** @noSelf **/
  GetVehicleNPCData(gi: GameInstance, owner: GameObject, vehicleNPCData: AnimFeature_VehicleNPCData): Bool
  /** @noSelf **/
  HasSlot(gi: GameInstance, vehicle: VehicleObject, slotName: CName): Bool
  /** @noSelf **/
  GetMountedSlotName(gi: GameInstance, owner: GameObject, slotName: CName): Bool
  /** @noSelf **/
  GetSeats(gi: GameInstance, vehicle: VehicleObject, seats: VehicleSeat_Record[]): Bool
  /** @noSelf **/
  GetFirstAvailableSlot(gi: GameInstance, vehicle: VehicleObject, slotName: CName): Bool
  /** @noSelf **/
  GetNumberOfOccupiedSlots(gi: GameInstance, vehicle: VehicleObject): number
  /** @noSelf **/
  GetVehicleDataPackage(gi: GameInstance, vehicle: VehicleObject, vehDataPackage: VehicleDataPackage_Record): Bool
  /** @noSelf **/
  GetVehicleAllowsCombat(gi: GameInstance, owner: GameObject): Bool
  /** @noSelf **/
  ToggleVehicleWindow(gi: GameInstance, vehicle: VehicleObject, slotID: MountingSlotId, toggle: Bool, speed?: CName): Bool
  GetVehicle(): VehicleObject
  GetVehicleController(): vehicleController
  GetVehicleControllerPS(): vehicleControllerPS
  GetPS(): VehicleComponentPS
  /** @noSelf **/
  OpenDoor(vehicle: VehicleObject, vehicleSlotID: MountingSlotId): Bool
  /** @noSelf **/
  CloseDoor(vehicle: VehicleObject, vehicleSlotID: MountingSlotId): Bool
  OnMountingEvent(evt: MountingEvent): Bool
  OnUnmountingEvent(evt: UnmountingEvent): Bool
  OnVehicleFinishedMountingEvent(evt: VehicleFinishedMountingEvent): Bool
  OnVehicleStartedUnmountingEvent(evt: VehicleStartedUnmountingEvent): Bool
  OnVehicleStartedMountingEvent(evt: VehicleStartedMountingEvent): Bool
  SendVehicleStartedUnmountingEventToPS(isMounting: Bool, slotID: CName, character: GameObject): void
  SetSteeringLimitAnimFeature(limit: number): void
  OnVehicleSeatReservationEvent(evt: VehicleSeatReservationEvent): Bool
  OnVehicleBodyDisposalPerformedEvent(evt: VehicleBodyDisposalPerformedEvent): Bool
  DetermineInteractionState(): void
  DetermineInteractionState(layerName: CName): void
  GetIsMounted(): Bool
  InitialVehcileSetup(): void
  VehicleDefaultStateSetup(): void
  CreateAndSendDefaultStateEvent(door: EVehicleDoor, state: EQuestVehicleDoorState): void
  ShouldVisualDestructionBeSet(): void
  VehicleVisualDestructionSetup(): void
  OnVehicleQuestVisualDestructionEvent(evt: VehicleQuestVisualDestructionEvent): Bool
  EvaluateInteractions(): void
  ToggleInitialVehDoorInteractions(): void
  EvaluateTrunkAndHoodInteractions(): void
  EvaluateTrunkInteractions(): void
  EvaluateHoodInteractions(): void
  ToggleVehReadyInteractions(toggle: Bool, layer?: CName): void
  EvaluateDoorState(): void
  SetDoorAnimFeatureData(door: EVehicleDoor, state: VehicleDoorState): void
  OnVehicleLightSetupEvent(evt: VehicleLightSetupEvent): Bool
  RegisterInputListener(): void
  UnregisterInputListener(): void
  LoadExplodedState(): void
  SetupThrusterFX(): void
  ToggleScanningComponent(toggle: Bool): void
  EnableTargetingComponents(): void
  DisableTargetingComponents(): void
  ToggleTargetingComponents(on: Bool): void
  BroadcastEnvironmentalHazardStimuli(): void
  RemoveEnvironmentalHazardStimuli(): void
  OnDeath(evt: gameDeathEvent): Bool
  OnVehicleWaterEvent(evt: VehicleWaterEvent): Bool
  OnInteractionActivated(evt: InteractionEvent): Bool
  OnInteractionUsed(evt: InteractionChoiceEvent): Bool
  EvaluatePanzerInteractions(): void
  RegisterToHUDManager(shouldRegister: Bool): void
  OnHUDInstruction(evt: HUDInstruction): Bool
  GetVehicleStateForScanner(): string
  GetAnySlotAvailable(checkOccupied?: Bool): Bool
  GetAnyDoorAvailable(checkOccupied?: Bool): Bool
  SetVehicleScannerDirty(): void
  ExecuteAction(choice: InteractionChoice, executor: GameObject): void
  ExecuteAction(action: DeviceAction, executor?: GameObject): void
  ToggleInteraction(layer: CName, toggle: Bool): void
  ProcessExplosionEffects(): void
  ExplodeVehicle(instigator: GameObject): void
  ApplyStatusEffectOnPassangers(statusEffectID: TweakDBID, instigator: GameObject): void
  SetImmortalityMode(): void
  ClearImmortalityMode(): void
  StealVehicle(): void
  ToggleVehicleSystems(toggle: Bool, vehicle: Bool, engine: Bool): void
  OnForceCarAlarm(evt: ForceCarAlarm): Bool
  OnDisableAlarm(evt: DisableAlarmEvent): Bool
  OnChangeState(evt: vehicleChangeStateEvent): Bool
  OnVehicleQuestCrystalDomeEvent(evt: VehicleQuestCrystalDomeEvent): Bool
  DrivingStimuli(broadcast: Bool): void
  SetupCrystalDome(): void
  DetermineShouldCrystalDomeBeOn(meshVisibilityDelay: number): void
  ToggleCrystalDome(toggle: Bool, force?: Bool, instant?: Bool, instantDelay?: number, meshVisibilityDelay?: number): void
  TogglePanzerShadowMeshes(toggle: Bool): void
  OnVehicleCrystalDomeOffDelayEvent(evt: VehicleCrystalDomeOffDelayEvent): Bool
  OnVehicleCrystalDomeOnDelayEvent(evt: VehicleCrystalDomeOnDelayEvent): Bool
  OnVehicleCrystalDomeMeshVisibilityDelayEvent(evt: VehicleCrystalDomeMeshVisibilityDelayEvent): Bool
  ToggleTargetingSystemForPanzer(mountedPlayer: PlayerPuppet, enable: Bool): void
  TogglePlayerHitShapesForPanzer(mountedPlayer: PlayerPuppet, enable: Bool): void
  DoPanzerCleanup(): void
  OnVehicleForceOccupantOut(evt: VehicleForceOccupantOut): Bool
  OnActionDemolition(evt: ActionDemolition): Bool
  OnActionEngineering(evt: ActionEngineering): Bool
  OnVehicleQuestDoorLocked(evt: VehicleQuestDoorLocked): Bool
  OnVehicleDoorInteraction(evt: VehicleDoorInteraction): Bool
  OnVehicleDoorOpen(evt: VehicleDoorOpen): Bool
  OnVehicleDoorClose(evt: VehicleDoorClose): Bool
  GetVehicleDoorEnum(door: EVehicleDoor, doorName: CName): Bool
  OnVehicleDoorInteractionStateChange(evt: VehicleDoorInteractionStateChange): Bool
  EvaluateDoorReaction(doorID: CName): void
  GetAnimEventName(doorState: VehicleDoorState, door: EVehicleDoor): CName
  OnVehicleExternalDoorRequestEvent(evt: VehicleExternalDoorRequestEvent): Bool
  OnVehicleExternalWindowRequestEvent(evt: VehicleExternalWindowRequestEvent): Bool
  OnVehicleWindowOpen(evt: VehicleWindowOpen): Bool
  OnVehicleWindowClose(evt: VehicleWindowClose): Bool
  EvaluateWindowReaction(doorID: CName, speed: CName): void
  EvaluateWindowState(): void
  SetWindowAnimFeatureData(door: EVehicleDoor, state: EVehicleWindowState): void
  OnToggleDoorInteractionEvent(evt: ToggleDoorInteractionEvent): Bool
  OnOpenTrunk(evt: VehicleOpenTrunk): Bool
  OnCloseTrunk(evt: VehicleCloseTrunk): Bool
  OnVehicleDumpBody(evt: VehicleDumpBody): Bool
  OnVehicleDumpBodyDelayEvent(evt: VehicleDumpBodyDelayEvent): Bool
  OnVehicleTakeBody(evt: VehicleTakeBody): Bool
  UnmountTrunkBody(): void
  OnVehiclePlayerTrunk(evt: VehiclePlayerTrunk): Bool
  OnOpenHood(evt: VehicleOpenHood): Bool
  OnCloseHood(evt: VehicleCloseHood): Bool
  OnSummonStartedEvent(evt: SummonStartedEvent): Bool
  OnSummonFinishedEvent(evt: SummonFinishedEvent): Bool
  PlaySummonArrivalSFX(): void
  HonkAndFlash(): void
  IsPlayerVehicle(): void
  SetupAuxillary(): void
  SetupWheels(): void
  OnGridDestruction(evt: VehicleGridDestructionEvent): Bool
  CreateHitEventOnSelf(force: number): void
  TryToKnockDownBike(): void
  ReactToHPChange(destruction: number): void
  DestroyVehicle(): void
  RepairVehicle(): void
  OnVehicleRepairEvent(re: VehicleRepairEvent): Bool
  DisableRadio(): void
  DestroyRandomWindow(): void
  TutorialCarDamageFact(): void
  BreakAllDamageStageFX(auxillaryFX?: Bool): void
  SendDestructionDataToGraph(gridID: number, gridState: number): void
  DetermineAdditionalEngineFX(gridID: number, gridState: number): void
  EvaluateDamageLevel(destruction: number): number
  OnVehicleDamageStageTurnOffEvent(evt: VehicleDamageStageTurnOffEvent): Bool
  PlayCrystalDomeGlitchEffect(): void
  OnVehicleOnPartDetached(evt: VehicleOnPartDetachedEvent): Bool
  OnVehicleRadioEvent(evt: VehicleRadioEvent): Bool
  OnVehicleRadioTierEvent(evt: VehicleRadioTierEvent): Bool
  SendParkEvent(park: Bool): void
  OnVehicleLightQuestToggleEvent(evt: VehicleLightQuestToggleEvent): Bool
  OnVehicleCycleLightsEvent(evt: VehicleCycleLightsEvent): Bool
  OnVehicleQuestSirenEvent(evt: VehicleQuestSirenEvent): Bool
  CanShowMappin(): Bool
  CreateMappin(): void
  DestroyMappin(): void
  RequestHUDRefresh(): void
  SetupListeners(): void
  UnregisterListeners(): void
  SetupGameTimeToBBListener(): void
  OnMinutePassedEvent(evt: MinutePassedEvent): Bool
  PassGameTimeToVehBB(): void
  UnregisterGameTimeToBBListener(): void
  SetupVehicleTPPBBListener(): void
  UnregisterVehicleTPPBBListener(): void
  OnVehicleCameraChange(state: Bool): void
  SetupVehicleSpeedBBListener(): void
  UnregisterVehicleSpeedBBListener(): void
  SetupVehicleRPMBBListener(): void
  UnregisterVehicleRPMBBListener(): void
  OnVehicleSpeedChange(speed: number): void
  CloseSelectedDoors(doors: CName[]): void
  OnVehicleRPMChange(rpm: number): void
  StartEffectEvent(self: GameObject, effectName: CName, shouldPersist?: Bool, blackboard?: worldEffectBlackboard): void
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
  OnVehicleQuestHornEvent(evt: VehicleQuestHornEvent): Bool
  OnVehicleHornOffDelayEvent(evt: VehicleHornOffDelayEvent): Bool
  ToggleSiren(lights: Bool, sounds: Bool): void
  OnVehicleSirenDelayEvent(evt: VehicleSirenDelayEvent): Bool
  OnVehicleFlippedOverEvent(evt: VehicleFlippedOverEvent): Bool
  OnHasVehicleBeenFlippedOverForSomeTimeEvent(evt: HasVehicleBeenFlippedOverForSomeTimeEvent): Bool
  ApplyVehicleDOT(type?: CName): void
  RemoveVehicleDOT(): void
  OnVehicleQuestAVThrusterEvent(evt: VehicleQuestAVThrusterEvent): Bool
  OnVehicleQuestWindowDestructionEvent(evt: VehicleQuestWindowDestructionEvent): Bool
  OnFactChangedEvent(evt: FactChangedEvent): Bool
  OnVehicleRaceQuestEvent(evt: VehicleRaceQuestEvent): Bool
  ToggleRaceClock(toggle: Bool): void
  OnVehicleRaceClockUpdateEvent(evt: VehicleRaceClockUpdateEvent): Bool
  CleanUpRace(): void
  CreateObjectActionsCallbackController(instigator: Entity): void
  DestroyObjectActionsCallbackController(): void
  OnObjectActionRefreshEvent(evt: gameObjectActionRefreshEvent): Bool
  OnVehicleQuestToggleEngineEvent(evt: VehicleQuestToggleEngineEvent): Bool
  OnSetIgnoreAutoDoorCloseEvent(evt: SetIgnoreAutoDoorCloseEvent): Bool
}

declare interface InteractionComponent extends IPlacedComponent {

  SetSingleChoice(choice: InteractionChoice, layer?: CName): void
  SetChoices(choices: InteractionChoice[], layer?: CName): void
  ResetChoices(layer?: CName, deactivate?: Bool): void
  GetActiveInputLayers(activeInputLayers: gameinteractionsActiveLayerData[]): Bool
  GetActivatorsForLayer(layerName: CName, activeInputLayers: gameinteractionsActiveLayerData[]): Bool
}

declare interface VehicleObject extends GameObject {

  IsVehicle(): Bool
  GetBlackboard(): IBlackboard
  GetRecord(): Vehicle_Record
  IsPlayerMounted(): Bool
  IsPlayerDriver(): Bool
  PreHijackPrepareDriverSlot(): void
  CanUnmount(isPlayer: Bool, mountedObject: GameObject, checkSpecificDirection?: vehicleExitDirection): vehicleUnmountPosition
  ToggleRadioReceiver(toggle: Bool): void
  SetRadioReceiverStation(stationIndex: number): void
  NextRadioReceiverStation(): void
  SetRadioTier(radioTier: number, overrideTier: Bool): void
  ToggleHorn(toggle: Bool, isPolice?: Bool): void
  ToggleSiren(toggle: Bool): void
  DetachPart(partName: CName): void
  DetachAllParts(): void
  HasOccupantSlot(slotName: CName): Bool
  GetRecordID(): TweakDBID
  GetController(): vehicleController
  GetCameraManager(): VehicleCameraManager
  IsPlayerVehicle(): Bool
  IsPlayerActiveVehicle(): Bool
  IsCrowdVehicle(): Bool
  IsVehicleParked(): Bool
  IsRadioReceiverActive(): Bool
  GetRadioReceiverStationName(): CName
  GetRadioReceiverTrackName(): CName
  GetAnimsetOverrideForPassenger(slotName: CName): CName
  GetAnimsetOverrideForPassengerFromSlotName(slotName: CName): CName
  GetAnimsetOverrideForPassengerFromBoneName(boneName: CName): CName
  GetBoneNameFromSlot(slotName: CName): CName
  GetSlotIdForMountedObject(mountedObject: GameObject): CName
  TurnOn(on: Bool): void
  TurnEngineOn(on: Bool): void
  IsTurnedOn(): Bool
  IsEngineTurnedOn(): Bool
  ForceBrakesFor(seconds: number): void
  ForceBrakesUntilStoppedOrFor(secondsToTimeout: number): void
  PhysicsWakeUp(): void
  IsExecutingAnyCommand(): Bool
  AreFrontWheelsCentered(): Bool
  GetCollisionForce(): Vector4
  GetLinearVelocity(): Vector4
  GetTotalMass(): number
  GetCurrentSpeed(): number
  SetDestructionGridPointValues(layer: number, values: number[], accumulate: Bool): void
  DestructionResetGrid(): void
  DestructionResetGlass(): void
  GetUIComponents(): worlduiWidgetComponent[]
  SendDelayedFinishedMountingEventToPS(isMounting: Bool, slotID: CName, character: GameObject, delay: number): void
  IsDestroyed(): Bool
  IsStolen(): Bool
  RecordHasTag(tag: CName): Bool
  RecordHasTag(vehicleRecord: Vehicle_Record, tag: CName): Bool
  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnDeviceLinkRequest(evt: DeviceLinkRequest): Bool
  GetDeviceLink(): VehicleDeviceLinkPS
  SendEventToDefaultPS(evt: Event): void
  OnMountingEvent(evt: MountingEvent): Bool
  OnUnmountingEvent(evt: UnmountingEvent): Bool
  OnVehicleFinishedMounting(evt: VehicleFinishedMountingEvent): Bool
  SetInteriorUIEnabled(enabled: Bool): void
  ReevaluateStealing(character: GameObject, slotID: CName, stealingAction: Bool): Bool
  StealVehicle(thief: GameObject): void
  GetVehiclePS(): VehicleComponentPS
  GetPSClassName(): CName
  GetControllerPersistentState(): PersistentState
  GetVehicleComponent(): VehicleComponent
  GetCrowdMemberComponent(): CrowdMemberBaseComponent
  ShouldShowScanner(): Bool
  OnSetExposeQuickHacks(evt: SetExposeQuickHacks): Bool
  GetDefaultHighlight(): FocusForcedHighlightData
  GetCurrentOutline(): EFocusOutlineType
  IsNetrunner(): Bool
  CompileScannerChunks(): Bool
  OnLookedAtEvent(evt: LookedAtEvent): Bool
  OnCrowdSettingsEvent(evt: CrowdSettingsEvent): Bool
  OnHandleReactionEvent(evt: HandleReactionEvent): Bool
  ResendHandleReactionEvent(evt: HandleReactionEvent): void
  ResetTimesSentReactionEvent(): void
  ResetReactionSequenceOfAllPassengers(): void
  OnHit(evt: gameHitEvent): Bool
  IsOnPavement(): Bool
  OnPavement(evt: OnPavement): Bool
  OnOffPavement(evt: OffPavement): Bool
  OnInCrowd(evt: InCrowd): Bool
  OnOutOfCrowd(evt: OutOfCrowd): Bool
  IsInTrafficLane(): Bool
  IsVehicleUpsideDown(): Bool
  OnVehicleFlippedOverEvent(evt: VehicleFlippedOverEvent): Bool
  IsQuest(): Bool
  MarkAsQuest(isQuest: Bool): void
}

declare interface VehicleDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface WidgetBaseComponent extends IPlacedComponent {

}

declare interface IWorldWidgetComponent extends WidgetBaseComponent {

  GetWidget(): inkWidget
  GetGameControllerInterface(): worlduiIGameController
  GetGameController(): inkGameController
  GetScreenDefinition(): ScreenDefinitionPackage
  IsScreenDefinitionValid(): Bool
  ShouldReactToHit(): Bool
  OnHitEvent(hit: gameHitEvent): Bool
  StartGlitching(intensity: number, lifetime: number): void
  StopGlitching(): void
}

declare interface AdvertGlitchEvent extends Event {

  SetShouldGlitch(shouldGlitch: number): void
  SetGlitchTime(glitchTime: number): void
}

declare interface VehicleComponentPS extends ScriptableDeviceComponentPS {

  GetVehicleControllerPS(): vehicleControllerPS
  GetVehicleControllerPSConst(): vehicleControllerPS
  Initialize(): void
  GameAttached(): void
  GetOwnerEntity(): VehicleObject
  GetHasDefaultStateBeenSet(): Bool
  SetHasDefaultStateBeenSet(set: Bool): void
  GetHasStateBeenModifiedByQuest(): Bool
  GetNpcOccupiedSlots(): CName[]
  GetIsDestroyed(): Bool
  SetIsDestroyed(value: Bool): void
  GetIsStolen(): Bool
  SetIsStolen(value: Bool): void
  SetHasStateBeenModifiedByQuest(set: Bool): void
  GetIsPlayerVehicle(): Bool
  SetIsPlayerVehicle(set: Bool): void
  GetIsCrystalDomeQuestModified(): Bool
  SetIsCrystalDomeQuestModified(value: Bool): void
  GetCrystalDomeQuestState(): Bool
  SetCrystalDomeQuestState(value: Bool): void
  GetCrystalDomeState(): Bool
  SetCrystalDomeState(value: Bool): void
  GetIsUiQuestModified(): Bool
  SetIsUiQuestModified(value: Bool): void
  GetUiQuestState(): Bool
  SetUiQuestState(value: Bool): void
  GetSirenState(): Bool
  SetSirenState(value: Bool): void
  GetSirenLightsState(): Bool
  SetSirenLightsState(value: Bool): void
  GetSirenSoundsState(): Bool
  SetSirenSoundsState(value: Bool): void
  GetHasVisualDestructionBeenSet(): Bool
  SetHasVisualDestructionBeenSet(set: Bool): void
  GetHasExploded(): Bool
  SetHasExploded(set: Bool): void
  GetHasAnyDoorOpen(): Bool
  SetHasAnyDoorOpen(set: Bool): void
  GetThrusterState(): Bool
  SetThrusterState(set: Bool): void
  OnToggleVehicle(evt: ToggleVehicle): EntityNotificationType
  OnForceCarAlarm(evt: ForceCarAlarm): EntityNotificationType
  OnForceDisableCarAlarm(evt: ForceDisableCarAlarm): EntityNotificationType
  DisableAlarm(): void
  InitializeTempDoorStateStruct(): void
  InitializeDoorInteractionState(): void
  RefreshSkillchecks(): void
  ChangeToActionContext(vehicleContext: VehicleActionsContext): GetActionsContext
  SetDoorState(door: EVehicleDoor, state: VehicleDoorState): void
  GetDoorState(door: EVehicleDoor): VehicleDoorState
  SetWindowState(door: EVehicleDoor, state: EVehicleWindowState): void
  GetWindowState(door: EVehicleDoor): EVehicleWindowState
  SetDoorInteractionState(door: EVehicleDoor, state: VehicleDoorInteractionState, source: string): void
  GetDoorInteractionState(door: EVehicleDoor): VehicleDoorInteractionState
  SetTempDoorInteractionState(door: EVehicleDoor, state: VehicleDoorInteractionState): void
  GetTempDoorInteractionState(door: EVehicleDoor): VehicleDoorInteractionState
  GetVehicleDoorEnum(door: EVehicleDoor, doorName: CName): Bool
  OnVehicleDoorInteraction(evt: VehicleDoorInteraction): EntityNotificationType
  OnVehicleForceOccupantOut(evt: VehicleForceOccupantOut): EntityNotificationType
  OnActionDemolition(evt: ActionDemolition): EntityNotificationType
  OnActionEngineering(evt: ActionEngineering): EntityNotificationType
  ProcessVehicleCrackLockTutorial(): void
  ProcessVehicleCrackLockTutorialUsed(): void
  ProcessVehicleHijackTutorial(): void
  ProcessVehicleHijackTutorialUsed(): void
  OnVehicleDoorOpen(evt: VehicleDoorOpen): EntityNotificationType
  OnVehicleDoorClose(evt: VehicleDoorClose): EntityNotificationType
  OnVehicleDoorInteractionStateChange(evt: VehicleDoorInteractionStateChange): EntityNotificationType
  GetQuestLockedActions(actions: DeviceAction[], context: VehicleActionsContext): void
  IsStateValidForVehicle(state: VehicleDoorInteractionState): Bool
  OnVehicleWindowOpen(evt: VehicleWindowOpen): EntityNotificationType
  OnVehicleWindowClose(evt: VehicleWindowClose): EntityNotificationType
  OnOpenTrunk(evt: VehicleOpenTrunk): EntityNotificationType
  OnCloseTrunk(evt: VehicleCloseTrunk): EntityNotificationType
  OnVehicleDumpBody(evt: VehicleDumpBody): EntityNotificationType
  OnVehicleTakeBody(evt: VehicleTakeBody): EntityNotificationType
  ProcessBodyDisposalEvent(): void
  OnVehicleBodyDisposalPerformedEvent(evt: VehicleBodyDisposalPerformedEvent): EntityNotificationType
  OnVehiclePlayerTrunk(evt: VehiclePlayerTrunk): EntityNotificationType
  GetTrunkActions(actions: DeviceAction[], context: VehicleActionsContext): void
  IsPlayerCarryingBody(includePickupPhase: Bool): Bool
  GetPlayerTrunkActions(actions: DeviceAction[], context: VehicleActionsContext): void
  OnOpenHood(evt: VehicleOpenHood): EntityNotificationType
  OnCloseHood(evt: VehicleCloseHood): EntityNotificationType
  GetHoodActions(actions: DeviceAction[], context: VehicleActionsContext): void
  DetermineActionsToPush(interaction: InteractionComponent, context: VehicleActionsContext, objectActionsCallbackController: gameObjectActionsCallbackController, isAutoRefresh: Bool): void
  IsDoorLayer(layer: CName): Bool
  GetValidChoices(objectActionRecords: ObjectAction_Record[], context: GetActionsContext, objectActionsCallbackController: gameObjectActionsCallbackController, choices: InteractionChoice[], isAutoRefresh: Bool): void
  PushActionsToInteractionComponent(interaction: InteractionComponent, choices: InteractionChoice[], context: VehicleActionsContext): void
  OnVehicleFinishedMounting(evt: VehicleFinishedMountingEvent): EntityNotificationType
  OnVehicleStartedUnmountingEvent(evt: VehicleStartedUnmountingEvent): EntityNotificationType
  IsSlotOccupiedByNPC(slotID: CName): Bool
  OnSetExposeQuickHacks(evt: SetExposeQuickHacks): EntityNotificationType
  GetActions(outActions: DeviceAction[], context: GetActionsContext): Bool
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  ActionForceCarAlarm(): ForceCarAlarm
  ActionForceDisableCarAlarm(): ForceDisableCarAlarm
  ActionToggleVehicle(toggleOn: Bool): ToggleVehicle
  ActionOpenTrunk(): VehicleOpenTrunk
  ActionCloseTrunk(): VehicleCloseTrunk
  ActionOpenHood(): VehicleOpenHood
  ActionCloseHood(): VehicleCloseHood
  ActionVehicleDumpBody(): VehicleDumpBody
  ActionVehicleTakeBody(): VehicleTakeBody
  ActionPlayerTrunk(): VehiclePlayerTrunk
  ActionVehicleDoorInteraction(slotName: string, fromInteraction?: Bool, locked?: Bool): VehicleDoorInteraction
  ActionVehicleDoorInteractionStateChange(doorToChange: EVehicleDoor, desiredState: VehicleDoorInteractionState, source: string): VehicleDoorInteractionStateChange
  ActionVehicleDoorOpen(slotName: string): VehicleDoorOpen
  ActionVehicleDoorClose(slotName: string): VehicleDoorClose
  ActionVehicleForceOccupantOut(slotName: string): VehicleForceOccupantOut
  ActionVehicleDoorQuestLocked(): VehicleQuestDoorLocked
  OnVehicleQuestChangeDoorStateEvent(evt: VehicleQuestChangeDoorStateEvent): EntityNotificationType
  OnVehicleQuestChangeWindowStateEvent(evt: vehicleChangeWindowStateEvent): EntityNotificationType
  OnToggleDoorWrapperEvent(evt: vehicleToggleDoorWrapperEvent): EntityNotificationType
  OpenAllVehDoors(): void
  OpenAllRegularVehDoors(): void
  CloseAllVehDoors(): void
  LockAllVehDoors(): void
  UnlockAllVehDoors(): void
  OpenAllVehWindows(): void
  CloseAllVehWindows(): void
  DisableAllVehInteractions(): void
  ResetVehicleInteractionState(): void
  ResetVehicle(): void
  QuestLockAllVehDoors(): void
  OnVehicleSeatReservationEvent(evt: VehicleSeatReservationEvent): EntityNotificationType
  GetSeats(): VehicleSeat_Record[]
  OnVehicleQuestCrystalDomeEvent(evt: VehicleQuestCrystalDomeEvent): EntityNotificationType
  OnVehicleQuestSirenEvent(evt: VehicleQuestSirenEvent): EntityNotificationType
  OnVehicleLightQuestToggleEvent(evt: VehicleLightQuestToggleEvent): EntityNotificationType
  OnVehicleQuestHornEvent(evt: VehicleQuestHornEvent): EntityNotificationType
  OnVehicleQuestVisualDestructionEvent(evt: VehicleQuestVisualDestructionEvent): EntityNotificationType
  OnVehicleQuestAVThrusterEvent(evt: VehicleQuestAVThrusterEvent): EntityNotificationType
  OnVehicleQuestUIEvent(evt: VehicleQuestEnableUIEvent): EntityNotificationType
  OnVehicleQuestUIEffectEvent(evt: VehicleQuestUIEffectEvent): EntityNotificationType
  OnVehicleRadioEvent(evt: VehicleRadioEvent): EntityNotificationType
  OnVehicleQuestWindowDestructionEvent(evt: VehicleQuestWindowDestructionEvent): EntityNotificationType
  OnVehicleRaceQuestEvent(evt: VehicleRaceQuestEvent): EntityNotificationType
  OnVehiclePanzerBootupUIQuestEvent(evt: VehiclePanzerBootupUIQuestEvent): EntityNotificationType
  OnVehicleQuestToggleEngineEvent(evt: VehicleQuestToggleEngineEvent): EntityNotificationType
}

declare interface vehicleControllerPS extends GameComponentPS {

  GetState(): vehicleEState
  SetState(state: vehicleEState): void
  SetLightMode(lightMode: vehicleELightMode): void
  GetLightMode(): vehicleELightMode
  CycleLightMode(): void
  IsAlarmOn(): Bool
  SetAlarm(on: Bool): void
  SetDoorState(door: EVehicleDoor, state: VehicleDoorState): void
  GetDoorState(door: EVehicleDoor): VehicleDoorState
  SetWindowState(door: EVehicleDoor, state: EVehicleWindowState): void
  GetWindowState(door: EVehicleDoor): EVehicleWindowState
  SetDoorInteractionState(door: EVehicleDoor, state: VehicleDoorInteractionState): void
  GetDoorInteractionState(door: EVehicleDoor): VehicleDoorInteractionState
}

declare interface SkillCheckBase extends IScriptable {

  Initialize(): void
  SetDynamic(isDynamic: Bool): void
  IsDynamic(): Bool
  Evaluate(requester: GameObject): Bool
  GetDifficulty(): EGameplayChallengeLevel
  SetIsActive(value: Bool): void
  SetIsPassed(value: Bool): void
  IsActive(): Bool
  IsPassed(): Bool
  GetSkill(): EDeviceChallengeSkill
  GetBaseSkill(): GameplaySkillCondition
  CheckPerformed(): void
  WasPerformed(): Bool
  GetAlternativeName(): TweakDBID
  GetDuration(): number
  SetDuration(duration: number): void
}

declare interface GameplayConditionBase extends IScriptable {

  Evaluate(requester: GameObject): Bool
  GetDescription(requester: GameObject): Condition
  GetPlayer(requester: GameObject): GameObject
  SetEntityID(id: EntityID): void
}

declare interface GameplaySkillCondition extends GameplayConditionBase {

  Evaluate(requester: GameObject): Bool
  GetRequiredLevel(gi: GameInstance): number
  GetPlayerSkill(requester: GameObject): number
  GetStatType(): gamedataStatType
  SetProperties(sel_skill: EDeviceChallengeSkill, sel_difficulty: EGameplayChallengeLevel): void
  GetDescription(requester: GameObject): Condition
  GetConditionDescription(gi: GameInstance): string
}

declare interface CurveStatModifier_Record extends StatModifier_Record {

  Id(): string
  Column(): string
  RefStat(): Stat_Record
  RefObject(): CName
}

declare interface Condition {

}

declare interface GameplayConditionContainer extends IScriptable {

  Evaluate(requester: GameObject): Bool
  Evaluate(requester: GameObject, group: ConditionGroupData): Bool
  CreateDescription(obj: GameObject, entID: EntityID): ConditionData[]
  HasAdditionalRequirements(): Bool
  GetOperator(): ELogicOperator
  GetGroupsAmount(): number
}

declare interface ConditionGroupData {

}

declare interface ConditionData {

}

declare interface DemolitionSkillCheck extends SkillCheckBase {

}

declare interface EngineeringSkillCheck extends SkillCheckBase {

}

declare interface BaseSkillCheckContainer extends IScriptable {

  Initialize(container: BaseSkillCheckContainer): void
  InitializeBackdoor(difficulty: EGameplayChallengeLevel): void
  GetEngineeringSlot(): EngineeringSkillCheck
  GetDemolitionSlot(): DemolitionSkillCheck
  GetHackingSlot(): HackingSkillCheck
  TryToInitialize(slotToInitialize: SkillCheckBase): void
}

declare interface HackingSkillCheck extends SkillCheckBase {

}

declare interface EngDemoContainer extends BaseSkillCheckContainer {

  Initialize(container: BaseSkillCheckContainer): void
}

declare interface MasterControllerPS extends ScriptableDeviceComponentPS {

  OnInstantiated(): Bool
  Initialize(): void
  OnDeviceDynamicConnectionChange(evt: DeviceDynamicConnectionChange): EntityNotificationType
  CacheDevices(): void
  GetExpectedSlaveState(): EDeviceStatus
  GetClearance(): Clearance
  DetermineGameplayViability(context: GetActionsContext, hasActiveActions: Bool): Bool
  GetWidgetTypeName(): CName
  NetrunnerGiveConnectedDevices(): DeviceComponentPS[]
  FillAgentsList(agentsList: PSOwnerData[]): void
  IsMasterType(): Bool
  GetFirstAttachedSlave(): DeviceComponentPS
  GetAllDescendants(outDevices: DeviceComponentPS[]): void
  GetPuppets(): PuppetDeviceLinkPS[]
  GetImmediateSlaves(): DeviceComponentPS[]
  HasAnySlave(): Bool
  GetImmediateDescendants(): DeviceComponentPS[]
  ExtractActionFromSlave(slave: DeviceComponentPS, actionName: CName, outAction: DeviceAction): Bool
  SendActionsToAllSlaves(actions: ScriptableDeviceAction[]): void
  SendActionToAllSlaves(action: ScriptableDeviceAction): void
  SendEventToAllSlaves(evt: Event): void
  GetQuickHacksFromSlave(outActions: DeviceAction[], context: GetActionsContext): void
  RequestAreaEffectVisualisationUpdateOnSlaves(areaEffectID: CName, show: Bool): void
  OnRequestThumbnailWidgetsUpdate(evt: RequestThumbnailWidgetsUpdateEvent): void
  OnRequestDeviceWidgetUpdate(evt: RequestDeviceWidgetUpdateEvent): void
  GetBlackboardDef(): MasterDeviceBaseBlackboardDef
  GetThumbnailWidgets(): SThumbnailWidgetPackage[]
  GetDeviceWidgets(): SDeviceWidgetPackage[]
  GetSlaveDeviceWidget(deviceID: PersistentID): SDeviceWidgetPackage
  RequestThumbnailWidgetsUpdate(blackboard: IBlackboard): void
  RequestAllDevicesWidgetsUpdate(blackboard: IBlackboard): void
  RefreshSlaves_Event(onInitialize?: Bool): void
  RefreshDefaultHighlightOnSlaves(): void
  SetSlavesAsQuestImportant(isImportant: Bool): void
  OnRefreshSlavesEvent(evt: RefreshSlavesEvent): EntityNotificationType
  OnFillTakeOverChainBBoardEvent(evt: FillTakeOverChainBBoardEvent): EntityNotificationType
  FillTakeOverChainBB(): void
  RevealDevicesGrid(shouldDraw: Bool, ownerEntityPosition?: Vector4, fxDefault?: FxResource, isPing?: Bool, lifetime?: number, revealSlave?: Bool, revealMaster?: Bool, ignoreRevealed?: Bool): void
}

declare interface Clearance extends IScriptable {

  /** @noSelf **/
  IsInRange(clearance: Clearance, clearanceLevel: number): Bool
  /** @noSelf **/
  CreateClearance(min?: number, max?: number): Clearance
  /** @noSelf **/
  ReadValues(clearance: Clearance, min: number, max: number): void
  /** @noSelf **/
  GetMaxClearanceLevel(): number
  /** @noSelf **/
  GetMinClearanceLevel(): number
}

declare interface MasterViabilityInterpreter extends IScriptable {

  /** @noSelf **/
  Evaluate(device: MasterControllerPS, hasActiveActions: Bool): Bool
}

declare interface DeviceLinkComponentPS extends SharedGameplayPS {

  /** @noSelf **/
  CreateAndAcquireDeviceLink(game: GameInstance, entityID: EntityID): DeviceLinkComponentPS
  /** @noSelf **/
  AcquireDeviceLink(game: GameInstance, entityID: EntityID): DeviceLinkComponentPS
  GetParentDeviceLink(): DeviceLink
  GetParentDevice(): SharedGameplayPS
  IsConnected(): Bool
  OnDeviceLinkRequest(evt: DeviceLinkRequest): EntityNotificationType
  OnDestroyLink(evt: DestroyLink): EntityNotificationType
  GetParents(outDevices: DeviceComponentPS[]): void
  GetAncestors(outDevices: DeviceComponentPS[]): void
  EstablishLink(connect: Bool): void
  Disconnect(links: DeviceComponentPS[]): void
  Disconnect(link: DeviceComponentPS): void
  Connect(links: DeviceComponentPS[]): void
  Connect(link: DeviceComponentPS): void
  /** @noSelf **/
  GenerateID(id: EntityID): PersistentID
  HasNetworkBackdoor(): Bool
  ActionSecurityBreachNotification(lastKnownPosition: Vector4, whoBreached: GameObject, type: ESecurityNotificationType, stimType?: gamedataStimType): SecuritySystemInput
  TriggerSecuritySystemNotification(lastKnownPosition: Vector4, whoBreached: GameObject, type: ESecurityNotificationType, stimType?: gamedataStimType): void
  OnSecuritySystemEnabled(evt: SecuritySystemEnabled): EntityNotificationType
  OnSecuritySystemDisabled(evt: SecuritySystemDisabled): EntityNotificationType
  OnSecuritySystemOutput(evt: SecuritySystemOutput): EntityNotificationType
  OnSecurityAreaCrossingPerimeter(evt: SecurityAreaCrossingPerimeter): EntityNotificationType
  OnTargetAssessmentRequest(evt: TargetAssessmentRequest): EntityNotificationType
  WasRevealedInNetworkPing(): Bool
  SetRevealedInNetworkPing(wasRevealed: Bool): void
  GetDevice(deviceLink: DeviceLink): DeviceComponentPS
  PingDevicesNetwork(): void
  ActionDevicePing(ps: PersistentState): PingDevice
}

declare interface DeviceSystemBaseControllerPS extends MasterControllerPS {

  ActionGetAccess(): GetAccess
  GetActions(outActions: DeviceAction[], context: GetActionsContext): Bool
  OnGetAccess(evt: GetAccess): EntityNotificationType
  RevokeQuickHacks(device: DeviceComponentPS): void
}

declare interface ScriptableDeviceAction extends BaseScriptableAction {

  GetOwnerPS(game: GameInstance): ScriptableDeviceComponentPS
  ResolveAction(data: ResolveActionData): Bool
  ShouldActivateDevice(): Bool
  SetShouldActivateDevice(value: Bool): void
  CanTriggerStim(): Bool
  SetCanTriggerStim(canTrigger: Bool): void
  GetDurationValue(): number
  SetCompleted(): void
  IsCompleted(): Bool
  IsStarted(): Bool
  SetDurationValue(duration: number): void
  GetActionName(): CName
  GetDefaultActionName(): CName
  GetObjectActionRecord(): ObjectAction_Record
  CanSpiderbotCompleteThisAction(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  AddDeviceName(deviceName: string): void
  GetDeviceName(): string
  GetInkWidgetLibraryPath(): ResRef
  GetInkWidgetLibraryID(): CName
  SetInkWidgetTweakDBID(id: TweakDBID): void
  GetInkWidgetTweakDBID(): TweakDBID
  SetActiveStatusEffectTweakDBID(effectID: TweakDBID): void
  GetActiveStatusEffectTweakDBID(): TweakDBID
  SetAttachedProgramTweakDBID(programID: TweakDBID): void
  GetAttachedProgramTweakDBID(): TweakDBID
  SetIllegal(isIllegal: Bool): void
  ClearIllegal(): void
  IsIllegal(): Bool
  GetInteractionLayer(): CName
  SetInteractionLayer(layer: CName): void
  GetRequestType(): gamedeviceRequestType
  SetObjectActionID(id: TweakDBID): void
  SetAsQuickHack(wasExecutedAtLeastOnce?: Bool): void
  ProduceInteractionParts(): void
  StartUpload(gameInstance: GameInstance): void
  CompleteAction(gameInstance: GameInstance): void
  GetCost(): number
  SetInteractionIcon(iconType: TweakDBID): void
  GetInteractionIcon(): ChoiceCaptionIconPart_Record
  SetAsSpiderbotAction(): void
  IsQuickHack(): Bool
  GetActivationTime(): number
  IsSpiderbotAction(): Bool
  SetSpiderbotLocationOverrideReference(targetLocationReference: NodeRef): void
  GetSpiderbotLocationOverrideReference(): NodeRef
  GetInteractionChoice(): InteractionChoice
  GetActionWidgetPackage(): SActionWidgetPackage
  CreateInteraction(actions?: DeviceAction[], alternativeMainChoiceRecord?: string, alternativeMainChoiceTweakDBID?: TweakDBID): void
  HasUI(): Bool
  CreateActionWidgetPackage(actions?: DeviceAction[]): void
  CreateActionWidgetPackage(widgetTweakDBID: TweakDBID, actions?: DeviceAction[]): void
  ResolveActionWidgetTweakDBData(): void
  CreateCustomInteraction(actions?: DeviceAction[], customName1?: string, customName2?: string, customID1?: TweakDBID, customID2?: TweakDBID): void
  SetInactiveWithReason(isActiveIf: Bool, reason: string): void
  SetInactiveReason(reasonStr: string): void
  GetInactiveReason(): string
  SetInactiveReasonAsCaption(): void
  GetDurationFromTDBRecord(record: TweakDBID): number
}

declare interface IStatPoolsListener extends IScriptable {

}

declare interface ScriptStatPoolsListener extends IStatPoolsListener {

  OnStatPoolValueChanged(oldValue: number, newValue: number, percToPoints: number): void
}

declare interface CustomValueStatPoolsListener extends ScriptStatPoolsListener {

  SetValue(valuePerc: number): void
}

declare interface ActionUploadListener extends CustomValueStatPoolsListener {

}

declare interface QuickHackUploadListener extends ActionUploadListener {

  OnStatPoolAdded(): Bool
  SetRegenBehavior(): void
  OnStatPoolMaxValueReached(value: number): Bool
  SendUploadStartedEvent(action: ScriptableDeviceAction): void
  SendUploadFinishedEvent(): void
  PlayQuickHackSound(eventName: CName): void
  IncrementQuickHackBlackboard(): void
  DecrementQuickHackBlackboard(): void
  RemoveLink(owner: ScriptedPuppet): void
  RemoveLinkedStatusEffects(owner: ScriptedPuppet): void
}

declare interface ObjectActionType_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataObjectActionType
}

declare interface AudioEvent extends Event {

}

declare interface StatPoolModifier {

}

declare interface UploadProgramProgressEvent extends Event {

}

declare interface RevealQuickhackMenu extends HUDManagerRequest {

}

declare interface RemoveLinkEvent extends Event {

}

declare interface RemoveLinkedStatusEffectsEvent extends Event {

}

declare interface SetQuickHackAttemptEvent extends Event {

}

declare interface SetQuickHackEvent extends Event {

}

declare interface SPerformedActions {

  /** @noSelf **/
  ContainsActionContext(self: SPerformedActions, actionContext: EActionContext): Bool
  /** @noSelf **/
  GetContextFromAction(selfPSID: PersistentID, actionToResolve: ScriptableDeviceAction): EActionContext
}

declare interface StatPoolCost_Record extends ObjectActionCost_Record {

  StatPool(): StatPool_Record
}

declare interface StatPool_Record extends TweakDBRecord {

  EnumComment(): string
  Stat(): Stat_Record
  Regen(): PoolValueModifier_Record
  Decay(): PoolValueModifier_Record
  EnumName(): CName
  InitialValue(): number
  EnableDefeated(): Bool
  StatPoolType(): gamedataStatPoolType
}

declare interface HackCategory_Record extends TweakDBRecord {

  EnumComment(): string
  LocalizedDescription(): string
  EnumName(): CName
}

declare interface SWidgetPackage extends SWidgetPackageBase {

}

declare interface SActionWidgetPackage extends SWidgetPackage {

}

declare interface DeviceHelper {

  /** @noSelf **/
  IDMO(gameInstance: GameInstance): Bool
  /** @noSelf **/
  IsDebugModeON(gameInstance: GameInstance): Bool
  /** @noSelf **/
  DebugLog(gameInstance: GameInstance, message: string): void
  /** @noSelf **/
  ExtractSpecificStateClass(states: PersistentState[], desiredClassName: CName, extractedStates: PersistentState[]): Bool
  /** @noSelf **/
  ConvertActionsArray(puppetActions: PuppetAction[]): DeviceAction[]
  /** @noSelf **/
  ConvertActionIntoScriptableAction(inActions: DeviceAction[], outActions: ScriptableDeviceAction[]): Bool
  /** @noSelf **/
  PushActionsIntoInteractionChoice(choice: InteractionChoice, actions: DeviceAction[]): void
  /** @noSelf **/
  FindAction(actionName: CName, actions: DeviceAction[], foundAction: DeviceAction): number
  /** @noSelf **/
  RemoveActionFromArray(actionName: CName, actions: DeviceAction[]): void
  /** @noSelf **/
  FindStatusAction(actions: DeviceAction[], status: BaseDeviceStatus): number
  /** @noSelf **/
  RemoveStatusAction(actions: DeviceAction[]): Bool
}

declare interface ActivityLogSystem extends IActivityLogSystem {

  AddLog(logEntry: string): void
  AddLogFromParts(textpart1: string, textpart2?: string, textpart3?: string, textpart4?: string, textpart5?: string): void
}

declare interface ActionInt extends ScriptableDeviceAction {

  GetProperties(): DeviceActionProperty[]
  GetCurrentDisplayString(): string
}

declare interface DeviceActionProperty extends IScriptable {

}

declare interface ActionEnum extends ActionInt {

}

declare interface BaseDeviceStatus extends ActionEnum {

  SetProperties(deviceRef: ScriptableDeviceComponentPS): void
  GetCurrentDisplayString(): string
  GetScannerStatusRecord(): TweakDBID
  GetStatusValue(): number
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(requesterClearancer: Clearance): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface DeviceActionPropertyFunctions extends IScriptable {

  /** @noSelf **/
  SetUpProperty_Bool(propertyName: CName, value: Bool, nameOnTrue: CName, nameOnFalse: CName): DeviceActionProperty
  /** @noSelf **/
  GetProperty_Bool(prop: DeviceActionProperty, value: Bool, nameOnFalse: CName, nameOnTrue: CName): Bool
  /** @noSelf **/
  GetProperty_Bool(prop: DeviceActionProperty, value: Bool): Bool
  /** @noSelf **/
  SetUpProperty_Float(propertyName: CName, value: number): DeviceActionProperty
  /** @noSelf **/
  GetProperty_Float(prop: DeviceActionProperty, value: number): Bool
  /** @noSelf **/
  SetUpProperty_Int(propertyName: CName, value: number): DeviceActionProperty
  /** @noSelf **/
  GetProperty_Int(prop: DeviceActionProperty, value: number): Bool
  /** @noSelf **/
  SetUpProperty_IntRanged(propertyName: CName, value: number, rangeMin: number, rangeMax: number): DeviceActionProperty
  /** @noSelf **/
  GetProperty_IntRanged(prop: DeviceActionProperty, value: number, rangeMin: number, rangeMax: number): Bool
  /** @noSelf **/
  SetUpProperty_Name(propertyName: CName, value: CName): DeviceActionProperty
  /** @noSelf **/
  GetProperty_Name(prop: DeviceActionProperty, value: CName): Bool
  /** @noSelf **/
  SetUpProperty_RadioStatus(propertyName: CName, deviceStatus: number, stationName: string): DeviceActionProperty
  /** @noSelf **/
  GetProperty_RadioStatus(prop: DeviceActionProperty, deviceStatus: number, stationName: string): Bool
  /** @noSelf **/
  SetUpProperty_TvStatus(propertyName: CName, deviceStatus: number, stationName: string): DeviceActionProperty
  /** @noSelf **/
  GetProperty_TvStatus(prop: DeviceActionProperty, deviceStatus: number, stationName: string): Bool
  /** @noSelf **/
  SetUpProperty_MediaStatus(propertyName: CName, deviceStatus: number, stationName: string): DeviceActionProperty
  /** @noSelf **/
  GetProperty_MediaStatus(prop: DeviceActionProperty, deviceStatus: number, stationName: string): Bool
  /** @noSelf **/
  SetUpProperty_ElevatorInt(propertyName: CName, value: number, displayValue: number): DeviceActionProperty
  /** @noSelf **/
  SetUpProperty_NodeRef(propertyName: CName, value: NodeRef): DeviceActionProperty
  /** @noSelf **/
  GetProperty_NodeRef(prop: DeviceActionProperty, value: NodeRef): Bool
  /** @noSelf **/
  SetUpProperty_EntityReference(propertyName: CName, value: EntityReference): DeviceActionProperty
  /** @noSelf **/
  GetProperty_EntityReference(prop: DeviceActionProperty, value: EntityReference): Bool
}

declare interface DefaultActionsParametersHolder extends IScriptable {

  /** @noSelf **/
  GetStatusClearance(): number
  /** @noSelf **/
  GetAuthorizeUserClearance(): number
  /** @noSelf **/
  GetCrackDeviceProtectionClearance(): number
  /** @noSelf **/
  GetQuestClearance(): number
  /** @noSelf **/
  GetInteractiveClearance(): number
  /** @noSelf **/
  GetTerminalCompatibleClearance(): number
  /** @noSelf **/
  GetControlPanelCompatibleClearance(): number
  /** @noSelf **/
  GetSystemCompatibleClearance(): number
  /** @noSelf **/
  GetToggleActivationClearance(): number
  /** @noSelf **/
  GetSetOnSetOffActions(): number
  /** @noSelf **/
  GetTogglePowerClearance(): number
  /** @noSelf **/
  GetToggleAlarmClearance(): number
  /** @noSelf **/
  GetToggleAuthorizationClearance(): number
  /** @noSelf **/
  GetDisassembleClearance(): number
  /** @noSelf **/
  GetFixingClearance(): number
  /** @noSelf **/
  GetSpiderbotClearance(): number
  /** @noSelf **/
  GetToggleOnClearance(): number
  /** @noSelf **/
  GetTakeOverControl(): number
  /** @noSelf **/
  GetToggleStreamFeedClearance(): number
  /** @noSelf **/
  GetToggleOpenClearance(): number
  /** @noSelf **/
  GetToggleLockClearance(): number
  /** @noSelf **/
  GetToggleSealClearance(): number
  /** @noSelf **/
  GetForceOpenClearance(): number
  /** @noSelf **/
  GetOpenSecretClearance(): number
  /** @noSelf **/
  GetToggleSecureScreenClearance(): number
  /** @noSelf **/
  GetToggleOpenBlindersClearance(): number
  /** @noSelf **/
  GetToggleCycleAirLockClearance(): number
  /** @noSelf **/
  GetForceAirlockDecompressionClearance(): number
  /** @noSelf **/
  GetForceSafetyShuttersClearance(): number
  /** @noSelf **/
  GetForceDecompressionClearance(): number
  /** @noSelf **/
  GetHackSafetyShuttersClearance(): number
  /** @noSelf **/
  GetHackDecompressionClearance(): number
  /** @noSelf **/
  GetToggleRoverLiftClearance(): number
  /** @noSelf **/
  GetSmashRoverLiftClearance(): number
  /** @noSelf **/
  GetRewireToggleRoverLiftClearance(): number
  /** @noSelf **/
  GetRewireSmashRoverLiftClearance(): number
  /** @noSelf **/
  GetDefaultPuppetActionClearance(): number
}

declare interface MinigameAction_Record extends ObjectAction_Record {

  JournalEntry(): string
  Type(): MinigameActionType_Record
  Category(): MinigameCategory_Record
  Reward(): RewardBase_Record
  FactName(): CName
  Complexity(): number
  FactValue(): number
  MemoryCost(): number
  Duration(): number
  ShowPopup(): Bool
}

declare interface ActionBool extends ScriptableDeviceAction {

  GetProperties(): DeviceActionProperty[]
  GetCurrentDisplayString(): string
  GetValue(): Bool
  OverrideInteractionRecord(newRecordforTrue: TweakDBID, newRecordForFalse: TweakDBID): void
  CreateCustomInteraction(actions?: DeviceAction[], customName1?: string, customName2?: string, customID1?: TweakDBID, customID2?: TweakDBID): void
  CreateActionWidgetPackage(actions?: DeviceAction[]): void
}

declare interface GetAccess extends ActionBool {

  SetProperties(hasAccess: Bool): void
}

declare interface ToggleActivation extends ActionBool {

  SetProperties(status: EDeviceStatus): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
}

declare interface SetDeviceUnpowered extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
}

declare interface TogglePersonalLink extends ActionBool {

  SetProperties(personalLinkStatus: EPersonalLinkConnectionStatus, shouldSkipMinigame: Bool): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
  ShouldConnect(): Bool
  GetTweakDBChoiceRecord(): string
  GetInteractionIcon(): ChoiceCaptionIconPart_Record
}

declare interface DisassembleDevice extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface DisassembleOptions {

}

declare interface DestructionData {

}

declare interface ToggleJuryrigTrap extends ActionBool {

  SetProperties(state: EJuryrigTrapState): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface ActionScavenge extends ActionInt {

  SetProperties(amoutOfScraps: number): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface SetAuthorizationModuleON extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
}

declare interface AuthorizationData {

  /** @noSelf **/
  IsAuthorizationValid(self: AuthorizationData): Bool
}

declare interface SecurityAccessLevelEntry {

  /** @noSelf **/
  IsDataValid(self: SecurityAccessLevelEntry): Bool
  /** @noSelf **/
  IsPasswordValid(self: SecurityAccessLevelEntry): Bool
  /** @noSelf **/
  IsKeycardValid(self: SecurityAccessLevelEntry): Bool
}

declare interface SecurityAccessLevelEntryClient extends SecurityAccessLevelEntry {

  /** @noSelf **/
  IsDataValid(self: SecurityAccessLevelEntryClient): Bool
  /** @noSelf **/
  IsPasswordValid(self: SecurityAccessLevelEntryClient): Bool
  /** @noSelf **/
  IsKeycardValid(self: SecurityAccessLevelEntryClient): Bool
}

declare interface SetAuthorizationModuleOFF extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
}

declare interface ToggleZoomInteraction extends ActionBool {

  SetProperties(isZoomInteraction: Bool): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
  ShouldConnect(): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface OpenFullscreenUI extends ActionBool {

  SetProperties(isZoomInteraction: Bool): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
  ShouldConnect(): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface SetDeviceON extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
}

declare interface IllegalActionTypes {

}

declare interface RevokeQuickHackAccess extends Event {

}

declare interface ActionNotifier extends IScriptable {

  SetInternalOnly(): void
  SetExternalOnly(): void
  SetAll(): void
  SetNone(): void
  SetFailed(): void
  IsInternalOnly(): Bool
  IsExternalOnly(): Bool
  IsAll(): Bool
  IsNone(): Bool
  IsFailed(): Bool
}

declare interface DeviceLinkRequest extends Event {

  /** @noSelf **/
  Construct(id: PersistentID, _className: CName): DeviceLinkRequest
  GetLink(): DeviceLink
}

declare interface DeviceLinkEstablished extends Event {

}

declare interface SecurityAgentSpawnedEvent extends Event {

  /** @noSelf **/
  Construct(agentLink: DeviceLink, type: gameEntitySpawnerEventType, areas: SecurityAreaControllerPS[]): SecurityAgentSpawnedEvent
}

declare interface SecurityAreaEvent extends ActionBool {

  GetWhoBreached(): GameObject
  SetWhoBreached(whoBreached: GameObject): void
  SetAreaData(areaData: SecurityAreaData): void
  GetSecurityAreaData(): SecurityAreaData
  GetSecurityAreaID(): PersistentID
  ModifyAreaTypeHack(modifiedAreaType: ESecurityAreaType): void
}

declare interface SecurityAreaData {

}

declare interface NPCRarity_Record extends TweakDBRecord {

  EnumComment(): string
  StatModifiers(outList: StatModifier_Record[]): void
  GetStatModifiersCount(): number
  GetStatModifiersItem(index: number): StatModifier_Record
  StatModifiersContains(item: StatModifier_Record): Bool
  EnumName(): CName
  Type(): gamedataNPCRarity
}

declare interface SecuritySystemInput extends SecurityAreaEvent {

  Initialize(initialEvent: SecuritySystemInput): void
  SetProperties(lkp: Vector4, whoBreached: GameObject, reporter: SharedGameplayPS, type: ESecurityNotificationType, canDoReprimand: Bool, shouldLeadReprimand: Bool, stimType?: gamedataStimType): void
  SetProperties(lkp: Vector4, whoBreached: GameObject, reporter: SharedGameplayPS, type: ESecurityNotificationType, canDoReprimand: Bool, shouldLeadReprimand: Bool, id: number, customRecipients: EntityID[], isSharingRestricted: Bool): void
  GetNotifierHandle(): SharedGameplayPS
  GetNotificationType(): ESecurityNotificationType
  GetObjectOfInterest(): GameObject
  CanPerformReprimand(): Bool
  ShouldLeadReprimend(): Bool
  GetLastKnownPosition(): Vector4
  GetID(): number
  HasCustomRecipients(): Bool
  GetCustomRecipientsList(): EntityID[]
  IsSharingRestricted(): Bool
  GetStimTypeTriggeredAlarm(): gamedataStimType
  GetPuppetCharRecord(): Character_Record
  GetPuppetDisplayName(): string
  SetAsReprimendLeader(isLeader: Bool): void
  SetID(id: number): void
  AttachCustomRecipientsList(list: EntityID[]): void
  ModifyNotificationType(newEventType: ESecurityNotificationType): void
  RestrictSharing(): void
  SetLastKnownPosition(lkp: Vector4): void
  SetObjectOfInterest(object: GameObject): void
  SetPuppetCharacterRecord(record: TweakDBID): void
}

declare interface SecuritySystemControllerPS extends DeviceSystemBaseControllerPS {

  Initialize(): void
  OnInstantiated(): Bool
  IsRegistryReady(): Bool
  InitiateAgentRegistry(): void
  CreateRegistry(): void
  CompileSecurityAgentRegistry(): void
  AddAgentRecord(agent: DeviceLink, connectedAreas: SecurityAreaControllerPS[], requestLatestOutput: Bool): void
  GetSensors(): SensorDeviceControllerPS[]
  IsSystemSafe(): Bool
  IsSystemAlerted(): Bool
  IsSystemInCombat(): Bool
  IsHidden(): Bool
  GetAgentRegistry(): AgentRegistry
  GetSecurityState(): ESecuritySystemState
  GetDeviceStatusAction(): SecuritySystemStatus
  GetSecuritySystemAttitudeGroupName(): CName
  IsPoliceSecuritySystem(): Bool
  GetReprimandReceiver(agentID: PersistentID): EntityID
  DetermineSecurityAreaTypeForEntityID(entityID: EntityID): ESecurityAreaType
  GetMostDangerousSecurityAreaForEntityID(entityID: EntityID): SecurityAreaControllerPS
  GetMostDangerousSecurityAreaForEntityID(go: GameObject): SecurityAreaControllerPS
  ShouldReactToTarget(suspect: EntityID, reporter: EntityID): Bool
  GetAgentAreas(agentID: PersistentID): SecurityAreaControllerPS[]
  GetSecurityBlacklist(): BlacklistEntry[]
  IsTargetTresspassingMyZone(suspect: EntityID, reporter: EntityID): Bool
  IsUserInsideSystem(userToBeChecked: EntityID): Bool
  IsUserInsideSystem(userToBeChecked: EntityID, highestSecurityAccessLevel: ESecurityAccessLevel): Bool
  IsUserInsideSystem(userToBeChecked: EntityID, highestSecurityAccessLevel: ESecurityAccessLevel, highestThreat: ESecurityAreaType): Bool
  IsEntityBlacklisted(entityID: EntityID): Bool
  IsEntityBlacklisted(gameObject: GameObject): Bool
  IsEntityBlacklistedForAtLeast(entityID: EntityID, reason: BlacklistReason): Bool
  IsEntityBlacklistedForSpecificReason(entityID: EntityID, reason: BlacklistReason): Bool
  IsEntityBlacklistedForAtLeast(go: GameObject, reason: BlacklistReason): Bool
  HasEntityBeenSpottedTooManyTimes(reporter: PersistentID, target: EntityID): Bool
  HasEntityBeenSpottedTooManyTimes(reporter: PersistentID, target: GameObject, notificationType: ESecurityNotificationType): Bool
  HasSurpassedGlobalWarningsCount(target: EntityID): Bool
  IsReprimandOngoing(): Bool
  IsReprimandOngoingAgainst(suspect: EntityID): Bool
  GetReprimandPerformer(target?: EntityID): GameObject
  GetSecurityAreas(includeInactive?: Bool, acquireOnlyDirectlyConnected?: Bool): SecurityAreaControllerPS[]
  SetSecuritySystemAttitudeGroup(newAttitude: TweakDBID): void
  NotifyAboutAttitudeChange(): void
  SetSecuritySystemAttitude(desiredAttitude: EAIAttitude, input: SecuritySystemInput, isComingFromQuest?: Bool): void
  SetSecurityState(newState: ESecuritySystemState, input?: SecuritySystemInput, isComingFromQuest?: Bool): void
  OnMadnessDebuff(evt: MadnessDebuff): EntityNotificationType
  OnSuppressSecuritySystemReaction(evt: SuppressSecuritySystemReaction): EntityNotificationType
  RevokeProtection(entityID: EntityID): void
  OnSecurityAreaCrossingPerimeter(evt: SecurityAreaCrossingPerimeter): EntityNotificationType
  OnAgentSpawned(evt: SecurityAgentSpawnedEvent): EntityNotificationType
  HasSupport(agentID: PersistentID): Bool
  OnPlayerSpotted(evt: PlayerSpotted): EntityNotificationType
  SendSupportEvents(modifiedAgents?: Agent[], forceRevokeSupport?: Bool): void
  RequestLatestOutput(id: PersistentID): void
  GetTurrets(area: SecurityAreaControllerPS, turrets: SecurityTurretControllerPS[]): Bool
  OnSecurityAreaTypeChangedNotification(evt: SecurityAreaTypeChangedNotification): EntityNotificationType
  HandleAreaBeingEnabled(area: SecurityAreaControllerPS): void
  HandleAreaBeingDisabled(area: SecurityAreaControllerPS): void
  DisableDevice(): void
  ShouldSecuritySystemDisableItself(): Bool
  ProcessBreachNotificationWithRecipientsList(addresseeList: EntityID[], securitySystemInput: SecuritySystemInput): void
  ReportPotentialSituation(input: SecuritySystemInput): Bool
  ProcessInput(input: SecuritySystemInput): Bool
  ProcessHostile(input: SecuritySystemInput): Bool
  ProcessNeutral(input: SecuritySystemInput): Bool
  ProcessFriendly(input: SecuritySystemInput): Bool
  IsRefreshRequired(): Bool
  OnSecuritySystemInput(evt: SecuritySystemInput): EntityNotificationType
  GetValidRecipients(input: SecuritySystemInput): SecuritySystemOutputData[]
  ProduceOutput(input: SecuritySystemInput, securityStateChanged: Bool): void
  ResolveNotificationImmediately(evt: SecuritySystemInput): void
  DetermineSecuritySystemState(evt: SecuritySystemInput, isSimulation?: Bool): ESecuritySystemState
  ResolveTransitionFromSafe(evt: SecuritySystemInput, isSimulation?: Bool): ESecuritySystemState
  ResolveTransitionFromAlerted(evt: SecuritySystemInput, isSimulation?: Bool): ESecuritySystemState
  ResolveTransitionFromCombat(evt: SecuritySystemInput, isSimulation?: Bool): ESecuritySystemState
  ResolveReprimand(evt: SecuritySystemInput, determinedState: ESecuritySystemState): Bool
  SetSecurityStateAndTriggerResponse(newState: ESecuritySystemState, evt: SecuritySystemInput, isComingFromQuest?: Bool): Bool
  SendResponseToCustomRecipients(response: SecuritySystemOutput): void
  RequestTargetsAssessment(providedAgents?: Agent[], target?: GameObject): void
  IsNotificationValid(evt: SecuritySystemInput): Bool
  GetOverlappingAreas(input: SecuritySystemInput): SecurityAreaControllerPS[]
  GetOverlappingAreas(bunch1: SecurityAreaControllerPS[], bunch2: SecurityAreaControllerPS[]): SecurityAreaControllerPS[]
  IsSystemClean(): Bool
  SetReprimandPerformer(evt: SecuritySystemInput, instructions: EReprimandInstructions): void
  ReleaseAllReprimands(): void
  ReleaseCurrentPerformerFromReprimand(instructions: EReprimandInstructions, target: EntityID): void
  SendReprimandEvent(evt: ReprimandUpdate): void
  ResolvePotentialDeescalation(): Bool
  InitiateAutomaticDeescalationEvent(evt: SecuritySystemInput): void
  CancelAutomaticDeescalationEvent(): void
  OnAutomaticDeescalationEvent(evt: AutomaticDeescalationEvent): EntityNotificationType
  Deescalate(evt: SecuritySystemInput): void
  OnDeescalate(evt: DeescalationEvent): EntityNotificationType
  BlacklistEntityID(entityID: EntityID, reason: BlacklistReason): void
  TriggerBlacklistWipeCountdown(start: Bool, entityID: EntityID): void
  OnBlacklistPeriodEnded(evt: BlacklistPeriodEnded): EntityNotificationType
  BlacklistEntityID(go: GameObject, reason: BlacklistReason): void
  GetEntityBlacklistIndex(entityID: EntityID): number
  RemoveFromBlacklist(entityID: EntityID): void
  RemoveFromBlacklist(go: GameObject): void
  OnRemoveFromBlacklist(evt: RemoveFromBlacklistEvent): EntityNotificationType
  IsPlayersEntityID(entityID: EntityID): Bool
  GetSecurityAccessData(level: ESecurityAccessLevel): SecurityAccessLevelEntry[]
  GetUserAuthorizationLevel(user: EntityID): ESecurityAccessLevel
  AddAccessLevelData(entryLevel: ESecurityAccessLevel, password?: CName, keycard?: TweakDBID): void
  AuthorizeUser(user: EntityID, password?: CName): Bool
  AuthorizeUser(user: EntityID, level: ESecurityAccessLevel): void
  OnAddUserEvent(evt: AddUserEvent): EntityNotificationType
  OnRevokeAuthorization(evt: RevokeAuthorization): EntityNotificationType
  RemoveUser(user: EntityID): Bool
  AddAccessLevelEntry(level: SecurityAccessLevelEntry[], password?: CName, keycard?: TweakDBID): void
  ProvideAccessDataLevel_0(): SecurityAccessLevelEntry[]
  ProvideAccessDataLevel_1(): SecurityAccessLevelEntry[]
  ProvideAccessDataLevel_2(): SecurityAccessLevelEntry[]
  ProvideAccessDataLevel_3(): SecurityAccessLevelEntry[]
  ProvideAccessDataLevel_4(): SecurityAccessLevelEntry[]
  PerformAuthorizationAttemptUsingKeycard(user: EntityID): ESecurityAccessLevel
  PerformAuthorizationAttemptUsingPassword(user: EntityID, password: CName): ESecurityAccessLevel
  IsUserAuthorizedViaCard(user: EntityID, level: ESecurityAccessLevel): Bool
  IsUserAuthorizedViaPassword(password: CName, level: ESecurityAccessLevel): Bool
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  ActionSecuritySystemStatus(): SecuritySystemStatus
  ActionSecuritySystemBreachResponse(notificationEvent: SecuritySystemInput): SecuritySystemOutput
  ActionFullSystemRestart(): FullSystemRestart
  OnFullSystemRestart(evt: FullSystemRestart): EntityNotificationType
  OnQuestForceON(evt: QuestForceON): EntityNotificationType
  OnActionTakeOverSecuritySystem(evt: TakeOverSecuritySystem): EntityNotificationType
  OnActionForceResetDevice(evt: ActionForceResetDevice): EntityNotificationType
  CleanSecuritySystemMemory(): void
  ReduceLevelByOne(level: ESecurityAccessLevel): ESecurityAccessLevel
  GetAttitudeSystem(): AttitudeSystem
  GetAttitudeTowards(target: EntityID): EAIAttitude
  GetAttitudeTowards(target: GameObject): EAIAttitude
  GetAttitudeTowards(otherGroup: CName): EAIAttitude
  OnQuestIllegalActionNotification(evt: QuestIllegalActionNotification): EntityNotificationType
  OnQuestCombatActionNotification(evt: QuestCombatActionNotification): EntityNotificationType
  OnSetSecuritySystemState(evt: SetSecuritySystemState): EntityNotificationType
  OnQuestAuthorizePlayer(evt: AuthorizePlayerInSecuritySystem): EntityNotificationType
  OnQuestBlackListPlayer(evt: BlacklistPlayer): EntityNotificationType
  OnQuestExclusiveQuestControl(evt: SuppressSecuritySystemStateChange): EntityNotificationType
  OnQuestChangeSecuritySystemAttitudeGroup(evt: QuestChangeSecuritySystemAttitudeGroup): EntityNotificationType
  QuestChangeSecuritySystemAttitudeGroup(evt: QuestChangeSecuritySystemAttitudeGroup): void
  ExtractNPCIDsFromQuestNotification(evt: QuestSecuritySystemInput): EntityID[]
  QuestIllegalActionNotification(evt: QuestIllegalActionNotification): void
  QuestCombatActionNotification(evt: QuestCombatActionNotification): void
  QuestChangeSecuritySystemState(evt: SetSecuritySystemState): void
  QuestSuppressSecuritySystem(evt: SuppressSecuritySystemStateChange): void
  QuestAuthorizePlayer(evt: AuthorizePlayerInSecuritySystem): void
  QuestBlacklistPlayer(evt: BlacklistPlayer): void
  DebugGetOutputsCount(): number
  DebugGetInputsCount(): number
  Debug(instructionAdded: Bool, inputAdded: Bool, trace: string, instruction?: EReprimandInstructions, input?: SecuritySystemInput): void
  OnMaraudersMapDeviceDebug(sink: MaraudersMapDevicesSink): void
  Debug_GetReprimandID(): number
  Debug_GetPlayerBlacklistReason(): BlacklistReason
  Debug_GetPlayerWarningCount(): number
  GetDebugTags(): string
  IsUnderStrictQuestControl(): Bool
  SecuritySystemLog(message: string): void
  SecuritySystemLog(evt: ReprimandUpdate): void
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
  ActionThumbnailUI(): ThumbnailUI
}

declare interface AgentRegistry extends IScriptable {

  /** @noSelf **/
  Construct(): AgentRegistry
  IsInitialized(): Bool
  IsReady(): Bool
  RegisterAgent(agentPS: DeviceLink, areas: SecurityAreaControllerPS[]): void
  UnregisterAgent(agentID: PersistentID): void
  IsAgent(id: PersistentID): Bool
  GetAgent(id: PersistentID, recordCopy: Agent): Bool
  GetAgentsIDs(): PersistentID[]
  GetAgents(): Agent[]
  GetAgents(filter: SecurityAreaControllerPS[]): Agent[]
  GetAgentsIDs(filter: SecurityAreaControllerPS[]): PersistentID[]
  AddArea(area: SecurityAreaControllerPS, agents: DeviceComponentPS[]): void
  RemoveArea(data: OnDisableAreaData[]): void
  GetTurrets(): Agent[]
  GetSensors(): Agent[]
  HowManyTimesEntityReprimandedByThisAgentAlready(target: EntityID, agentID: PersistentID): number
  HowManyTimesEntityReprimandedByThisAgentAlready(tresspasser: GameObject, agent: PersistentID): number
  HasEntityBeenSpottedTooManyTimes(agent: PersistentID, target: EntityID): Bool
  StoreReprimand(agentID: PersistentID, target: EntityID, reprimandID: number, targetAttitude: CName): void
  WipeReprimandData(target: EntityID): void
  IsReprimandOngoing(): Bool
  GetReprimandReceiver(agentID: PersistentID): EntityID
  IsReprimandOngoingAgainst(suspect: EntityID): Bool
  GetReprimandPerformer(target: EntityID, agent: Agent): Bool
  ReleaseFromReprimandAgainst(target: EntityID, agent?: PersistentID): void
  ReleaseAllReprimands(agents: Agent[]): void
  CleanUpOnNewAttitudeGroup(gameInstance: GameInstance, newGroup: CName): void
  SaveAgent_NoLock(agent: Agent): void
  GetAgentIndex(id: PersistentID, index: number): Bool
  GetAgentIndex_NoLock(id: PersistentID, index: number): Bool
  GetValidAgents(state: ESecuritySystemState, breachedAreas: SecurityAreaControllerPS[]): SecuritySystemOutputData[]
  GetAgentAreas(id: PersistentID): DeviceLink[]
  GetSupportedAgents(): Agent[]
  ClearSupport(): void
  ProcessOnPlayerSpotted(evt: PlayerSpotted, modifiedAgents: Agent[], hasAnySupport: Bool): Bool
  IsIndexOutOfBound(index: number): Bool
}

declare interface RWLock {

  /** @noSelf **/
  Acquire(self: RWLock): void
  /** @noSelf **/
  Release(self: RWLock): void
  /** @noSelf **/
  AcquireShared(self: RWLock): void
  /** @noSelf **/
  ReleaseShared(self: RWLock): void
}

declare interface Agent {

  /** @noSelf **/
  Construct(link: DeviceLink, areas: SecurityAreaControllerPS[]): Agent
  /** @noSelf **/
  AddArea(self: Agent, area: SecurityAreaControllerPS): void
  /** @noSelf **/
  RemoveArea(self: Agent, remainingAreas: SecurityAreaControllerPS[]): void
  /** @noSelf **/
  SetIncomingFilter(self: Agent, areas: SecurityAreaControllerPS[]): void
  /** @noSelf **/
  SetIncomingFilter(self: Agent, area: SecurityAreaControllerPS): void
  /** @noSelf **/
  IsValid(self: Agent): Bool
  /** @noSelf **/
  GetAreas(self: Agent, areas: DeviceLink[]): void
  /** @noSelf **/
  IsEligible(self: Agent, state: ESecuritySystemState, breachedAreas: SecurityAreaControllerPS[], inputsOutgoingFilter: EFilterType, breachOrigin: EBreachOrigin): Bool
  /** @noSelf **/
  IsEligibleToShareData(self: Agent, state: ESecuritySystemState, breachedAreas: SecurityAreaControllerPS[], inputsOutgoingFilter: EFilterType): Bool
  /** @noSelf **/
  AddSupport(self: Agent, id: PersistentID, shouldAdd: Bool): Bool
  /** @noSelf **/
  HasSupport(self: Agent): Bool
  /** @noSelf **/
  ClearSupport(self: Agent): void
  /** @noSelf **/
  IsPerformingReprimand(self: Agent): Bool
  /** @noSelf **/
  IsPerformingReprimandAgainst(self: Agent, target: EntityID): Bool
  /** @noSelf **/
  GetReprimandReceiver(self: Agent): EntityID
  /** @noSelf **/
  GetReprimandsCount(self: Agent, target: EntityID): number
  /** @noSelf **/
  ReleaseFromReprimand(self: Agent, target: EntityID): void
  /** @noSelf **/
  ForceRelaseReprimands(self: Agent): void
  /** @noSelf **/
  StoreReprimand(self: Agent, reprimandData: ReprimandData): void
  /** @noSelf **/
  WipeReprimand(self: Agent, target: EntityID): void
  /** @noSelf **/
  WipeReprimand(self: Agent, attGroup: CName, attSystem: AttitudeSystem): void
}

declare interface SecurityAreaControllerPS extends MasterControllerPS {

  Initialize(): void
  OnInstantiated(): Bool
  GameAttached(): void
  HasPlayerBeenSpottedAndTriggeredCombat(): Bool
  HasThisAreaReceivedCombatNotification(): Bool
  GetIncomingFilter(): EFilterType
  GetOutgoingFilter(): EFilterType
  RegisterTimeSystemListeners(entity: Entity): void
  UnregisterTimeSystemListeners(): void
  ResolveSecurityAreaType(): void
  ApplyTransition(listenerIndex: number): Bool
  ApplyTransition(transition: AreaTypeTransition): Bool
  PostponeAreaDisabling(turrets: SecurityTurretControllerPS[]): void
  OnSecurityTurretOffline(evt: SecurityTurretOffline): EntityNotificationType
  GetTurrets(turrets: SecurityTurretControllerPS[]): void
  IsDisableAllowed(turrets: SecurityTurretControllerPS[]): Bool
  UpdateMiniMapRepresentation(): void
  GetDeviceName(): string
  AreaEntered(evt: AreaEnteredEvent): void
  AreaExited(obj: GameObject): void
  ProcessOnEnterRequest(objectToProcess: GameObject): void
  ActionSecurityAreaCrossingPerimeter(whoEntered: GameObject, entered: Bool): SecurityAreaCrossingPerimeter
  NotifySystemAboutCrossingPerimeter(tresspasser: GameObject, entering: Bool): void
  OnQuestAddTransition(evt: QuestAddTransition): EntityNotificationType
  OnQuestRemoveTransition(evt: QuestRemoveTransition): EntityNotificationType
  OnQuestExecuteTransition(evt: QuestExecuteTransition): EntityNotificationType
  OnQuestIllegalActionAreaNotification(evt: QuestIllegalActionAreaNotification): EntityNotificationType
  OnQuestCombatActionAreaNotification(evt: QuestCombatActionAreaNotification): EntityNotificationType
  OnQuestModifyFilter(evt: QuestModifyFilters): EntityNotificationType
  FillAgentsList(agentsList: PSOwnerData[]): void
  NotifySecuritySystem(tresspassingEvent: SecurityAreaCrossingPerimeter): void
  GetSecurityAccessLevel(): ESecurityAccessLevel
  GetSecurityAreaType(): ESecurityAreaType
  IsConnectedToSystem(): Bool
  GetUsersInPerimeter(): AreaEntry[]
  IsPlayerInside(): Bool
  GetSecurityAreaTypeAsUint32(): number
  SetSecurityAreaType(newType: ESecurityAreaType): void
  ProcessOnExitRequest(entryToProcess: AreaEntry): void
  IsActive(): Bool
  IsUserInside(userToBeChecked: EntityID): Bool
  IsAreaCompromised(): Bool
  PushUniqueEntry(entryToPush: AreaEntry): void
  FindEntryIndex(userToFind: EntityID): number
  ExtractSquadProxies(): CommunityProxyPS[]
  GetSecurityAreaData(): SecurityAreaData
  GetSecurityAreaAgents(): EntityID[]
  GetNPCs(): EntityID[]
  GetSecuritySystem(): SecuritySystemControllerPS
  GetDevices(): EntityID[]
  GetLastOutput(): SecuritySystemOutput
  RestoreLastOutput(): SecuritySystemOutput
  OnGameEntitySpawnerEvent(evt: gameEntitySpawnerEvent): EntityNotificationType
  OnSecuritySystemOutput(breachEvent: SecuritySystemOutput): EntityNotificationType
  StoreLastOutputPersistentData(breachEvent: SecuritySystemOutput): void
  OnSecuritySystemForceAttitudeChange(evt: SecuritySystemForceAttitudeChange): EntityNotificationType
  OnTargetAssessmentRequest(evt: TargetAssessmentRequest): EntityNotificationType
  OnFullSystemRestart(evt: FullSystemRestart): EntityNotificationType
  /** @noSelf **/
  SecurityAreaTypeEnumToName(type: ESecurityAreaType): CName
  GetDebugTags(): string
  OnMaraudersMapDeviceDebug(sink: MaraudersMapDevicesSink): void
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface MappinSystem extends IMappinSystem {

  ChangeMappinVariant(id: NewMappinID, newVariant: gamedataMappinVariant): void
  SetMappinActive(id: NewMappinID, active: Bool): void
  SetMappinPosition(id: NewMappinID, position: Vector4): void
  SetMappinScriptData(id: NewMappinID, scriptData: MappinScriptData): void
  SetMappinDebugCaption(id: NewMappinID, caption: string): void
  RegisterMappin(data: MappinData, position: Vector4): NewMappinID
  RegisterMappinWithObject(data: MappinData, object: GameObject, slotName?: CName, offset?: Vector3): NewMappinID
  RegisterGrenadeMappin(data: MappinData, grenadeObject: GameObject): NewMappinID
  RegisterFastTravelMappin(data: MappinData, fastTravelData: FastTravelPointData): NewMappinID
  RegisterRemotePlayerMappin(data: MappinData, playerObject: GameObject): NewMappinID
  RegisterVehicleMappin(data: MappinData, object: GameObject, slotName?: CName, offset?: Vector3): NewMappinID
  UnregisterMappin(id: NewMappinID): void
  GetMappins(targetType: gamemappinsMappinTargetType, mappins: MappinEntry[]): void
  OnAreaEntered(evt: AreaEnteredEvent): void
  OnAreaExited(obj: GameObject, triggerId: EntityID): void
  OnAreaTypeChanged(entityID: EntityID, areaType: CName): void
  UpdateCurrentLocationName(locationName: string, isNewLocation: Bool): void
  GetPointOfInterestMappinSavedState(hash: number, mappinPhase: number, mappinVariant: number, active: Bool): Bool
  GetQuestMappinPositionsByObjective(objectiveHash: number, positions: Vector3[]): Bool
  GetQuestMappinPosition(mappinHash: number, position: Vector3): Bool
  SetMappinTrackingAlternative(mappinID: NewMappinID, targetMappinID: NewMappinID): void
  DebugDiscoverAllPoiMappins(): void
}

declare interface IMappinData {

}

declare interface TriggerEvent extends Event {

}

declare interface AreaTypeTransition {

}

declare interface BasicDistractionDeviceControllerPS extends ScriptableDeviceComponentPS {

  OnInstantiated(): Bool
  Initialize(): void
  GameAttached(): void
  GetAnimationType(): EAnimationType
  GetForceAnimationSystem(): Bool
  GetEffectOnStartNames(): CName[]
  ActionQuickHackDistraction(): QuickHackDistraction
  ActionSpiderbotDistractDevice(): SpiderbotDistractDevice
  ActionSpiderbotDistractDevicePerformed(): SpiderbotDistractDevicePerformed
  CanCreateAnySpiderbotActions(): Bool
  GetSpiderbotActions(actions: DeviceAction[], context: GetActionsContext): void
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  OnSpiderbotDistractExplosiveDevice(evt: SpiderbotDistractDevice): EntityNotificationType
  OnSpiderbotDistractExplosiveDevicePerformed(evt: SpiderbotDistractDevicePerformed): EntityNotificationType
}

declare interface QuickHackDistraction extends ActionBool {

  SetProperties(): void
  SetProperties(interaction: CName): void
  GetInteractionIcon(): ChoiceCaptionIconPart_Record
}

declare interface FxResourceMapperComponent extends ScriptableComponent {

  CopyDataToFxMapClass(areaEffectsData: SAreaEffectData[], DEBUG_entityCopy: Bool, DEBUG_fxCopy: Bool): void
  CopyEffectToFxMapClass(areaEffectsInFocusMode: SAreaEffectTargetData[]): void
  GetInvestigationSlotOffset(): number
  GetAreaEffectData(): AreaEffectData[]
  GetAreaEffectDataByIndex(index: number): AreaEffectData
  GetAreaEffectDataSize(): number
  GetAreaEffectInFocusMode(): AreaEffectTargetData[]
  GetAreaEffectInFocusModeByIndex(index: number): AreaEffectTargetData
  GetAreaEffectInFocusSize(): number
  HasAnyDistractions(): Bool
  CreateEffectStructDataFromAttack(attackTDBID: TweakDBID, index: number, gameEffectNameOverride?: CName, dontHighlightOnLookat?: Bool): void
  CreateData(attackTDBID: TweakDBID, index: number, gameEffectNameOverride?: CName, dontHighlightOnLookat?: Bool): void
  CalculateRangeSphere(desiredRange: number, effectName: CName, effectSize: number): void
  CreateAreaEffectTargetData(mainEffect: AreaEffectData): void
  GetAreaEffectDataIndexByName(effectName: CName): number
  GetAreaEffectDataIndexByAction(action: BaseScriptableAction): number
  GetAreaEffectDataNameByIndex(effectIndex: number): CName
  GetDistractionRange(type: DeviceStimType): number
  GetSmallestDistractionRange(type: DeviceStimType): number
}

declare interface AreaEffectData extends IScriptable {

  EffectInstanceClear(): void
  SetEffectInstance(effect: EffectInstance): void
  GetActionRecord(): ObjectAction_Record
  GetActionNameFromRecord(record: ObjectAction_Record): CName
  GetActionNameFromRecord(): CName
  IsMatching(_action: BaseScriptableAction): Bool
}

declare interface SAreaEffectData {

}

declare interface AreaEffectTargetData extends IScriptable {

}

declare interface SAreaEffectTargetData {

}

declare interface SpiderbotDistractDevice extends ActionBool {

  SetProperties(): void
  GetTweakDBChoiceRecord(): string
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
}

declare interface SpiderbotDistractDevicePerformed extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
}

declare interface RemoteBreach extends ActionBool {

  SetProperties(): void
}

declare interface PingDevice extends ActionBool {

  SetProperties(): void
  ShouldForward(): Bool
  SetShouldForward(shouldForward: Bool): void
  CompleteAction(gameInstance: GameInstance): void
}

declare interface AccessPointControllerPS extends MasterControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  GameAttached(): void
  IsVirtual(): Bool
  HasNetworkBackdoor(): Bool
  GetMinigameDefinition(): TweakDBID
  GetBackdoorAccessPoint(): AccessPointControllerPS
  GetDevicesThatPlayerCanBreach(): ScriptableDeviceComponentPS[]
  IsAccessPointOf(slaveToCheck: PersistentID): Bool
  IsConnectedToBackdoorDevice(): Bool
  ShouldRevealNetworkGrid(): Bool
  IsMainframe(): Bool
  GetClearance(): Clearance
  SetIsBreached(isBreached: Bool): void
  GetNetworkName(): string
  GetNetworkSizeCount(): number
  IsNetworkBreached(): Bool
  IsBreached(): Bool
  BreachConnectedDevices(): void
  ActionSpiderbotEnableAccessPoint(): SpiderbotEnableAccessPoint
  ActionRevealEnemiesProgram(): RevealEnemiesProgram
  OnRevealEnemiesProgram(evt: RevealEnemiesProgram): EntityNotificationType
  RefreshSlaves(): void
  FilterRedundantPrograms(programs: TweakDBID[]): void
  ProcessLoot(baseMoney: number, baseUncommonMaterials: number, baseRareMaterials: number, baseEpicMaterials: number, baseLegendaryMaterials: number, baseShardDropChance: number, TS: TransactionSystem): void
  GenerateMaterialDrops(baseUncommonMaterials: number, baseRareMaterials: number, baseEpicMaterials: number, baseLegendaryMaterials: number, TS: TransactionSystem): void
  AddReward(TS: TransactionSystem, itemQueryTDBID: TweakDBID, amount?: number): void
  CleanRewardNotification(): void
  ShowRewardNotification(): void
  ProcessMinigameNetworkActions(device: DeviceComponentPS): void
  ExtractActions(): DeviceAction[]
  GetQuestActions(outActions: DeviceAction[], context: GetActionsContext): void
  ActionResetNetworkBreachState(): ResetNetworkBreachState
  OnResetNetworkBreachState(evt: ResetNetworkBreachState): EntityNotificationType
  CanCreateAnyQuickHackActions(): Bool
  CanCreateAnySpiderbotActions(): Bool
  FinalizeNetrunnerDive(state: HackingMinigameState): void
  OnNPCBreachEvent(evt: NPCBreachEvent): EntityNotificationType
  ResolveDive(isRemote: Bool): void
  SendMinigameFailedToAllNPCs(): void
  OnSetExposeQuickHacks(evt: SetExposeQuickHacks): EntityNotificationType
  OnValidate(evt: Validate): EntityNotificationType
  OnQuestRemoveQuickHacks(evt: QuestRemoveQuickHacks): EntityNotificationType
  OnQuestBreachAccessPoint(evt: QuestBreachAccessPoint): EntityNotificationType
  OnSpiderbotEnableAccessPoint(evt: SpiderbotEnableAccessPoint): EntityNotificationType
  DebugBreachConnectedDevices(): void
  OnBreachAccessPointEvent(evt: BreachAccessPointEvent): EntityNotificationType
  OnRefreshSlavesEvent(evt: RefreshSlavesEvent): EntityNotificationType
  GetCommunityProxies(): CommunityProxyPS[]
  GetNetworkArea(): NetworkAreaControllerPS
  IsSpiderbotHackingConditionFullfilled(): Bool
  UploadProgram(programID: number): void
  RevealDevicesGrid(shouldDraw: Bool, ownerEntityPosition?: Vector4, fxDefault?: FxResource, isPing?: Bool, lifetime?: number, revealSlave?: Bool, revealMaster?: Bool, ignoreRevealed?: Bool): void
  GetBlackboardDef(): BackDoorDeviceBlackboardDef
  CheckMasterRunnerAchievement(minigameProgramsCompleted: number): void
  PingSquad(): void
  OnFillTakeOverChainBBoardEvent(evt: FillTakeOverChainBBoardEvent): EntityNotificationType
  CheckConnectedClassTypes(): ConnectedClassTypes
}

declare interface HackingMinigameDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface UpdateShardFailedDropsRequest extends ScriptableSystemRequest {

}

declare interface IconsNameResolver extends IScriptable {

  /** @noSelf **/
  GetIconsNameResolver(): IconsNameResolver
  TranslateItemToIconName(tweak: TweakDBID, useMaleGender?: Bool): CName
  TranslateItemToIconTweak(tweak: TweakDBID, useMaleGender?: Bool): TweakDBID
  TranslateItemToIconRef(tweak: TweakDBID, useMaleGender?: Bool): inkIconReference
  ResolveIconCensorship(tweak: TweakDBID): TweakDBID
  IsInDebugMode(): Bool
}

declare interface HackingRewardNotificationEvent extends Event {

}

declare interface SetDetectionMultiplier extends Event {

}

declare interface BasicDistractionDevice extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnDetach(): Bool
  GetController(): BasicDistractionDeviceController
  GetDevicePS(): BasicDistractionDeviceControllerPS
  TurnOnDevice(): void
  TurnOffDevice(): void
  DeterminGameplayRole(): EGameplayRole
  OnSpiderbotDistractDevicePerformed(evt: SpiderbotDistractDevicePerformed): Bool
  OnQuickHackDistraction(evt: QuickHackDistraction): Bool
  OnQuestStartGlitch(evt: QuestStartGlitch): Bool
  OnQuestStopGlitch(evt: QuestStopGlitch): Bool
  StartDistraction(loopAnimation?: Bool): void
  StopDistraction(): void
  PlayDistractAnimation(loop?: Bool): void
  StopDistractAnimation(): void
  PlayAnimgraphTransformAnimation(): void
  StopAnimgraphTransformAnimation(): void
  PlayTransformAnimation(animationName: CName, loop?: Bool): void
  StopTransformDistractAnimation(animationName: CName): void
  EffectsOnStartPlay(): void
  EffectsOnStartStop(shouldStop?: Bool): void
  MeshSwapOnDistraction(start: Bool): void
}

declare interface BasicDistractionDeviceController extends ScriptableDC {

  GetPS(): BasicDistractionDeviceControllerPS
}

declare interface AnimFeature_DistractionState extends AnimFeature {

}

declare interface ToggleVisibilityInAnimSystemRequest extends ScriptableSystemRequest {

}

declare interface AnimationSystemForcedVisibilityManager extends ScriptableSystem {

  ClearEntity(id: EntityID): void
  ToggleForcedVisibilityInAnimSystem(entityID: EntityID, sourceName: CName, isVisible: Bool, transitionTime?: number, forcedVisibleOnlyInFrustum?: Bool): void
  SendDelayedRequestForVisilityData(entityID: EntityID, isVisible: Bool, transitionTime: number, data: ForcedVisibilityInAnimSystemData): void
  CancelDelayedRequestForVisilityData(data: ForcedVisibilityInAnimSystemData): void
  ResovleVisibilityInAnimSystem(entityData: AnimationSystemForcedVisibilityEntityData): void
  GetEntityData(id: EntityID): AnimationSystemForcedVisibilityEntityData
  IsEntityRegistered(id: EntityID): Bool
  OnToggleVisibilityInAnimSystemRequest(request: ToggleVisibilityInAnimSystemRequest): void
  OnClearVisibilityInAnimSystemRequest(request: ClearVisibilityInAnimSystemRequest): void
  OnHandleDelayedVisibilityInAnimSystemRequest(request: DelayedVisibilityInAnimSystemRequest): void
  HasVisibilityForced(id: EntityID): Bool
}

declare interface AnimationSystemForcedVisibilityEntityData extends IScriptable {

  Initialize(entityID: EntityID, owner: AnimationSystemForcedVisibilityManager): void
  ClearAllRequests(): void
  GetEntityID(): EntityID
  HasVisibilityForcedInAnimSystem(): Bool
  HasActiveRequestsForForcedVisibilityInAnimSystem(): Bool
  SetHasVisibilityForcedInAnimSystem(isVisible: Bool): void
  HasVisibilityForcedOnlyInFrustumInAnimSystem(): Bool
  HasActiveRequestsForForcedVisibilityOnlyInFrustumInAnimSystem(): Bool
  SetHasVisibilityForcedOnlyInFrustumInAnimSystem(isVisible: Bool): void
  AddForcedVisiblityInAnimSystemRequest(data: ForcedVisibilityInAnimSystemData): void
  RemoveForcedVisiblityInAnimSystemRequest(data: ForcedVisibilityInAnimSystemData): void
  RemoveForcedVisiblityInAnimSystemRequest(sourceName: CName): void
  HasForcedVisiblityInAnimSystemRequest(data: ForcedVisibilityInAnimSystemData): Bool
  HasForcedVisiblityInAnimSystemRequest(sourceName: CName): Bool
  GetForcedVisiblityInAnimSystemRequest(sourceName: CName): ForcedVisibilityInAnimSystemData
  HasDelayedForcedVisiblityInAnimSystemRequest(data: ForcedVisibilityInAnimSystemData): Bool
  HasDelayedForcedVisiblityInAnimSystemRequest(sourceName: CName): Bool
  GetDelayedForcedVisiblityInAnimSystemRequest(sourceName: CName): ForcedVisibilityInAnimSystemData
  RemoveDelayedForcedVisiblityInAnimSystemRequest(data: ForcedVisibilityInAnimSystemData): void
  AddDelayedForcedVisiblityInAnimSystemRequest(data: ForcedVisibilityInAnimSystemData): void
}

declare interface ForcedVisibilityInAnimSystemData extends IScriptable {

}

declare interface AnimationSystem extends IScriptable {

  SetForcedVisible(entityId: EntityID, value: Bool): void
  SetForcedVisibleOnlyInFrustum(entityId: EntityID, value: Bool): void
  EnterCombatMode(entityId: EntityID): void
  ExitCombatMode(entityId: EntityID): void
}

declare interface DelayedVisibilityInAnimSystemRequest extends ScriptableSystemRequest {

}

declare interface ClearVisibilityInAnimSystemRequest extends ScriptableSystemRequest {

}

declare interface DeviceOperationsContainer extends IScriptable {

  Initialize(owner: GameObject): void
  UnInitialize(owner: GameObject): void
  ToggleOperationByIndex(enable: Bool, index: number): void
  ToggleOperationByName(enable: Bool, operationName: CName): void
  IsOperationEnabled(index: number): Bool
  HasOperation(className: CName): Bool
  IsOperationEnabled(operationName: CName): Bool
  Execute(operationName: CName, owner: GameObject): void
  Restore(operationName: CName, owner: GameObject): void
  ToggleOperations(operations: SToggleDeviceOperationData[]): void
  EvaluateActivatorTriggers(owner: GameObject): void
  EvaluateFactTriggers(owner: GameObject, factName: CName): void
  EvaluateFocusModeTriggers(owner: GameObject, operationType: ETriggerOperationType): void
  EvaluateSenseTriggers(owner: GameObject, activator: GameObject, operationType: ETriggerOperationType): void
  EvaluateHitTriggers(owner: GameObject, activator: GameObject, attackData: AttackData): void
  EvaluateInteractionAreaTriggers(areaTag: CName, owner: GameObject, activator: GameObject, operationType: gameinteractionsEInteractionEventType): void
  EvaluateTriggerVolumeTriggers(componentName: CName, owner: GameObject, activator: GameObject, operationType: ETriggerOperationType): void
  EvaluateDeviceActionTriggers(actionClassName: CName, owner: GameObject): void
  RestoreDeviceActionOperations(actionClassName: CName, owner: GameObject): void
  EvaluateCustomActionTriggers(actionID: CName, owner: GameObject): void
  RestoreCustomActionOperations(actionID: CName, owner: GameObject): void
  EvaluateDoorStateTriggers(state: EDoorStatus, owner: GameObject): void
  EvaluateBaseStateTriggers(state: EDeviceStatus, owner: GameObject): void
}

declare interface DeviceOperationBase extends IScriptable {

  Execute(owner: GameObject): void
  SetIsEnabled(enabled: Bool): void
  IsEnabled(): Bool
  Restore(owner: GameObject): void
  ResolveDisable(disable: Bool, owner: GameObject): void
}

declare interface QuestForceDisabled extends ActionBool {

  SetProperties(): void
}

declare interface SToggleDeviceOperationData {

}

declare interface DeviceOperationsTrigger extends IScriptable {

  Initialize(owner: GameObject): void
  UnInitialize(owner: GameObject): void
  GetOperationsContainer(owner: GameObject): DeviceOperationsContainer
  ExecuteOperationByName(operationName: CName, owner: GameObject, container: DeviceOperationsContainer): void
  RestoreOperationByName(operationName: CName, owner: GameObject, container: DeviceOperationsContainer): void
  ResolveOperationsOnTrigger(trigger: DeviceOperationTriggerData, owner: GameObject, container: DeviceOperationsContainer): void
  RestoreOperationsOnTrigger(trigger: DeviceOperationTriggerData, owner: GameObject, container: DeviceOperationsContainer): void
  DelayTriggerExecution(namedOperation: OperationExecutionData, owner: GameObject): void
  SetDelayIdOnNamedOperation(delayID: DelayID, namedOperation: OperationExecutionData): void
  ClearDelayIdOnNamedOperation(namedOperation: OperationExecutionData): void
  IsPlayerActivator(activator: GameObject): Bool
}

declare interface DeviceOperationTriggerData extends IScriptable {

}

declare interface OperationExecutionData extends IScriptable {

}

declare interface DelayedDeviceOperationTriggerEvent extends Event {

}

declare interface Muppet extends gamePuppetBase {

  GetAttitude(): AttitudeAgent
  IsMuppetIncapacitated(): Bool
  GetItemQuantity(itemId: ItemID): number
  GetAttitudeAgent(): AttitudeAgent
  GetHitRepresantationSlotComponent(): SlotComponent
  GetSlotComponent(): SlotComponent
  IsPlayer(): Bool
  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  IsIncapacitated(): Bool
  GetDamageThresholdParams(): void
  OnHitVFX(hitEvent: gameHitEvent): void
  OnHitSounds(hitEvent: gameHitEvent): void
}

declare interface SlotComponent extends IPlacedComponent {

  GetSlotTransform(slotName: CName, worldTransformOut: WorldTransform): Bool
}

declare interface EngineTime {

  /** @noSelf **/
  IsValid(self: EngineTime): Bool
  /** @noSelf **/
  FromFloat(value: number): EngineTime
  /** @noSelf **/
  ToFloat(self: EngineTime): number
  /** @noSelf **/
  ToString(self: EngineTime): string
}

declare interface ChatterHelper extends IScriptable {

  /** @noSelf **/
  PlayVoiceOver(instigator: GameObject, voName: CName): void
  /** @noSelf **/
  PlayCpoServerSyncVoiceOver(instigator: GameObject, voName: CName): void
  /** @noSelf **/
  PlayCpoClientVoiceOver(instigator: GameObject, voName: CName): void
  /** @noSelf **/
  TryPlayReloadChatter(instigator: GameObject): void
  /** @noSelf **/
  TryPlayEnemyKilledChatter(instigator: GameObject): void
  /** @noSelf **/
  TryPlayEnemyDamagedChatter(instigator: GameObject): void
  /** @noSelf **/
  TryPlayScanStartedChatter(instigator: GameObject): void
  /** @noSelf **/
  TryPlayScanCompleteChatter(instigator: GameObject): void
  /** @noSelf **/
  TryPlayEnterCombatChatter(instigator: GameObject): void
  /** @noSelf **/
  TryPlayLeaveCombatChatter(instigator: GameObject): void
}

declare interface SoundPlayEvent extends Event {

}

declare interface SoundSwitchEvent extends Event {

}

declare interface SoundParameterEvent extends Event {

}

declare interface SoundPlayVo extends Event {

}

declare interface IMountingFacility extends IGameSystem {

  GetMountingInfoSingleWithObjects(child?: GameObject, parent?: GameObject, slotId?: MountingSlotId): MountingInfo
  GetMountingInfoSingleWithIds(child?: EntityID, parent?: EntityID, slotId?: MountingSlotId): MountingInfo
  GetMountingInfoMultipleWithObjects(child?: GameObject, parent?: GameObject, slotId?: MountingSlotId): MountingInfo[]
  GetMountingInfoMultipleWithIds(child?: EntityID, parent?: EntityID, slotId?: MountingSlotId): MountingInfo[]
  Mount(mountEvent: MountingRequest): void
  Unmount(unmountEvent: UnmountingRequest): void
  /** @noSelf **/
  InfoHasParent(info: MountingInfo): Bool
  /** @noSelf **/
  InfoHasChild(info: MountingInfo): Bool
  /** @noSelf **/
  InfoIsComplete(info: MountingInfo): Bool
  /** @noSelf **/
  SlotIsValid(slotId: MountingSlotId): Bool
  /** @noSelf **/
  RelationshipGetOtherObject(relationship: MountingRelationship): GameObject
}

declare interface MountingInfo {

}

declare interface WeaponObject extends ItemObject {

  GetAttacks(): IAttack[]
  GetCurrentAttack(): IAttack
  GetCurrentTriggerMode(): TriggerMode_Record
  GetFxPackage(): FxPackage
  GetFxPackageQuickMelee(): FxPackage
  GetSharedData(): IBlackboard
  GetTotalAmmoCount(): number
  GetTriggerModes(): TriggerMode_Record[]
  HasAmmoChangeRequest(): Bool
  HasPendingReload(): Bool
  SetAttack(attackID: TweakDBID): Bool
  StartContinuousAttack(startPos: Vector4, startDir: Vector4): Bool
  StopContinuousAttack(): void
  IsContinuousAttackStarted(): Bool
  HasScope(): Bool
  GetScopeOffset(): Vector4
  GetIronSightOffset(): Vector4
  GetMuzzleOffset(): Vector4
  IsSilenced(): Bool
  UpdateTargetingSight(targetID: EntityID, targetPosition: Vector4): Bool
  IsTargetLocked(): Bool
  ShootStraight(shootStraight: Bool): void
  SetTriggerDown(triggerDown: Bool): void
  SetupBurstFireSound(numShotsInBurst: number): void
  StartReload(durationOverride?: number): number
  StopReload(reloadStatus?: gameweaponReloadStatus): void
  AI_SetAttackData(attack: IAttack): void
  AI_PlayChargeStartedSound(): void
  AI_PlayMeleeAttackSound(isQuickMelee: Bool): void
  AI_ShootAt(targetPositionProvider: IPositionProvider, targetObject: GameObject, instigator: GameObject, ammoCost: number, projectileParams: gameprojectileWeaponParams, projectilesPerShot: number, charge: number, maxSpread?: number): void
  AI_ShootForwards(instigator: GameObject, ammoCost: number, projectileParams: gameprojectileWeaponParams, projectilesPerShot: number, charge: number, overridePos?: Vector4, overrideForward?: Vector4): void
  AI_ShootSelfOffScreen(targetObject: gamePuppet, ammoCost: number, projectileParams: gameprojectileWeaponParams, projectilesPerShot: number, charge: number): void
  OnGameAttached(): Bool
  OnPlayerWeaponSetupEvent(evt: PlayerWeaponSetupEvent): Bool
  OnDetach(): Bool
  GetAIBlackboard(): IBlackboard
  /** @noSelf **/
  GetBaseMaxChargeThreshold(): number
  /** @noSelf **/
  GetFullyChargedThreshold(): number
  /** @noSelf **/
  GetOverchargeThreshold(): number
  GetCurrentMeleeTrailEffectName(): CName
  SetMaxChargeThreshold(maxCharge: number): void
  GetMaxChargeTreshold(): number
  /** @noSelf **/
  ChangeTriggerMode(self: WeaponObject, triggerMode: gamedataTriggerMode): void
  /** @noSelf **/
  GetMagazineAmmoCount(self: WeaponObject): number
  /** @noSelf **/
  GetMagazineCapacity(self: WeaponObject): number
  /** @noSelf **/
  GetMagazinePercentage(self: WeaponObject): number
  /** @noSelf **/
  HasAvailableAmmo(self: WeaponObject): Bool
  /** @noSelf **/
  HasAvailableAmmoInInventory(self: WeaponObject): Bool
  /** @noSelf **/
  IsMagazineFull(self: WeaponObject): Bool
  /** @noSelf **/
  IsMagazineEmpty(self: WeaponObject): Bool
  /** @noSelf **/
  CanReload(self: WeaponObject): Bool
  /** @noSelf **/
  CanCriticallyHit(self: WeaponObject): Bool
  /** @noSelf **/
  CanIgnoreArmor(self: WeaponObject): Bool
  /** @noSelf **/
  GetWeaponRecord(self: WeaponObject): WeaponItem_Record
  SendScopeData(): void
  SendWeaponStatsAnimFeature(): void
  OnUpdateWeaponStatsEvent(evt: UpdateWeaponStatsEvent): void
  /** @noSelf **/
  GetAmmoType(weapon: WeaponObject): ItemID
  /** @noSelf **/
  GetWeaponChargeNormalized(weapon: WeaponObject): number
  /** @noSelf **/
  GetAmmoType(weaponID: ItemID): ItemID
  /** @noSelf **/
  GetWeaponType(weaponID: ItemID): gamedataItemType
  /** @noSelf **/
  IsRanged(weaponID: ItemID): Bool
  /** @noSelf **/
  IsRanged(wpnRec: Item_Record): Bool
  /** @noSelf **/
  IsMelee(weaponID: ItemID): Bool
  /** @noSelf **/
  IsMelee(wpnRec: WeaponItem_Record): Bool
  /** @noSelf **/
  IsFists(weaponID: ItemID): Bool
  /** @noSelf **/
  IsOfType(weaponID: ItemID, type: gamedataItemType): Bool
  /** @noSelf **/
  GetMeleeWeaponTag(): CName
  /** @noSelf **/
  GetRangedWeaponTag(): CName
  /** @noSelf **/
  GetOneHandedRangedWeaponTag(): CName
  /** @noSelf **/
  IsCyberwareWeapon(weaponID: ItemID): Bool
  SetWeaponOwner(): void
  OnSetWeaponOwner(evt: SetWeaponOwnerEvent): Bool
  /** @noSelf **/
  SendMuzzleOffset(weapon: WeaponObject, owner: GameObject): void
  CheckLocked(): void
  OnOutlineRequestEvent(evt: OutlineRequestEvent): Bool
  OnForceFadeOutlineEventForWeapon(evt: ForceFadeOutlineEventForWeapon): Bool
  HandleVisualEffectsSetup(): void
  GetCurrentDamageType(): gamedataDamageType
  SetCurrentMeleeTrailEffect(damageType: gamedataDamageType): void
  OnUpdateMeleeTrailEffect(evt: UpdateMeleeTrailEffectEvent): Bool
  StartIdleMeleeEffect(damageType: gamedataDamageType): void
  StartCurrentMeleeTrailEffect(attackSide?: string): void
  StopCurrentMeleeTrailEffect(attackSide?: string): void
  /** @noSelf **/
  TriggerWeaponEffects(weaponOwner: GameObject, weapon: WeaponObject, fxAction: gamedataFxAction, fxBlackboard?: worldEffectBlackboard): void
  /** @noSelf **/
  ActivateFXActionFromSet(weapon: WeaponObject, weaponFxSet: WeaponVFXSet_Record, fxAction: gamedataFxAction, fxBlackboard?: worldEffectBlackboard): void
  /** @noSelf **/
  StopWeaponEffects(weaponOwner: GameObject, weapon: WeaponObject, fxAction: gamedataFxAction, fxBlackboard?: worldEffectBlackboard): void
  /** @noSelf **/
  KillFXActionFromSet(weapon: WeaponObject, weaponFxSet: WeaponVFXSet_Record, fxAction: gamedataFxAction, fxBlackboard?: worldEffectBlackboard): void
  /** @noSelf **/
  EnterReload(weaponOwner: GameObject, weapon: WeaponObject): void
  /** @noSelf **/
  ExitReload(weaponOwner: GameObject, weapon: WeaponObject): void
  /** @noSelf **/
  EnterCharge(weaponOwner: GameObject, weapon: WeaponObject): void
  /** @noSelf **/
  ExitCharge(weaponOwner: GameObject, weapon: WeaponObject): void
  /** @noSelf **/
  EnterDischarge(weaponOwner: GameObject, weapon: WeaponObject): void
  /** @noSelf **/
  ExitDischarge(weaponOwner: GameObject, weapon: WeaponObject): void
  /** @noSelf **/
  EnterOverheat(weaponOwner: GameObject, weapon: WeaponObject): void
  /** @noSelf **/
  ExitOverheat(weaponOwner: GameObject, weapon: WeaponObject): void
  /** @noSelf **/
  EnterNoAmmo(weaponOwner: GameObject, weapon: WeaponObject): void
  /** @noSelf **/
  ExitNoAmmo(weaponOwner: GameObject, weapon: WeaponObject): void
  /** @noSelf **/
  Shoot(weaponOwner: GameObject, weapon: WeaponObject): void
  /** @noSelf **/
  SilencedShoot(weaponOwner: GameObject, weapon: WeaponObject): void
  /** @noSelf **/
  MeleeBlock(weaponOwner: GameObject, weapon: WeaponObject): void
  /** @noSelf **/
  StopShoot(weaponOwner: GameObject, weapon: WeaponObject): void
  /** @noSelf **/
  EnterLowAmmo(weaponOwner: GameObject, weapon: WeaponObject): void
  /** @noSelf **/
  ExitLowAmmo(weaponOwner: GameObject, weapon: WeaponObject): void
  /** @noSelf **/
  SendAmmoUpdateEvent(weaponOwner: GameObject, weapon: WeaponObject): void
  OnAttachSetStatPools(): void
  RegisterStatPoolListeners(): void
  RegisterStatListeners(): void
  OnUpdateOverheat(evt: UpdateOverheatEvent): Bool
  StartOverheatEffect(): void
  OnSetActiveWeapon(evt: SetActiveWeaponEvent): Bool
  OnRemoveActiveWeapon(evt: RemoveActiveWeaponEvent): Bool
  OnUpdateWeaponCharge(evt: UpdateWeaponChargeEvent): Bool
  OnStartOverheatEffectEvent(evt: StartOverheatEffectEvent): Bool
  OnUpdateDamageChangeEvent(evt: UpdateDamageChangeEvent): Bool
  OnMeleeHitEvent(evt: MeleeHitEvent): Bool
  OnAmmoStateChangeEvent(evt: AmmoStateChangeEvent): Bool
}

declare interface IFxPackage extends IScriptable {

}

declare interface WeaponChargeStatListener extends CustomValueStatPoolsListener {

  OnStatPoolValueChanged(oldValue: number, newValue: number, percToPoints: number): void
}

declare interface UpdateWeaponChargeEvent extends Event {

}

declare interface IStatsListener extends IScriptable {

}

declare interface ScriptStatsListener extends IStatsListener {

  OnStatChanged(ownerID: StatsObjectID, statType: gamedataStatType, diff: number, total: number): void
  OnGodModeChanged(ownerID: EntityID, newType: gameGodModeType): void
  SetStatType(statType: gamedataStatType): void
}

declare interface DamageStatListener extends ScriptStatsListener {

  OnStatChanged(ownerID: StatsObjectID, statType: gamedataStatType, diff: number, total: number): void
}

declare interface UpdateDamageChangeEvent extends Event {

}

declare interface AnimFeature_WeaponScopeData extends AnimFeature {

}

declare interface TDB extends TweakDBInterface {

  /** @noSelf **/
  GetInt(path: TweakDBID): number
  /** @noSelf **/
  GetIntArray(path: TweakDBID): number[]
  /** @noSelf **/
  GetFloat(path: TweakDBID): number
  /** @noSelf **/
  GetFloatArray(path: TweakDBID): number[]
  /** @noSelf **/
  GetString(path: TweakDBID): string
  /** @noSelf **/
  GetStringArray(path: TweakDBID): string[]
  /** @noSelf **/
  GetBool(path: TweakDBID): Bool
  /** @noSelf **/
  GetBoolArray(path: TweakDBID): Bool[]
  /** @noSelf **/
  GetCName(path: TweakDBID): CName
  /** @noSelf **/
  GetCNameArray(path: TweakDBID): CName[]
  /** @noSelf **/
  GetLocKey(path: TweakDBID): CName
  /** @noSelf **/
  GetLocKeyArray(path: TweakDBID): CName[]
  /** @noSelf **/
  GetColor(path: TweakDBID): Color
  /** @noSelf **/
  GetColorArray(path: TweakDBID): Color[]
  /** @noSelf **/
  GetVector2(path: TweakDBID): Vector2
  /** @noSelf **/
  GetVector2Array(path: TweakDBID): Vector2[]
  /** @noSelf **/
  GetVector3(path: TweakDBID): Vector3
  /** @noSelf **/
  GetVector3Array(path: TweakDBID): Vector3[]
  /** @noSelf **/
  GetEulerAngles(path: TweakDBID): EulerAngles
  /** @noSelf **/
  GetEulerAnglesArray(path: TweakDBID): EulerAngles[]
  /** @noSelf **/
  GetQuaternion(path: TweakDBID): Quaternion
  /** @noSelf **/
  GetQuaternionArray(path: TweakDBID): Quaternion[]
  /** @noSelf **/
  GetResRef(path: TweakDBID): ResRef
  /** @noSelf **/
  GetResRefArray(path: TweakDBID): ResRef[]
}

declare interface AnimFeature_WeaponStats extends AnimFeature {

}

declare interface AnimFeature_OwnerType extends AnimFeature {

}

declare interface WeaponSetMaxChargeEvent extends Event {

}

declare interface WeaponChangeTriggerModeEvent extends Event {

}

declare interface WeaponDataDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface AnimFeature_MuzzleData extends AnimFeature {

}

declare interface TickableEvent extends Event {

  GetState(): gameTickableEventState
  GetProgress(): number
}

declare interface FakeUpdateEvent extends TickableEvent {

}

declare interface OutlineRequestEvent extends Event {

}

declare interface OutlineRequest extends IScriptable {

  /** @noSelf **/
  CreateRequest(requester: CName, shouldAdd: Bool, data: OutlineData, exepectedDuration?: number): OutlineRequest
  GetRequester(): CName
  ShouldAdd(): Bool
  GetData(): OutlineData
  GetRequestType(): EOutlineType
  GetRequestStrength(): number
  GetOutlineDuration(): number
  UpdateData(newData: OutlineData): void
  SetShouldAdd(b: Bool): void
}

declare interface OutlineData {

}

declare interface OutlineRequestManager extends IScriptable {

  BlockRequests(): void
  Initialize(owner: GameObject): void
  PushRequest(freshRequest: OutlineRequest): void
  ClearAllRequests(): void
  HasAnyOutlineRequest(): Bool
  HasOutlineOfType(type: EOutlineType): Bool
  FindStrongestRequest(): number
  DoesRequestAlreadyExist(requestToCheck: OutlineRequest): Bool
  FindRequestIndex(request: OutlineRequest): number
  ProcessExistingRequest(freshRequest: OutlineRequest): void
  AddNewRequest(freshRequest: OutlineRequest): void
  RemoveRequest(index: number): void
  ModifyRequestData(newData: OutlineData, index: number): void
  HandleRequestSuppression(request: OutlineRequest): void
}

declare interface SuppressOutlineEvent extends Event {

}

declare interface FadeOutOutlinesUpdate extends TickableEvent {

}

declare interface GameObjectListener extends IScriptable {

  RegisterOwner(owner: PrereqState): Bool
  ModifyOwner(owner: PrereqState): void
  E3BlockHack(): void
  OnRedOutlineStateChanged(isRevealed: Bool): void
  OnGreenOutlineStateChanged(isOn: Bool): void
  OnRevealAccessPoint(shouldReveal: Bool): void
  OnStatusEffectTrigger(shouldTrigger: Bool): void
}

declare interface PrereqState extends IScriptable {

  OnChanged(newState: Bool): void
  OnChangedRepeated(callOnlyOnStateFulfilled?: Bool): void
  GetPrereq(): IPrereq
  GetContext(): IScriptable
  IsFulfilled(): Bool
}

declare interface GameObjectRevealedRedPrereqState extends PrereqState {

}

declare interface GameObjectRevealedGreenPrereqState extends PrereqState {

}

declare interface RevealAccessPointPrereqState extends PrereqState {

}

declare interface StatPoolPrereqState extends PrereqState {

  StatPoolUpdate(oldValue: number, newValue: number): void
}

declare interface IScriptablePrereq extends IPrereq {

  IsOnRegisterSupported(): Bool
  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  Initialize(record: TweakDBID): void
  OnApplied(state: PrereqState, game: GameInstance, context: IScriptable): void
}

declare interface StatPoolPrereq extends IScriptablePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  Initialize(recordID: TweakDBID): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
  OnApplied(state: PrereqState, game: GameInstance, context: IScriptable): void
  CompareValues(context: IScriptable): Bool
}

declare interface BaseStatPoolPrereqListener extends CustomValueStatPoolsListener {

  RegisterState(state: PrereqState): void
}

declare interface StatPoolPrereqListener extends BaseStatPoolPrereqListener {

  OnStatPoolValueReached(oldValue: number, newValue: number, percToPoints: number): Bool
  RegisterState(state: PrereqState): void
}

declare interface StatPoolPrereq_Record extends IPrereq_Record {

  ComparisonType(): CName
  StatPoolType(): CName
  ValueToCheck(): number
  SkipOnApply(): Bool
  ListenConstantly(): Bool
  ComparePercentage(): Bool
}

declare interface ForceFadeOutlineEventForWeapon extends Event {

}

declare interface UpdateMeleeTrailEffectEvent extends Event {

}

declare interface entBreakEffectLoopEvent extends Event {

}

declare interface WeaponFxPackage_Record extends TweakDBRecord {

  Vfx_impact_glass_bulletproof(): MaterialFx_Record
  Vfx_impact_metal_transparent(): MaterialFx_Record
  Vfx_impact_food(): MaterialFx_Record
  Vfx_impact_linoleum(): MaterialFx_Record
  Vfx_impact_wood_bamboo_poles(): MaterialFx_Record
  Vfx_impact_rubber(): MaterialFx_Record
  Vfx_impact_tiles(): MaterialFx_Record
  Vfx_impact_character_vr(): MaterialFx_Record
  Vfx_impact_leaves_semitransparent(): MaterialFx_Record
  Vfx_impact_dirt(): MaterialFx_Record
  Vfx_impact_glass_semitransparent(): MaterialFx_Record
  Vfx_impact_stone(): MaterialFx_Record
  Vfx_impact_metal_pipe_water(): MaterialFx_Record
  Vfx_impact_default(): MaterialFx_Record
  Vfx_impact_metal_car(): MaterialFx_Record
  Npc_vfx_set(): WeaponVFXSet_Record
  Vfx_impact_glass_opaque(): MaterialFx_Record
  Vfx_impact_water(): MaterialFx_Record
  Vfx_impact_plexiglass(): MaterialFx_Record
  Vfx_impact_character_flesh(): MaterialFx_Record
  Vfx_impact_wood_tree(): MaterialFx_Record
  Vfx_impact_plastic(): MaterialFx_Record
  Vfx_impact_vehicle_chassis(): MaterialFx_Record
  Vfx_impact_cardboard(): MaterialFx_Record
  Vfx_impact_metal_painted(): MaterialFx_Record
  Vfx_impact_leaves(): MaterialFx_Record
  Vfx_impact_furniture_leather(): MaterialFx_Record
  Vfx_impact_meat(): MaterialFx_Record
  Vfx_impact_wood_crown(): MaterialFx_Record
  Vfx_impact_furniture_upholstery(): MaterialFx_Record
  Vfx_impact_carpet(): MaterialFx_Record
  Vfx_impact_concrete(): MaterialFx_Record
  Vfx_impact_upholstery_car(): MaterialFx_Record
  Vfx_impact_asphalt(): MaterialFx_Record
  Vfx_impact_plastic_car(): MaterialFx_Record
  Vfx_impact_plastic_road(): MaterialFx_Record
  Vfx_impact_ceramic(): MaterialFx_Record
  Vfx_impact_metal_semitransparent(): MaterialFx_Record
  Vfx_impact_paper(): MaterialFx_Record
  Vfx_impact_plaster(): MaterialFx_Record
  Vfx_impact_neon(): MaterialFx_Record
  Vfx_impact_character_cyberflesh(): MaterialFx_Record
  Vfx_impact_glass_car(): MaterialFx_Record
  Player_vfx_set(): WeaponVFXSet_Record
  Vfx_impact_character_metal(): MaterialFx_Record
  Vfx_impact_cyberware_metal_head(): MaterialFx_Record
  Vfx_impact_wood(): MaterialFx_Record
  Vfx_impact_metal_pipe_steam(): MaterialFx_Record
  Vfx_impact_sand(): MaterialFx_Record
  Vfx_impact_cyberware_metal(): MaterialFx_Record
  Vfx_impact_metal_catwalk(): MaterialFx_Record
  Vfx_impact_character_flesh_head(): MaterialFx_Record
  Vfx_impact_glass(): MaterialFx_Record
  Vfx_impact_metal_hollow(): MaterialFx_Record
  Vfx_impact_metal(): MaterialFx_Record
  Vfx_impact_tire_car(): MaterialFx_Record
  Vfx_impact_camouflage(): MaterialFx_Record
  Vfx_impact_wood_hedge(): MaterialFx_Record
  Vfx_impact_leather(): MaterialFx_Record
  Vfx_impact_meatbag(): MaterialFx_Record
  Vfx_impact_fabrics(): MaterialFx_Record
  Vfx_impact_character_armor(): MaterialFx_Record
  Vfx_impact_grass(): MaterialFx_Record
  Vfx_impact_cyberware_flesh(): MaterialFx_Record
  Vfx_impact_trash_bag(): MaterialFx_Record
  Vfx_impact_flesh(): MaterialFx_Record
  Vfx_impact_brick(): MaterialFx_Record
  Vfx_impact_glass_electronics(): MaterialFx_Record
  Vfx_impact_metal_road(): MaterialFx_Record
  Vfx_impact_plastic_electronics(): MaterialFx_Record
  Vfx_impact_glass_dst(): MaterialFx_Record
  Vfx_impact_trash(): MaterialFx_Record
  Vfx_impact_mud(): MaterialFx_Record
  Vfx_impact_add_names(): CName[]
  GetVfx_impact_add_namesCount(): number
  GetVfx_impact_add_namesItem(index: number): CName
  Vfx_impact_add_namesContains(item: CName): Bool
  Character_surrounding_decals(): ResRef[]
  GetCharacter_surrounding_decalsCount(): number
  GetCharacter_surrounding_decalsItem(index: number): ResRef
  Character_pseudo_piercing(): ResRef[]
  GetCharacter_pseudo_piercingCount(): number
  GetCharacter_pseudo_piercingItem(index: number): ResRef
  Vfx_impact_leaves_material(): CName
  Vfx_impact_wood_bamboo_poles_material(): CName
  Vfx_impact_plaster_material(): CName
  Vfx_impact_wood_crown_material(): CName
  Vfx_impact_tiles_material(): CName
  Vfx_impact_food_material(): CName
  Vfx_impact_meat_material(): CName
  Vfx_impact_brick_material(): CName
  Vfx_impact_glass_material(): CName
  Vfx_impact_camouflage_material(): CName
  Vfx_impact_paper_material(): CName
  Vfx_impact_water_material(): CName
  Vfx_impact_dirt_material(): CName
  Vfx_impact_furniture_leather_material(): CName
  Vfx_impact_ceramic_material(): CName
  Vfx_impact_character_armor_material(): CName
  Vfx_impact_character_metal_material(): CName
  Vfx_impact_asphalt_material(): CName
  Vfx_impact_character_vr_material(): CName
  Vfx_impact_metal_material(): CName
  Vfx_impact_upholstery_car_material(): CName
  Vfx_impact_flesh_material(): CName
  Vfx_impact_glass_dst_material(): CName
  Vfx_impact_fabrics_material(): CName
  Vfx_impact_carpet_material(): CName
  Vfx_impact_sand_material(): CName
  Vfx_impact_glass_electronics_material(): CName
  Vfx_impact_character_flesh_head_material(): CName
  Vfx_impact_plastic_road_material(): CName
  Vfx_impact_metal_transparent_material(): CName
  Vfx_impact_character_flesh_material(): CName
  Vfx_impact_cardboard_material(): CName
  Vfx_impact_glass_car_material(): CName
  Vfx_impact_wood_hedge_material(): CName
  Vfx_impact_metal_pipe_steam_material(): CName
  Vfx_impact_plastic_car_material(): CName
  Vfx_impact_concrete_material(): CName
  Vfx_impact_metal_hollow_material(): CName
  Vfx_impact_cyberware_flesh_material(): CName
  Vfx_impact_cyberware_metal_head_material(): CName
  Vfx_impact_metal_catwalk_material(): CName
  Vfx_impact_trash_material(): CName
  Vfx_impact_trash_bag_material(): CName
  Vfx_impact_leather_material(): CName
  Vfx_impact_glass_bulletproof_material(): CName
  Vfx_impact_plastic_electronics_material(): CName
  Vfx_impact_tire_car_material(): CName
  Vfx_impact_metal_semitransparent_material(): CName
  Vfx_impact_neon_material(): CName
  Vfx_impact_metal_road_material(): CName
  Vfx_impact_grass_material(): CName
  Vfx_impact_metal_pipe_water_material(): CName
  Vfx_impact_metal_car_material(): CName
  Vfx_impact_wood_tree_material(): CName
  Vfx_impact_furniture_upholstery_material(): CName
  Vfx_impact_meatbag_material(): CName
  Vfx_impact_glass_opaque_material(): CName
  Vfx_impact_metal_painted_material(): CName
  Vfx_impact_plexiglass_material(): CName
  Vfx_impact_vehicle_chassis_material(): CName
  Vfx_impact_leaves_semitransparent_material(): CName
  Vfx_impact_stone_material(): CName
  Vfx_impact_plastic_material(): CName
  Vfx_impact_glass_semitransparent_material(): CName
  Vfx_impact_rubber_material(): CName
  Vfx_impact_cyberware_metal_material(): CName
  Vfx_impact_linoleum_material(): CName
  Vfx_impact_character_cyberflesh_material(): CName
  Vfx_impact_wood_material(): CName
  Vfx_impact_mud_material(): CName
  Vfx_hitscan_trail(): ResRef
  Vfx_hitscan_trail_thermal(): ResRef
  Vfx_hitscan_trail_electric(): ResRef
  Vfx_hitscan_trail_chemical(): ResRef
  Vfx_hitscan_trail_slowmo(): ResRef
  Vfx_hitscan_trail_ricochet(): ResRef
  Vfx_projectile_trail_name(): CName
  NPC_vfx_hitscan_trail(): ResRef
  NPC_vfx_hitscan_trail_thermal(): ResRef
  NPC_vfx_hitscan_trail_electric(): ResRef
  NPC_vfx_hitscan_trail_chemical(): ResRef
  Vfx_impact_damage_thermal(): ResRef
  Vfx_impact_damage_electric(): ResRef
  Vfx_impact_damage_chemical(): ResRef
  Vfx_impact_add(): ResRef
  Vfx_impact_add_names_material(): CName
  Vfx_ricochet(): ResRef
  Sfx_impact_context(): CName
  Vfx_ground_throw(): ResRef
  Vfx_impact_add_enable(): Bool
}

declare interface WeaponVFXSet_Record extends TweakDBRecord {

  Actions(outList: WeaponVFXAction_Record[]): void
  GetActionsCount(): number
  GetActionsItem(index: number): WeaponVFXAction_Record
  ActionsContains(item: WeaponVFXAction_Record): Bool
}

declare interface WeaponVFXAction_Record extends TweakDBRecord {

  FxAction(): FxAction_Record
  FxActionType(): FxActionType_Record
  FxName(): CName
}

declare interface FxAction_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataFxAction
}

declare interface FxActionType_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataFxActionType
}

declare interface AmmoStateChangeEvent extends Event {

}

declare interface StartOverheatEffectEvent extends Event {

}

declare interface UpdateOverheatEvent extends Event {

}

declare interface worldEffectBlackboard extends IScriptable {

  SetValue(parameterName: CName, clampedValue: number): void
}

declare interface OverheatStatListener extends ScriptStatPoolsListener {

  OnStatPoolValueChanged(oldValue: number, newValue: number, percToPoints: number): void
}

declare interface MeleeHitEvent extends Event {

}

declare interface AudioSystem extends gameIGameAudioSystem {

  Play(eventName: CName, entityID?: EntityID, emitterName?: CName): void
  Stop(eventName: CName, entityID?: EntityID, emitterName?: CName): void
  Switch(switchName: CName, switchValue: CName, entityID?: EntityID, emitterName?: CName): void
  Parameter(parameterName: CName, parameterValue: number, entityID?: EntityID, emitterName?: CName): void
  PlayImpact(impactContext: CName, position: Vector4, object: GameObject): void
  State(stateGroup: string, state: string): void
  GlobalParameter(parameterName: CName, parameterValue: number): void
  LoadBank(bankName: string): void
  UnloadBank(bankName: string): void
  PlayShockwave(shockwaveType: CName, position: Vector4): void
  OpenAcousticPortal(object: GameObject): void
  CloseAcousticPortal(object: GameObject): void
  NotifyGameTone(eventName: CName): void
  RequestSongOnRadioStation(stationName: CName, songName: CName): void
  RequestSongOnPlaylist(playlistName: CName, songName: CName): void
  GetPlaylistSongs(playlistName: CName): CName[]
  GetPlaylistCurrentSong(playlistName: CName): CName
  SetInScanningMode(inScanningMode: Bool): void
  IsInScanningMode(): Bool
  RegisterEnemyPingStim(enemyState: gamedataNPCHighLevelState, isPoliceman: Bool): void
  RegisterPreventionHeatStage(preventionHeatStage: number): void
  SetBDCameraListenerOverride(value: Bool): void
  VoIsPerceptible(entityId: EntityID): Bool
  TriggerFlyby(position: Vector4, direction: Vector4, startPosition: Vector4, object: GameObject): void
  PlayLootAllSound(): void
  PlayItemActionSound(action: CName, itemData: gameItemData): void
  PlayItemLootedSound(itemData: gameItemData): void
  HandleDynamicMixAreaEnter(localPlayer: GameObject): void
  HandleDynamicMixAreaExit(localPlayer: GameObject): void
  HandleCombatMix(localPlayer: GameObject): void
  HandleOutOfCombatMix(localPlayer: GameObject): void
  OnGameEnd(): Bool
}

declare interface StimBroadcasterComponent extends ScriptableComponent {

  /** @noSelf **/
  BroadcastStim(sender: GameObject, gdStimType: gamedataStimType, radius?: number, investigateData?: stimInvestigateData, propagationChange?: Bool): void
  /** @noSelf **/
  BroadcastActiveStim(sender: GameObject, gdStimType: gamedataStimType, lifetime?: number, radius?: number, investigateData?: stimInvestigateData, propagationChange?: Bool): void
  /** @noSelf **/
  SendStimDirectly(sender: GameObject, gdStimType: gamedataStimType, target: GameObject, investigateData?: stimInvestigateData, delay?: number): void
  TriggerSingleBroadcast(contextOwner: GameObject, gdStimType: gamedataStimType, radius?: number, investigateData?: stimInvestigateData, propagationChange?: Bool): void
  AddActiveStimuli(contextOwner: GameObject, gdStimType: gamedataStimType, lifetime?: number, radius?: number, investigateData?: stimInvestigateData, propagationChange?: Bool, shouldOverride?: Bool): void
  SetSingleActiveStimuli(contextOwner: GameObject, gdStimType: gamedataStimType, lifetime?: number, radius?: number, investigateData?: stimInvestigateData, propagationChange?: Bool): void
  RemoveActiveStimuliByName(contextOwner: GameObject, gdStimType: gamedataStimType): void
  SendDrirectStimuliToTarget(contextOwner: GameObject, gdStimType: gamedataStimType, target: GameObject, investigateData?: stimInvestigateData, delay?: number): void
  OnBroadcastEvent(evt: BroadcastEvent): Bool
  OnGameDetach(): void
  OnStimTargetsUpdate(evt: StimTargetsEvent): Bool
  ClearStimTargets(): void
  HasStimTarget(data: StimTargetData): Bool
  AddStimmTarget(data: StimTargetData): void
  GetStimTargets(): NPCstubData[]
  HasStimTargets(): Bool
  IsSourceMuted(owner: GameObject, stimuli: StimuliEvent): Bool
  AddActiveStimulus(gdStimType: gamedataStimType, lifetime: number, shouldOverride?: Bool, radius?: number, investigateData?: stimInvestigateData, propagationChange?: Bool): void
  RemoveActiveStimByID(id: StimRequestID): void
  ProcessStartRequest(gdStimType: gamedataStimType, lifetime: number, radius?: number, investigateData?: stimInvestigateData, propagationChange?: Bool): StimRequestID
  ProcessStopRequest(gdStimType: gamedataStimType): void
  RemoveRequest(index: number): void
  RemoveRequest(request: StimRequest): void
  ClearRequests(): void
  AddNewDelayEvent(): void
  OnRecurrentStimuliEvent(evt: RecurrentStimuliEvent): Bool
  RebroadcastStimuli(evt: RecurrentStimuliEvent): Bool
  ProcessSingleStimuliBroadcast(stimuli: StimuliEvent, request?: StimRequest): Bool
  StopTriggeringStims(): void
  CreateStimRequest(gdStimType: gamedataStimType, duration?: number, radius?: number, investigateData?: stimInvestigateData, propagationChange?: Bool): StimRequest
  CreateStimEvent(gdStimType: gamedataStimType, radius?: number, investigateData?: stimInvestigateData, propagationChange?: Bool): StimuliEvent
  FillStimData(gdStimType: gamedataStimType, stim: StimuliEvent): void
  IsEqual(stim: StimuliEvent, gdStimType: gamedataStimType): Bool
  IsRequestDuplicated(gdStimType: gamedataStimType): Bool
  GetRequestByID(id: StimRequestID): StimRequest
  GetRequestByName(gdStimType: gamedataStimType): StimRequest
  GetRequestByArrayIndex(index: number): StimRequest
  FindRequestIndexByName(gdStimType: gamedataStimType): number
  FindRequestIndexByID(id: StimRequestID): number
  FindRequestIndex(request: StimRequest): number
  AssignNextValidUniqueID(): StimRequestID
  GenerateRequestID(id: number, valid: Bool): StimRequestID
  DetermineHowManyRepeats(request: StimRequest): number
  OnStatusEffectApplied(evt: ApplyStatusEffectEvent): Bool
  LogStimuliBroadcast(stim: StimuliEvent, request?: StimRequest, context?: string): void
  LogStimuliRemoval(stim: StimuliEvent, request?: StimRequest): void
  GetStimuliData(path: string, stimToProcess: StimuliEvent): void
  GetStimuliData(stimID: TweakDBID, stimToProcess: StimuliEvent): void
  /** @noSelf **/
  nameToStimEnum(stimName: CName, stimType: gamedataStimType): void
  TriggerNoiseStim(owner: GameObject, takedownActionType: ETakedownActionType): void
}

declare interface StimuliData extends IScriptable {

}

declare interface stimInvestigateData {

}

declare interface StimPriority_Record extends TweakDBRecord {

  Comment(): string
  EnumName(): CName
  Type(): gamedataStimPriority
}

declare interface StimPropagation_Record extends TweakDBRecord {

  Comment(): string
  EnumName(): CName
  Type(): gamedataStimPropagation
}

declare interface WeaponGrenade extends ItemObject {

  OnExplosion(): void
}

declare interface EffectSystem extends IEffectSystem {

  CreateEffect(definition: EffectRef, instigator: Entity, weapon?: Entity): EffectInstance
  CreateEffectStatic(effectName: CName, effectTag: CName, instigator: Entity, weapon?: Entity): EffectInstance
  PreloadStaticEffectResources(effectName: CName, effectTag: CName): void
  ReleaseStaticEffectResources(effectName: CName, effectTag: CName): void
}

declare interface EffectData {

  /** @noSelf **/
  SetBool(ctx: EffectData, id: BlackboardID_Bool, value: Bool): Bool
  /** @noSelf **/
  SetInt(ctx: EffectData, id: BlackboardID_Int, value: number): Bool
  /** @noSelf **/
  SetFloat(ctx: EffectData, id: BlackboardID_Float, value: number): Bool
  /** @noSelf **/
  SetName(ctx: EffectData, id: BlackboardID_Name, value: CName): Bool
  /** @noSelf **/
  SetString(ctx: EffectData, id: BlackboardID_String, value: string): Bool
  /** @noSelf **/
  SetVector(ctx: EffectData, id: BlackboardID_Vector4, value: Vector4): Bool
  /** @noSelf **/
  SetEulerAngles(ctx: EffectData, id: BlackboardID_EulerAngles, value: EulerAngles): Bool
  /** @noSelf **/
  SetQuat(ctx: EffectData, id: BlackboardID_Quat, value: Quaternion): Bool
  /** @noSelf **/
  SetEntity(ctx: EffectData, id: BlackboardID_Entity, value: Entity): Bool
  /** @noSelf **/
  SetVariant(ctx: EffectData, id: BlackboardID_Variant, value: Variant): Bool
  /** @noSelf **/
  GetBool(ctx: EffectData, id: BlackboardID_Bool, value: Bool): Bool
  /** @noSelf **/
  GetInt(ctx: EffectData, id: BlackboardID_Int, value: number): Bool
  /** @noSelf **/
  GetFloat(ctx: EffectData, id: BlackboardID_Float, value: number): Bool
  /** @noSelf **/
  GetName(ctx: EffectData, id: BlackboardID_Name, value: CName): Bool
  /** @noSelf **/
  GetString(ctx: EffectData, id: BlackboardID_String, value: string): Bool
  /** @noSelf **/
  GetVector(ctx: EffectData, id: BlackboardID_Vector4, value: Vector4): Bool
  /** @noSelf **/
  GetEulerAngles(ctx: EffectData, id: BlackboardID_EulerAngles, value: EulerAngles): Bool
  /** @noSelf **/
  GetQuat(ctx: EffectData, id: BlackboardID_Quat, value: Quaternion): Bool
  /** @noSelf **/
  GetEntity(ctx: EffectData, id: BlackboardID_Entity, value: Entity): Bool
  /** @noSelf **/
  GetVariant(ctx: EffectData, id: BlackboardID_Variant, value: Variant): Bool
}

declare interface EffectInstance extends IEffect {

  Run(): Bool
  AttachToEntity(entity: Entity, positionParameter: BlackboardID_Vector4, offset?: Vector4): void
  AttachToSlot(entity: Entity, slotName: CName, positionParameter: BlackboardID_Vector4, directionParameter: BlackboardID_Vector4): void
  Terminate(): void
  IsFinished(): Bool
  GetSharedData(): EffectData
  /** @noSelf **/
  GetBlackboard(): IBlackboard
  GetLastError(): string
  GetExecutionInfo(): void
  RegisterCallbackEntity(entity: Entity, tag: string): void
}

declare interface EffectSharedDataDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface BaseGrenade extends WeaponGrenade {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  PreloadAttackResources(): void
  ReleaseAttackResources(): void
  OnGameAttached(): Bool
  OnInitialize(eventData: gameprojectileSetUpEvent): Bool
  Reset(): void
  SetupDeliveryMethodMesh(): void
  GetAttackRadius(): number
  GetInitialVelocity(isQuickThrow: Bool): number
  GetAccelerationZ(): number
  SetCanBeShot(canBeShot: Bool): void
  OnShoot(eventData: gameprojectileShootEvent): Bool
  OnShootTarget(eventData: gameprojectileShootTargetEvent): Bool
  OnCollision(eventData: gameprojectileHitEvent): Bool
  OnForceActivation(evt: gameprojectileForceActivationEvent): Bool
  OnHit(evt: gameHitEvent): Bool
  CheckForGunslingerAchievement(attackData: AttackData): void
  OnTick(eventData: gameprojectileTickEvent): Bool
  OnServerTick(eventData: gameprojectileTickEvent): void
  Detonate(hitNormal?: Vector4): void
  SendCombatGadgetIsAliveFeature(): void
  SetThrowableAnimFeatureOnGrenade(newState: number, target: GameObject): void
  SpawnVisualEffectsOnDetonation(): void
  OnCuttingGrenadeSpawnBlinkEffectEvent(evt: CuttingGrenadeSpawnBlinkEffectEvent): Bool
  OnCuttingGrenadeDespawnEffectsEvent(evt: CuttingGrenadeDespawnEffectsEvent): Bool
  /** @noSelf **/
  SendGrenadeAnimFeatureChangeEvent(owner: GameObject, itemID: ItemID): void
  OnGrenadeAnimFeatureChange(evt: GrenadeAnimFeatureChangeEvent): Bool
  SpawnEffectFromLibrary(key: CName): void
  SpawnEffectOnGround(groundEffect: FxResource): void
  SpawnPiercingExplosion(): void
  IsGrenadeOfType(compareType: EGrenadeType): Bool
  ShouldUsePlayerAttack(): Bool
  OnFollowSuccess(eventData: gameprojectileFollowEvent): Bool
  TriggerStimuli(): void
  TriggerGrenadeLandedStimuli(hasLifeTime: Bool): void
  RemoveGrenadeLandedStimuli(): void
  DetermineLandedStimType(): gamedataStimType
  SpawnAttack(attackRecord: Attack_Record, range?: number, duration?: number, hitNormal?: Vector4, position?: Vector4): EffectInstance
  SpawnLaserAttack(attackRecord: Attack_Record, numberOfLasers: number, range?: number, duration?: number, playSlotAnimation?: Bool, delayPerLaser?: number): void
  OnSpawnLaserAttackEvent(evt: SpawnLaserAttackEvent): Bool
  SpawnLaserAttackSingle(attackRecord: Attack_Record, range: number, duration: number, index: number, playSlotAnimation: Bool): void
  TerminateCuttingGrenadeAttack(): void
  PlayLaserSlotAnimation(index: number): void
  GetShootCollisionSize(): Vector4
  RequestGrenadeRelease(delay: number): void
  OnReleaseRequestEvent(evt: GrenadeReleaseRequestEvent): Bool
  Release(isInstant?: Bool): void
  MultiplayerCanRelease(): Bool
  OnDespawnRequest(evt: GrenadeDespawnRequestEvent): Bool
  InitializeRotation(): void
  Freeze(): void
  DrillThrough(collisionEventData: gameprojectileHitInstance): void
  SpawnOnPuppetCollisionAttack(attackRecord: Attack_Record, targetEntity?: ScriptedPuppet): EffectInstance
  GetDrillTargetPosition(currentPosition: Vector4, hitNormal: Vector4): Vector4
  OnDetonateRequest(evt: GrenadeDetonateRequestEvent): Bool
  OnStopDrillingRequest(evt: GrenadeStopDrillingRequestEvent): Bool
  FloatCuttingGrenadeUp(): void
  OnAddAxisRotationEvent(evt: CuttingGrenadeAddAxisRotationEvent): Bool
  FloatToLockOnAltitude(): void
  GetDistanceFromFloor(): number
  GetDistanceToFloat(): number
  QueueSmartTrajectory(delay: number): void
  ChooseSmartTrajectoryTarget(): GrenadePotentialHomingTarget
  OnTriggerSmartTrajectory(evt: GrenadeTriggerSmartTrajectoryEvent): Bool
  StopCuttingGrenadeAttack(): void
  OnCuttingGrenadeStopAttackEvent(evt: CuttingGrenadeStopAttackEvent): Bool
  DropToFloor(): void
  QueueFailDetonation(): void
  ActivateSmartTrajectory(): void
  SetTracking(state: Bool): void
  ProcessProximityTargets(): Bool
  CheckRegularDeliveryMethodConditions(): Bool
  CheckStickyDeliveryMethodConditions(): Bool
  PlayNPCGrenadeBeepSound(): void
  StopNPCGrenadeBeepSound(): void
  PlayStickyGrenadeLongBeepSound(): void
  PlayStickyGrenadeShortBeepSound(): void
  StopStickyGrenadeSounds(): void
  OnTargetAcquired(evt: GrenadeTrackerTargetAcquiredEvent): Bool
  NewCuttingGrenadeHit(evt: GrenadeTrackerTargetAcquiredEvent): void
  OnTargetLost(evt: GrenadeTrackerTargetLostEvent): Bool
  DelayTargetTrackingStateChange(newState: Bool, delay: number): void
  OnTargetTrackerStateSet(evt: GrenadeSetTargetTrackerStateEvent): Bool
  GetUser(): GameObject
  GetLastHitNormal(): Vector4
  GetDeliveryMethod(): gamedataGrenadeDeliveryMethodType
}

declare interface ProjectileComponent extends IPlacedComponent {

  AddParabolic(params: ParabolicTrajectoryParams): void
  AddFollow(params: FollowTrajectoryParams): void
  AddFollowCurve(params: FollowCurveTrajectoryParams): void
  AddAccelerateTowards(params: AccelerateTowardsTrajectoryParams): void
  AddLinear(params: LinearTrajectoryParams): void
  Slide(params: SlideTrajectoryParams): void
  SetEnergyLossFactor(energyLossFactor: number, puppetEnergyLossFactor: number): void
  GetPrintVelocity(): Vector4
  SetWasTrajectoryStopped(wasStopped: Bool): void
  AddIgnoredEntity(entityID: EntityID): void
  RemoveIgnoredEntity(entityID: EntityID): void
  ClearIgnoredEntities(): void
  SetExplosionVisualRadius(explosionRadius: number): void
  ClearTrajectories(): void
  IsTrajectoryEmpty(): Bool
  SetDesiredTransform(transform: Transform): void
  SetOnCollisionAction(action: gameprojectileOnCollisionAction): void
  GetGameEffectInstance(): EffectInstance
  SpawnTrailVFX(): void
  GetTrailVFXName(): CName
  ToggleAxisRotation(enabled: Bool): void
  AddAxisRotation(axis: Vector4, value: number): void
  SetCollisionEvaluator(collisionEvaluator: gameprojectileScriptCollisionEvaluator): void
  LogDebugVariable(key: CName, value: string): void
  LockOrientation(enable: Bool): void
  SetSpiral(params: SpiralControllerParams): void
}

declare interface gameprojectileTrajectoryParams extends IScriptable {

}

declare interface gameprojectileCollisionEvaluator extends IScriptable {

}

declare interface SimpleColliderComponent extends IPlacedComponent {

  Resize(size: Vector4, index: number): void
  GetSize(index: number): Vector4
}

declare interface TargetingComponent extends IPlacedComponent {

}

declare interface ResourceLibraryComponent extends ScriptableComponent {

  GetResource(key: CName): FxResource
}

declare interface FxResourceMapData {

}

declare interface Grenade_Record extends Gadget_Record {

  DetonationSound(): string
  DetonationStimType(): StimType_Record
  NpcHitReactionAttack(): Attack_Record
  Attack(): Attack_Record
  AdditionalAttack(): Attack_Record
  DeliveryMethod(): GrenadeDeliveryMethod_Record
  EnemyAttack(): Attack_Record
  RotationAxesX(): number[]
  GetRotationAxesXCount(): number
  GetRotationAxesXItem(index: number): number
  RotationAxesXContains(item: number): Bool
  RotationAxesY(): number[]
  GetRotationAxesYCount(): number
  GetRotationAxesYItem(index: number): number
  RotationAxesYContains(item: number): Bool
  RotationAxesZ(): number[]
  GetRotationAxesZCount(): number
  GetRotationAxesZItem(index: number): number
  RotationAxesZContains(item: number): Bool
  RotationAxesSpeeds(): number[]
  GetRotationAxesSpeedsCount(): number
  GetRotationAxesSpeedsItem(index: number): number
  RotationAxesSpeedsContains(item: number): Bool
  Seed(): number
  AttackRadius(): number
  AttackDuration(): number
  RandomRotationAxes(): number
  RotationSpeedMin(): number
  RotationSpeedMax(): number
  DetonationStimRadius(): number
  ShootCollisionEnableDelay(): number
  ReleaseOnDetonation(): Bool
  RemoveMeshOnDetonation(): Bool
  UseSeed(): Bool
}

declare interface AnimFeature_Throwable extends AnimFeature {

}

declare interface gameprojectileSetUpEvent extends Event {

}

declare interface GrenadeDeliveryMethodType_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataGrenadeDeliveryMethodType
}

declare interface NPCPuppet extends ScriptedPuppet {

  IsNPC(): Bool
  IsReplicable(): Bool
  GetReplicatedStateClass(): CName
  IsPaperdoll(): Bool
  ResetCompanionRoleCacheTimeStamp(): void
  OnPlayerCompanionCacheData(evt: PlayerCompanionCacheDataEvent): Bool
  GetPlayerID(): EntityID
  IsPlayerCompanion(): Bool
  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnPreloadAnimationsEvent(evt: PreloadAnimationsEvent): Bool
  OnDeviceLinkRequest(evt: DeviceLinkRequest): Bool
  CreateListeners(): void
  RemoveListeners(): void
  OnDeviceLinkEstablished(evt: DeviceLinkEstablished): Bool
  ApplyRarityMods(): void
  OnDetach(): Bool
  GetPS(): ScriptedPuppetPS
  GetBounty(): Bounty
  SetBountyAwarded(): void
  /** @noSelf **/
  SetBountyObject(target: GameObject, bounty: Bounty): void
  OnSetBountyObjectEvent(evt: SetBountyObjectEvent): Bool
  SetBounty(bounty: Bounty): void
  OnSetBounty(evt: SetBountyEvent): Bool
  /** @noSelf **/
  SetNPCDisposedFact(npcBody: NPCPuppet): void
  OnSecuritySystemAgentTrackingPlayer(evt: SecuritySystemSupport): Bool
  SwitchTargetPlayerTrackedAccuracy(freeze: Bool): Bool
  SwitchTargetPlayerTrackedAccuracy(ttc: TargetTrackerComponent, freeze: Bool): Bool
  OnPlayerDetectionChangedEvent(evt: PlayerDetectionChangedEvent): Bool
  SetDetectionPercentage(percent: number): void
  GetDetectionPercentage(): number
  InitThreatsCurves(): void
  Kill(instigator?: GameObject, skipNPCDeathAnim?: Bool, disableNPCRagdoll?: Bool): void
  IsDead(): Bool
  MarkForDeath(): void
  IsAboutToDie(): Bool
  MarkForDefeat(): void
  IsAboutToBeDefeated(): Bool
  IsDefeatMechanicActive(): Bool
  SetIsDefeatMechanicActive(isDefeatMechanicActive: Bool, isInitialisation?: Bool): void
  GetAffiliation(): string
  OnGodModeChanged(): void
  CanEnableRagdollComponent(): Bool
  OnDisableRagdollComponentEvent(evt: DisableRagdollComponentEvent): Bool
  SetDisableRagdoll(disableRagdoll: Bool): void
  /** @noSelf **/
  SendNPCHitDataTrackingRequest(owner: NPCPuppet, telemetryData: ENPCTelemetryData, modifyValue: number): void
  CheckStubData(data: NPCstubData): Bool
  OnItemAddedToSlot(evt: ItemAddedToSlot): Bool
  SetWeaponFx(): void
  OnItemRemovedFromSlot(evt: ItemRemovedFromSlot): Bool
  SetAnimWrapperWeightBasedOnFaction(): void
  SetAnimWrappersOnItem(item: ItemObject, slotID: TweakDBID): void
  /** @noSelf **/
  SetAnimWrapperBasedOnEquippedItem(npc: NPCPuppet, slotID: TweakDBID, itemID: ItemID, value: number): void
  SetRandomAnimWrappersForLocomotion(): void
  OnSetPuppetTargetingPlayer(evt: OnBeingTarget): Bool
  SetPuppetTargetingPlayer(isTargeting: Bool): void
  IsPuppetTargetingPlayer(): Bool
  /** @noSelf **/
  ChangeHighLevelState(obj: GameObject, newState: gamedataNPCHighLevelState): void
  /** @noSelf **/
  ChangeUpperBodyState(obj: GameObject, newState: gamedataNPCUpperBodyState): void
  /** @noSelf **/
  ChangeStanceState(obj: GameObject, newState: gamedataNPCStanceState): void
  /** @noSelf **/
  ChangeHitReactionModeState(obj: GameObject, newState: EHitReactionMode): void
  /** @noSelf **/
  ChangeDefenseModeState(obj: GameObject, newState: gamedataDefenseMode): void
  /** @noSelf **/
  ChangeLocomotionMode(obj: GameObject, newState: gamedataLocomotionMode): void
  /** @noSelf **/
  ChangeBehaviorState(obj: GameObject, newState: gamedataNPCBehaviorState): void
  /** @noSelf **/
  ChangePhaseState(obj: GameObject, newState: ENPCPhaseState): void
  /** @noSelf **/
  ChangeForceRagdollOnDeath(obj: GameObject, value: Bool): void
  OnStatusEffectApplied(evt: ApplyStatusEffectEvent): Bool
  ShouldDelayStatusEffectApplication(evt: ApplyStatusEffectEvent): Bool
  ProcessStatusEffectApplication(evt: ApplyStatusEffectEvent): void
  OnQuickHackEffectApplied(evt: ApplyStatusEffectEvent): void
  OnNonStealthQuickHackVictimEvent(evt: NonStealthQuickHackVictimEvent): Bool
  /** @noSelf **/
  RevealPlayerPositionIfNeeded(ownerPuppet: ScriptedPuppet, playerID: EntityID): Bool
  TriggerDefeatedBehavior(evt: ApplyStatusEffectEvent): void
  DelayStatusEffectApplication(evt: ApplyStatusEffectEvent): void
  TriggerStatusEffectBehavior(evt: ApplyStatusEffectEvent, alwaysTrigger?: Bool): void
  SendStatusEffectSignal(priority: number, tags: CName[], flags: EAIGateSignalFlags[], statusEffectID: TweakDBID, repeatSignalDelay: number, remainingStatusEffectDuration: number): void
  TryRepeatStatusEffectSignal(priority: number, tags: CName[], flags: EAIGateSignalFlags[], statusEffectID: TweakDBID, repeatSignalDelay: number, remainingStatusEffectDuration: number): void
  OnStatusEffectSignal(evt: StatusEffectSignalEvent): Bool
  OnStatusEffectRemoved(evt: RemoveStatusEffect): Bool
  OnQuickHackEffectRemoved(evt: RemoveStatusEffect): void
  OnCacheStatusEffectAnim(evt: CacheStatusEffectAnimEvent): Bool
  OnApplyNewStatusEffect(evt: ApplyNewStatusEffectEvent): Bool
  OnRemoveStatusEffect(evt: RemoveStatusEffectEvent): Bool
  OnRemoveAllStatusEffectOfTypeEvent(evt: RemoveAllStatusEffectOfTypeEvent): Bool
  StopStatusEffectVFX(evt: RemoveStatusEffect): void
  StopStatusEffectSFX(evt: RemoveStatusEffect): void
  OnCacheStatusEffectFX(evt: CacheStatusEffectFXEvent): Bool
  OnRemoveCachedStatusEffectFX(evt: RemoveCachedStatusEffectFXEvent): Bool
  OnExplorationLeftEvent(evt: ExplorationLeftEvent): Bool
  OnSignalOnUnstoppableStateSignal(signalId: number, newValue: Bool, userData: OnUnstoppableStateSignal): void
  OnDelayedSEReactionEvent(evt: DelayedStatusEffectApplicationEvent): Bool
  TriggerPendingSEEvent(): void
  CacheStatusEffectAppliedByPlayer(evt: ApplyStatusEffectEvent): void
  GetLastSEAppliedByPlayer(): StatusEffect
  OnUncontrolledMovementStatusEffectAdded(evt: ApplyStatusEffectEvent): void
  OnUncontrolledMovementStatusEffectRemoved(): void
  OnCheckUncontrolledMovementStatusEffectEvent(evt: CheckUncontrolledMovementStatusEffectEvent): Bool
  OnCheckRagdollStateEvent(evt: CheckPuppetRagdollStateEvent): Bool
  OnAnimVisibilityChangedEvent(evt: AnimVisibilityChangedEvent): Bool
  CanStandUpFromRagdoll(currentPosition: Vector4): Bool
  IsUnderneathVehicle(): Bool
  GetInfluenceMapScoreInRange(currentPosition: Vector4, range: number, scorePercentage: number): number
  OnRagdollEnabledEvent(evt: RagdollNotifyEnabledEvent): Bool
  UpdateAnimgraphRagdollState(isActive: Bool): void
  OnCheckDeadPuppetDisposedEvent(evt: CheckDeadPuppetDisposedEvent): Bool
  OnRagdollImpactEvent(evt: RagdollImpactEvent): Bool
  CanReceiveDamageFromRagdollImpacts(isDead: Bool, isDefeated: Bool, terminalVelocityReached: Bool, isHighFall: Bool): Bool
  SpawnRagdollBumpAttack(position: Vector4): void
  SpawnRagdollFloorSplash(evt: RagdollImpactPointData): void
  SpawnRagdollSplatter(impactData: RagdollImpactPointData, isDead: Bool): void
  IsPointOnStaticMesh(position: Vector4, normal: Vector4): Bool
  Debug_Ragdoll(): void
  OnStartRagdollDamageEvent(evt: StartRagdollDamageEvent): Bool
  StartRagdollImpactAttack(impactData: RagdollDamagePollData): void
  GetRagdollInstigator(ragdollInstigator: GameObject): Bool
  OnRagdollDisabledEvent(evt: RagdollNotifyDisabledEvent): Bool
  OnAnimatedRagdollEnabledEvent(evt: AnimatedRagdollNotifyEnabledEvent): Bool
  SpawnVehicleBumpAttack(vehicle: VehicleObject, player: GameObject): void
  OnAnimatedRagdollDisabledEvent(evt: AnimatedRagdollNotifyDisabledEvent): Bool
  IsOutsideOfNavmesh(currentPosition: Vector4): Bool
  IsOutsideOfNavmeshWithTolerance(currentPosition: Vector4, tolerance: Vector4): Bool
  IsOutsideOfNavmesh(currentPosition: Vector4, navmeshPoint: Vector4): Bool
  IsAnOccupiedInfluenceMapNode(currentPosition: Vector4): Bool
  TriggerRagdollBehavior(): void
  TriggerRagdollBehaviorEnd(): void
  IsRagdolling(): Bool
  IsRagdollEnabled(): Bool
  GetInitialRagdollPosition(): Vector4
  KillIfUnderwater(): Bool
  HasHeadUnderwater(): Bool
  OnAttitudeChanged(evt: AttitudeChangedEvent): Bool
  OnHit(evt: gameHitEvent): Bool
  OnScanningLookedAt(evt: ScanningLookAtEvent): Bool
  OnRevealStateChanged(evt: RevealStateChangedEvent): Bool
  SendRevealStateToAllWeakspots(revealState: ERevealState): void
  OnSetupWorkspotActionEvent(evt: SetupWorkspotActionEvent): Bool
  SetHitEventData(hitEvent: gameHitEvent, hitReactionFactor: number, hitWoundsFactor: number, hitDismembermentFactor: number): void
  OnHitAnimation(hitEvent: gameHitEvent): void
  ShouldRequestHitReaction(hitEvent: gameHitEvent): Bool
  RequestHitReaction(hitEvent: gameHitEvent): void
  OnHitSounds(hitEvent: gameHitEvent): void
  GetTotalFrameDamage(): number
  GetTotalFrameWoundsDamage(): number
  GetTotalFrameDismembermentDamage(): number
  OnResetTotalFrameDamage(evt: ResetFrameDamage): Bool
  GetLastHitAttackType(): gamedataAttackType
  GetLastHitInstigator(): GameObject
  GetLastHitAttackRecord(): Attack_GameEffect_Record
  HasLastHitFlag(flag: hitFlag): Bool
  GetLastHitAttackValues(): number[]
  GetLastHitAttackDirection(): Vector4
  OnHitUI(hitEvent: gameHitEvent): void
  WasJustKilledOrDefeated(): Bool
  SendAfterDeathOrDefeatEvent(): void
  SendDataTrackingEvent(defeated: Bool, nonLethal: Bool): void
  OnAfterDeathOrDefeat(evt: NPCAfterDeathOrDefeatEvent): Bool
  ClearDefeatAndImmortality(): void
  OnDeath(evt: gameDeathEvent): Bool
  EvaluateQuickHackPassivesIncapacitated(): void
  OnPotentialDeath(evt: gamePotentialDeathEvent): Bool
  /** @noSelf **/
  FinisherEffectorActionOn(npc: NPCPuppet, instigator: GameObject): void
  OnFinisherEffectorActionOn(evt: FinisherEffectorActionOn): Bool
  SearchForNonlethalFlag(): Bool
  GetValidAttackFromDamageHistory(entry: DamageHistoryEntry): Bool
  ProcessDoTAttackData(): void
  UpdateCollisionState(): void
  DisableCollision(): void
  EnableCollision(): void
  OnDefeatedWithRecoverStatusEffectApplied(): void
  OnDefeatedWithRecoverStatusEffectRemoved(): void
  OnResurrected(): void
  OnIncapacitated(): void
  IsFloorSteepEnoughToRagdoll(): Bool
  ProcessAndroidIncapacitated(): void
  IsIncapacitated(): Bool
  ReevaluateQuickHackPerkRewardsForPlayer(): void
  OnCoverHit(evt: gameCoverHitEvent): Bool
  OnHitVFX(hitEvent: gameHitEvent): void
  PlayImpactSound(): void
  SpawnHitVisualEffect(n: CName): void
  CompileScannerChunks(): Bool
  test(): void
  /** @noSelf **/
  ShouldShowIndicator(npc: GameObject): Bool
  OnSetExposeQuickHacks(evt: SetExposeQuickHacks): Bool
  OnSmartBulletDeflectedEvent(evt: SmartBulletDeflectedEvent): Bool
  UpdateAdditionalScanningData(): void
  GetHighestDamageStat(item: gameItemData): gamedataDamageType
  MountingStartDisableComponents(): void
  MountingEndEnableComponents(): void
  GrappleTargetDeadEnableRagdollComponent(b: Bool): void
  SetMyKiller(killer: GameObject): void
  OnGrappleTargetDeadEnableRagdollWithDelay(evt: RagdollToggleDelayEvent): Bool
  OnHidePuppetDelayEvent(evt: HidePuppetDelayEvent): Bool
  On_TEMP_TestNPCOutsideNavmeshEvent(evt: TestNPCOutsideNavmeshEvent): Bool
  GetScavengeComponent(): ScavengeComponent
  GetInfluenceComponent(): InfluenceComponent
  GetComfortZoneComponent(): IComponent
  OnSetDeathParams(evt: gameDeathParamsEvent): Bool
  OnSetDeathDirection(evt: gameDeathDirectionEvent): Bool
  PrepareVendor(): void
  IsRipperdoc(): Bool
  RegisterCallbacks(): void
  RegisterCallbacksForReactions(): void
  UnregisterCallbacksForReactions(): void
  OnLookedAtEvent(evt: LookedAtEvent): Bool
  ResolveReactiOnLookedAt(isLookedAt: Bool): void
  TutorialAddIllegalActionFact(): void
  OnAimedAt(value: number): Bool
  OnCyberware(value: number): Bool
  OnMelee(value: number): Bool
  OnCombatGadget(value: number): Bool
  OnNPCStartThrowingGrenadeEvent(evt: NPCThrowingGrenadeEvent): Bool
  PlayVOOnSquadMembers(isPlayer: Bool): void
  PlayVOOnPlayerOrPlayerCompanion(instigator: GameObject): void
  CheckNPCKilledThrowingGrenade(instigator: GameObject): void
  CanGoThroughDoors(): Bool
  OnEnteredPathWithDoors(evt: EnteredPathWithDoors): Bool
  OnFinishedPathWithDoors(evt: FinishedPathWithDoors): Bool
  OnEnteredSplineEvent(evt: EnteredSplineEvent): Bool
  OnExitedSplineEvent(evt: ExitedSplineEvent): Bool
  GetMyKiller(): GameObject
  GetThreatCalculationType(): EAIThreatCalculationType
  ReevaluatEAIThreatCalculationType(): void
  /** @noSelf **/
  SetTemporaryThreatCalculationType(npc: GameObject, newType: EAIThreatCalculationType): void
  /** @noSelf **/
  RemoveTemporaryThreatCalculationType(npc: GameObject): void
  /** @noSelf **/
  IsInCombat(npc: ScriptedPuppet): Bool
  /** @noSelf **/
  IsInAlerted(npc: ScriptedPuppet): Bool
  /** @noSelf **/
  IsUnstoppable(npc: ScriptedPuppet): Bool
  OnAIThreatCalculationEvent(evt: AIThreatCalculationEvent): Bool
  OnHittingPlayer(playerPuppet: GameObject, damageInflicted: number): void
  OnSmartDespawnRequest(evt: SmartDespawnRequest): Bool
  OnCancelSmartDespawnRequest(evt: CancelSmartDespawnRequest): Bool
}

declare interface NPCManager extends IScriptable {

  Init(owner: GameObject): void
  UnInit(owner: GameObject): void
  ApplySpawnGLPs(record: Character_Record): void
  SetNPCAbilities(record: Character_Record): void
  SetNPCVisualTagsStats(record: Character_Record): void
  SetNPCArchetypeData(record: Character_Record): void
  ScaleToPlayer(): void
  SetNPCImmortalityMode(record: Character_Record): void
  ClearNPCImmortalityMode(): void
  GetScannableObjects(arr: ScanningTooltipElementDef[]): void
  /** @noSelf **/
  HasTag(recordID: TweakDBID, tag: CName): Bool
  /** @noSelf **/
  HasVisualTag(puppet: ScriptedPuppet, visualTag: CName): Bool
  /** @noSelf **/
  HasAllVisualTags(puppet: ScriptedPuppet, visualTags: CName[]): Bool
  /** @noSelf **/
  HasAnyVisualTags(puppet: ScriptedPuppet, visualTags: CName[]): Bool
}

declare interface GodModeSystem extends IGodModeSystem {

  AddGodMode(entID: EntityID, gmType: gameGodModeType, sourceInfo: CName): Bool
  RemoveGodMode(entID: EntityID, gmType: gameGodModeType, sourceInfo: CName): Bool
  HasGodMode(entID: EntityID, gmType: gameGodModeType): Bool
  GetGodModeCount(entID: EntityID, gmType: gameGodModeType): number
  GetGodModeSources(entID: EntityID, gmType: gameGodModeType): CName[]
  ClearGodMode(entID: EntityID, sourceInfo: CName): void
  EnableOverride(entID: EntityID, gmType: gameGodModeType, sourceInfo: CName): Bool
  DisableOverride(entID: EntityID, sourceInfo: CName): Bool
}

declare interface ArchetypeData_Record extends TweakDBRecord {

  Type(): ArchetypeType_Record
  StatModifierGroups(outList: StatModifierGroup_Record[]): void
  GetStatModifierGroupsCount(): number
  GetStatModifierGroupsItem(index: number): StatModifierGroup_Record
  StatModifierGroupsContains(item: StatModifierGroup_Record): Bool
  AbilityGroups(outList: GameplayAbilityGroup_Record[]): void
  GetAbilityGroupsCount(): number
  GetAbilityGroupsItem(index: number): GameplayAbilityGroup_Record
  AbilityGroupsContains(item: GameplayAbilityGroup_Record): Bool
  ShootingPatternPackages(outList: AIPatternsPackage_Record[]): void
  GetShootingPatternPackagesCount(): number
  GetShootingPatternPackagesItem(index: number): AIPatternsPackage_Record
  ShootingPatternPackagesContains(item: AIPatternsPackage_Record): Bool
}

declare interface GameplayAbilityGroup_Record extends TweakDBRecord {

  Abilities(outList: GameplayAbility_Record[]): void
  GetAbilitiesCount(): number
  GetAbilitiesItem(index: number): GameplayAbility_Record
  AbilitiesContains(item: GameplayAbility_Record): Bool
}

declare interface PlayerCompanionCacheDataEvent extends Event {

}

declare interface VisibleObjectComponent extends IPlacedComponent {

  GetDetectionMultiplier(): number
}

declare interface ScavengeComponent extends ScriptableComponent {

  OnGameAttach(): void
  OnSenseVisibilityEvent(evt: SenseVisibilityEvent): Bool
  OnScavengeTargetReceived(evt: ScavengeTargetConfirmEvent): Bool
  OnTargetScavenged(evt: TargetScavengedEvent): Bool
  GetScavengeTargets(): GameObject[]
}

declare interface SenseVisibilityEvent extends Event {

}

declare interface DisassembleTargetRequest extends Event {

}

declare interface ScavengeTargetConfirmEvent extends Event {

}

declare interface TargetScavengedEvent extends Event {

}

declare interface InfluenceComponent extends IPlacedComponent {

  IsLineEmpty(startPoint: Vector4, endPoint: Vector4, ignoredObject?: GameObject): gameinfluenceTestLineResult
  IsPositionEmpty(startPoint: Vector4, ignoredObject?: GameObject): gameinfluenceCollisionTestOutcome
  SetReservationRadius(radius: number): void
}

declare interface AttitudeAgent extends GameComponent {

  IsDangerous(other: AttitudeAgent): Bool
  GetAttitudeGroup(): CName
  GetAttitudeTowards(other: AttitudeAgent): EAIAttitude
  SetAttitudeGroup(group: CName): void
  SetAttitudeTowards(agent: AttitudeAgent, attitude: EAIAttitude): void
  SetAttitudeTowardsAgentGroup(targetAgent: AttitudeAgent, ownerAgent: AttitudeAgent, attitude: EAIAttitude): void
}

declare interface PuppetDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface HitHistory extends IScriptable {

  AddHit(evt: gameHitEvent): void
  GetLastDamageTime(object: GameObject, isMelee: Bool): number
  Add(instigator: GameObject, hitTime: number, isMelee: Bool): void
}

declare interface HitHistoryItem {

}

declare interface SubCharacterSystem extends ScriptableSystem {

  OnAttach(): void
  OnRestored(saveVersion: number, gameVersion: number): void
  AddSubCharacter(character: ScriptedPuppet): void
  RemoveSubCharacter(subCharType: gamedataSubCharacter): void
  AddFlathead(): void
  RemoveFlathead(): void
  ShowFlatheadUI(value: Bool): void
  SubCharacterExists(subCharType: gamedataSubCharacter): Bool
  GetSubCharacterIndex(subCharType: gamedataSubCharacter): number
  GetAllSubCharacters(): SSubCharacter[]
  GetSubCharacterPuppet(subCharType: gamedataSubCharacter): ScriptedPuppet
  GetSubCharacterPersistentID(subCharType: gamedataSubCharacter): PersistentID
  GetSubCharacterEquipment(subCharType: gamedataSubCharacter): EquipmentSystemPlayerData
  GetFlathead(): ScriptedPuppet
  GetFlatheadPersistentID(): PersistentID
  GetFlatheadEquipment(): EquipmentSystemPlayerData
  IsFlatheadFollowing(): Bool
  /** @noSelf **/
  GetInstance(gameInstance: GameInstance): SubCharacterSystem
  /** @noSelf **/
  IsFlathead(object: GameObject): Bool
  /** @noSelf **/
  IsSubCharacterSpawned(gameInstance: GameInstance, characterID?: TweakDBID): Bool
  OnAddSubCharacterRequest(request: AddSubCharacterRequest): void
  OnRemoveSubCharacterRequest(request: RemoveSubCharacterRequest): void
  OnSubCharEquipRequest(request: SubCharEquipRequest): void
  OnSubCharEquipRequest(request: SubCharUnequipRequest): void
  OnSpawnUniqueSubCharacterRequest(request: SpawnUniqueSubCharacterRequest): void
  OnSpawnUniquePursuitSubCharacterRequest(request: SpawnUniquePursuitSubCharacterRequest): void
  OnDespawnUniqueSubCharacterRequest(request: DespawnUniqueSubCharacterRequest): void
  OnSpawnSubCharacterRequest(request: SpawnSubCharacterRequest): void
  OnDespawnSubCharacterRequest(request: DespawnSubCharacterRequest): void
  /** @noSelf **/
  DespawnRequest(gameInstance: GameInstance, characterID?: TweakDBID): Bool
  /** @noSelf **/
  CancelDespawnRequest(gameInstance: GameInstance, characterID?: TweakDBID): Bool
}

declare interface SubCharacter_Record extends Character_Record {

  EnumComment(): string
  StartingEquippedItems(outList: Item_Record[]): void
  GetStartingEquippedItemsCount(): number
  GetStartingEquippedItemsItem(index: number): Item_Record
  StartingEquippedItemsContains(item: Item_Record): Bool
  ReferenceName(): CName
  EnumName(): CName
  IsPrevention(): Bool
  Type(): gamedataSubCharacter
}

declare interface SSubCharacter {

}

declare interface CompanionSystem extends ICompanionSystem {

  SpawnSubcharacter(recordID: TweakDBID, offset: number, offsetDir: Vector3): void
  SpawnSubcharacterOnPosition(recordID: TweakDBID, pos: Vector3): void
  DespawnSubcharacter(recordID: TweakDBID): void
  DespawnAll(): void
  GetSpawnedEntities(entities: Entity[], recordID?: TweakDBID): void
}

declare interface SSlotInfo {

}

declare interface EquipRequest extends PlayerScriptableSystemRequest {

}

declare interface UIInGameNotificationEvent extends Event {

  /** @noSelf **/
  CreateSavingLockedEvent(locks: gameSaveLock[]): UIInGameNotificationEvent
}

declare interface gameSaveLock {

}

declare interface ScriptsDebugOverlaySystem extends gameIScriptsDebugOverlaySystem {

  CreateSink(): SDOSink
}

declare interface SSlotActiveItems {

}

declare interface SDOSink {

  /** @noSelf **/
  SetRoot(sink: SDOSink, rootPath: string): void
  /** @noSelf **/
  SetKeyColor(sink: SDOSink, key: string, color: Color): void
  /** @noSelf **/
  PushName(sink: SDOSink, key: string, value: CName): void
  /** @noSelf **/
  PushString(sink: SDOSink, key: string, value: string): void
  /** @noSelf **/
  PushVector4(sink: SDOSink, key: string, value: Vector4): void
  /** @noSelf **/
  PushVector2(sink: SDOSink, key: string, value: Vector2): void
  /** @noSelf **/
  PushQuaternion(sink: SDOSink, key: string, value: Quaternion): void
  /** @noSelf **/
  PushFloat(sink: SDOSink, key: string, value: number): void
  /** @noSelf **/
  PushInt32(sink: SDOSink, key: string, value: number): void
  /** @noSelf **/
  PushUint32(sink: SDOSink, key: string, value: number): void
  /** @noSelf **/
  PushBool(sink: SDOSink, key: string, value: Bool): void
  /** @noSelf **/
  ClearKey(sink: SDOSink, key: string): void
  /** @noSelf **/
  RegisterListener_OnClicked(sink: SDOSink, system: ScriptableSystem, key: string): CName
  /** @noSelf **/
  UnregisterListener_OnClicked(sink: SDOSink, system: ScriptableSystem, fullPath: CName): void
}

declare interface SLastUsedWeapon {

}

declare interface EquipmentSystemWeaponManipulationRequest extends PlayerScriptableSystemRequest {

}

declare interface DPadUIData_Record extends TweakDBRecord {

  RestrictionTags(): CName[]
  GetRestrictionTagsCount(): number
  GetRestrictionTagsItem(index: number): CName
  RestrictionTagsContains(item: CName): Bool
}

declare interface ItemActionsHelper extends IScriptable {

  /** @noSelf **/
  ConsumeItem(executor: GameObject, itemID: ItemID, fromInventory: Bool): void
  /** @noSelf **/
  EatItem(executor: GameObject, itemID: ItemID, fromInventory: Bool): void
  /** @noSelf **/
  DrinkItem(executor: GameObject, itemID: ItemID, fromInventory: Bool): void
  /** @noSelf **/
  LearnItem(executor: GameObject, itemID: ItemID, fromInventory: Bool): void
  /** @noSelf **/
  DropItem(executor: GameObject, itemID: ItemID): void
  /** @noSelf **/
  DisassembleItem(executor: GameObject, itemID: ItemID): void
  /** @noSelf **/
  DisassembleItem(executor: GameObject, itemID: ItemID, quantity: number): void
  /** @noSelf **/
  ReadItem(executor: GameObject, itemID: ItemID): void
  /** @noSelf **/
  CrackItem(executor: GameObject, itemID: ItemID): void
  /** @noSelf **/
  DownloadFunds(executor: GameObject, itemID: ItemID): void
  /** @noSelf **/
  UseItem(executor: GameObject, itemID: ItemID): void
  /** @noSelf **/
  EquipItem(executor: GameObject, itemID: ItemID): void
  /** @noSelf **/
  PerformItemAction(executor: GameObject, itemID: ItemID): void
  /** @noSelf **/
  GetConsumeAction(itemID: ItemID): ObjectAction_Record
  /** @noSelf **/
  GetEatAction(itemID: ItemID): ObjectAction_Record
  /** @noSelf **/
  GetDrinkAction(itemID: ItemID): ObjectAction_Record
  /** @noSelf **/
  GetLearnAction(itemID: ItemID): ObjectAction_Record
  /** @noSelf **/
  GetDownloadFunds(itemID: ItemID): ObjectAction_Record
  /** @noSelf **/
  GetReadAction(itemID: ItemID): ObjectAction_Record
  /** @noSelf **/
  GetDisassembleAction(itemID: ItemID): ObjectAction_Record
  /** @noSelf **/
  GetDropAction(itemID: ItemID): ObjectAction_Record
  /** @noSelf **/
  GetUseAction(itemID: ItemID): ObjectAction_Record
  /** @noSelf **/
  GetCrackAction(itemID: ItemID): ObjectAction_Record
  /** @noSelf **/
  GetEquipAction(itemID: ItemID): ObjectAction_Record
  /** @noSelf **/
  GetItemCustomAction(itemID: ItemID): ObjectAction_Record
  /** @noSelf **/
  GetItemActionByType(itemID: ItemID, type: CName): ObjectAction_Record
  /** @noSelf **/
  ProcessItemAction(gi: GameInstance, executor: GameObject, itemData: gameItemData, actionID: TweakDBID, fromInventory: Bool): void
  /** @noSelf **/
  ProcessItemAction(gi: GameInstance, executor: GameObject, itemData: gameItemData, actionID: TweakDBID, fromInventory: Bool, quantity: number): void
  /** @noSelf **/
  SetupItemAction(gi: GameInstance, executor: GameObject, itemData: gameItemData, actionID: TweakDBID, fromInventory: Bool): BaseItemAction
}

declare interface BaseItemAction extends BaseScriptableAction {

  ShouldRemoveAfterUse(): Bool
  GetItemData(): gameItemData
  SetRemoveAfterUse(): void
  SetItemData(item: gameItemData): void
  GetItemType(): gamedataItemType
  SetRequestQuantity(quantity: number): void
  GetRequestQuantity(): number
}

declare interface UseAction extends BaseItemAction {

  IsPossible(target: GameObject, actionRecord?: ObjectAction_Record, objectActionsCallbackController?: gameObjectActionsCallbackController): Bool
}

declare interface ConsumeAction extends BaseItemAction {

  CompleteAction(gameInstance: GameInstance): void
  RemoveConsumableItem(gameInstance: GameInstance): void
  ShouldEquipAnotherConsumable(): Bool
  TryToEquipSameTypeConsumable(): void
  ProcessStatusEffects(actionEffects: ObjectActionEffect_Record[], gameInstance: GameInstance): void
  NotifyAutocraftSystem(gameInstance: GameInstance): void
  IsVisible(context: GetActionsContext, objectActionsCallbackController: gameObjectActionsCallbackController): Bool
}

declare interface ConsumableItem_Record extends Item_Record {

  ConsumableType(): ConsumableType_Record
  ConsumableBaseName(): ConsumableBaseName_Record
  AtlasIcon(): CName
  RemovePoint(): number
  ReturnBlendDuration(): number
  CastPoint(): number
  InitBlendDuration(): number
  CycleDuration(): number
}

declare interface ConsumableType_Record extends TweakDBRecord {

  EnumName(): CName
  EnumComment(): CName
  Type(): gamedataConsumableType
}

declare interface ItemModParams {

}

declare interface GameplayEquipRequest extends PlayerScriptableSystemRequest {

}

declare interface SPaperdollEquipData {

}

declare interface RemoveConsumableDelayedEvent extends Event {

}

declare interface AutocraftSystem extends ScriptableSystem {

  OnSystemActivate(request: AutocraftActivateRequest): void
  OnSystemDeactivate(request: AutocraftDeactivateRequest): void
  OnCycleEnd(request: AutocraftEndCycleRequest): void
  GetItemsToAutocraft(): ItemID[]
  OnItemUsed(request: RegisterItemUsedRequest): void
}

declare interface AutocraftEndCycleRequest extends ScriptableSystemRequest {

}

declare interface AutocraftDeactivateRequest extends ScriptableSystemRequest {

}

declare interface RegisterItemUsedRequest extends ScriptableSystemRequest {

}

declare interface ConsumableBaseName_Record extends TweakDBRecord {

  EnumName(): CName
  EnumComment(): CName
  Type(): gamedataConsumableBaseName
}

declare interface StatusEffect extends StatusEffectBase {

  GetRecord(): StatusEffect_Record
  GetInitialApplicationSimTimestamp(): EngineTime
  GetLastApplicationSimTimestamp(): EngineTime
  GetRemainingDuration(): number
  GetMaxStacks(): number
  GetStackCount(): number
  GetInstigatorStaticDataID(): TweakDBID
  GetInstigatorEntityID(): EntityID
  GetDirection(): Vector4
}

declare interface LearnAction extends ConsumeAction {

}

declare interface DisassembleAction extends BaseItemAction {

  CompleteAction(gameInstance: GameInstance): void
}

declare interface DisassembleItemRequest extends PlayerScriptableSystemRequest {

}

declare interface DropAction extends BaseItemAction {

  CompleteAction(gameInstance: GameInstance): void
}

declare interface TelemetrySystem extends ITelemetrySystem {

  LogDamageDealt(damage: TelemetryDamageDealt): void
  LogPlayerInDangerousArea(dangerous: Bool): void
  LogNumberOfCombatants(numberOfCombatants: number): void
  LogEnemyDown(telemetryEnemyDown: TelemetryEnemyDown): void
  LogPlayerReachedCriticalHealth(healthIsCritical: Bool): void
  LogPlayerDeathEvent(evt: gameDeathEvent): void
  LogLevelGained(evt: TelemetryLevelGained): void
  LogDistrictChanged(districtName: string, isNew: Bool): void
  LogRewardGiven(rewardName: CName, rewardTDBID: TweakDBID, rewardMoney: number): void
  LogAttributeUpgraded(attributeType: gamedataStatType, lvl: number): void
  LogPerkUpgraded(perkUpgraded: gamedataPerkType, lvl: number): void
  LogPartInstalled(modifiedItem: TelemetryInventoryItem, itemPart: TelemetryInventoryItem, slotID: TweakDBID): void
  LogInventoryMenuClosed(): void
  LogQuickHack(telemetryQuickHack: TelemetryQuickHack): void
  LogTakedown(takedownAction: CName, target: GameObject): void
  LogItemTransaction(buyer: GameObject, seller: GameObject, telemetryInventoryItem: TelemetryInventoryItem, pricePerItem: number, itemQuantity: number, totalPrice: number): void
  LogVendorMenuState(vendorid: TweakDBID, isOpening: Bool): void
  LogSkillbookUsed(telemetryInventoryItem: TelemetryInventoryItem): void
  LogItemAcquired(itemTDBID: TweakDBID, meanOfAcquisition: string): void
  LogItemDrop(owner: GameObject, itemID: ItemID): void
  LogItemCrafting(telemetryInventoryItem: TelemetryInventoryItem, craftingAction: CName): void
  LogItemDisassembled(telemetryInventoryItem: TelemetryInventoryItem): void
  LogItemReward(owner: GameObject, itemID: ItemID): void
  LogDamageByVehicle(hitEvent: gameHitEvent): void
  LogXPReward(xpRecordID: TweakDBID, amount: number, type: gamedataProficiencyType): void
  LogDevPointsAddedFromReward(addDevPointEffectorTDBID: TweakDBID, amount: number, type: gamedataDevelopmentPointType): void
  OnSettingsSave(): void
  LogBraindanceReset(): void
  LogLastCheckpointLoaded(): void
}

declare interface DropInstruction {

  /** @noSelf **/
  Create(itemID: ItemID, quantity?: number): DropInstruction
}

declare interface LootManager extends ILootManager {

  GenerateLoot(lootID: TweakDBID, itemList: ItemModParams[]): void
  SpawnItemDrop(obj: GameObject, itemID: ItemID, position?: Vector4, rotation?: Quaternion): Bool
  SpawnItemDropOfManyItems(obj: GameObject, itemInstructions: DropInstruction[], dropItemName?: CName, position?: Vector4, rotation?: Quaternion): Bool
  SpawnThrowableItemDrop(obj: GameObject, itemID: ItemID, position: Vector4, rotation: Quaternion, params: ParabolicTrajectoryParams): Bool
  GetDefaultDropItemName(): CName
}

declare interface Transform {

  /** @noSelf **/
  Create(position: Vector4, orientation?: Quaternion): Transform
  /** @noSelf **/
  TransformPoint(xform: Transform, v: Vector4): Vector4
  /** @noSelf **/
  TransformVector(xform: Transform, v: Vector4): Vector4
  /** @noSelf **/
  ToEulerAngles(xform: Transform): EulerAngles
  /** @noSelf **/
  ToMatrix(xform: Transform): Matrix
  /** @noSelf **/
  GetForward(xform: Transform): Vector4
  /** @noSelf **/
  GetRight(xform: Transform): Vector4
  /** @noSelf **/
  GetUp(xform: Transform): Vector4
  /** @noSelf **/
  GetPitch(xform: Transform): number
  /** @noSelf **/
  GetYaw(xform: Transform): number
  /** @noSelf **/
  GetRoll(xform: Transform): number
  /** @noSelf **/
  SetIdentity(xform: Transform): void
  /** @noSelf **/
  SetInverse(xform: Transform): void
  /** @noSelf **/
  GetInverse(xform: Transform): Transform
  /** @noSelf **/
  GetPosition(xform: Transform): Vector4
  /** @noSelf **/
  GetOrientation(xform: Transform): Quaternion
  /** @noSelf **/
  SetPosition(xform: Transform, v: Vector4): void
  /** @noSelf **/
  SetOrientation(xform: Transform, quat: Quaternion): void
  /** @noSelf **/
  SetOrientationEuler(xform: Transform, euler: EulerAngles): void
  /** @noSelf **/
  SetOrientationFromDir(xform: Transform, direction: Vector4): void
}

declare interface ReadAction extends BaseItemAction {

  CompleteAction(gameInstance: GameInstance): void
  GetJournalEntryFromAction(): string
  /** @noSelf **/
  GetJournalEntryFromAction(actionID: TweakDBID): string
  IsVisible(context: GetActionsContext, objectActionsCallbackController?: gameObjectActionsCallbackController): Bool
}

declare interface JournalEntry extends IScriptable {

  GetId(): string
  GetEditorName(): string
}

declare interface JournalManager extends IJournalManager {

  GetQuests(context: JournalRequestContext, entries: JournalEntry[]): void
  GetMetaQuests(context: JournalRequestContext, entries: JournalEntry[]): void
  GetContacts(context: JournalRequestContext, entries: JournalEntry[]): void
  GetFlattenedMessagesAndChoices(contactEntry: JournalEntry, messages: JournalEntry[], choiceEntries: JournalEntry[]): void
  GetMessagesAndChoices(conversationEntry: JournalEntry, messages: JournalEntry[], choiceEntries: JournalEntry[]): void
  GetConversations(contactEntry: JournalEntry, conversations: JournalEntry[]): void
  GetTarots(context: JournalRequestContext, entries: JournalEntry[]): void
  GetInternetSites(context: JournalRequestContext, entries: JournalEntry[]): void
  GetInternetPages(context: JournalRequestContext, entries: JournalEntry[]): void
  GetMainInternetPage(siteEntry: JournalInternetSite): JournalInternetPage
  GetCodexCategories(context: JournalRequestContext, entries: JournalEntry[]): void
  GetOnscreens(context: JournalRequestContext, entries: JournalOnscreensStructuredGroup[]): void
  GetBriefings(context: JournalRequestContext, entries: JournalEntry[]): void
  GetChildren(parentEntry: JournalEntry, filter: JournalRequestStateFilter, childEntries: JournalEntry[]): void
  GetRandomChildren(parentEntry: JournalEntry, filter: JournalRequestStateFilter, childCount: number, childEntries: JournalEntry[]): void
  GetParentEntry(childEntry: JournalEntry): JournalEntry
  GetEntry(hash: number): JournalEntry
  GetEntryByString(uniquePath: string, className: string): JournalEntry
  GetEntryState(entry: JournalEntry): gameJournalEntryState
  GetEntryTimestamp(entry: JournalEntry): GameTime
  IsEntryVisited(entry: JournalEntry): Bool
  SetEntryVisited(entry: JournalEntry, value: Bool): void
  GetEntryHash(entry: JournalEntry): number
  GetTrackedEntry(): JournalEntry
  IsEntryTracked(entry: JournalEntry): Bool
  TrackEntry(entry: JournalEntry): void
  TrackPrevNextEntry(next: Bool): void
  ChangeEntryState(uniquePath: string, className: string, state: gameJournalEntryState, notifyOption: JournalNotifyOption): Bool
  ChangeEntryStateByHash(hash: number, state: gameJournalEntryState, notifyOption: JournalNotifyOption): void
  HasAnyDelayedStateChanges(): Bool
  GetObjectiveCurrentCounter(entry: JournalQuestObjective): number
  GetObjectiveTotalCounter(entry: JournalQuestObjective): number
  GetMetaQuestData(metaQuestId: gamedataMetaQuest): JournalMetaQuestScriptedData
  GetDistrict(entry: JournalEntry): District_Record
  GetRecommendedLevel(entry: JournalEntry): number
  GetDistanceToNearestMappin(entry: JournalQuestObjective): number
  GetPointOfInterestMappinHashFromQuestHash(hash: number): number
  RegisterScriptCallback(obj: IScriptable, functionName: CName, type: gameJournalListenerType): void
  UnregisterScriptCallback(obj: IScriptable, functionName: CName): void
  DebugShowAllPoiMappins(): void
  CreateScriptedQuestFromTemplate(templateQuestEntryId: string, uniqueId: string, title: string): Bool
  DeleteScriptedQuest(templateQuestEntryId: string, uniqueId: string): Bool
  SetScriptedQuestEntryState(templateQuestEntryId: string, uniqueId: string, templatePhaseAndObjectivePath: string, state: gameJournalEntryState, notifyOption: JournalNotifyOption, track: Bool): void
  SetScriptedQuestObjectiveDescription(templateQuestEntryId: string, uniqueId: string, templatePhaseAndObjectivePath: string, description: string): Bool
  SetScriptedQuestMappinEntityID(templateQuestEntryId: string, uniqueId: string, templatePhaseObjectiveAndMappinPath: string, entityID: EntityID): Bool
  SetScriptedQuestMappinSlotName(templateQuestEntryId: string, uniqueId: string, templatePhaseObjectiveAndMappinPath: string, recordID: TweakDBID): Bool
  SetScriptedQuestMappinData(templateQuestEntryId: string, uniqueId: string, templatePhaseObjectiveAndMappinPath: string, mappinData: MappinData): Bool
  OnQuestEntryTracked(entry: JournalEntry): Bool
  OnQuestEntryUntracked(entry: JournalEntry): Bool
  GetContactDataArray(includeUnknown: Bool): IScriptable[]
  IsAttachedToAnyActiveQuest(hash: number): Bool
  IsAttachedToTrackedObjective(hash: number): Bool
}

declare interface JournalContainerEntry extends JournalEntry {

}

declare interface JournalFileEntry extends JournalContainerEntry {

}

declare interface JournalQuestObjectiveBase extends JournalContainerEntry {

  GetDescription(): string
  HasCounter(): Bool
  IsOptional(): Bool
  GetItemID(): TweakDBID
}

declare interface JournalQuest extends JournalFileEntry {

  GetTitle(journalManager: IJournalManager): string
  GetType(): gameJournalQuestType
  GetRecommendedLevel(): number
  GetRecommendedLevelID(): TweakDBID
}

declare interface JournalQuestObjective extends JournalQuestObjectiveBase {

}

declare interface JournalRequestStateFilter {

}

declare interface JournalRequestContext {

  /** @noSelf **/
  CreatePlayerLevelBasedQuestRequestFilter(self: JournalRequestContext, gameInstance: GameInstance, percentMargin: number): void
  /** @noSelf **/
  CreateQuestTypeRequestFilter(self: JournalRequestContext, gameInstance: GameInstance, includeMainQuests: Bool, includeSideQuests: Bool, includeStreetStories: Bool, includeContracts: Bool): void
  /** @noSelf **/
  CreateQuestDistanceRequestFilter(self: JournalRequestContext, gameInstance: GameInstance, distance: number): void
}

declare interface JournalQuestCodexLink extends JournalEntry {

  GetLinkPathHash(): number
}

declare interface JournalContact extends JournalFileEntry {

  GetLocalizedName(journalManager: IJournalManager): string
  IsKnown(journalManager: IJournalManager): Bool
  GetAvatarID(journalManager: IJournalManager): TweakDBID
  GetType(): gameContactType
  ShouldUseFlatMessageLayout(): Bool
}

declare interface ContactData extends IScriptable {

}

declare interface JournalPhoneMessage extends JournalEntry {

  GetText(): string
  GetSender(): gameMessageSender
  GetAttachmentPathHash(): number
  GetImageID(): TweakDBID
}

declare interface JournalPhoneChoiceEntry extends JournalEntry {

  GetText(): string
  IsQuestImportant(): Bool
}

declare interface QuestLogUtils extends IScriptable {

  /** @noSelf **/
  GetDefaultFilter(): JournalRequestStateFilter
  /** @noSelf **/
  GetObjectiveFilter(): JournalRequestStateFilter
  /** @noSelf **/
  GetSuccessFilter(): JournalRequestStateFilter
  /** @noSelf **/
  GetFailedFilter(): JournalRequestStateFilter
  /** @noSelf **/
  UnpackRecursiveWithFilter(journalManager: JournalManager, entry: JournalContainerEntry, filter: JournalRequestStateFilter, result: JournalEntry[], includeInactive?: Bool): void
  /** @noSelf **/
  UnpackRecursive(journalManager: JournalManager, entry: JournalContainerEntry, result: JournalEntry[]): void
  /** @noSelf **/
  Unpack(journalManager: JournalManager, entry: JournalContainerEntry, filter: JournalRequestStateFilter): JournalEntry[]
  /** @noSelf **/
  GetDescriptions(journalManager: JournalManager, entry: JournalContainerEntry): JournalQuestDescription[]
  /** @noSelf **/
  GetLevelState(playerLevel: number, targetLevel: number): CName
  /** @noSelf **/
  GetThreatText(playerLevel: number, targetLevel: number): string
}

declare interface JournalQuestMapPinBase extends JournalContainerEntry {

  GetCaption(): string
}

declare interface JournalQuestDescription extends JournalEntry {

  GetDescription(): string
}

declare interface JournalOnscreen extends JournalEntry {

  GetTitle(): string
  GetDescription(): string
  GetIconID(): TweakDBID
}

declare interface NotifyShardRead extends Event {

}

declare interface CrackAction extends BaseItemAction {

  CompleteAction(gameInstance: GameInstance): void
}

declare interface CrackAction_Record extends ItemAction_Record {

  Effector(): Effector_Record
}

declare interface EquipAction extends BaseItemAction {

  CompleteAction(gameInstance: GameInstance): void
  IsVisible(context: GetActionsContext, objectActionsCallbackController?: gameObjectActionsCallbackController): Bool
}

declare interface DownloadFundsAction extends BaseItemAction {

}

declare interface StatsObjectID {

  /** @noSelf **/
  IsDefined(id: StatsObjectID): Bool
  /** @noSelf **/
  IsDynamic(id: StatsObjectID): Bool
  /** @noSelf **/
  IsEntity(id: StatsObjectID): Bool
  /** @noSelf **/
  ExtractEntityID(id: StatsObjectID): EntityID
}

declare interface EquipmentManipulationRequest extends IScriptable {

}

declare interface PSMPostponedParameterScriptable extends PSMPostponedParameterBase {

}

declare interface UI_HotkeysDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface ResetItemAppearanceEvent extends Event {

}

declare interface SVisualTagProcessing {

}

declare interface gameuiICharacterCustomizationSystem extends IGameSystem {

  IsTransgenderAllowed(): Bool
  IsNudityAllowed(): Bool
  InitializeState(): Bool
  FinalizeState(): Bool
  ClearState(): Bool
  GetState(): gameuiICharacterCustomizationState
  GetHeadOptions(presetName?: CName): CharacterCustomizationOption[]
  GetBodyOptions(presetName?: CName): CharacterCustomizationOption[]
  GetArmsOptions(presetName?: CName): CharacterCustomizationOption[]
  GetUnitedOptions(head: Bool, body: Bool, arms: Bool, headPreset?: CName, bodyPreset?: CName, armsPreset?: CName): CharacterCustomizationOption[]
  RandomizeOptions(): void
  ApplyUIPreset(presetName: CName): void
  ApplyChangeToOption(option: CharacterCustomizationOption, newValue: number): void
  TriggerVoiceToneSample(): void
  HasCharacterCustomizationComponent(entity: Entity): Bool
}

declare interface gameuiICharacterCustomizationState extends IScriptable {

  IsBodyGenderMale(): Bool
  SetIsBodyGenderMale(isMale: Bool): void
  IsBrainGenderMale(): Bool
  SetIsBrainGenderMale(isMale: Bool): void
  GetLifePath(): TweakDBID
  SetLifePath(lifepath: TweakDBID): void
  GetAttributePointsAvailable(): number
  SetAttributePointsAvailable(value: number): void
  GetAttribute(type: gamedataStatType): number
  SetAttribute(type: gamedataStatType, value: number): void
  GetAttributes(): CharacterCustomizationAttribute[]
  HasOption(groupName: CName, optionName: CName, isFPP: Bool): Bool
  HasTag(tag: CName): Bool
}

declare interface AudioNotifyItemUnequippedEvent extends Event {

}

declare interface EquipmentMovementSound_Record extends TweakDBRecord {

  AudioMovementName(): CName
  Priority(): number
}

declare interface AICommand extends IScriptable {

  Copy(): AICommand
  GetCategory(): CName
  SetCategory(value: CName): void
}

declare interface AIFollowerRole extends AIRole {

  OnFriendlyTargetWeaponChange(itemID: ItemID): void
  OnOwnerWeaponChange(itemID: ItemID): void
  UpdateSpatialsMultiplier(): void
  GetFollowerRef(): EntityReference
  FindFollowTarget(owner: GameObject, followTarget: GameObject): Bool
  GetRoleEnum(): EAIRole
  GetTweakRecordId(): TweakDBID
  OnRoleSet(owner: GameObject): void
  OnRoleCleared(owner: GameObject): void
  ChangeAttitude(owner: GameObject, ownAttitudeAgent: AttitudeAgent, followTarget: GameObject): Bool
  RegisterToPlayerCombat(owner: ScriptedPuppet, player: PlayerPuppet): void
  UnregisterToPlayerCombat(owner: ScriptedPuppet, player: PlayerPuppet): void
  JoinFollowTargetSquads(owner: ScriptedPuppet): void
  LeaveFollowTargetSquads(owner: ScriptedPuppet): void
  SetFollowTarget(followTarget: GameObject): void
  GetFollowTarget(): GameObject
  OnHighLevelStateEnter(owner: GameObject, newState: gamedataNPCHighLevelState, previousState: gamedataNPCHighLevelState): void
  OnHighLevelStateExit(owner: GameObject, leftState: gamedataNPCHighLevelState, nextState: gamedataNPCHighLevelState): void
}

declare interface AttachmentSlotsScriptCallback extends IScriptable {

  OnItemEquipped(slotID: TweakDBID, itemID: ItemID): void
  OnItemUnequipped(slotID: TweakDBID, itemID: ItemID): void
  OnAttachmentRefreshed(slotID: TweakDBID, itemID: ItemID): void
}

declare interface SenseComponent extends IPlacedComponent {

  SetHearingEnabled(enabled: Bool): void
  IsHearingEnabled(): Bool
  IsAgentVisible(object: GameObject): Bool
  GetVisibilityTraceEndToAgentDist(object: GameObject): number
  GetDetection(entityID: EntityID): number
  SetDetectionFactor(detection: number, shapeName?: CName): Bool
  SetDetectionCoolDown(coolDown: number): void
  SetDetectionDropFactor(detectionDrop: number): void
  SetDetectionMinRange(range: number): Bool
  UsePreset(presetID: TweakDBID): Bool
  GetCurrentPreset(): TweakDBID
  AddDetection(target: SenseComponent, detection: number): Bool
  GetSenseShapes(): ISenseShape[]
  HasDetectionOverwrite(entityID: EntityID): Bool
  SetDetectionOverwrite(entityID: EntityID): void
  RemoveDetectionOverwrite(entityID: EntityID): Bool
  HasDetectionAttitudeOverwrite(attitudeGroup: CName): Bool
  SetDetectionAttitudeOverwrite(attitudeGroup: CName): void
  RemoveDetectionAttitudeOverwrite(attitudeGroup: CName): Bool
  GetDetectionMultiplier(entityID: EntityID): number
  SetDetectionMultiplier(entityID: EntityID, multiplier: number): void
  CreateSenseMappin(): void
  CreateHearingMappin(): void
  RemoveSenseMappin(): void
  RequestRemovingSenseMappin(): void
  RemoveHearingMappin(): void
  HasSenseMappin(): Bool
  HasHearingMappin(): Bool
  SetSensorObjectType(objectType: gamedataSenseObjectType): Bool
  SetVisibleObjectType(objectType: gamedataSenseObjectType): Bool
  GetTimeSinceLastEntityVisible(entityID: EntityID): number
  SetMainTrackedObject(target: GameObject): Bool
  SetMainTrackedObjectTraceZOffset(traceType: AdditionalTraceType, zOffset: number): Bool
  GetDistToTraceEndFromPosToMainTrackedObject(traceType: AdditionalTraceType): number
  SetForcedSensesTracing(targetObjectType: gamedataSenseObjectType, attitudeToTarget: EAIAttitude): Bool
  RemoveForcedSensesTracing(targetObjectType: gamedataSenseObjectType, attitudeToTarget: EAIAttitude): Bool
  SetTickDistanceOverride(overrideDistance: number): Bool
  SetHasPierceableWapon(hasTechWeapon: Bool): Bool
  ToggleComponent(condition: Bool): void
  ToggleSenses(condition: Bool): void
  GetOwner(): GameObject
  GetOwnerDevice(): SensorDevice
  GetOwnerPuppet(): ScriptedPuppet
  /** @noSelf **/
  RequestMainPresetChange(obj: GameObject, presetName: string): void
  /** @noSelf **/
  RequestSecondaryPresetChange(obj: GameObject, presetName: string): void
  /** @noSelf **/
  RequestSecondaryPresetChange(obj: GameObject, presetID: TweakDBID): void
  /** @noSelf **/
  ResetPreset(obj: GameObject): void
  /** @noSelf **/
  RequestPresetChange(obj: GameObject, presetID: TweakDBID, mainPreset: Bool): void
  OnSensePresetChangeEvent(evt: SensePresetChangeEvent): Bool
  OnInitialize(evt: SenseInitializeEvent): Bool
  OnDetach(): void
  OnHighLevelChanged(value: number): Bool
  OnDeath(evt: gameDeathEvent): Bool
  OnDefeated(evt: DefeatedEvent): Bool
  OnResurrect(evt: ResurrectEvent): Bool
  OnReactionChanged(value: number): Bool
  OnTargetAssessmentRequest(evt: TargetAssessmentRequest): Bool
  OnSenseEnabledEvent(evt: SenseEnabledEvent): Bool
  OnSenseVisibilityEvent(evt: SenseVisibilityEvent): Bool
  PlayerEnteredPerception(player: PlayerPuppet): void
  PlayerExitedPercpetion(player: PlayerPuppet): void
  OnPlayerTakedownStateChange(takedownState: number): void
  OnPlayerUpperBodyStateChange(upperBodyState: number): void
  OnPlayerCarryingStateChange(carrying: Bool): void
  OnDetectedEvent(evt: OnDetectedEvent): Bool
  OnDetectionReachedZero(evt: OnRemoveDetection): Bool
  OnAttitudeChanged(evt: AttitudeChangedEvent): Bool
  OnAttitudeGroupChanged(evt: AttitudeGroupChangedEvent): Bool
  OnSuspiciousObjectEvent(evt: SuspiciousObjectEvent): Bool
  OnStatusEffectApplied(evt: ApplyStatusEffectEvent): Bool
  OnSecurityAreaCrossingPerimeter(evt: SecurityAreaCrossingPerimeter): Bool
  /** @noSelf **/
  RequestDetectionOverwriteReevaluation(obj: GameObject, target: Entity, delay?: number): void
  OnReevaluateDetectionOverwriteEvent(evt: ReevaluateDetectionOverwriteEvent): Bool
  GetGame(): GameInstance
  IsTargetPlayer(target: GameObject): Bool
  /** @noSelf **/
  ShouldIgnoreIfPlayerCompanion(owner: Entity, target: Entity): Bool
  GetSecuritySystem(): SecuritySystemControllerPS
  IsTargetInterestingForSecuritySystem(target: GameObject): Bool
  RefreshCombatDetectionMultiplier(target: ScriptedPuppet): void
  IsTargetInteresting(target: GameObject): Bool
  IsPlayerRecentlyDroppedThreat(target: GameObject): Bool
  IsOwnerHostileTowardsPlayer(): Bool
  IsOwnerHostileTowardsTarget(target: GameObject): Bool
  IsOwnerFriendlyTowardsPlayer(): Bool
  IsOwnerFriendlyTowardsTarget(target: GameObject): Bool
  InitDetectionOverwrite(): void
  ReevaluateDetectionOverwrite(target: GameObject, isVisible?: Bool): Bool
  ShouldStartDetecting(target: GameObject): Bool
  ShouldStartDetectingPlayer(player: PlayerPuppet): Bool
  SendDetectionRiseEvent(target: GameObject, isVisible: Bool): void
  OnHACK_UseSensePresetEvent(evt: HACK_UseSensePresetEvent): Bool
}

declare interface ExplosiveDevice extends BasicDistractionDevice {

  OnGameAttached(): Bool
  OnDetach(): Bool
  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  GetController(): ExplosiveDeviceController
  GetDevicePS(): ExplosiveDeviceControllerPS
  OnDeath(evt: gameDeathEvent): Bool
  GetAttackRange(attackTDBID: TweakDBID): number
  StartExplosionPipeline(instigator: GameObject, additionalDelays?: number): void
  OnExplosiveDeviceDelayedEvent(evt: ExplosiveDeviceDelayedEvent): Bool
  Explode(index: number, instigator: GameObject): void
  DoPhysicsPulse(damageType: TweakDBID): void
  Explosion(index: number): void
  OnExplosiveDeviceHideDeviceEvent(evt: ExplosiveDeviceHideDeviceEvent): Bool
  DoAttack(damageType: TweakDBID, instigator?: GameObject): void
  DoAdditionalGameEffect(additionalGameEffect: EExplosiveAdditionalGameEffectType): void
  ToggleVisibility(visible: Bool): void
  SendSwapMeshDelayedEvent(delay: number): void
  OnSwapMeshDelayedEvent(evt: SwapMeshDelayedEvent): Bool
  KillAllFxInstances(): void
  SpawnVFXs(fxEventName: CName[]): Bool
  SpawnVFXs(fx: FxResource, newPosition?: Vector4, hitDirection?: Vector4): void
  CreateFxInstance(resource: FxResource, transform: WorldTransform): FxInstance
  OnSpiderbotExplodeExplosiveDevicePerformed(evt: SpiderbotExplodeExplosiveDevicePerformed): Bool
  OnSpiderbotDistractExplosiveDevicePerformed(evt: SpiderbotDistractExplosiveDevicePerformed): Bool
  OnQuestForceDetonate(evt: QuestForceDetonate): Bool
  OnForceDetonate(evt: ForceDetonate): Bool
  OnQuickHackExplodeExplosive(evt: QuickHackExplodeExplosive): Bool
  OnQuickHackDistractExplosive(evt: QuickHackDistractExplosive): Bool
  TurnOffDevice(): void
  TurnOnDevice(): void
  ToggleComponentsON_OFF(visible: Bool): void
  ToggleLightsON_OFF(on: Bool): void
  StartDistraction(loopAnimation?: Bool): void
  StopDistraction(): void
  DeterminGameplayRole(): EGameplayRole
  DeterminGameplayRoleMappinRange(data: SDeviceMappinData): number
  OnHit(evt: gameHitEvent): Bool
  OnDamageReceived(evt: gameDamageReceivedEvent): Bool
  InitializeHealthDecay(health: number, delay: number): void
  BroadcastEnvironmentalHazardStimuli(): void
  RemoveEnvironmentalHazardStimuli(): void
  IsExplosive(): Bool
  CanOverrideNetworkContext(): Bool
  HasImportantInteraction(): Bool
  HasAnyDirectInteractionActive(): Bool
  GetCurrentOutline(): EFocusOutlineType
  GetDefaultHighlight(): FocusForcedHighlightData
}

declare interface ExplosiveDeviceControllerPS extends BasicDistractionDeviceControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  GameAttached(): void
  PushPersistentData(): void
  GetExplosionDefinition(index: number): ExplosiveDeviceResourceDefinition
  GetExplosionDefinitionArray(): ExplosiveDeviceResourceDefinition[]
  IsExplosiveWithQhacks(): Bool
  GetHealthDecay(): number
  GetTimeToMeshSwap(): number
  GetDistractionHitVFXIgnoreHitPosition(): Bool
  IsDisabledWithQhacks(): Bool
  IsExploded(): Bool
  DoExplosiveResolveGameplayLogic(): Bool
  SetExplodedState(state: Bool): void
  ActionSpiderbotExplodeExplosiveDevice(): SpiderbotExplodeExplosiveDevice
  OnSpiderbotExplodeExplosiveDevice(evt: SpiderbotExplodeExplosiveDevice): EntityNotificationType
  ActionSpiderbotExplodeExplosiveDevicePerformed(): SpiderbotExplodeExplosiveDevicePerformed
  OnSpiderbotExplodeExplosiveDevicePerformed(evt: SpiderbotExplodeExplosiveDevicePerformed): EntityNotificationType
  ActionSpiderbotDistractExplosiveDevice(): SpiderbotDistractExplosiveDevice
  OnSpiderbotDistractExplosiveDevice(evt: SpiderbotDistractExplosiveDevice): EntityNotificationType
  ActionSpiderbotDistractExplosiveDevicePerformed(): SpiderbotDistractExplosiveDevicePerformed
  OnSpiderbotDistractExplosiveDevicePerformed(evt: SpiderbotDistractExplosiveDevicePerformed): EntityNotificationType
  ActionQuestForceDetonate(): QuestForceDetonate
  OnQuestForceDetonate(evt: QuestForceDetonate): EntityNotificationType
  ActionForceDetonate(): ForceDetonate
  OnForceDetonate(evt: ForceDetonate): EntityNotificationType
  ActionQuickHackExplodeExplosive(): QuickHackExplodeExplosive
  OnQuickHackExplodeExplosive(evt: QuickHackExplodeExplosive): EntityNotificationType
  ActionQuickHackDistractExplosive(): QuickHackDistractExplosive
  ActionQuickHackToggleON(): QuickHackToggleON
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  GetQuestActions(actions: DeviceAction[], context: GetActionsContext): void
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
  OnActionEngineering(evt: ActionEngineering): EntityNotificationType
  Disarm(action: ScriptableDeviceAction): void
}

declare interface PSChangedEvent extends Event {

}

declare interface SpiderbotExplodeExplosiveDevice extends ActionBool {

  SetProperties(): void
  GetTweakDBChoiceRecord(): string
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
}

declare interface SendSpiderbotToPerformActionEvent extends Event {

}

declare interface SpiderbotExplodeExplosiveDevicePerformed extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
}

declare interface SpiderbotDistractExplosiveDevice extends ActionBool {

  SetProperties(): void
  GetTweakDBChoiceRecord(): string
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
}

declare interface SpiderbotDistractExplosiveDevicePerformed extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
}

declare interface QuestForceDetonate extends ActionBool {

  SetProperties(): void
}

declare interface ForceDetonate extends ActionBool {

  SetProperties(): void
}

declare interface QuickHackExplodeExplosive extends ActionBool {

  GetBaseCost(): number
  SetProperties(): void
}

declare interface QuickHackDistractExplosive extends ActionBool {

  GetBaseCost(): number
  SetProperties(): void
}

declare interface QuickHackToggleON extends ActionBool {

  GetBaseCost(): number
  GetInteractionIcon(): ChoiceCaptionIconPart_Record
  SetProperties(status: EDeviceStatus): void
  GetTweakDBChoiceRecord(): string
}

declare interface QuestForceEnabled extends ActionBool {

  SetProperties(): void
}

declare interface QuestForcePower extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceUnpower extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceON extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceOFF extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceAuthorizationEnabled extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceAuthorizationDisabled extends ActionBool {

  SetProperties(): void
}

declare interface QuestEnableFixing extends ActionBool {

  SetProperties(): void
}

declare interface QuestDisableFixing extends ActionBool {

  SetProperties(): void
}

declare interface QuestRemoveQuickHacks extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceDisconnectPersonalLink extends ActionBool {

  SetProperties(): void
}

declare interface QuestForcePersonalLinkUnderStrictQuestControl extends ActionBool {

  SetProperties(): void
}

declare interface QuestStartGlitch extends ActionBool {

  SetProperties(): void
}

declare interface QuestStopGlitch extends ActionBool {

  SetProperties(): void
}

declare interface QuestResetPerformedActionsStorage extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceJuryrigTrapArmed extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceJuryrigTrapDeactivated extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceCameraZoom extends ActionBool {

  SetProperties(value: Bool): void
  GetTweakDBChoiceRecord(): string
  UseWorkspot(): Bool
  SetUseWorkspot(useWorkspot: Bool): void
}

declare interface WorkspotGameSystem extends IWorkspotGameSystem {

  PlayInDeviceSimple(device: GameObject, actor: GameObject, allowCameraMov: Bool, actorDataCompName?: CName, deviceDataCompName?: CName, syncSlotName?: CName, slideTime?: number, slideBehaviour?: WorkspotSlidingBehaviour): Bool
  PlayInDevice(device: GameObject, actor: GameObject, workspotStateFlavourName?: CName, actorDataCompName?: CName, deviceDataCompName?: CName, syncSlotName?: CName, slideTime?: number, slideBehaviour?: WorkspotSlidingBehaviour): Bool
  StopInDevice(actor: GameObject, posDelta?: Vector4, orientDelta?: Quaternion): void
  GetDeviceUser(deviceID: EntityID): GameObject
  MountToVehicle(parent: GameObject, child: GameObject, slideTime: number, animDelay: number, workspotResourceContainer: CName, slotName: CName, syncronizedObjects?: EntityID[], entrySlotName?: CName, animVariables?: CName[]): Bool
  SwitchSeatVehicle(parent: GameObject, child: GameObject, workspotResourceContainer: CName, slotName: CName, exitSlotName?: CName, activateAnimVariables?: CName[], deactivateAnimVariables?: CName[]): void
  UnmountFromVehicle(parent: GameObject, child: GameObject, instant?: Bool, posDelta?: Vector4, orientDelta?: Quaternion, exitSlotName?: CName): void
  IsInVehicleWorkspot(vehicle: GameObject, child: GameObject, slotName: CName): Bool
  StopNpcInWorkspot(actor: GameObject): void
  IsActorInWorkspot(actor: GameObject): Bool
  GetExtendedInfo(actor: GameObject): ExtendedWorkspotInfo
  SendDebugCommand(mode: workWorkspotDebugMode, entId: string): void
  SendDebugCommandEnt(mode: workWorkspotDebugMode, obj: GameObject): void
  SendDebugCommandFunctionalTests(mode: workWorkspotDebugMode, obj: GameObject, redscript: IScriptable): void
  SendFastExitSignal(actor: GameObject, dirLS?: Vector3, stayInWorkspotIfFailed?: Bool, playSlowExitIfFailed?: Bool, instant?: Bool, tryBlendToWalk?: Bool): void
  SendJumpCommandEnt(actor: GameObject, entryId: number, instant: Bool): void
  SendJumpToAnimEnt(actor: GameObject, animName: CName, instant: Bool): void
  SendJumpToTagCommandEnt(actor: GameObject, entryTag: CName, instant: Bool): void
  SendSlowExitSignal(actor: GameObject, animationName?: CName, dontWaitForCurrentAnimationToFinish?: Bool): void
  SendDynamicSyncBindSignal(actor: GameObject, master: GameObject): void
  SendDynamicSyncUnbindSignal(actor: GameObject): void
  SendPlaySignal(actor: GameObject): void
  SendAdjustAndPlaySignal(actor: GameObject, adjustTime: number, playbackDelay: number, adjustDelta: Transform): void
  SendForwardSignal(actor: GameObject): void
  SendReactionSignal(actor: GameObject, reactionName: CName): Bool
  ResetPlaybackToStart(actor: GameObject): void
  HardResetPlaybackToStart(actor: GameObject): void
  GetIdOfExitAnim(actor: GameObject, animName: CName): number
  SendEventToConnectedSpots(actor: GameObject, eventName: CName): Bool
  IsReactionAvailable(actor: GameObject, reactionName: CName): Bool
  HasExitNodes(actor: GameObject, fastExit: Bool, slowExit: Bool, performNavmeshChecks?: Bool): Bool
  PlayNpcInWorkspot(npc: GameObject, master: GameObject, referenceEntity: GameObject, actorDataCompName: CName, syncSlotName?: CName, slideTime?: number, syncOffsetSourceCompName?: CName): void
}

declare interface ActionSkillCheck extends ActionBool {

  GetDefaultActionName(): CName
  SetProperties(skillCheck: SkillCheckBase): void
  CreateSkillcheckInfo(requester: GameObject): UIInteractionSkillCheck
  GetPlayerStateMachine(requester: GameObject): IBlackboard
  GetSkillcheckInfo(): UIInteractionSkillCheck
  GetTweakDBChoiceRecord(): string
  WasPassed(): Bool
  AvailableOnUnpowered(): Bool
  SetAvailableOnUnpowered(): void
  GetAttributeCheckType(): EDeviceChallengeSkill
  ResetCaption(): void
}

declare interface UIInteractionSkillCheck {

}

declare interface DelayedDeviceActionEvent extends Event {

}

declare interface ExplosiveDeviceResourceDefinition {

}

declare interface IVisualComponent extends IPlacedComponent {

  TemporaryHide(on: Bool): void
}

declare interface MeshComponent extends IVisualComponent {

}

declare interface ExplosiveDeviceController extends BasicDistractionDeviceController {

  GetPS(): ExplosiveDeviceControllerPS
}

declare interface ChangeLightEvent extends Event {

}

declare interface ScriptLightSettings {

}

declare interface ObjectScanningDescription extends IScriptable {

  GetGameplayDesription(): TweakDBID
  GetCustomDesriptions(): TweakDBID[]
  IsValid(): Bool
}

declare interface SetScanningTimeEvent extends Event {

}

declare interface DeviceScanningDescription extends ObjectScanningDescription {

  GetGameplayDesription(): TweakDBID
  GetCustomDesriptions(): TweakDBID[]
  GetDeviceRoleActionsDescriptions(): TweakDBID[]
}

declare interface entCameraComponent extends IPlacedComponent {

}

declare interface SetLogicReadyEvent extends Event {

}

declare interface ExplosiveDeviceDelayedEvent extends Event {

}

declare interface AttackInitContext {

}

declare interface Attack_GameEffect extends IAttack {

  PrepareAttack(instigator: GameObject): EffectInstance
}

declare interface CombatGadgetHelper extends IScriptable {

  /** @noSelf **/
  SpawnAttack(source: GameObject, radius: number, attackRecord: Attack_Record, instigator: GameObject): void
  /** @noSelf **/
  SpawnPhysicalImpulse(source: GameObject, radius: number): void
}

/** @customConstructor Quaternion.new */
declare class Quaternion {
  x: number
  y: number
  z: number
  w: number
  constructor(x: number, y: number, z: number, w: number)
  /** @noSelf **/
  SetIdentity(quat: Quaternion): void
  /** @noSelf **/
  SetInverse(quat: Quaternion): void
  /** @noSelf **/
  GetXAxis(quat: Quaternion): Vector4
  /** @noSelf **/
  GetYAxis(quat: Quaternion): Vector4
  /** @noSelf **/
  GetZAxis(quat: Quaternion): Vector4
  /** @noSelf **/
  GetForward(quat: Quaternion): Vector4
  /** @noSelf **/
  GetRight(quat: Quaternion): Vector4
  /** @noSelf **/
  GetUp(quat: Quaternion): Vector4
  /** @noSelf **/
  ToMatrix(quat: Quaternion): Matrix
  /** @noSelf **/
  ToEulerAngles(quat: Quaternion): EulerAngles
  /** @noSelf **/
  GetAxes(quat: Quaternion, forward: Vector4, right: Vector4, up: Vector4): void
  /** @noSelf **/
  Dot(a: Quaternion, b: Quaternion): number
  /** @noSelf **/
  Rand(min: number, max: number): Quaternion
  /** @noSelf **/
  Transform(quat: Quaternion, v: Vector4): Vector4
  /** @noSelf **/
  TransformInverse(quat: Quaternion, v: Vector4): Vector4
  /** @noSelf **/
  Normalize(quat: Quaternion): void
  /** @noSelf **/
  Normalized(quat: Quaternion): Quaternion
  /** @noSelf **/
  Magnitude(quat: Quaternion): number
  /** @noSelf **/
  MagnitudeSq(quat: Quaternion): number
  /** @noSelf **/
  MulInverse(q1: Quaternion, q2: Quaternion): Quaternion
  /** @noSelf **/
  Conjugate(q: Quaternion): Quaternion
  /** @noSelf **/
  SetShortestRotation(q: Quaternion, v1: Vector4, v2: Vector4): void
  /** @noSelf **/
  SetAxisAngle(q: Quaternion, axis: Vector4, angle: number): void
  /** @noSelf **/
  SetXRot(q: Quaternion, angle: number): void
  /** @noSelf **/
  SetYRot(q: Quaternion, angle: number): void
  /** @noSelf **/
  SetZRot(q: Quaternion, angle: number): void
  /** @noSelf **/
  Lerp(q1: Quaternion, q2: Quaternion, t: number): Quaternion
  /** @noSelf **/
  Slerp(q1: Quaternion, q2: Quaternion, t: number): Quaternion
  /** @noSelf **/
  GetAngle(q: Quaternion): number
  /** @noSelf **/
  GetAxis(q: Quaternion): Vector4
  /** @noSelf **/
  BuildFromDirectionVector(direction: Vector4, up?: Vector4): Quaternion
}

declare interface EulerAngles {

  /** @noSelf **/
  GetXAxis(rotation: EulerAngles): Vector4
  /** @noSelf **/
  GetYAxis(rotation: EulerAngles): Vector4
  /** @noSelf **/
  GetZAxis(rotation: EulerAngles): Vector4
  /** @noSelf **/
  GetForward(rotation: EulerAngles): Vector4
  /** @noSelf **/
  GetRight(rotation: EulerAngles): Vector4
  /** @noSelf **/
  GetUp(rotation: EulerAngles): Vector4
  /** @noSelf **/
  ToMatrix(rotation: EulerAngles): Matrix
  /** @noSelf **/
  ToQuat(rotation: EulerAngles): Quaternion
  /** @noSelf **/
  GetAxes(rotation: EulerAngles, forward: Vector4, right: Vector4, up: Vector4): void
  /** @noSelf **/
  Dot(a: EulerAngles, b: EulerAngles): number
  /** @noSelf **/
  Rand(min: number, max: number): EulerAngles
  /** @noSelf **/
  AlmostEqual(a: EulerAngles, b: EulerAngles, epsilon: number): Bool
}

declare interface FxSystem extends IFxSystem {

  SpawnEffect(resource: FxResource, transform: WorldTransform, ignoreTimeDilation?: Bool): FxInstance
  SpawnEffectOnGround(resource: FxResource, transform: WorldTransform, maxDistance?: number, minDistance?: number): FxInstance
}

declare interface SoundStopEvent extends Event {

}

declare interface GlobalNodeRef {

  /** @noSelf **/
  IsDefined(id: GlobalNodeRef): Bool
}

declare interface NavigationSystem extends IScriptable {

  CalculatePath(startPoint: Vector4, endPoint: Vector4, agentSize: NavGenAgentSize, findPointTolerance: number, costModCircle?: NavigationCostModCircle): NavigationPath
  FindWallInLine(startPoint: Vector4, endPoint: Vector4, agentSize: NavGenAgentSize, findPointTolerance: number): NavigationFindWallResult
  FindPointInSphere(center: Vector4, radius: number, agentSize: NavGenAgentSize, heightDetail: Bool): NavigationFindPointResult
  FindPointInBox(center: Vector4, extents: Vector4, agentSize: NavGenAgentSize, heightDetail: Bool): NavigationFindPointResult
  FindPursuitPoint(pos: Vector4, dir: Vector4, radius: number, navVisCheck: Bool, agentSize: NavGenAgentSize, destination: Vector4): Bool
  FindPursuitPointRange(pos: Vector4, dir: Vector4, radiusMin: number, radiusMax: number, navVisCheck: Bool, agentSize: NavGenAgentSize, destination: Vector4): Bool
  FindPursuitPointsRange(pos: Vector4, dir: Vector4, radiusMin: number, radiusMax: number, count: number, navVisCheck: Bool, agentSize: NavGenAgentSize, results: Vector4[]): Bool
  FindNavmeshPointAwayFromReferencePoint(pos: Vector4, refPos: Vector4, distance: number, agentSize: NavGenAgentSize, destination: Vector4, distanceTolerance?: number, angleTolerance?: number): Bool
  AddObstacle(position: Vector4, radius: number, height: number, agentSize: NavGenAgentSize): NavigationObstacle
  RemoveObstacle(obstacle: NavigationObstacle): void
  IsPointOnNavmesh(point: Vector4, tolerance?: number): Bool
  IsPointOnNavmesh(point: Vector4, tolerance: Vector4): Bool
  IsPointOnNavmesh(point: Vector4, tolerance: Vector4, navmeshPoint: Vector4): Bool
  GetNearestNavmeshPointBelow(origin: Vector4, querySphereRadius: number, numberOfSpheres: number): Vector4
  GetNearestNavmeshPointBehind(origin: Entity, querySphereRadius: number, numberOfSpheres: number, point: Vector4, checkPathToOrigin?: Bool): Bool
  GetFurthestNavmeshPointBehind(origin: Entity, querySphereRadius: number, numberOfSpheres: number, point: Vector4, offsetFromOrigin?: Vector4, checkPathToOrigin?: Bool, ratioCurveName?: CName): Bool
  TryToFindNavmeshPointAroundPoint(originPosition: Vector4, originOrientation: Quaternion, probeDimensions: Vector4, numberOfSpheres: number, sphereDistanceFromOrigin: number, point: Vector4, checkPathToOrigin?: Bool): Bool
  HasPathForward(sourceObject: GameObject, distance: number): Bool
  /** @noSelf **/
  HasPathFromAtoB(game: GameInstance, originPoint: Vector4, targetPoint: Vector4): Bool
  IsOnGround(target: GameObject, queryLength?: number): Bool
}

declare interface NavigationFindPointResult {

}

declare interface NavigationPath extends IScriptable {

  CalculateLength(): number
}

declare interface QueryFilter {

  /** @noSelf **/
  ALL(): QueryFilter
  /** @noSelf **/
  ZERO(): QueryFilter
  /** @noSelf **/
  AddGroup(filter: QueryFilter, group: CName): void
}

declare interface GeometryDescriptionQuery extends IScriptable {

  AddFlag(flag: worldgeometryDescriptionQueryFlags): void
  RemoveFlag(flag: worldgeometryDescriptionQueryFlags): void
  TestFlag(flag: worldgeometryDescriptionQueryFlags): Bool
}

declare interface SpatialQueriesSystem extends gameISpatialQueriesSystem {

  GetPlayerObstacleSystem(): PlayerObstacleSystem
  GetGeometryDescriptionSystem(): GeometryDescriptionSystem
  Overlap(primitiveDimension: Vector4, position: Vector4, rotation: EulerAngles, collisionGroup?: CName, result?: TraceResult): Bool
  SyncRaycastByCollisionPreset(start: Vector4, end: Vector4, collisionPreset?: CName, result?: TraceResult, staticOnly?: Bool, dynamicOnly?: Bool): Bool
  SyncRaycastByCollisionGroup(start: Vector4, end: Vector4, collisionGroup?: CName, result?: TraceResult, staticOnly?: Bool, dynamicOnly?: Bool): Bool
}

declare interface GeometryDescriptionSystem extends IScriptable {

  QueryExtents(query: GeometryDescriptionQuery): GeometryDescriptionResult
  QueryAverageNormal(query: AverageNormalQuery): AverageNormalResult
}

declare interface GeometryDescriptionResult extends IScriptable {

}

declare interface StimRequest extends IScriptable {

}

declare interface StimRequestID {

  /** @noSelf **/
  IsValid(self: StimRequestID): Bool
  /** @noSelf **/
  GetID(self: StimRequestID): number
}

declare interface RecurrentStimuliEvent extends Event {

}

declare interface BroadcastEvent extends Event {

}

declare interface NPCKillDelayEvent extends Event {

}

declare interface ExplosiveDeviceHideDeviceEvent extends Event {

}

declare interface SwapMeshDelayedEvent extends Event {

}

declare interface gameDeathEvent extends Event {

}

declare interface SetCurrentGameplayRoleEvent extends Event {

}

declare interface ToggleLightEvent extends Event {

}

declare interface TimeSystem extends gameITimeSystem {

  SetGameTimeBySeconds(seconds: number): void
  SetGameTimeByHMS(hours: number, minutes: number, seconds: number): void
  GetGameTime(): GameTime
  GetGameTimeStamp(): number
  GetSimTime(): EngineTime
  RealTimeSecondsToGameTime(seconds: number): GameTime
  SetTimeDilation(reason: CName, dilation: number, duration?: number, easeInCurve?: CName, easeOutCurve?: CName, listener?: TimeDilationListener): void
  UnsetTimeDilation(reason: CName, easeOutCurve?: CName): void
  SetIgnoreTimeDilationOnLocalPlayerZero(ignore: Bool): void
  SetTimeDilationOnLocalPlayerZero(reason: CName, dilation: number, duration?: number, easeInCurve?: CName, easeOutCurve?: CName, ignore?: Bool): void
  UnsetTimeDilationOnLocalPlayerZero(easeOutCurve?: CName): void
  IsTimeDilationActive(reason?: CName): Bool
  RegisterListener(entity: Entity, eventToDelay: Event, expectedTime: GameTime, repeat: number, sendOldNoifications?: Bool): number
  RegisterDelayedListener(entity: Entity, eventToDelay: Event, delay: GameTime, repeat: number, sendOldNoifications?: Bool): number
  RegisterIntervalListener(entity: Entity, eventToDelay: Event, expectedHour: GameTime, timeout: GameTime, repeat?: number): number
  UnregisterListener(listenerID: number): void
  RegisterScriptableSystemIntervalListener(systemName: CName, requestToDelay: ScriptableSystemRequest, expectedHour: GameTime, timeout: GameTime, repeat?: number): number
  SetPausedState(paused: Bool, source: CName): void
  IsPausedState(): Bool
}

declare interface tickITimeDilationListener extends IScriptable {

}

declare interface gameDamageReceivedEvent extends Event {

}

declare interface DamageHistoryEntry {

}

declare interface DelayCallback extends IScriptable {

  Call(): void
}

declare interface CoopIrritationDelayCallback extends DelayCallback {

  /** @noSelf **/
  TryCreate(dmgInstigator: GameObject): void
  Call(): void
}

declare interface DamageInflictedEvent extends Event {

}

declare interface SensorDevice extends ExplosiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnMaraudersMapDeviceDebug(sink: MaraudersMapDevicesSink): void
  ResolveGameplayState(): void
  OnGameAttached(): Bool
  OnDetach(): Bool
  IsSensor(): Bool
  IsPrevention(): Bool
  GetDeviceFXRecord(): DeviceFX_Record
  IsSurveillanceCamera(): Bool
  HasSupport(): Bool
  SetHasSupport(value: Bool): void
  CreateLightSettings(): void
  GetAttitudeAgent(): AttitudeAgent
  GetTargetTrackerComponent(): TargetTrackerComponent
  GetSensesComponent(): SenseComponent
  GetVisibleObjectComponent(): VisibleObjectComponent
  GetController(): SensorDeviceController
  GetDevicePS(): SensorDeviceControllerPS
  GetAnimFeatureInCurrentState(): AnimFeature_SensorDevice
  IsPlayerSafeTargetLock(): Bool
  IsTargetForcedFromTagKill(): Bool
  GetCurrentTargets(): Target[]
  GetSensorDeviceState(): ESensorDeviceStates
  GetRotationData(): CameraRotationData
  UpdateAnimFeatureWakeState(): void
  ApplyAnimFeatureToReplicate(obj: GameObject, inputName: CName, value: AnimFeature): void
  GetCurrentlyFollowedTarget(): GameObject
  TurnOffDevice(): void
  TurnOffSenseComponent(): void
  OnTurnOnVisibilitySenseComponent(evt: TurnOnVisibilitySenseComponent): Bool
  TurnOnDevice(): void
  OnHit(hit: gameHitEvent): Bool
  OnDeath(evt: gameDeathEvent): Bool
  DestroySensor(): void
  GetHitSourcePosition(hitSourceEntityID: EntityID): Vector4
  GetPotentialHitSourcePosition(hitSourceEntityID: EntityID): Vector4
  RegisterListenerOnTargetHP(target: GameObject): void
  UnregisterListenerOnTargetHP(listeningObject: GameObject, listener: TargetedObjectDeathListener): void
  UnregisterListenerOnTargetHP(listeningObject: GameObject, lostObject: GameObject): void
  OnUnregisterListenerOnTargetHPEvent(evt: UnregisterListenerOnTargetHPEvent): Bool
  OnSetJammedEvent(evt: SetJammedEvent): Bool
  SetAsIntrestingTarget(target: GameObject): Bool
  OnValidTargetAppears(target: GameObject): void
  OnCurrentTargetAppears(target: GameObject): void
  ChangeTemporaryAttitude(): void
  CacheInitialAttitude(): void
  ClearInitialAttitude(): void
  IsTemporaryAttitudeChanged(): Bool
  RevertTepmoraryAttitude(): void
  OnQhackExecuted(evt: QhackExecuted): Bool
  OnValidTargetDisappears(target: GameObject): void
  OnAllValidTargetsDisappears(): void
  ToggleAreaIndicator(turnOn: Bool): void
  SendDisableAreaIndicatorEvent(): void
  StartLockingTarget(lockingTime: number): void
  BreakTargeting(): void
  BreakBehaviourResolve(): void
  OnTargetLocked(evt: TargetLockedEvent): Bool
  OnDetectionRiseEvent(evt: DetectionRiseEvent): Bool
  OnOnDetectedEvent(evt: OnDetectedEvent): Bool
  OnOnRemoveDetection(evt: OnRemoveDetection): Bool
  SenseLoseTarget(target: GameObject): void
  OnLostTargetDelayFalsePositivesDelay(evt: LostTargetDelayFalsePositivesDelay): Bool
  OnEnterShapeEvent(evt: EnterShapeEvent): Bool
  OnSenseVisibilityEvent(evt: SenseVisibilityEvent): Bool
  IsCurrentTargetOutOfSenseRange(lostTarget: GameObject): Bool
  GetSenseRange(): number
  LoseTargetFalsePositiveDelay(target: GameObject): void
  GetDetectionFactor(): number
  OnSetDetectionMultiplier(evt: SetDetectionMultiplier): Bool
  SetDetectionMultiplier(multiplier: number): void
  CancelLosetargetFalsePositiveDelay(): void
  CancelPLAYERSAFEDelayEvent(): void
  ForceCancelAllForcedBehaviours(): void
  RecognizeTarget(newObject: GameObject, questForcedIntresting?: Bool): void
  LoseTarget(lostObject: GameObject, forceRemoveTarget?: Bool): void
  OnSecuritySystemEnabled(evt: SecuritySystemEnabled): Bool
  OnSecuritySystemSupport(evt: SecuritySystemSupport): Bool
  OnSecuritySystemOutput(evt: SecuritySystemOutput): Bool
  OnSecuritySystemForceAttitudeChange(evt: SecuritySystemForceAttitudeChange): Bool
  BlinkSecurityLight(howManyTimes: number): void
  OnTargetAssessmentRequest(evt: TargetAssessmentRequest): Bool
  OnReprimandUpdate(evt: ReprimandUpdate): Bool
  StartReprimand(): void
  BreakReprimand(wasSucesfull?: Bool): void
  SendDefaultSSNotification(target: GameObject, securityIntresting: Bool): void
  SetSensePresetBasedOnSSState(): void
  GetForcedTargetObject(): GameObject
  OnStartFollowingForcedTarget(evt: QuestFollowTarget): Bool
  OnStopFollowingForcedTarget(evt: QuestStopFollowingTarget): Bool
  OnStartQuestLookAtTarget(evt: QuestLookAtTarget): Bool
  OnStopQuestStopLookAtTarget(evt: QuestStopLookAtTarget): Bool
  OnQuestSetDetectionToTrue(evt: QuestSetDetectionToTrue): Bool
  OnQuestSetDetectionToFalse(evt: QuestSetDetectionToFalse): Bool
  OnQuestForceScanEffect(evt: QuestForceScanEffect): Bool
  OnQuestForceScanEffectStop(evt: QuestForceScanEffectStop): Bool
  OnQuestForceAttitude(evt: QuestForceAttitude): Bool
  StartBehaviourResolve(newState: ESensorDeviceStates): void
  ForceStartBehaviorResolve(newState: ESensorDeviceStates): void
  CanResolveStateChange(newState: ESensorDeviceStates): ESensorDeviceStates
  OnResolveSensorDeviceBehaviour(evt: ResolveSensorDeviceBehaviour): Bool
  ResolveLogicIDLE(): void
  ResolveLogicLOSETARGET(iterator: number): void
  ResolveLogicTARGETLOCK(): void
  ResolveLogicJAMMER(): void
  CreateLookAt(position?: Vector4, otherTarget?: GameObject): void
  SetupLookAtProperties(recordID: TweakDBID, position?: Vector4, otherTarget?: GameObject): LookAtAddEvent
  OverrideLookAtSetupVert(lookAtEntityEvent: LookAtAddEvent): void
  OverrideLookAtSetupHor(lookAtEntityEvent: LookAtAddEvent): void
  ResolveLogicTARGETRECEIVED(iterator: number): void
  ResolveLogicREPRIMEND(): void
  SetLookAtPositionProviderOnFollowedTarget(evt: LookAtAddEvent, otherTarget?: GameObject): void
  ModeLookAtCurrentTarget(): void
  ModeSearch(speedMultipler?: number): void
  ModeIdleNoTarget(): void
  ModeStopMovementAtTargetPos(targetPosition: Vector4): void
  LookAtStop(): void
  OneShotLookAtPosition(targetPos: Vector4, forcedLook?: Bool): void
  ForcedLookAtEntityWithoutTargetMODE(target: GameObject): void
  OnSetDeviceTagKillMode(evt: SetDeviceTagKillMode): Bool
  OnKillTaggedTarget(value: Variant): Bool
  CheckIfTargetIsTaggedByPlayer(object: GameObject): Bool
  ChangeAttiudetowardsTag(currentList: GameObject[]): void
  OnSetDeviceAttitude(evt: SetDeviceAttitude): Bool
  SetHostileTowardsPlayerHostiles(): void
  OnForcePlayerIgnore(evt: ForceIgnoreTargets): Bool
  SendReprimandInstructionToSecuritySystem(): void
  ReevaluateTargets(): void
  RemoveAllTargets(): void
  GetDefaultHighlight(): FocusForcedHighlightData
  GetCurrentOutline(): EFocusOutlineType
  OnRevealStateChanged(evt: RevealStateChangedEvent): Bool
  TCSMeshToggle(isVisible: Bool): void
  OnTCSTakeOverControlActivate(evt: TCSTakeOverControlActivate): Bool
  OnTCSTakeOverControlDeactivate(evt: TCSTakeOverControlDeactivate): Bool
  SyncRotationWithAnimGraph(): void
  ResetRotation(): void
  GetRotationFromSlotRotation(): EulerAngles
  OnTCSInputXYAxisEvent(evt: TCSInputXYAxisEvent): Bool
  ForceLookAtQuestTarget(): void
  InitializeDeviceFXRecord(): void
  InitializeLights(): void
  DetermineLightAttitudeRefs(): void
  RunGameEffect(effectInstance: EffectInstance, effectRef: EffectRef, slotName: CName, range: number): void
  TerminateGameEffect(effectInstance: EffectInstance): void
  DetermineLightScanRefs(desiredColor: ScriptLightSettings): void
  DetermineLightInfoRefs(desiredColor: ScriptLightSettings): void
  ToggleActiveEffect(active: Bool): void
  OnReactoToPreventionSystem(evt: ReactoToPreventionSystem): Bool
  HasEntityPlayerAttitudeGroup(): Bool
  OnProgramSetDeviceAttitude(evt: ProgramSetDeviceAttitude): Bool
  IsGameplayRelevant(): Bool
  IsExplosive(): Bool
  OnNetworkLinkQuickhackEvent(evt: NetworkLinkQuickhackEvent): Bool
  /** @noSelf **/
  ForceVisionAppearanceNetrunner(target: GameObject, sourceID: EntityID, sourceName: CName, toggle: Bool): void
  RemoveLinkedStatusEffects(): Bool
  RemoveLinkedStatusEffectsFromTarget(sourceID: EntityID): Bool
  RemoveLink(): void
  GetTargets(): Target[]
  SetSenseObjectType(type: gamedataSenseObjectType): void
  RunVisionConeGameEffect(): void
}

declare interface CameraComponent extends entCameraComponent {

  Activate(blendTime?: number, shouldOverrideAudioListeners?: Bool): void
  Deactivate(blendTime?: number, shouldOverrideAudioListeners?: Bool): void
  SetZoom(zoom: number): void
  SetFOV(fov: number): void
  SetIsHighPriority(forced: Bool): void
  GetZoom(): number
  GetFOV(): number
  IsHighPriority(): Bool
}

declare interface AnimFeature_SensorDevice extends AnimFeature {

}

declare interface Target extends IScriptable {

  CreateTarget(currentTarget: GameObject, interesting: Bool, visible: Bool): void
  GetTarget(): GameObject
  IsInteresting(): Bool
  IsVisible(): Bool
  SetIsInteresting(interestingChange: Bool): void
  SetIsVisible(_isVisible: Bool): void
}

declare interface SensorDeviceControllerPS extends ExplosiveDeviceControllerPS {

  GetBehaviourCanRotate(): Bool
  GetBehaviourLastTargetLookAtTime(): number
  GetBehaviourLostTargetSearchTime(): number
  CanTagEnemies(): Bool
  GetInitialWakeState(): ESensorDeviceWakeState
  GetLookAtPresetVert(): TweakDBID
  GetLookAtPresetHor(): TweakDBID
  GetBehaviourCanDetectIntruders(): Bool
  GetBehaviourOverrideRootRotation(): number
  GetBehaviourMaxRotationAngle(): number
  GetBehaviourPitchAngle(): number
  GetBehaviourRotationSpeed(): number
  GetBehaviourtimeToTakeAction(): number
  GetForcedTargetID(): EntityID
  IsInFollowMode(): Bool
  IsAttitudeChanged(): Bool
  IsInTagKillMode(): Bool
  IsIdleForced(): Bool
  IsPartOfPrevention(): Bool
  IsQuestTargetSpotted(): Bool
  IsAnyTargetLocked(): Bool
  IsNoTargetLocked(): Bool
  GetQuestSpotTargetID(): EntityID
  GetNetrunnerID(): EntityID
  GetNetrunnerProxyID(): EntityID
  GetNetrunnerTargetID(): EntityID
  GetLinkedStatusEffect(): LinkedStatusEffect
  GetScanGameEffectRef(): EffectRef
  GetVisionConeEffectRef(): EffectRef
  GetVisionConeFriendlyEffectRef(): EffectRef
  GetIdleActiveRef(): EffectRef
  GetIdleFriendlyRef(): EffectRef
  SetIsAttitudeChanged(isChanged: Bool): void
  SetIsInTagKillMode(value: Bool): void
  SetIsIdleForced(value: Bool): void
  SetCanDetectIntruders(value: Bool): void
  SetNetrunnerID(value: EntityID): void
  SetNetrunnerProxyID(value: EntityID): void
  SetNetrunnerTargetID(value: EntityID): void
  SetLinkedStatusEffect(value: LinkedStatusEffect): void
  SetTagLockFromSystem(value: Bool): void
  SetQuestTargetSpotted(value: Bool): void
  OnSetQuestTargetWasSeen(evt: SetQuestTargetWasSeen): EntityNotificationType
  SetTargetIsLocked(value: Bool): void
  OnSetAnyTargetIsLocked(evt: SetAnyTargetIsLocked): EntityNotificationType
  IsDetectingDebug(): Bool
  GetCurrentTarget(): GameObject
  ActionQuickHackToggleON(): QuickHackToggleON
  ActionQuestFollowTarget(): QuestFollowTarget
  ActionQuestStopFollowingTarget(): QuestStopFollowingTarget
  ActionQuestLookAtTarget(): QuestLookAtTarget
  ActionQuestStopLookAtTarget(): QuestStopLookAtTarget
  ActionQuestForceAttitude(): QuestForceAttitude
  ActionQuestSetDetectionToTrue(): QuestSetDetectionToTrue
  ActionQuestSetDetectionToFalse(): QuestSetDetectionToFalse
  ActionForceIgnoreTargets(): ForceIgnoreTargets
  ActionSetDeviceTagKillMode(): SetDeviceTagKillMode
  ActionQuestSpotTargetReference(): QuestSpotTargetReference
  ActionQuestForceScanEffect(): QuestForceScanEffect
  ActionQuestForceScanEffectStop(): QuestForceScanEffectStop
  PerformRestart(): void
  OnSecuritySystemEnabled(evt: SecuritySystemEnabled): EntityNotificationType
  OnSecuritySystemDisabled(evt: SecuritySystemDisabled): EntityNotificationType
  OnSecuritySystemOutput(evt: SecuritySystemOutput): EntityNotificationType
  OnSecurityAreaCrossingPerimeter(evt: SecurityAreaCrossingPerimeter): EntityNotificationType
  OnReprimandUpdate(evt: ReprimandUpdate): EntityNotificationType
  OnTargetAssessmentRequest(evt: TargetAssessmentRequest): EntityNotificationType
  OnQuestForceScanEffect(evt: QuestForceScanEffect): EntityNotificationType
  OnQuestForceScanEffectStop(evt: QuestForceScanEffectStop): EntityNotificationType
  OnQuestSpotTargetReference(evt: QuestSpotTargetReference): EntityNotificationType
  OnQuestFollowTarget(evt: QuestFollowTarget): EntityNotificationType
  OnQuestStopFollowingTarget(evt: QuestStopFollowingTarget): EntityNotificationType
  OnQuestLookAtTarget(evt: QuestLookAtTarget): EntityNotificationType
  OnQuestStopLookAtTarget(evt: QuestStopLookAtTarget): EntityNotificationType
  OnQuestForceTakeControlOverCamera(evt: QuestForceTakeControlOverCamera): EntityNotificationType
  OnQuestForceTakeControlOverCameraWithChain(evt: QuestForceTakeControlOverCameraWithChain): EntityNotificationType
  SendQuestTakeOverControlRequest(shouldCreateChain: Bool): void
  OnQuestForceStopTakeControlOverCamera(evt: QuestForceStopTakeControlOverCamera): EntityNotificationType
  QuestReleaseCurrentObject(): void
  OnQuestSetDetectionToTrue(evt: QuestSetDetectionToTrue): EntityNotificationType
  OnQuestSetDetectionToFalse(evt: QuestSetDetectionToFalse): EntityNotificationType
  OnSetDeviceAttitude(evt: SetDeviceAttitude): EntityNotificationType
  OnQuestForceAttitude(evt: QuestForceAttitude): EntityNotificationType
  OnRevealEnemiesProgram(evt: RevealEnemiesProgram): EntityNotificationType
  IsAttitudeFromContextHostile(): Bool
  OnForceIgnoreTargets(evt: ForceIgnoreTargets): EntityNotificationType
  NotifyAboutSpottingPlayer(doSee: Bool): void
  OnSecuritySystemSupport(evt: SecuritySystemSupport): EntityNotificationType
  OnSetDeviceTagKillMode(evt: SetDeviceTagKillMode): EntityNotificationType
  DrawBetweenEntities(shouldDraw: Bool, focusModeOnly: Bool, fxResource: FxResource, masterID: EntityID, slaveID: EntityID, revealMaster: Bool, revealSlave: Bool, onlyRemoveWeakLink?: Bool, isEyeContact?: Bool): void
  ClearLinkedStatusEffect(): void
}

declare interface TargetingBehaviour {

}

declare interface DetectionParameters {

}

declare interface SetQuestTargetWasSeen extends Event {

}

declare interface SetAnyTargetIsLocked extends Event {

}

declare interface ActionEntityReference extends ScriptableDeviceAction {

  GetProperties(): DeviceActionProperty[]
  GetCurrentDisplayString(): string
}

declare interface QuestFollowTarget extends ActionEntityReference {

  SetProperties(): void
  SetPropertiesFromScripts(id: EntityID): void
}

declare interface QuestStopFollowingTarget extends ActionBool {

  SetProperties(): void
}

declare interface QuestLookAtTarget extends ActionEntityReference {

  SetProperties(): void
  SetPropertiesFromScripts(id: EntityID): void
}

declare interface QuestStopLookAtTarget extends ActionBool {

  SetProperties(): void
}

declare interface ActionName extends ScriptableDeviceAction {

  GetProperties(): DeviceActionProperty[]
  GetCurrentDisplayString(): string
}

declare interface QuestForceAttitude extends ActionName {

  SetProperties(atttitudeName: CName): void
}

declare interface QuestSetDetectionToTrue extends ActionBool {

  SetProperties(): void
}

declare interface QuestSetDetectionToFalse extends ActionBool {

  SetProperties(): void
}

declare interface ForceIgnoreTargets extends ActionBool {

  GetBaseCost(): number
  SetProperties(): void
}

declare interface SetDeviceTagKillMode extends ActionBool {

  SetProperties(): void
  GetTweakDBChoiceRecord(): string
  GetInteractionIcon(): ChoiceCaptionIconPart_Record
}

declare interface QuestSpotTargetReference extends ActionEntityReference {

  SetProperties(): void
  SetPropertiesFromScripts(id: EntityID): void
}

declare interface QuestForceScanEffect extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceScanEffectStop extends ActionBool {

  SetProperties(): void
}

declare interface SecuritySystemOutput extends ActionBool {

  Initialize(originalEvent: SecuritySystemOutput): void
  SetProperties(currentSecuritySystemState: ESecuritySystemState, notificationEvent: SecuritySystemInput): void
  GetCachedSecurityState(): ESecuritySystemState
  GetOriginalInputEvent(): SecuritySystemInput
  GetSecurityStateChanged(): Bool
  GetBreachOrigin(): EBreachOrigin
  SetSecurityStateChanged(changed: Bool): void
  SetBreachOrigin(breachType: EBreachOrigin): void
  SetCachedSecuritySystemState(state: ESecuritySystemState): void
}

declare interface NotifyParentsEvent extends Event {

}

declare interface RequestQuestTakeControlInputLock extends ScriptableSystemRequest {

}

declare interface TakeOverControlSystem extends ScriptableSystem {

  GetControlledObject(): GameObject
  IsInputLockedFromQuest(): Bool
  IsDeviceControlled(): Bool
  IsSavingLocked(): Bool
  CleanupControlledObject(): void
  OnEnableFastTravelRequest(request: LockTakeControlAction): void
  OnLockDeviceChainCreationRequest(request: LockDeviceChainCreation): void
  IskDeviceChainCreationLocked(): Bool
  LockInputFromQuestRequest(isLocked: Bool): void
  ForceChainFromQuestRequest(isChainForced: Bool): void
  OnRequestTakeControl(request: RequestTakeControl): void
  OnRemoveFromChainRequest(request: RemoveFromChainRequest): void
  /** @noSelf **/
  ReleaseControlOnHit(player: PlayerPuppet): Bool
  /** @noSelf **/
  ReleaseControl(game: GameInstance): Bool
  OnRequestReleaseControl(request: RequestReleaseControl): void
  OnRequestQuestTakeControlInputLock(request: RequestQuestTakeControlInputLock): void
  ReleaseCurrentObject(): void
  RegisterAsCurrentObject(entityID: EntityID): void
  RegisterBBActiveObjectAsCurrentObject(): void
  RegisterObjectHandle(EntID: EntityID): void
  GetChain(): SWidgetPackage[]
  TryFillControlBlackboard(evt: RequestTakeControl): void
  TryFillControlBlackboardByForce(evt: RequestTakeControl): void
  RegisterSystemOnInput(register: Bool): void
  ShowChainControls(show: Bool): void
  PSMSetIsPlayerControllDevice(controllsDevice: Bool): void
  ToggleToNextControlledDevice(): void
  ToggleToPreviousControlledDevice(): void
  ToggleToOtherDeviceFromChain(otherPackage: SWidgetPackage): void
  ToggleToMainPlayerObject(): void
  GetPackageFromChainNextToMe(higher: Bool, isValid: Bool): SWidgetPackage
  GetCurrentActiveDeviceChainBlackboardIndex(deviceChain: SWidgetPackage[]): number
  EnablePlayerTPPRepresenation(enable: Bool): void
  CleanupChainBlackboard(): void
  CleanupActiveEntityInChainBlackboard(): void
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
  /** @noSelf **/
  CreateInputHint(context: GameInstance, isVisible: Bool): void
  HideAdvanceInteractionInputHints(): void
  CreateTCSUpdate(): void
  BreakTCSUpdate(): void
  OnTCSUpdate(request: TCSUpdate): void
  RefreshDebug(lastXYValue: Bool): void
}

declare interface DeviceEndPlayerCameraControlEvent extends Event {

}

declare interface DeviceTakeControlDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface LockTakeControlAction extends ScriptableSystemRequest {

  GetFriendlyDescription(): string
}

declare interface LockDeviceChainCreation extends ScriptableSystemRequest {

  GetFriendlyDescription(): string
}

declare interface DeviceStartPlayerCameraControlEvent extends Event {

}

declare interface TCSTakeOverControlDeactivate extends Event {

}

declare interface TCSTakeOverControlActivate extends Event {

}

declare interface PlayerControlDeviceData {

}

declare interface CameraRotationData {

}

declare interface TCSUpdate extends ScriptableSystemRequest {

}

declare interface RequestTakeControl extends ScriptableSystemRequest {

}

declare interface FillTakeOverChainBBoardEvent extends Event {

}

declare interface UI_HudButtonHelpDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface ActivateTPPRepresentationEvent extends Event {

}

declare interface DeactivateTPPRepresentationEvent extends Event {

}

declare interface RemoveFromChainRequest extends ScriptableSystemRequest {

}

declare interface RequestReleaseControl extends ScriptableSystemRequest {

}

declare interface ListenerAction {

  /** @noSelf **/
  GetName(me: ListenerAction): CName
  /** @noSelf **/
  GetType(me: ListenerAction): gameinputActionType
  /** @noSelf **/
  GetValue(me: ListenerAction): number
  /** @noSelf **/
  GetKey(me: ListenerAction): number[]
  /** @noSelf **/
  IsAction(me: ListenerAction, name: CName): Bool
  /** @noSelf **/
  IsButton(me: ListenerAction): Bool
  /** @noSelf **/
  IsButtonJustPressed(me: ListenerAction): Bool
  /** @noSelf **/
  IsButtonJustReleased(me: ListenerAction): Bool
  /** @noSelf **/
  IsAxisChangeAction(me: ListenerAction): Bool
  /** @noSelf **/
  IsRelativeChangeAction(me: ListenerAction): Bool
}

declare interface TCSInputXAxisEvent extends Event {

}

declare interface TCSInputYAxisEvent extends Event {

}

declare interface TCSInputDeviceAttack extends Event {

}

declare interface InputHintData {

}

declare interface UpdateInputHintEvent extends Event {

}

declare interface DeleteInputHintBySourceEvent extends Event {

}

declare interface TCSInputXYAxisEvent extends Event {

}

declare interface ProgramAction extends ActionBool {

}

declare interface PlayerSpotted extends Event {

  /** @noSelf **/
  Construct(isReporterNPC: Bool, owner: PersistentID, doSee: Bool, areas: SecurityAreaControllerPS[]): PlayerSpotted
  GetComesFromNPC(): Bool
  GetOwnerID(): PersistentID
  DoesSee(): Bool
  GetAgentAreas(): SecurityAreaControllerPS[]
}

declare interface UnregisterNetworkLinkBetweenTwoEntitiesRequest extends ScriptableSystemRequest {

}

declare interface UnregisterNetworkLinksByIDRequest extends ScriptableSystemRequest {

}

declare interface LinkedStatusEffect {

}

declare interface LightComponent extends IVisualComponent {

  SetTemperature(temperature: number): void
  SetColor(color: Color): void
  SetRadius(radius: number): void
  SetIntensity(intensity: number): void
  SetFlickerParams(strength: number, period: number, offset: number): void
  OnForceFlicker(evt: FlickerEvent): Bool
  OnToggleLight(evt: ToggleLightEvent): Bool
  OnToggleLightByName(evt: ToggleLightByNameEvent): Bool
}

declare interface FlickerEvent extends Event {

}

declare interface ToggleLightByNameEvent extends ToggleLightEvent {

}

declare interface gameLightComponent extends LightComponent {

  ToggleLight(on: Bool, loop?: Bool): void
  SetParameters(settings: gameLightSettings, inTime?: number, interpolationCurve?: CName, loop?: Bool): void
  SetStrength(strength: number, inTime?: number): void
  SetColor(color: Color, inTime?: number): void
  SetRadius(radius: number, inTime?: number): void
  SetAngles(innerAngle: number, outerAngle: number, inTime?: number): void
  SetIntensity(intensity: number, inTime?: number): void
  IsOn(): Bool
  Destroy(forceDestroy?: Bool, skipVFX?: Bool): void
  IsDestroyed(): Bool
  IsDestructible(): Bool
  SetDestructible(isDestructible: Bool): void
  GetOnStrength(): Bool
  GetDefaultSettings(): gameLightSettings
  GetTurnOnTime(): number
  GetTurnOnCurve(): CName
  GetTurnOffTime(): number
  GetTurnOffCurve(): CName
  GetCurrentSettings(): gameLightSettings
  OnToggleLight(evt: ToggleLightEvent): Bool
  OnToggleLightByName(evt: ToggleLightByNameEvent): Bool
  OnChangeLight(evt: ChangeLightEvent): Bool
  OnChangeLightByName(evt: ChangeLightByNameEvent): Bool
  SetupLightSettings(inputData: EditableGameLightSettings, outputData: gameLightSettings): void
  OnAdvanceChangeLight(evt: AdvanceChangeLightEvent): Bool
  OnChangeCurveEvent(evt: ChangeCurveEvent): Bool
  /** @noSelf **/
  ChangeLightSettingByRefs(lightRefs: gameLightComponent[], setting: ScriptLightSettings, inTime?: number, interpolationCurve?: CName, loop?: Bool): void
  /** @noSelf **/
  ChangeAllLightsSettings(owner: GameObject, settings: ScriptLightSettings, time?: number, curve?: CName, loop?: Bool): void
}

declare interface gameLightSettings {

}

declare interface ChangeLightByNameEvent extends ChangeLightEvent {

}

declare interface EditableGameLightSettings {

}

declare interface AdvanceChangeLightEvent extends Event {

}

declare interface ChangeCurveEvent extends Event {

}

declare interface LedColors_SensorDevice {

}

declare interface DeviceFX_Record extends TweakDBRecord {

  ScanGameEffectLength(): number
  VisionConeEffectLength(): number
  IdleEffectLength(): number
}

declare interface ResolveSensorDeviceBehaviour extends Event {

}

declare interface PreventionSystem extends ScriptableSystem {

  IsSystemDissabled(): Bool
  GetHeatStage(): EPreventionHeatStage
  GetGeneralPercent(): number
  GetPartGeneralPercent(): number
  GetNewDamageValue(): number
  IsChasingPlayer(): Bool
  AreTurretsActive(): Bool
  GetGameTimeStamp(): number
  GetGame(): GameInstance
  GetInteriorSpawnDelay(): number
  GetDamagePercentThreshold(): number
  GetDeescalationTime(): number
  GetNonAggressiveReactionMultipler(): number
  SetPartGeneralPercent(value: number): void
  SetNewDamageValue(value: number): void
  SetHeatStage(value: EPreventionHeatStage): Bool
  SetNewLastCrimePoint(value: Vector4): void
  AddGeneralPercent(value: number): void
  CanPreventionReactToInput(): Bool
  GetSpawnDataFromHeatStage(heatStage: EPreventionHeatStage, characterRecords: TweakDBID[], spawnRange: Vector2, unitsCount: number, spawnInterval: number): Bool
  GetCharacterRecordFromPool(pool: PreventionUnitPoolData_Record[], recordID: TweakDBID): Bool
  IsSavingLocked(): Bool
  OnAttach(): void
  OnDetach(): void
  OnRestored(saveVersion: number, gameVersion: number): void
  RegisterToBBCalls(): void
  UnregisterBBCalls(): void
  PlayerAttachedCallback(playerPuppet: GameObject): void
  PlayerDetachedCallback(playerPuppet: GameObject): void
  OnPlayerHLSChange(value: number): Bool
  OnPlayerVehicleStateChange(value: number): Bool
  AddUniqueHitNPC(entityID: EntityID): Bool
  WhipeHitNPC(): void
  OnDamageInput(request: PreventionDamageRequest): void
  ShouldSkipSpawning(requester?: ScriptedPuppet): Bool
  HeatPipeline(skipSpawningUnits?: Bool): void
  OnHeatChanged(skipSpawningUnits?: Bool): void
  TutorialAddPoliceSystemFact(): void
  SetWantedLevelFact(level: number): void
  StartPipeline(): void
  PreDamageChange(): void
  DamageChange(): void
  PostDamageChange(): void
  RisePoliceProbability(): void
  StartDeescalationZero(): void
  StopDeescalationZero(): void
  ResetDeescalationZero(): void
  OnDeescalationZero(evt: PreventionDelayedZeroRequest): void
  OnDelayedSpawnRequest(evt: PreventionDelayedSpawnRequest): void
  SpawnPipeline(heatStage: EPreventionHeatStage, delay?: number): void
  CancelSpawnDelay(): void
  SpawnPoliceWithDelay(heatStage: EPreventionHeatStage, delay: number): void
  SpawnPolice(heatStage: EPreventionHeatStage): void
  GetVehicleIDFromHeatStage(heatStage: EPreventionHeatStage, vehicleID: TweakDBID): Bool
  ShouldSpawnVehicle(): Bool
  SpawnPoliceVehicle(heatStage: EPreventionHeatStage): void
  OnSpawnUnitDelayRequest(request: PreventionDelayedSpawnUnitRequest): void
  GetFindSpawnPointsOrigin(pos: Vector4, dir: Vector4): void
  DespawnAllPolice(): void
  /** @noSelf **/
  IsChasingPlayer(game: GameInstance): Bool
  /** @noSelf **/
  InjectPlayerAsPoliceTarget(police: ScriptedPuppet): void
  CheckDamageThreshold(): Bool
  CalculateDeescaletion(): void
  CalculateDeescalationPercent(): number
  GetTimeBetweenStamp(previousStamp: number): number
  /** @noSelf **/
  ShowMessage(gameInstance: GameInstance, message: string, time: number): void
  OnRefreshDistrict(request: RefreshDistrictRequest): void
  RestoreDefaultConfig(): void
  OnRegisterUnit(request: RegisterUnitRequest): void
  MountVehicle(unit: ScriptedPuppet, vehicle: VehicleObject): Bool
  IsVehicleValid(vehicle: VehicleObject, slotName: CName): Bool
  UpdateVehicles(): void
  OnRegisterVehicle(request: RegisterVehicleRequest): void
  OnViewerRequest(request: PreventionVisibilityRequest): void
  OnVehicleStolenRequest(request: PreventionVehicleStolenRequest): void
  OnCombatStartedRequest(request: PreventionCombatStartedRequest): void
  OnCrimeWitnessRequest(request: PreventionCrimeWitnessRequest): void
  UpdateViewers(): Bool
  ViewerRegister(viewer: GameObject): void
  ViewerUnRegister(viewer: GameObject): void
  OnRegisterRequest(request: PreventionRegisterRequest): void
  Register(object: GameObject): void
  UnRegister(object: GameObject): void
  OnPreventionSecurityAreaRequest(request: PreventionSecurityAreaRequest): void
  OnPreventionPoliceSecuritySystemRequest(request: PreventionPoliceSecuritySystemRequest): void
  ShouldReactionBeAggressive(): Bool
  /** @noSelf **/
  ShouldReactionBeAgressive(game: GameInstance): Bool
  /** @noSelf **/
  CanPreventionReact(game: GameInstance): Bool
  /** @noSelf **/
  ShouldPreventionSystemReactToKill(puppet: ScriptedPuppet): Bool
  /** @noSelf **/
  ShouldPreventionSystemReactToDamageDealt(puppet: ScriptedPuppet): Bool
  /** @noSelf **/
  ShouldPreventionSystemReactToCombat(puppet: ScriptedPuppet): Bool
  OnBountyResetRequest(request: BountyResetRequest): void
  OnPlayerChoice(value: Variant): Bool
  OnDistrictAreaEntered(request: DistrictEnteredEvent): void
  RestoreDefaultPreset(): void
  ChangeAgentsAttitude(desiredAffiliation: EAIAttitude): void
  ChangeAttitude(owner: GameObject, target: GameObject, desiredAttitude: EAIAttitude): void
  WakeUpAllAgents(wakeUp: Bool): void
  WakeUpAgent(entID: EntityID, wakeUp: Bool): void
  StartPreventionTickRequest(): void
  CancelPreventionTickRequest(): void
  OnPreventionTickRequest(request: PreventionTickRequest): void
  ReevaluateSecurityAreaReset(): void
  StartSecurityAreaResetRequest(resetDelay?: number): void
  CancelSecurityAreaResetRequest(): void
  OnSecurityAreaResetRequest(request: SecurityAreaResetRequest): void
  CheckLastCrimeDistanceToPlayer(): void
  CheckifNewPointIsCloserThanPrevious(value: Vector4): Bool
  CreateCrowdNullArea(targetPos: Vector4): void
  CancelAllDelayedEvents(): void
  ResolveBlinkingStack(reasonName: CName, active: Bool): void
  WhipeBlinkData(): void
  OnTogglePreventionSystem(evt: TogglePreventionSystem): void
  /** @noSelf **/
  DelayedSpawnUnitRequest(context: GameInstance, recordID: TweakDBID, preventionLevel: number, spawnTransform: WorldTransform, delay: number): void
  /** @noSelf **/
  CreateNewDamageRequest(context: GameInstance, target: GameObject, damage: number): void
  /** @noSelf **/
  RegisterToPreventionSystem(context: GameInstance, requester: GameObject): void
  /** @noSelf **/
  UnRegisterToPreventionSystem(context: GameInstance, requester: GameObject): void
  /** @noSelf **/
  RegisterAsViewerToPreventionSystem(context: GameInstance, requester: GameObject): void
  /** @noSelf **/
  UnRegisterAsViewerToPreventionSystem(context: GameInstance, requester: GameObject): void
  /** @noSelf **/
  CombatStartedRequestToPreventionSystem(context: GameInstance, requester: GameObject): void
  /** @noSelf **/
  VehicleStolenRequestToPreventionSystem(vehicle: VehicleObject, thief?: GameObject): void
  /** @noSelf **/
  CrimeWitnessRequestToPreventionSystem(context: GameInstance, criminalPosition: Vector4): void
  /** @noSelf **/
  PreventionSecurityAreaEnterRequest(context: GameInstance, playerIsIn: Bool, areaID: PersistentID): void
  /** @noSelf **/
  PreventionPoliceSecuritySystemRequest(context: GameInstance, securitySystemID: PersistentID): void
  /** @noSelf **/
  PreventionBountyResetRequest(context: GameInstance): void
  /** @noSelf **/
  RegisterPoliceUnit(context: GameInstance, unit: ScriptedPuppet): void
  /** @noSelf **/
  RegisterPoliceVehicle(context: GameInstance, vehicle: VehicleObject): void
  OnPreventionConsoleInstructionRequest(request: PreventionConsoleInstructionRequest): void
  RemovePlayerFromSecuritySystemBlacklist(): void
  execInstructionSafe(): void
  execInstructionActive(): void
  SendInternalSystem(damageValue: number): void
  execInstructionOn(): void
  execInstructionOff(): void
  RefreshDebug(): void
  RefreshDebugRemoveAllLockSources(): void
  RefreshDebugLockSources(): void
  RefreshDebugEvents(): void
  RefreshDebugProcessInfo(): void
  RefreshDebugDistanceInfo(): void
  RefreshDebugDistrictInfo(): void
  RefreshDebugSecAreaInfo(): void
}

declare interface DistrictPreventionData_Record extends TweakDBRecord {

  Heat3(): PreventionHeatData_Record
  Heat1(): PreventionHeatData_Record
  Heat4(): PreventionHeatData_Record
  Heat2(): PreventionHeatData_Record
  DeescalationZeroTime(): number
  InteriorSpawnDelay(): number
  NonAggressiveReactionMultipler(): number
  DamagePercentThreshold(): number
}

declare interface UI_WantedBarDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface PreventionDelayedZeroRequest extends ScriptableSystemRequest {

}

declare interface PreventionHeatData_Record extends TweakDBRecord {

  VehicleRecord(): Vehicle_Record
  UnitRecordsPool(outList: PreventionUnitPoolData_Record[]): void
  GetUnitRecordsPoolCount(): number
  GetUnitRecordsPoolItem(index: number): PreventionUnitPoolData_Record
  UnitRecordsPoolContains(item: PreventionUnitPoolData_Record): Bool
  SpawnRange(): Vector2
  SpawnInterval(): number
  UnitsCount(): number
}

declare interface PreventionUnitPoolData_Record extends TweakDBRecord {

  CharacterRecord(): Character_Record
  Weight(): number
}

declare interface DistrictManager extends IScriptable {

  Initialize(system: PreventionSystem): void
  Update(evt: DistrictEnteredEvent): void
  ManageDistrictStack(request: DistrictEnteredEvent): void
  PushDistrict(request: DistrictEnteredEvent): void
  PopDistrict(request: DistrictEnteredEvent): void
  Refresh(): void
  NotifySystem(): void
  GetCurrentDistrict(): District
}

declare interface DistrictEnteredEvent extends ScriptableSystemRequest {

}

declare interface District extends IScriptable {

  GetDistrictID(): TweakDBID
  CreateDistrictRecord(): District_Record
  GetPresetID(): TweakDBID
  GetGunshotStimRange(): number
  GetExplosiveDeviceStimRange(): number
  Initialize(district: TweakDBID): void
}

declare interface District_Record extends TweakDBRecord {

  EnumComment(): string
  LocalizedName(): string
  EnumName(): string
  PreventionPreset(): DistrictPreventionData_Record
  ParentDistrict(): District_Record
  Gangs(outList: Affiliation_Record[]): void
  GetGangsCount(): number
  GetGangsItem(index: number): Affiliation_Record
  GangsContains(item: Affiliation_Record): Bool
  UiIcon(): CName
  UiState(): CName
  GunShotStimRange(): number
  ExplosiveDeviceStimRangeMultiplier(): number
  IsQuestDistrict(): Bool
  Type(): gamedataDistrict
}

declare interface PlayerEnteredNewDistrictEvent extends Event {

}

declare interface UI_MapDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface RefreshDistrictRequest extends ScriptableSystemRequest {

}

declare interface AttitudeSystem extends gameIAttitudeManager {

  GetAttitudeGroup(entityID: EntityID): CName
  SetAttitudeGroupRelationPersistent(firstGroup: CName, secondGroup: CName, attitude: EAIAttitude): void
  SetAttitudeGroupRelationfromTweakPersistent(firstGroup: TweakDBID, secondGroup: TweakDBID, attitude: EAIAttitude): void
  SetAttitudeRelation(firstGroup: CName, secondGroup: CName, attitude: EAIAttitude): void
  SetAttitudeRelationFromTweak(firstGroup: TweakDBID, secondGroup: TweakDBID, attitude: EAIAttitude): void
  GetAttitudeRelation(firstGroup: CName, secondGroup: CName): EAIAttitude
  GetAttitudeRelationFromTweak(firstGroup: TweakDBID, secondGroup: TweakDBID): EAIAttitude
}

declare interface PreventionAgents extends IScriptable {

  CreateGroup(groupName: CName, object: GameObject): void
  GetGroupName(): CName
  GetAgentsNumber(): number
  GetAgetntByIndex(index: number): EntityID
  HasAgents(): Bool
  AddAgent(object: GameObject): void
  RemoveAgent(entID: EntityID): void
  GetAnyAgentID(): EntityID
  GetAgentPostion(index: number): Vector4
}

declare interface SPreventionAgentData {

}

declare interface FastTravelSystem extends ScriptableSystem {

  OnAttach(): void
  OnDetach(): void
  OnRestored(saveVersion: number, gameVersion: number): void
  RegisterLoadingScreenCallback(): void
  UnregisterLoadingCallback(): void
  AddFastTravelPoint(nodeData: FastTravelPointData): void
  OnLoadingScreenFinished(value: Bool): Bool
  CheckForScottieAchievement(): void
  RemoveFastTravelPoint(nodeData: FastTravelPointData): void
  HasFastTravelPoint(nodeData: FastTravelPointData): Bool
  GetFastTravelPoint(nodeData: FastTravelPointData): FastTravelPointData
  IsFastTravelEnabledOnMap(): Bool
  GetFastTravelPoints(): FastTravelPointData[]
  PerformFastTravel(player: GameObject, nodeData: FastTravelPointData): void
  AddFastTravelLock(reason: CName, statusEffectID?: TweakDBID): void
  RemoveFastTravelLock(reason: CName): void
  EvaluateFastTravelLocksOnRestore(): void
  IsFastTravelEnabled(): Bool
  RegisterFastTravelPoint(pointData: FastTravelPointData, requesterID: EntityID): void
  UnregisterFastTravelPoint(pointData: FastTravelPointData, requesterID: EntityID): void
  RefreshFastTravelNodes(): void
  RegisterMappin(nodeData: FastTravelPointData): void
  UnregisterMappin(nodeData: FastTravelPointData): void
  OnRegisterFastTravelPointsRequest(request: RegisterFastTravelPointsRequest): void
  OnEnableFastTravelRequest(request: EnableFastTravelRequest): void
  OnRegisterFastTravelPointRequest(request: RegisterFastTravelPointRequest): void
  OnUnregisterFastTravelPointRequest(request: UnregisterFastTravelPointRequest): void
  OnPerformFastTravelRequest(request: PerformFastTravelRequest): void
  OnToggleFastTravelAvailabilityOnMapRequest(evt: ToggleFastTravelAvailabilityOnMapRequest): void
  OnRequestAutoSave(request: AutoSaveRequest): void
  RequestAutoSaveWithDelay(): void
  RequestAutoSave(): void
  RestoreFastTravelMappins(): void
  TutorialAddFastTravelFact(): void
  /** @noSelf **/
  AddFastTravelLock(reason: CName, game: GameInstance, statusEffectID?: TweakDBID): void
  /** @noSelf **/
  RemoveFastTravelLock(reason: CName, game: GameInstance, statusEffectID?: TweakDBID): void
  /** @noSelf **/
  ManageFastTravelLock(enable: Bool, reason: CName, game: GameInstance, statusEffectID?: TweakDBID): void
  OnFastTravelConsoleInstructionRequest(request: FastTravelConsoleInstructionRequest): void
  execInstructionForward(magicFloat: number): void
  execInstructionPrevious(): void
}

declare interface FastTRavelSystemDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface FastTravelPointData extends IScriptable {

  IsValid(): Bool
  GetPointDisplayName(): string
  GetPointDisplayDescription(): string
  GetDistrictDisplayName(): string
  ShouldShowMappinOnWorldMap(): Bool
  ShouldShowMappinInWorld(): Bool
  GetPointRecord(): TweakDBID
  GetMarkerRef(): NodeRef
  GetRequesterID(): EntityID
  HasReqesterID(): Bool
  SetRequesterID(id: EntityID): void
}

declare interface FastTravelPoint_Record extends TweakDBRecord {

  Description(): string
  DisplayName(): string
  District(): District_Record
  ShowOnWorldMap(): Bool
  ShowInWorld(): Bool
}

declare interface MappinData extends IMappinData {

}

declare interface FastTravelSystemLock {

}

declare interface FastTravelPointsUpdated extends Event {

}

declare interface AutoSaveRequest extends ScriptableSystemRequest {

}

declare interface TeleportationFacility extends gameITeleportationFacility {

  Teleport(objectToTeleport: GameObject, position: Vector4, orientation: EulerAngles): void
  TeleportToNode(objectToTeleport: GameObject, nodeRef: NodeRef): void
}

declare interface FPPCameraComponent extends CameraComponent {

  ResetPitch(): void
}

declare interface RegisterFastTravelPointsRequest extends ScriptableSystemRequest {

  GetFriendlyDescription(): string
}

declare interface EnableFastTravelRequest extends ScriptableSystemRequest {

  GetFriendlyDescription(): string
}

declare interface RegisterFastTravelPointRequest extends ScriptableSystemRequest {

}

declare interface UnregisterFastTravelPointRequest extends ScriptableSystemRequest {

}

declare interface PerformFastTravelRequest extends ScriptableSystemRequest {

}

declare interface ToggleFastTravelAvailabilityOnMapRequest extends ScriptableSystemRequest {

}

declare interface gameAutoSaveSystem extends gameIAutoSaveSystem {

  RequestCheckpoint(): void
}

declare interface FastTravelConsoleInstructionRequest extends ScriptableSystemRequest {

}

declare interface SecurityAreaResetRequest extends ScriptableSystemRequest {

}

declare interface inkHUDGameController extends inkGameController {

  ShowRequest(): void
  HideRequest(): void
  PlayInitFoldingAnim(): void
  OnPlayInitFoldingAnimFinished(anim: inkAnimProxy): Bool
  UpdateRequired(): void
  OnHideAnimationFinished(anim: inkAnimProxy): Bool
  CreateContextChangeAnimations(): void
  GetIntroAnimation(): inkAnimDef
  GetOutroAnimation(): inkAnimDef
}

declare interface inkAnimProxy extends IScriptable {

  GetTime(): number
  GetProgression(): number
  IsValid(): Bool
  IsLoading(): Bool
  IsLoadingFailed(): Bool
  IsPlaying(): Bool
  IsPaused(): Bool
  IsFinished(): Bool
  Stop(silently?: Bool): void
  GotoStartAndStop(silently?: Bool): void
  GotoEndAndStop(silently?: Bool): void
  Pause(): void
  Resume(): void
  Continue(playbackOptions: inkAnimOptions): Bool
  GetTargets(): inkWidget[]
  RegisterToCallback(eventType: inkanimEventType, object: IScriptable, functionName: CName): void
  UnregisterFromCallback(eventType: inkanimEventType, object: IScriptable, functionName: CName): void
  UnregisterFromAllCallbacks(eventType: inkanimEventType): void
}

declare interface inkAnimInterpolator extends IScriptable {

  GetMode(): inkanimInterpolationMode
  GetType(): inkanimInterpolationType
  GetDirection(): inkanimInterpolationDirection
  GetDuration(): number
  GetStartDelay(): number
  GetIsAdditive(): Bool
  SetMode(mode: inkanimInterpolationMode): void
  SetType(type: inkanimInterpolationType): void
  SetDirection(direction: inkanimInterpolationDirection): void
  SetDuration(duration: number): void
  SetStartDelay(startDelay: number): void
  SetIsAdditive(isAdditive: Bool): void
  GetUseRelativeDuration(): Bool
  SetUseRelativeDuration(useRelativeDuration: Bool): void
}

declare interface inkAnimDef extends IScriptable {

  AddInterpolator(interpolator: inkAnimInterpolator): void
  AddEvent(evt: inkAnimEvent): void
}

declare interface inkAnimTransparency extends inkAnimInterpolator {

  GetStartTransparency(): number
  GetEndTransparency(): number
  SetStartTransparency(startTransparency: number): void
  SetEndTransparency(endTransparency: number): void
}

declare interface WantedBarGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnWantedDataChange(value: number): Bool
  UpdateWantedData(newWantedLevel: number): void
  FlashAndHide(): void
  StartFlash(): void
  EndFlash(): void
  FlashAndShow(): void
  OnWantedBarHidden(animationProxy: inkAnimProxy): Bool
  OnWantedBarStartFlashEvent(evt: WantedBarStartFlashEvent): Bool
  OnWantedBarEndFlashEventEvent(evt: WantedBarEndFlashEvent): Bool
  OnWantedBarFlashAndHideEventEvent(evt: WantedBarFlashAndHideEvent): Bool
  OnWantedBarFlashAndShowEvent(evt: WantedBarFlashAndShowEvent): Bool
  /** @noSelf **/
  FlashWantedBar(context: GameInstance): void
  /** @noSelf **/
  EndFlashWantedBar(context: GameInstance): void
  /** @noSelf **/
  FlashAndHideWantedBar(context: GameInstance): void
  /** @noSelf **/
  FlashAndShowWantedBar(context: GameInstance): void
}

declare interface inkLogicController extends inkILogicController {

  GetRootWidget(): inkWidget
  GetRootCompoundWidget(): inkCompoundWidget
  GetWidget(path: inkWidgetPath): inkWidget
  GetController(path?: inkWidgetPath): inkLogicController
  GetControllerByType(controllerType: CName, path?: inkWidgetPath): inkLogicController
  GetControllerByBaseType(controllerType: CName, path?: inkWidgetPath): inkLogicController
  GetControllers(path?: inkWidgetPath): inkLogicController[]
  GetControllersByType(controllerType: CName, path?: inkWidgetPath): inkLogicController[]
  GetNumControllers(path?: inkWidgetPath): number
  GetNumControllersOfType(controllerType: CName, path?: inkWidgetPath): number
  GetChildWidgetByPath(widgetNamePath: CName): inkWidget
  GetChildControllerByPath(widgetNamePath: CName): inkLogicController
  GetWidget(widgetNamePath: CName): inkWidget
  GetController(widgetNamePath: CName): inkLogicController
  CallCustomCallback(eventName: CName): void
  RegisterToCallback(eventName: CName, object: IScriptable, functionName: CName): void
  UnregisterFromCallback(eventName: CName, object: IScriptable, functionName: CName): void
  RegisterToGlobalInputCallback(eventName: CName, object: IScriptable, functionName: CName): void
  UnregisterFromGlobalInputCallback(eventName: CName, object: IScriptable, functionName: CName): void
  SpawnFromLocal(parentWidget: inkWidget, libraryID: CName): inkWidget
  SpawnFromExternal(parentWidget: inkWidget, resourcePath: ResRef, libraryID: CName): inkWidget
  AsyncSpawnFromLocal(parentWidget: inkWidget, libraryID: CName, callbackObject?: IScriptable, callbackFunctionName?: CName, userData?: IScriptable): void
  AsyncSpawnFromExternal(parentWidget: inkWidget, resourcePath: ResRef, libraryID: CName, callbackObject?: IScriptable, callbackFunctionName?: CName, userData?: IScriptable): void
  HasLocalLibrary(libraryID: CName): Bool
  HasExternalLibrary(resourcePath: ResRef, libraryID?: CName): Bool
  SetCursorContext(context: CName, data?: inkUserData): void
  SetCursorOverWidget(widget: inkWidget): void
  PlayLibraryAnimation(animationName: CName, playbackOptions?: inkAnimOptions): inkAnimProxy
  PlayLibraryAnimationOnTargets(animationName: CName, targets: inkWidgetsSet, playbackOptions?: inkAnimOptions): inkAnimProxy
  PlayLibraryAnimationOnAutoSelectedTargets(animationName: CName, target: inkWidget, playbackOptions?: inkAnimOptions): inkAnimProxy
  PlaySound(widgetName: CName, eventName: CName, actionKey?: CName): void
  Reparent(newParent: inkCompoundWidget, index?: number): void
  QueueEvent(evt: Event): void
  QueueBroadcastEvent(evt: Event): void
  SetTexture(imageWidget: inkImage, textureID: TweakDBID): void
  SetTexture(imageRef: inkImageRef, textureID: TweakDBID): void
  SetTexture(imageWidget: inkImage, textureRecord: UIIcon_Record): void
  SetTexture(imageRef: inkImageRef, textureRecord: UIIcon_Record): void
  FindWidgetInLibrary(parentWidget: inkWidget, widgetRecord: WidgetDefinition_Record, screenTypeRecord?: DeviceScreenType_Record, styleRecord?: WidgetStyle_Record, id?: CName, path?: ResRef): inkWidget
  FindWidgetDataInLibrary(parentWidget: inkWidget, widgetRecord: WidgetDefinition_Record, screenTypeRecord?: DeviceScreenType_Record, styleRecord?: WidgetStyle_Record, id?: CName, path?: ResRef): SWidgetPackageBase
  CreateWidget(parentWidget: inkWidget, id: CName, path: ResRef): inkWidget
}

declare interface inkLeafWidget extends inkWidget {

}

declare interface InkImageUtils extends IScriptable {

  /** @noSelf **/
  RequestSetImage(controller: inkIGameController, target: inkImageRef, iconID: CName, callbackFunction?: CName): void
  /** @noSelf **/
  RequestSetImage(controller: inkIGameController, target: inkImageRef, iconID: string, callbackFunction?: CName): void
  /** @noSelf **/
  RequestSetImage(controller: inkIGameController, target: inkImageRef, iconID: TweakDBID, callbackFunction?: CName): void
  /** @noSelf **/
  RequestSetImage(controller: inkIGameController, target: inkImage, iconID: CName, callbackFunction?: CName): void
  /** @noSelf **/
  RequestSetImage(controller: inkIGameController, target: inkImage, iconID: string, callbackFunction?: CName): void
  /** @noSelf **/
  RequestSetImage(controller: inkIGameController, target: inkImage, iconID: TweakDBID, callbackFunction?: CName): void
  /** @noSelf **/
  RequestSetImage(controller: inkLogicController, target: inkImageRef, iconID: string, callbackFunction?: CName): void
  /** @noSelf **/
  RequestSetImage(controller: inkLogicController, target: inkImageRef, iconID: CName, callbackFunction?: CName): void
  /** @noSelf **/
  RequestSetImage(controller: inkLogicController, target: inkImageRef, iconID: TweakDBID, callbackFunction?: CName): void
  /** @noSelf **/
  RequestSetImage(controller: inkLogicController, target: inkImage, iconID: string, callbackFunction?: CName): void
  /** @noSelf **/
  RequestSetImage(controller: inkLogicController, target: inkImage, iconID: CName, callbackFunction?: CName): void
  /** @noSelf **/
  RequestSetImage(controller: inkLogicController, target: inkImage, iconID: TweakDBID, callbackFunction?: CName): void
}

declare interface inkWidgetRef {

  /** @noSelf **/
  Get(self: inkWidgetRef): inkWidget
  /** @noSelf **/
  IsValid(self: inkWidgetRef): Bool
  /** @noSelf **/
  Equals(self: inkWidgetRef, other: inkWidgetRef): Bool
  /** @noSelf **/
  GetName(self: inkWidgetRef): CName
  /** @noSelf **/
  SetName(self: inkWidgetRef, widgetName: CName): void
  /** @noSelf **/
  GetController(self: inkWidgetRef): inkLogicController
  /** @noSelf **/
  GetControllerByType(self: inkWidgetRef, controllerType: CName): inkLogicController
  /** @noSelf **/
  GetControllers(self: inkWidgetRef): inkLogicController[]
  /** @noSelf **/
  GetControllersByType(self: inkWidgetRef, controllerType: CName): inkLogicController[]
  /** @noSelf **/
  GetNumControllers(self: inkWidgetRef): number
  /** @noSelf **/
  GetNumControllersOfType(self: inkWidgetRef, controllerType: CName): number
  /** @noSelf **/
  GetStylePath(self: inkWidgetRef): ResRef
  /** @noSelf **/
  SetStyle(self: inkWidgetRef, styleResPath: ResRef): void
  /** @noSelf **/
  GetState(self: inkWidgetRef): CName
  /** @noSelf **/
  SetState(self: inkWidgetRef, state: CName): void
  /** @noSelf **/
  DefaultState(self: inkWidgetRef): CName
  /** @noSelf **/
  IsVisible(self: inkWidgetRef): Bool
  /** @noSelf **/
  SetVisible(self: inkWidgetRef, visible: Bool): void
  /** @noSelf **/
  IsInteractive(self: inkWidgetRef): Bool
  /** @noSelf **/
  SetInteractive(self: inkWidgetRef, value: Bool): void
  /** @noSelf **/
  SetLayout(self: inkWidgetRef, layout: inkWidgetLayout): void
  /** @noSelf **/
  GetMargin(self: inkWidgetRef): inkMargin
  /** @noSelf **/
  SetMargin(self: inkWidgetRef, margin: inkMargin): void
  /** @noSelf **/
  SetMargin(self: inkWidgetRef, left: number, top: number, right: number, bottom: number): void
  /** @noSelf **/
  UpdateMargin(self: inkWidgetRef, left: number, top: number, right: number, bottom: number): void
  /** @noSelf **/
  GetPadding(self: inkWidgetRef): inkMargin
  /** @noSelf **/
  SetPadding(self: inkWidgetRef, padding: inkMargin): void
  /** @noSelf **/
  SetPadding(self: inkWidgetRef, left: number, top: number, right: number, bottom: number): void
  /** @noSelf **/
  GetHAlign(self: inkWidgetRef): inkEHorizontalAlign
  /** @noSelf **/
  SetHAlign(self: inkWidgetRef, hAlign: inkEHorizontalAlign): void
  /** @noSelf **/
  GetVAlign(self: inkWidgetRef): inkEVerticalAlign
  /** @noSelf **/
  SetVAlign(self: inkWidgetRef, vAlign: inkEVerticalAlign): void
  /** @noSelf **/
  GetAnchor(self: inkWidgetRef): inkEAnchor
  /** @noSelf **/
  SetAnchor(self: inkWidgetRef, anchor: inkEAnchor): void
  /** @noSelf **/
  GetAnchorPoint(self: inkWidgetRef): Vector2
  /** @noSelf **/
  SetAnchorPoint(self: inkWidgetRef, anchorPoint: Vector2): void
  /** @noSelf **/
  SetAnchorPoint(self: inkWidgetRef, x: number, y: number): void
  /** @noSelf **/
  GetSizeRule(self: inkWidgetRef): inkESizeRule
  /** @noSelf **/
  SetSizeRule(self: inkWidgetRef, sizeRule: inkESizeRule): void
  /** @noSelf **/
  GetSizeCoefficient(self: inkWidgetRef): number
  /** @noSelf **/
  SetSizeCoefficient(self: inkWidgetRef, sizeCoefficient: number): void
  /** @noSelf **/
  GetFitToContent(self: inkWidgetRef): Bool
  /** @noSelf **/
  SetFitToContent(self: inkWidgetRef, fitToContent: Bool): void
  /** @noSelf **/
  GetSize(self: inkWidgetRef): Vector2
  /** @noSelf **/
  SetSize(self: inkWidgetRef, size: Vector2): void
  /** @noSelf **/
  SetSize(self: inkWidgetRef, width: number, height: number): void
  /** @noSelf **/
  GetWidth(self: inkWidgetRef): number
  /** @noSelf **/
  GetHeight(self: inkWidgetRef): number
  /** @noSelf **/
  SetWidth(self: inkWidgetRef, width: number): void
  /** @noSelf **/
  SetHeight(self: inkWidgetRef, height: number): void
  /** @noSelf **/
  GetDesiredSize(self: inkWidgetRef): Vector2
  /** @noSelf **/
  GetDesiredWidth(self: inkWidgetRef): number
  /** @noSelf **/
  GetDesiredHeight(self: inkWidgetRef): number
  /** @noSelf **/
  GetTintColor(self: inkWidgetRef): HDRColor
  /** @noSelf **/
  SetTintColor(self: inkWidgetRef, color: HDRColor): void
  /** @noSelf **/
  SetTintColor(self: inkWidgetRef, color: Color): void
  /** @noSelf **/
  SetTintColor(self: inkWidgetRef, r: number, g: number, b: number, a: number): void
  /** @noSelf **/
  GetOpacity(self: inkWidgetRef): number
  /** @noSelf **/
  SetOpacity(self: inkWidgetRef, opacity: number): void
  /** @noSelf **/
  GetRenderTransformPivot(self: inkWidgetRef): Vector2
  /** @noSelf **/
  SetRenderTransformPivot(self: inkWidgetRef, pivot: Vector2): void
  /** @noSelf **/
  SetRenderTransformPivot(self: inkWidgetRef, x: number, y: number): void
  /** @noSelf **/
  SetScale(self: inkWidgetRef, scale: Vector2): void
  /** @noSelf **/
  GetScale(self: inkWidgetRef): Vector2
  /** @noSelf **/
  SetShear(self: inkWidgetRef, shear: Vector2): void
  /** @noSelf **/
  GetShear(self: inkWidgetRef): Vector2
  /** @noSelf **/
  SetRotation(self: inkWidgetRef, angleInDegrees: number): void
  /** @noSelf **/
  GetRotation(self: inkWidgetRef): number
  /** @noSelf **/
  SetTranslation(self: inkWidgetRef, translationVector: Vector2): void
  /** @noSelf **/
  GetTranslation(self: inkWidgetRef): Vector2
  /** @noSelf **/
  ChangeTranslation(self: inkWidgetRef, translationVector: Vector2): void
  /** @noSelf **/
  SetTranslation(self: inkWidgetRef, x: number, y: number): void
  /** @noSelf **/
  PlayAnimation(self: inkWidgetRef, animationDefinition: inkAnimDef): inkAnimProxy
  /** @noSelf **/
  PlayAnimationWithOptions(self: inkWidgetRef, animationDefinition: inkAnimDef, playbackOptions: inkAnimOptions): inkAnimProxy
  /** @noSelf **/
  StopAllAnimations(self: inkWidgetRef): void
  /** @noSelf **/
  CallCustomCallback(self: inkWidgetRef, eventName: CName): void
  /** @noSelf **/
  RegisterToCallback(self: inkWidgetRef, eventName: CName, object: IScriptable, functionName: CName): void
  /** @noSelf **/
  UnregisterFromCallback(self: inkWidgetRef, eventName: CName, object: IScriptable, functionName: CName): void
  /** @noSelf **/
  HasUserDataObject(self: inkWidgetRef, userDataTypeName: CName): Bool
  /** @noSelf **/
  GetUserDataObjectCount(self: inkWidgetRef, userDataTypeName: CName): number
  /** @noSelf **/
  GetUserData(self: inkWidgetRef, userDataTypeName: CName): inkUserData
  /** @noSelf **/
  GetUserDataArray(self: inkWidgetRef, userDataTypeName: CName): inkUserData[]
  /** @noSelf **/
  GatherUserData(self: inkWidgetRef, userDataTypeName: CName, userDataCollection: inkUserData[]): void
  /** @noSelf **/
  Reparent(self: inkWidgetRef, newParent: inkCompoundWidget, index?: number): void
}

declare interface inkLeafRef extends inkWidgetRef {

}

declare interface inkIconReference extends IScriptable {

}

declare interface UIIconReference extends inkIconReference {

}

declare interface inkImage extends inkLeafWidget {

  SetBrushTileType(tileType: inkBrushTileType): void
  SetBrushMirrorType(mirrorType: inkBrushMirrorType): void
  SetTexturePart(texturePart: CName): Bool
  IsTexturePartExist(texturePart: CName): Bool
  GetTexturePart(): CName
  SetAtlasResource(atlasResourcePath: ResRef): void
  SetActiveTextureType(activeTextureType: inkTextureType): void
  GetActiveTextureType(): inkTextureType
  GetContentHAlign(): inkEHorizontalAlign
  SetContentHAlign(contentHAlign: inkEHorizontalAlign): void
  GetContentVAlign(): inkEVerticalAlign
  SetContentVAlign(contentVAlign: inkEVerticalAlign): void
  RequestSetImage(iconRefernce: inkIconReference, callbackTarget?: IScriptable, callbackName?: CName): void
}

declare interface inkImageRef extends inkLeafRef {

  /** @noSelf **/
  SetBrushTileType(self: inkImageRef, tileType: inkBrushTileType): void
  /** @noSelf **/
  SetBrushMirrorType(self: inkImageRef, mirrorType: inkBrushMirrorType): void
  /** @noSelf **/
  SetTexturePart(self: inkImageRef, texturePart: CName): Bool
  /** @noSelf **/
  IsTexturePartExist(self: inkImageRef, texturePart: CName): Bool
  /** @noSelf **/
  GetTexturePart(self: inkImageRef): CName
  /** @noSelf **/
  SetAtlasResource(self: inkImageRef, atlasResourcePath: ResRef): void
  /** @noSelf **/
  SetActiveTextureType(self: inkImageRef, activeTextureType: inkTextureType): void
  /** @noSelf **/
  GetActiveTextureType(self: inkImageRef): inkTextureType
  /** @noSelf **/
  RequestSetImage(self: inkImageRef, iconRefernce: inkIconReference, callbackTarget?: IScriptable, callbackName?: CName): void
}

declare interface StarController extends inkLogicController {

  SetBounty(arg: Bool): void
}

declare interface inkAnimOptions {

}

declare interface WantedBarStartFlashEvent extends Event {

}

declare interface WantedBarEndFlashEvent extends Event {

}

declare interface WantedBarFlashAndHideEvent extends Event {

}

declare interface WantedBarFlashAndShowEvent extends Event {

}

declare interface PreventionSpawnSystem extends IPreventionSpawnSystem {

  RequestSpawn(recordID: TweakDBID, preventionLevel: number, spawnTransform: WorldTransform): EntityID
  RequestDespawn(entityID: EntityID): void
  RequestDespawnPreventionLevel(preventionLevel: number): void
  GetNumberOfSpawnedPreventionUnits(): number
  SpawnCallback(spawnedObject: GameObject): void
}

declare interface AICombatRelatedCommand extends AICommand {

}

declare interface AIInjectCombatThreatCommand extends AICombatRelatedCommand {

}

declare interface RegisterUnitRequest extends ScriptableSystemRequest {

}

declare interface RegisterVehicleRequest extends ScriptableSystemRequest {

}

declare interface PreventionDelayedSpawnUnitRequest extends ScriptableSystemRequest {

}

declare interface PreventionDelayedSpawnRequest extends ScriptableSystemRequest {

}

declare interface Vehicle_Record extends SpawnableObject_Record {

  Traffic_audio_resource(): string
  Player_audio_resource(): string
  VehPassL_ProceduralFPPCameraParams(): VehicleProceduralFPPCameraParams_Record
  Driving(): BaseDrivingParameters_Record
  Type(): VehicleType_Record
  TppCameraParams(): VehicleTPPCameraParams_Record
  VehDriver_ProceduralFPPCameraParams(): VehicleProceduralFPPCameraParams_Record
  FxCollision(): VehicleFxCollision_Record
  VehDriveModelDataAI(): VehicleDriveModelData_Record
  VehAirControlAI(): VehicleAirControl_Record
  VehCrowdCollisionParams(): VehicleCrowdCollisionsParams_Record
  VehPassR_ProceduralFPPCameraParams(): VehicleProceduralFPPCameraParams_Record
  VehPassCombatR_FPPCameraParams(): VehicleFPPCameraParams_Record
  VehDriver_FPPCameraParams(): VehicleFPPCameraParams_Record
  VehPassCombatL_FPPCameraParams(): VehicleFPPCameraParams_Record
  Manufacturer(): VehicleManufacturer_Record
  Destruction(): VehicleDestruction_Record
  VehEngineData(): VehicleEngineData_Record
  VehDataPackage(): VehicleDataPackage_Record
  VehDriverCombat_ProceduralFPPCameraParams(): VehicleProceduralFPPCameraParams_Record
  VehDefaultState(): VehicleDefaultState_Record
  FxWheelsParticles(): VehicleFxWheelsParticles_Record
  VehPassR_FPPCameraParams(): VehicleFPPCameraParams_Record
  VehAirControl(): VehicleAirControl_Record
  CrowdMemberSettings(): CrowdSettingsPackageBase_Record
  VehDriverCombat_FPPCameraParams(): VehicleFPPCameraParams_Record
  VehPassCombatL_ProceduralFPPCameraParams(): VehicleProceduralFPPCameraParams_Record
  VehBehaviorData(): VehicleBehaviorData_Record
  VehWheelDimensionsSetup(): VehicleWheelDimensionsSetup_Record
  FxWheelsDecals(): VehicleFxWheelsDecals_Record
  Affiliation(): Affiliation_Record
  VehDriveModelData(): VehicleDriveModelData_Record
  CameraManagerParams(): VehicleCameraManager_Record
  Icon(): UIIcon_Record
  VehPassL_FPPCameraParams(): VehicleFPPCameraParams_Record
  VehPassCombatR_ProceduralFPPCameraParams(): VehicleProceduralFPPCameraParams_Record
  Model(): VehicleModel_Record
  VisualDestruction(): VehicleVisualDestruction_Record
  VehicleUIData(): VehicleUIData_Record
  VehImpactTraffic(): VehicleImpactTraffic_Record
  InteriorDamageColor(): number[]
  GetInteriorDamageColorCount(): number
  GetInteriorDamageColorItem(index: number): number
  InteriorDamageColorContains(item: number): Bool
  LeftBlinkerlightColor(): number[]
  GetLeftBlinkerlightColorCount(): number
  GetLeftBlinkerlightColorItem(index: number): number
  LeftBlinkerlightColorContains(item: number): Bool
  HeadlightColor(): number[]
  GetHeadlightColorCount(): number
  GetHeadlightColorItem(index: number): number
  HeadlightColorContains(item: number): Bool
  ReverselightColor(): number[]
  GetReverselightColorCount(): number
  GetReverselightColorItem(index: number): number
  ReverselightColorContains(item: number): Bool
  RightBLinkerlightColor(): number[]
  GetRightBLinkerlightColorCount(): number
  GetRightBLinkerlightColorItem(index: number): number
  RightBLinkerlightColorContains(item: number): Bool
  InteriorColor(): number[]
  GetInteriorColorCount(): number
  GetInteriorColorItem(index: number): number
  InteriorColorContains(item: number): Bool
  AttachmentSlots(outList: AttachmentSlot_Record[]): void
  GetAttachmentSlotsCount(): number
  GetAttachmentSlotsItem(index: number): AttachmentSlot_Record
  AttachmentSlotsContains(item: AttachmentSlot_Record): Bool
  BrakelightColor(): number[]
  GetBrakelightColorCount(): number
  GetBrakelightColorItem(index: number): number
  BrakelightColorContains(item: number): Bool
  TppCameraPresets(outList: VehicleTPPCameraPresetParams_Record[]): void
  GetTppCameraPresetsCount(): number
  GetTppCameraPresetsItem(index: number): VehicleTPPCameraPresetParams_Record
  TppCameraPresetsContains(item: VehicleTPPCameraPresetParams_Record): Bool
  Weapons(outList: VehicleWeapon_Record[]): void
  GetWeaponsCount(): number
  GetWeaponsItem(index: number): VehicleWeapon_Record
  WeaponsContains(item: VehicleWeapon_Record): Bool
  RandomPassengers(outList: RandomPassengerEntry_Record[]): void
  GetRandomPassengersCount(): number
  GetRandomPassengersItem(index: number): RandomPassengerEntry_Record
  RandomPassengersContains(item: RandomPassengerEntry_Record): Bool
  QueryOnlyExceptions(): CName[]
  GetQueryOnlyExceptionsCount(): number
  GetQueryOnlyExceptionsItem(index: number): CName
  QueryOnlyExceptionsContains(item: CName): Bool
  DisplayName(): CName
  WidgetStyleSheetPath(): ResRef
  ArchetypeName(): CName
  AudioResourceName(): CName
  DestroyedAppearance(): CName
  CurvesPath(): ResRef
  UnmountOffsetPosition(): Vector3
  RightFrontCamberOffset(): Vector3
  LeftFrontCamberOffset(): Vector3
  RightBackCamberOffset(): Vector3
  LeftBackCamberOffset(): Vector3
  RightBackCamber(): number
  LeftBackCamber(): number
  LeftFrontCamber(): number
  RightFrontCamber(): number
  EnableDestruction(): Bool
}

declare interface VehicleDataPackage_Record extends TweakDBRecord {

  VehSeatSet(): VehicleSeatSet_Record
  AnimVars(): CName[]
  GetAnimVarsCount(): number
  GetAnimVarsItem(index: number): CName
  AnimVarsContains(item: CName): Bool
  BoneNames(): CName[]
  GetBoneNamesCount(): number
  GetBoneNamesItem(index: number): CName
  BoneNamesContains(item: CName): Bool
  FppCameraOverride(): CName
  SeatingTemplateOverride(): CName
  FromCombat(): number
  ParkingAngle(): number
  SwitchSeats(): number
  SpoilerSpeedToDeploy(): number
  Stealing(): number
  KnockOffForce(): number
  ToCombat(): number
  ExitDelay(): number
  Normal_open(): number
  Stealing_open(): number
  SlideDuration(): number
  SpeedToClose(): number
  Entering(): number
  SpoilerSpeedToRetract(): number
  Open_close_duration(): number
  HasSiren(): Bool
  CanStoreBody(): Bool
  BarnDoorsTailgate(): Bool
  HasTurboCharger(): Bool
  HasSpoiler(): Bool
  InteractiveTrunk(): Bool
  SlidingRearDoors(): Bool
  SupportsCombat(): Bool
  InteractiveHood(): Bool
  DisableSwitchSeats(): Bool
}

declare interface VehicleSeatSet_Record extends TweakDBRecord {

  VehSeats(outList: VehicleSeat_Record[]): void
  GetVehSeatsCount(): number
  GetVehSeatsItem(index: number): VehicleSeat_Record
  VehSeatsContains(item: VehicleSeat_Record): Bool
}

declare interface VehicleSeat_Record extends TweakDBRecord {

  SeatName(): CName
}

declare interface MountingSlotId {

}

declare interface SHitNPC {

}

declare interface PreventionDamageRequest extends ScriptableSystemRequest {

}

declare interface Box {

  /** @noSelf **/
  GetSize(box: Box): Vector4
  /** @noSelf **/
  GetExtents(box: Box): Vector4
  /** @noSelf **/
  GetRange(box: Box): number
}

declare interface CommunitySystem extends ICommunitySystem {

  EnableDynamicCrowdNullArea(areaLocalBBox: Box, areaLocalToWorld: WorldTransform, savable: Bool, duration: number): number
  DisableCrowdNullArea(areaId: number): void
}

declare interface PreventionTickRequest extends ScriptableSystemRequest {

}

declare interface InteractiveMasterDevice extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetDevicePS(): MasterControllerPS
  GetController(): MasterController
  CreateBlackboard(): void
  GetBlackboardDef(): MasterDeviceBaseBlackboardDef
  DeactivateDevice(): void
  ActivateDevice(): void
  OnSlaveStateChanged(evt: PSDeviceChangedEvent): Bool
  OnRequestSlaveThumbnailWidgetsUpdate(evt: RequestThumbnailWidgetsUpdateEvent): Bool
  GetDefaultGlitchVideoPath(): ResRef
  GetBroadcastGlitchVideoPath(): ResRef
  OnDeviceWidgetUpdate(evt: RequestDeviceWidgetUpdateEvent): Bool
  OnRequestSlaveDevicesWidgetsUpdate(evt: RequestDeviceWidgetsUpdateEvent): Bool
  RequestThumbnailWidgetsUpdate(blackboard: IBlackboard): void
  ShouldShowTerminalTitle(): Bool
  NotifyConnectionHighlightSystem(IsHighlightON: Bool, IsHighlightedByMasterDevice: Bool): Bool
  OnSetAsQuestImportantEvent(evt: SetAsQuestImportantEvent): Bool
  OnPerformedAction(evt: PerformedAction): Bool
}

declare interface MasterController extends ScriptableDC {

  GetPS(): MasterControllerPS
}

declare interface RevealNetworkGridEvent extends Event {

}

declare interface RevealDevicesGridEvent extends Event {

}

declare interface UnTagObjectRequest extends ScriptableSystemRequest {

}

declare interface FocusModeTaggingSystem extends ScriptableSystem {

  OnAttach(): void
  OnDetach(): void
  RegisterPlayerAttachedCallback(): void
  UnregisterPlayerAttachedCallback(): void
  RegisterPlayerDetachedCallback(): void
  UnregisterPlayerDetachedCallback(): void
  OnPlayerAttachedCallback(playerPuppet: GameObject): void
  OnPlayerDetachedCallback(playerPuppet: GameObject): void
  GetPlayerStateMachineBlackboard(playerPuppet: GameObject): IBlackboard
  GetScannerTargetID(): EntityID
  GetNetworkSystem(): NetworkSystem
  GetHudManager(): HUDManager
  RequestUntagAll(): void
  Register(source: GameObject): void
  Unregister(source: GameObject): void
  TagObject(target: GameObject): void
  UntagObject(target: GameObject): void
  UntagAll(): void
  ResolveFocusClues(tag: Bool, target: GameObject): void
  SendForceRevealObjectEvent(reveal: Bool, target: GameObject): void
  SendForceVisionApperaceEvent(enable: Bool, target: GameObject, highlightType: EFocusForcedHighlightType): void
  IsTagged(target: GameObject): Bool
  IsPlayerAiming(playerPuppet: GameObject): Bool
  IsPlayerInFocusMode(playerPuppet: GameObject): Bool
  CanTag(): Bool
  OnActionWithOwner(action: ListenerAction, consumer: ListenerActionConsumer, owner: GameObject): Bool
  OnTagObjectRequest(request: TagObjectRequest): void
  OnUnTagObjectRequest(request: UnTagObjectRequest): void
  OnUnTagAllObjectRequest(request: UnTagAllObjectRequest): void
  OnRegisterInputListenerRequest(request: RegisterInputListenerRequest): void
  OnUnRegisterInputListenerRequest(request: UnRegisterInputListenerRequest): void
  OnRegisterLitenerToTaggedList(request: RegisterToListListener): void
  NotifyNetworkSystem(): void
  NotifyHudManager(isTagged: Bool, target: GameObject): void
  RefreshUI(target: GameObject): void
  RegisterObjectToBlackboard(target: GameObject): void
  UnRegisterObjectToBlackboard(target: GameObject): void
  UnRegisterAllObjectToBlackboard(): void
  GetTaggedObjectsList(): GameObject[]
  AddTaggedListener(object: GameObject, funcName: CName): void
  CleanupTaggedObjects(listToClean: GameObject[]): GameObject[]
}

declare interface RuntimeInfo extends IScriptable {

  IsSingleplayer(): Bool
  IsMultiplayer(): Bool
  IsClient(): Bool
  IsServer(): Bool
}

declare interface UnTagAllObjectRequest extends ScriptableSystemRequest {

}

declare interface TagStatusNotification extends HUDManagerRequest {

}

declare interface TaggedObjectsListDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface UpdateNetworkVisualisationRequest extends ScriptableSystemRequest {

}

declare interface TagObjectRequest extends ScriptableSystemRequest {

}

declare interface RegisterInputListenerRequest extends ScriptableSystemRequest {

}

declare interface UnRegisterInputListenerRequest extends ScriptableSystemRequest {

}

declare interface RegisterToListListener extends ScriptableSystemRequest {

}

declare interface EvaluateGameplayRoleEvent extends Event {

}

declare interface RequestWidgetUpdateEvent extends Event {

}

declare interface RequestDeviceWidgetsUpdateEvent extends RequestWidgetUpdateEvent {

}

declare interface HighlightConnectionsRequest extends ScriptableSystemRequest {

}

declare interface DeviceConnectionsHighlightSystem extends ScriptableSystem {

  OnHighlightConnectionsRequest(request: HighlightConnectionsRequest): void
  TurnOffAllHighlights(): void
}

declare interface HighlightConnectionComponentEvent extends Event {

}

declare interface GlobalNodeID {

  /** @noSelf **/
  IsDefined(id: GlobalNodeID): Bool
  /** @noSelf **/
  GetRoot(): GlobalNodeID
}

declare interface NotifyHighlightedDevice extends Event {

}

declare interface SetAsQuestImportantEvent extends Event {

  GetFriendlyDescription(): string
  IsImportant(): Bool
  SetImportant(important: Bool): void
  PropagateToSlaves(): Bool
}

declare interface PerformedAction extends Event {

}

declare interface ActionsSequencerControllerPS extends MasterControllerPS {

  Initialize(): void
  OnForwardAction(evt: ForwardAction): EntityNotificationType
  IsActionTypeMachingPreferences(forwardEvent: ForwardAction): Bool
  WasExecutedByMaster(forwardEvent: ForwardAction): Bool
  CommenceSequence(actionToForward: ScriptableDeviceAction, eligibleSlaves: DeviceComponentPS[], delays: number[]): void
  OnSequenceCallback(evt: SequenceCallback): EntityNotificationType
  ForceUnlockSlave(persistentID: PersistentID, className: CName): void
  ForceLockOnAllSlaves(): void
  CleanupSequence(): void
  GetEligibleSlaves(sequenceInitiator: PersistentID): DeviceComponentPS[]
  GetDelayTimeStamps(intervals: number): number[]
  GetRegularDelays(amountOfIntervals: number, delays: number[]): void
  GetAcceleratingDelays(amountOfIntervals: number, delays: number[]): void
  GetDecceleratingDelays(amountOfIntervals: number, delays: number[]): void
  GetRandomDelays(amountOfIntervals: number, delays: number[]): void
  IsSequenceOngoing(): Bool
  GetQuestActions(outActions: DeviceAction[], context: GetActionsContext): void
  OnQuestForceOFF(evt: QuestForceOFF): EntityNotificationType
  OnQuestForceON(evt: QuestForceON): EntityNotificationType
  OnQuestForceUnpower(evt: QuestForceUnpower): EntityNotificationType
  OnQuestForcePower(evt: QuestForcePower): EntityNotificationType
  OnSetDeviceON(evt: SetDeviceON): EntityNotificationType
  OnSetDeviceOFF(evt: SetDeviceOFF): EntityNotificationType
  OnSetDevicePowered(evt: SetDevicePowered): EntityNotificationType
  OnSetDeviceUnpowered(evt: SetDeviceUnpowered): EntityNotificationType
  OnActivateDevice(evt: ActivateDevice): EntityNotificationType
  OnDeactivateDevice(evt: DeactivateDevice): EntityNotificationType
}

declare interface ForwardAction extends Event {

}

declare interface SActionTypeForward {

}

declare interface ActionsSequence {

}

declare interface SequencerLock extends Event {

}

declare interface SequenceCallback extends Event {

}

declare interface SetGameplayObjectiveStateRequest extends ScriptableSystemRequest {

}

declare interface GameplayQuestSystem extends ScriptableSystem {

  OnRegisterObjective(request: RegisterGameplayObjectiveRequest): void
  OnSetObjectiveState(request: SetGameplayObjectiveStateRequest): void
  AddObjective(objectiveData: GemplayObjectiveData): void
  SetObjectiveState(objectiveData: GemplayObjectiveData, objectiveState: gameJournalEntryState): void
  HasQuest(questUniqueId: string): Bool
  GetQuestData(objectiveData: GemplayObjectiveData): GamplayQuestData
  CreateQuest(objectiveData: GemplayObjectiveData): GamplayQuestData
  EvaluateQuest(questData: GamplayQuestData): void
  RemoveQuest(questData: GamplayQuestData): Bool
  GetJournal(): JournalManager
}

declare interface GamplayQuestData extends IScriptable {

  GetFreeObjectivePath(): string
  GetbjectivePath(objectiveData: GemplayObjectiveData): string
  GetFreeObjectiveEntryID(): string
  AddObjective(objectiveData: GemplayObjectiveData, journal: JournalManager): void
  HasObjective(objectiveData: GemplayObjectiveData): Bool
  GetObjective(objectiveData: GemplayObjectiveData): GemplayObjectiveData
  CreateObjective(objectiveData: GemplayObjectiveData, journal: JournalManager): Bool
  SetObjectiveState(objectiveData: GemplayObjectiveData, journal: JournalManager, state: gameJournalEntryState): void
  IsCompleted(): Bool
  GetQuestEntryID(): string
  GetPhaseEntryID(): string
  GetBaseObjectiveEntryID(): string
  GetMappinEntryID(): string
  GetFreeQuestMappinPath(): string
}

declare interface RegisterGameplayObjectiveRequest extends ScriptableSystemRequest {

}

declare interface LiftDevice extends InteractiveMasterDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetDevicePS(): LiftControllerPS
  GetController(): LiftController
  IsPlayerInsideLift(): Bool
  CreateBlackboard(): void
  GetBlackboardDef(): ElevatorDeviceBlackboardDef
  IsDeviceMovableScript(): Bool
  OnGameAttached(): Bool
  ResolveGameplayState(): void
  DetermineInteractionState(context?: GetActionsContext): void
  OnInitializeFloorsData(evt: RefreshFloorDataEvent): Bool
  OnSlaveStateChanged(evt: PSDeviceChangedEvent): Bool
  UpdateDeviceState(isDelayed?: Bool): Bool
  RefreshFloorsData_Event(): void
  RefreshFloorsAuthorizationData_Event(): void
  OnDetach(): Bool
  GetMovingMode(): number
  MoveToFloor(starting: number, ending: number, type: gameMovingPlatformMovementInitializationType, value: number, destName?: CName, shouldMuteSound?: Bool): void
  SendMoveToFloorEvent(starting: number, ending: number, type: gameMovingPlatformMovementInitializationType, value: number, destName?: CName): void
  PauseMovement(): void
  UnpauseMovement(): void
  StopMovement(): void
  OnGoToFloor(evt: GoToFloor): Bool
  SendLiftStartDelayedEvent(target: number): void
  PlayHandAnimationOnPlayer(): void
  OnLiftStartDelayEvent(evt: LiftStartDelayEvent): Bool
  OnQuestGoToFloor(evt: QuestGoToFloor): Bool
  OnQuestForceGoToFloor(evt: QuestForceGoToFloor): Bool
  OnQuestForceTeleportToFloor(evt: QuestForceTeleportToFloor): Bool
  MoveToFloor(start: number, target: number): void
  OnQuestStopElevator(evt: QuestStopElevator): Bool
  OnQuestResumeElevator(evt: QuestResumeElevator): Bool
  OnQuestCloseAllDoors(evt: QuestCloseAllDoors): Bool
  OnQuestToggleAds(evt: QuestToggleAds): Bool
  RefreshAdsState(): void
  OnQuestSetRadioStation(evt: QuestSetRadioStation): Bool
  OnDisableRadio(evt: QuestDisableRadio): Bool
  OnCallElevator(evt: CallElevator): Bool
  SendArrivedAtFloorEvent(activeFloor: number): void
  SendLiftDepartedEvent(activeFloor: number): void
  NotifyFloors(): void
  OnLiftSetMovementStateEvent(evt: LiftSetMovementStateEvent): Bool
  OnArrivedAt(evt: ArrivedAt): Bool
  OnBeforeArrivedAt(evt: BeforeArrivedAt): Bool
  SetUsesSleepMode(allowSleepState: Bool): void
  PlayRadioStation(): void
  UpdateAnimState(isOpenFront: Bool, isOpenLeft: Bool, isOpenRight: Bool): void
  RefreshSpeaker(): void
  SendLiftDataToUIBlackboard(displayFloor: string, force?: Bool): void
  GetProperDisplayFloorNumber(floor: number): string
  SetMovementState(movementState: gamePlatformMovementState): void
  SetIsPlayerInsideLift(value: Bool): void
  SetIsPausedBlackboard(value: Bool): void
  SetIsPlayerScannedBlackboard(value: Bool): void
  SendLiftMovementLoadEvent(): void
  OnLiftMovementLoadEvent(evt: LiftMovementLoadEvent): Bool
  OnScanPlayerDelayEvent(evt: ScanPlayerDelayEvent): Bool
  SetIsMovingFromToFloor(startingFloor: number, destinationFloor: number, teleport: Bool): void
  InitializeScreenDefinition(): void
  OnAreaEnter(trigger: AreaEnteredEvent): Bool
  OnAreaExit(trigger: AreaExitedEvent): Bool
  SetPlayerInsideElevatorBlackboard(isInside: Bool, isElevatorMoving?: Bool): void
  GetPlayerInsideElevatorBlackboard(): Bool
  ToggleSafeguardColliders(value: Bool): void
  /** @noSelf **/
  IsPlayerInsideElevator(game: GameInstance): Bool
  /** @noSelf **/
  GetCurrentElevator(game: GameInstance, elevator: GameObject): Bool
  ToggleOccluders(toggle: Bool): void
  OnMaraudersMapDeviceDebug(sink: MaraudersMapDevicesSink): void
  OnHit(evt: gameHitEvent): Bool
  OnRefreshPlayerAuthorizationEvent(evt: RefreshPlayerAuthorizationEvent): Bool
  EvaluateOffMeshLinks(): void
  EnableOffMeshConnections(): void
  DisableOffMeshConnections(): void
}

declare interface MovingPlatform extends IPlacedComponent {

  Pause(): number
  Unpause(time: number): gamePlatformMovementState
}

declare interface OffMeshConnectionComponent extends IComponent {

  EnableForPlayer(): void
  DisableForPlayer(): void
  EnableOffMeshConnection(): void
  DisableOffMeshConnection(): void
}

declare interface worlduiWidgetComponent extends IWorldWidgetComponent {

  GetScreenDefinition(): ScreenDefinitionPackage
  IsScreenDefinitionValid(): Bool
}

declare interface ScreenDefinitionPackage {

}

declare interface SUIScreenDefinition {

}

declare interface LiftController extends MasterController {

  GetPS(): LiftControllerPS
}

declare interface LiftControllerPS extends MasterControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  GameAttached(): void
  InitializeRadioStations(): void
  CreateRadioStation(SoundEvt: CName, ChannelName: string): RadioStationsMap
  GetStationByIndex(index: number): RadioStationsMap
  IsPlayerAuthorized(): Bool
  GetInkWidgetTweakDBID(context: GetActionsContext): TweakDBID
  GetStartingFloor(): number
  SetStartingFloor(terminalNumber: number): void
  GetLiftSpeed(): number
  GetLiftTravelTimeOverride(): number
  HasSpeaker(): Bool
  IsAdsDisabled(): Bool
  IsAdsEnabled(): Bool
  SetHasSpeaker(value: Bool): void
  GetCachedGoToFloorAction(): number
  SetCachedGoToFloorAction(value: number): void
  GetSpeakerDestroyedQuestFact(): CName
  GetSpeakerDestroyedVFX(): CName
  IsAllDoorsClosed(): Bool
  IsSpeakerDestroyed(): Bool
  SetSpeakerDestroyed(value: Bool): void
  GetActiveRadioStationNumber(): number
  IsLiftTravelTimeOverride(): Bool
  GetLiftStartingDelay(): number
  GetFloorID(number: number): EntityID
  GetFloorPSID(number: number): PersistentID
  GetFloors(): ElevatorFloorSetup[]
  GetFloorMarker(floorNumber: number): NodeRef
  SetIsPlayerInsideLift(state: Bool): void
  IsPlayerInsideLift(): Bool
  ChangeActiveFloor(newFloor: number): void
  ActionGoToFloor(numberOfFloors: number, currentFloor: number, floor: number, displayFloor: string, IsAuthorized: Bool): GoToFloor
  ActionCallElevator(isElevatorAtThisFloor: Bool, destination: number): CallElevator
  ActionQuickHackAuthorization(): QuickHackAuthorization
  ActionQuestShowFloor(): QuestShowFloor
  ActionQuestHideFloor(): QuestHideFloor
  ActionQuestSetFloorActive(): QuestSetFloorActive
  ActionQuestSetFloorInactive(): QuestSetFloorInactive
  ActionQuestSetRadioStation(): QuestSetRadioStation
  ActionQuestDisableRadio(): QuestDisableRadio
  ActionQuestCloseAllDoors(value: Bool): QuestCloseAllDoors
  ActionQuestToggleAds(value: Bool): QuestToggleAds
  ActionQuestGoToFloor(): QuestGoToFloor
  ActionQuestForceGoToFloor(): QuestForceGoToFloor
  ActionQuestForceTeleportToFloor(): QuestForceTeleportToFloor
  ActionQuestStopElevator(): QuestStopElevator
  ActionQuestResumeElevator(): QuestResumeElevator
  ActionQuestSetLiftSpeed(): QuestSetLiftSpeed
  ActionQuestSetLiftTravelTimeOverride(): QuestSetLiftTravelTimeOverride
  ActionQuestEnableLiftTravelTimeOverride(): QuestEnableLiftTravelTimeOverride
  ActionQuestDisableLiftTravelTimeOverride(): QuestDisableLiftTravelTimeOverride
  ActionLiftStatus(libraryName?: CName): LiftStatus
  ActionAuthorizeUser(): AuthorizeUser
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  GetQuestActions(outActions: DeviceAction[], context: GetActionsContext): void
  OnGoToFloor(evt: GoToFloor): EntityNotificationType
  OnCallElevator(evt: CallElevator): EntityNotificationType
  OnQuickHackAuthorization(evt: QuickHackAuthorization): EntityNotificationType
  SendSetAuthorizationModuleOFFToSlaves(): void
  OnQuestGoToFloor(evt: QuestGoToFloor): EntityNotificationType
  OnQuestShowFloor(evt: QuestShowFloor): EntityNotificationType
  OnQuestSetRadioStation(evt: QuestSetRadioStation): EntityNotificationType
  OnQuestDisableRadio(evt: QuestDisableRadio): EntityNotificationType
  OnQuestCloseAllDoors(evt: QuestCloseAllDoors): EntityNotificationType
  OnQuestToggleAds(evt: QuestToggleAds): EntityNotificationType
  OnQuestHideFloor(evt: QuestHideFloor): EntityNotificationType
  OnQuestSetFloorActive(evt: QuestSetFloorActive): EntityNotificationType
  OnQuestSetFloorInactive(evt: QuestSetFloorInactive): EntityNotificationType
  OnQuestForceGoToFloor(evt: QuestForceGoToFloor): EntityNotificationType
  OnQuestForceTeleportToFloor(evt: QuestForceTeleportToFloor): EntityNotificationType
  ProcessUnstreamedLiftMovement(floor: number): void
  OnQuestStopElevator(evt: QuestStopElevator): EntityNotificationType
  OnQuestResumeElevator(evt: QuestResumeElevator): EntityNotificationType
  OnQuestSetLiftSpeed(evt: QuestSetLiftSpeed): EntityNotificationType
  OnQuestSetLiftTravelTimeOverride(evt: QuestSetLiftTravelTimeOverride): EntityNotificationType
  OnQuestEnableLiftTravelTimeOverride(evt: QuestEnableLiftTravelTimeOverride): EntityNotificationType
  OnQuestDisableLiftTravelTimeOverride(evt: QuestDisableLiftTravelTimeOverride): EntityNotificationType
  OnLiftStatus(evt: LiftStatus): EntityNotificationType
  SyncDataWithFloorTerminal(terminalNumber: number): void
  GetActiveFloor(): number
  GetActiveFloorDisplayName(): string
  IsAtFloor(floorNumber: number): Bool
  IsMoving(): Bool
  IsFloorSelected(floor: number): Bool
  GetDeviceIconPath(): string
  GetBlackboardDef(): ElevatorDeviceBlackboardDef
  GetMovementState(): gamePlatformMovementState
  SetTimeWhenPaused(time: number): void
  GetTimeWhenPaused(): number
  GetFloorDataFromSlaves(): void
  GetFloorAuthorizationFromSlaves(): void
  InitializeFloorsData(): void
  EvaluateFloors(): void
  RefreshFloorsData_Event(passToEntity: Bool): void
  RefreshFloorsAuthorizationData_Event(passToEntity: Bool): void
  SetMovementState(state: gamePlatformMovementState): void
  OnLiftSetMovementStateEvent(evt: LiftSetMovementStateEvent): EntityNotificationType
  OnSetIsPlayerInsideLiftEvent(evt: SetIsPlayerInsideLiftEvent): EntityNotificationType
  OnRefreshFloorsData(evt: RefreshFloorDataEvent): EntityNotificationType
  OnRefreshFloorsAuthorizationData(evt: RefreshFloorAuthorizationDataEvent): EntityNotificationType
  OnRefreshPlayerAuthorizationEvent(evt: RefreshPlayerAuthorizationEvent): EntityNotificationType
  GetDeviceWidget(context: GetActionsContext): SDeviceWidgetPackage
  SendLiftDepartedEvent(activeFloor: number): void
}

declare interface LiftSetup {

}

declare interface RefreshFloorDataEvent extends Event {

}

declare interface RadioStationsMap {

}

declare interface ElevatorFloorSetup {

  /** @noSelf **/
  GetFloorName(self: ElevatorFloorSetup): string
}

declare interface GoToFloor extends ActionBool {

  SetProperties(floor: number): void
  GetCurrentDisplayString(): string
  GetProperDisplayFloorNumber(floor: number): string
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
  GetTweakDBChoiceRecord(): string
  GetInkWidgetLibraryPath(): ResRef
}

declare interface CallElevator extends ActionBool {

  SetProperties(destination: number): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface QuickHackAuthorization extends ActionBool {

  GetTweakDBChoiceRecord(): string
}

declare interface QuestShowFloor extends ActionInt {

  SetProperties(floor: number): void
}

declare interface QuestHideFloor extends ActionInt {

  SetProperties(floor: number): void
}

declare interface QuestSetFloorActive extends ActionInt {

  SetProperties(floor: number): void
}

declare interface QuestSetFloorInactive extends ActionInt {

  SetProperties(floor: number): void
}

declare interface QuestSetRadioStation extends ActionInt {

  SetProperties(station: number): void
}

declare interface QuestDisableRadio extends ActionBool {

  SetProperties(toggle: Bool): void
}

declare interface QuestCloseAllDoors extends ActionBool {

  SetProperties(toggle: Bool): void
}

declare interface QuestToggleAds extends ActionBool {

  SetProperties(toggle: Bool): void
}

declare interface QuestGoToFloor extends ActionInt {

  SetProperties(floor: number): void
}

declare interface QuestForceGoToFloor extends ActionInt {

  SetProperties(floor: number): void
}

declare interface QuestForceTeleportToFloor extends ActionInt {

  SetProperties(floor: number): void
}

declare interface QuestStopElevator extends ActionBool {

  SetProperties(): void
}

declare interface QuestResumeElevator extends ActionBool {

  SetProperties(): void
}

declare interface ActionFloat extends ScriptableDeviceAction {

  GetProperties(): DeviceActionProperty[]
  GetCurrentDisplayString(): string
}

declare interface QuestSetLiftSpeed extends ActionFloat {

  SetProperties(speed: number): void
}

declare interface QuestSetLiftTravelTimeOverride extends ActionFloat {

  SetProperties(speed: number): void
}

declare interface QuestEnableLiftTravelTimeOverride extends ActionBool {

  SetProperties(toggle: Bool): void
}

declare interface QuestDisableLiftTravelTimeOverride extends ActionBool {

  SetProperties(toggle: Bool): void
}

declare interface LiftStatus extends BaseDeviceStatus {

  GetInkWidgetTweakDBID(): TweakDBID
}

declare interface AuthorizeUser extends ActionBool {

  SetProperties(validPasswords: CName[]): void
  GetEnteredPassword(): CName
  ResolveAction(data: ResolveActionData): Bool
  GetValidPasswords(): CName[]
  GetInkWidgetTweakDBID(): TweakDBID
}

declare interface ResolveActionData extends IScriptable {

}

declare interface SetExposeQuickHacks extends ActionBool {

  SetProperties(): void
  GetTweakDBChoiceRecord(): string
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
}

declare interface TerminalControllerPS extends MasterControllerPS {

  OnInstantiated(): Bool
  GameAttached(): void
  LogicReady(): void
  InitializeVirtualSystems_Test(): void
  InitializeVirtualSystems(): void
  GetClearance(): Clearance
  ShouldShowTerminalTitle(): Bool
  GetDefaultGlitchVideoPath(): ResRef
  GetBroadcastGlitchVideoPath(): ResRef
  GenerateContext(requestType: gamedeviceRequestType, providedClearance: Clearance, providedProcessInitiator?: GameObject, providedRequestor?: EntityID): GetActionsContext
  GetMatchingVirtualSystemsData(device: DeviceComponentPS, listToCheck: DeviceComponentPS[], data: DeviceCounter): Bool
  HasMatchingVirtualSystemType(device: DeviceComponentPS, listToCheck: DeviceComponentPS[], type: EVirtualSystem): Bool
  HasAnyVirtualSystem(): Bool
  GetVirtualSystemsCount(): number
  IsPartOfAnyVirtualSystem(slave: DeviceComponentPS): Bool
  IsPartOfAnyVirtualSystem(slaveID: PersistentID): Bool
  GetSlaveDeviceWidget(deviceID: PersistentID): SDeviceWidgetPackage
  GetDeviceWidgets(): SDeviceWidgetPackage[]
  GetThumbnailWidgets(): SThumbnailWidgetPackage[]
  SpawnSurveillanceSystemUI(slavesToConnect: DeviceComponentPS[]): void
  SpawnSecuritySystemUI(slavesToConnect: DeviceComponentPS[]): void
  SpawnDoorSystemUI(slavesToConnect: DeviceComponentPS[]): void
  SpawnMediaSystemUI(slavesToConnect: DeviceComponentPS[]): void
  OnRequestDeviceWidgetUpdate(evt: RequestDeviceWidgetUpdateEvent): void
  GetForcedElevatorArrowsState(): EForcedElevatorArrowsState
  ActionToggleON(): ToggleON
  ActionQuestForceFakeElevatorArrows(isArrowsUp: Bool): QuestForceFakeElevatorArrows
  ActionQuestResetFakeElevatorArrows(): QuestResetFakeElevatorArrows
  ActionInstallKeylogger(): InstallKeylogger
  GetActions(outActions: DeviceAction[], context: GetActionsContext): Bool
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(outActions: DeviceAction[], context: GetActionsContext): void
  GetQuestActions(outActions: DeviceAction[], context: GetActionsContext): void
  OnQuestForceFakeElevatorArrows(evt: QuestForceFakeElevatorArrows): EntityNotificationType
  OnQuestResetFakeElevatorArrows(evt: QuestResetFakeElevatorArrows): EntityNotificationType
  ActionQuickHackToggleOpen(): QuickHackToggleOpen
  OnQuickHackToggleOpen(evt: QuickHackToggleOpen): EntityNotificationType
  OnActionEngineering(evt: ActionEngineering): EntityNotificationType
  OnActionInstallKeylogger(evt: InstallKeylogger): EntityNotificationType
  IsOwningSecuritySystem(secSys: SecuritySystemControllerPS): Bool
  ResolvePersonalLinkConnection(evt: TogglePersonalLink, abortOperations: Bool): void
  ResolveOtherSkillchecks(): void
  OnAuthorizeUser(evt: AuthorizeUser): EntityNotificationType
  OnSetState(evt: TerminalSetState): EntityNotificationType
  QuestCondition_IsStarted(): Bool
  QuestCondition_IsFinished(): Bool
  DisbleAuthorizationOnSlaves(): void
  EnableAuthorizationOnSlaves(): void
  AuthorizeUserOnSlaves(userToAuthorize: GameObject, password?: CName): void
  InstallKeyloggerOnSlaves(): void
  TurnAuthorizationModuleOFF(): void
  OnDisassembleDevice(evt: DisassembleDevice): EntityNotificationType
  GetInkWidgetTweakDBID(context: GetActionsContext): TweakDBID
}

declare interface TerminalSetup {

}

declare interface DeviceCounter {

}

declare interface VirtualSystemPS extends MasterControllerPS {

  GetDeviceWidget(context: GetActionsContext): SDeviceWidgetPackage
  GetDeviceWidget(context: GetActionsContext, data: SDeviceWidgetPackage[]): void
  GetDeviceStatus(): string
  GetInkWidgetTweakDBID(context: GetActionsContext): TweakDBID
  ActionThumbnailUI(): ThumbnailUI
  GetActions(outActions: DeviceAction[], context: GetActionsContext): Bool
  OnToggleON(evt: ToggleON): EntityNotificationType
  SendActionToAllSlaves(action: ScriptableDeviceAction): void
}

declare interface WidgetCustomData extends IScriptable {

}

declare interface SDeviceWidgetPackage extends SWidgetPackage {

}

declare interface TerminalSystemCustomData extends WidgetCustomData {

}

declare interface ThumbnailUI extends ActionBool {

  SetProperties(): void
  CreateThumbnailWidgetPackage(status?: string): void
  CreateThumbnailWidgetPackage(widgetTweakDBID: TweakDBID, status?: string): void
  GetInkWidgetLibraryPath(): ResRef
  GetInkWidgetLibraryID(): CName
  GetInkWidgetTweakDBID(): TweakDBID
  GetThumbnailWidgetPackage(): SThumbnailWidgetPackage
  ResolveThumbnailWidgetTweakDBData(): void
}

declare interface SThumbnailWidgetPackage extends SWidgetPackage {

}

declare interface SurveillanceSystemUIPS extends VirtualSystemPS {

  GetActions(outActions: DeviceAction[], context: GetActionsContext): Bool
  OnToggleTakeOverControl(evt: ToggleTakeOverControl): EntityNotificationType
  GetBackgroundTextureTweakDBID(): TweakDBID
  GetDeviceIconTweakDBID(): TweakDBID
}

declare interface VirtualComponentBinder {

  /** @noSelf **/
  Bind(game: GameInstance, entityID: EntityID, componentName: CName, psClassName: CName): PersistentState
}

declare interface SecuritySystemUIPS extends SurveillanceSystemUIPS {

}

declare interface DoorSystemUIPS extends VirtualSystemPS {

  GetActions(outActions: DeviceAction[], context: GetActionsContext): Bool
  ActionToggleOpen(): ToggleOpen
  OnToggleOpen(evt: ToggleOpen): EntityNotificationType
}

declare interface ToggleOpen extends ActionBool {

  SetProperties(isOpen: Bool, altOpenChoice?: CName, altCloseChoice?: CName): void
  /** @noSelf **/
  IsDefaultConditionMet(device: DoorControllerPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: DoorControllerPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetTweakDBChoiceRecord(): string
  GetInkWidgetTweakDBID(): TweakDBID
}

declare interface DoorControllerPS extends ScriptableDeviceComponentPS {

  OnInstantiated(): Bool
  Initialize(): void
  GameAttached(): void
  IsStatic(): Bool
  IsClosingAutomatically(): Bool
  GetOpeningTokensList(): EntityID[]
  IsOpen(): Bool
  IsLogicallyClosed(): Bool
  IsClosed(): Bool
  IsLocked(): Bool
  IsUnlocked(): Bool
  IsSealed(): Bool
  canPlayerToggleLockState(): Bool
  canPlayerToggleSealState(): Bool
  GetDoorType(): EDoorType
  GetDoorTypeSideTwo(): EDoorType
  GetDoorTypeSideOne(): EDoorType
  GetDoorSkillcheckSide(): EDoorSkillcheckSide
  GetDoorAuthorizationSide(): EDoorSkillcheckSide
  GetDoorTriggerSide(): EDoorTriggerSide
  GetOpeningSpeed(): number
  GetOpeningTime(): number
  GetStimRange(): number
  IsShutter(): Bool
  IsLiftDoor(): Bool
  IsBusy(): Bool
  GetPaymentRecordID(): TweakDBID
  GetPaymentRecord(): ActionPayment_Record
  CanPayToUnlock(): Bool
  ExposeQuickHakcsIfNotConnnectedToAP(): Bool
  GetDoorState(): EDoorStatus
  IsSideOneActive(): Bool
  IsSideTwoActive(): Bool
  GetDeviceStatusAction(): DoorStatus
  SetNewDoorType(type: EDoorType): void
  SetTriggerSide(side: EDoorTriggerSide): void
  SetIsLocked(isLokced: Bool): void
  SetIsBusy(isBusy: Bool): void
  InitializeDoorTypes(): void
  SetDefaultDoorState(): void
  CheckIfLiftDoors(): Bool
  IsLiftFloorAuthorized(): Bool
  IsLiftAvailable(): Bool
  IsLiftUnauthorized(): Bool
  IsLiftMoving(): Bool
  PushResaveData(data: DoorResaveData): void
  DetermineGameplayViability(context: GetActionsContext, hasActiveActions: Bool): Bool
  GetInkWidgetTweakDBID(context: GetActionsContext): TweakDBID
  GetWidgetTypeName(): CName
  GetDeviceIconPath(): string
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
  GetWidgetVisualState(): EWidgetState
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  SetInactiveActionsWithExceptions(outActions: DeviceAction[]): void
  PushReturnActions(outActions: DeviceAction[], context: GetActionsContext): Bool
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  GetMinigameActions(actions: DeviceAction[], context: GetActionsContext): void
  GetQuestActions(actions: DeviceAction[], context: GetActionsContext): void
  PushSkillCheckActions(outActions: DeviceAction[], context: GetActionsContext): Bool
  IsTriggerValid(side: EDoorSkillcheckSide): Bool
  ActionDoorStatus(): DoorStatus
  ActionDoorOpeningToken(): DoorOpeningToken
  OnDoorOpeningToken(evt: DoorOpeningToken): EntityNotificationType
  ActionToggleOpen(): ToggleOpen
  OnSecuritySystemOutput(evt: SecuritySystemOutput): EntityNotificationType
  OnToggleOpen(evt: ToggleOpen): EntityNotificationType
  OnDoorCollision(): void
  ActionSetOpened(): SetOpened
  OnSetOpened(evt: SetOpened): EntityNotificationType
  ActionSetClosed(): SetClosed
  OnSetClosed(evt: SetClosed): EntityNotificationType
  ActionPay(context: GetActionsContext): Pay
  OnPay(evt: Pay): EntityNotificationType
  ActionQuickHackToggleOpen(): QuickHackToggleOpen
  ActionToggleLock(): ToggleLock
  OnToggleLock(evt: ToggleLock): EntityNotificationType
  OnForceLockElevator(evt: ForceLockElevator): EntityNotificationType
  OnForceUnlockAndOpenElevator(evt: ForceUnlockAndOpenElevator): EntityNotificationType
  ActionToggleSeal(): ToggleSeal
  OnToggleSeal(evt: ToggleSeal): EntityNotificationType
  ActionDemolition(context: GetActionsContext): ActionDemolition
  ActionCallElevator(): CallElevator
  OnCallElevator(evt: CallElevator): EntityNotificationType
  IsPlayerCarrying(): Bool
  OnActionDemolition(evt: ActionDemolition): EntityNotificationType
  OnActionEngineering(evt: ActionEngineering): EntityNotificationType
  OnActionForceResetDevice(evt: ActionForceResetDevice): EntityNotificationType
  ExecuteForceOpen(executor: GameObject): void
  RequestForceBodyDrop(executor: GameObject): void
  OnActionInstallKeylogger(evt: InstallKeylogger): EntityNotificationType
  ResolveOtherSkillchecks(): void
  ResolveSkillchecks(): void
  CanPassAnySkillCheckOnParentTerminal(requester: GameObject): Bool
  ActionForceOpen(): ForceOpen
  OnForceOpen(evt: ForceOpen): EntityNotificationType
  ActionQuestForceOpen(): QuestForceOpen
  OnQuestForceOpen(evt: QuestForceOpen): EntityNotificationType
  ActionQuestForceClose(): QuestForceClose
  OnQuestForceClose(evt: QuestForceClose): EntityNotificationType
  ActionQuestForceCloseImmediate(): QuestForceCloseImmediate
  OnQuestForceCloseImmediate(evt: QuestForceCloseImmediate): EntityNotificationType
  ActionQuestForceOpenScene(): QuestForceOpenScene
  OnQuestForceOpenScene(evt: QuestForceOpenScene): EntityNotificationType
  ActionQuestForceCloseScene(): QuestForceCloseScene
  OnQuestForceCloseScene(evt: QuestForceCloseScene): EntityNotificationType
  ActionQuestForceLock(): QuestForceLock
  OnQuestForceLock(evt: QuestForceLock): EntityNotificationType
  ActionQuestForceUnlock(): QuestForceUnlock
  OnQuestForceUnlock(evt: QuestForceUnlock): EntityNotificationType
  ActionQuestForceSeal(): QuestForceSeal
  OnQuestForceSeal(evt: QuestForceSeal): EntityNotificationType
  ActionQuestForceUnseal(): QuestForceUnseal
  OnQuestForceUnseal(evt: QuestForceUnseal): EntityNotificationType
  SetNewDoorType(evt: SetDoorType): void
  SetCloseItself(val: Bool): void
  ResetToDefault(): void
  OnSetAuthorizationModuleOFF(evt: SetAuthorizationModuleOFF): EntityNotificationType
  ActionUnauthorized(): PlayerUnauthorized
  ResolveTerminalSkillchecks(id: EntityID): void
  OnQuickHackToggleOpen(evt: QuickHackToggleOpen): EntityNotificationType
  OnActivateDevice(evt: ActivateDevice): EntityNotificationType
  OnAuthorizeUser(evt: AuthorizeUser): EntityNotificationType
  CanPayToAuthorize(): Bool
  IsUserAuthorized(user: EntityID): Bool
  RequiresAuthorization(): Bool
  UpdatePlayerAuthorization(): void
  WasPlayerAuthorized(): Bool
  ToggleOpenOnDoor(): Bool
  ToggleLockOnDoor(): Bool
  ToggleSealOnDoor(): Bool
  AddToken(id: EntityID): Bool
  DepleteToken(id: EntityID): Bool
  LogActionDetails(action: ScriptableDeviceAction, cachedStatus: BaseDeviceStatus, context?: string, status?: string, overrideStatus?: Bool): void
  PushPersistentData(data: DoorPersistentData): void
}

declare interface DoorSetup {

}

declare interface ElevatorFloorTerminalControllerPS extends TerminalControllerPS {

  GameAttached(): void
  GetElevatorFloorSetup(): ElevatorFloorSetup
  GetAuthorizationTextOverride(): string
  IsElevatorAtThisFloor(): Bool
  EvaluateFloor(): void
  Initialize(): void
  GetInkWidgetTweakDBID(context: GetActionsContext): TweakDBID
  GetThumbnailWidgets(): SThumbnailWidgetPackage[]
  GetActions(outActions: DeviceAction[], context: GetActionsContext): Bool
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  PushInactiveInteractionChoice(context: GetActionsContext, choices: InteractionChoice[]): void
  ActionQuickHackCallElevator(): QuickHackCallElevator
  ActionQuickHackAuthorization(): QuickHackAuthorization
  ActionAuthorizeUser(): AuthorizeUser
  ActionCallElevator(): CallElevator
  OnQuickHackCallElevator(evt: QuickHackCallElevator): EntityNotificationType
  OnCallElevator(evt: CallElevator): EntityNotificationType
  OnQuickHackAuthorization(evt: QuickHackAuthorization): EntityNotificationType
  SendQuickHackAuthorizationToParents(): void
  OnAuthorizeUser(evt: AuthorizeUser): EntityNotificationType
  GetDeviceWidgets(): SDeviceWidgetPackage[]
  GetSlaveDeviceWidget(deviceID: PersistentID): SDeviceWidgetPackage
  GetDeviceWidget(context: GetActionsContext): SDeviceWidgetPackage
  OnLiftArrived(evt: LiftArrivedEvent): EntityNotificationType
  OnLiftDeparted(evt: LiftDepartedEvent): EntityNotificationType
  OnLiftFloorSyncDataEvent(evt: LiftFloorSyncDataEvent): EntityNotificationType
  UnlockConnectedDoors(): void
  LockConnectedDoors(): void
  CallElevator(): void
  IsLiftMoving(): Bool
  HackCallElevator(): void
  ActionForceLockElevator(targetDevicePS: PersistentState): ForceLockElevator
  ActionForceUnlockAndOpenElevator(targetDevicePS: PersistentState): ForceUnlockAndOpenElevator
  TurnAuthorizationModuleOFF(): void
}

declare interface ToggleON extends ActionBool {

  GetBaseCost(): number
  SetProperties(status: EDeviceStatus): void
  SetProperties(status: EDeviceStatus, nameOnTrue: TweakDBID, nameOnFalse: TweakDBID): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetTweakDBChoiceRecord(): string
  GetInkWidgetTweakDBID(): TweakDBID
  GetActivationTime(): number
}

declare interface QuickHackCallElevator extends ActionBool {

  GetTweakDBChoiceRecord(): string
}

declare interface ToggleLock extends ActionBool {

  SetProperties(isLocked: Bool): void
  SetShouldOpen(shouldOpen: Bool): void
  ShouldOpen(): Bool
  /** @noSelf **/
  IsDefaultConditionMet(device: DoorControllerPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetTweakDBChoiceRecord(): string
  GetInkWidgetTweakDBID(): TweakDBID
}

declare interface ForceUnlockAndOpenElevator extends ToggleLock {

  SetProperties(): void
}

declare interface ForceLockElevator extends ToggleLock {

  SetProperties(): void
}

declare interface LiftFloorSyncDataEvent extends Event {

}

declare interface DoorStatus extends BaseDeviceStatus {

  SetProperties(deviceRef: ScriptableDeviceComponentPS): void
  GetCurrentDisplayString(): string
  GetStatusValue(): number
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface DoorViabilityInterpreter extends IScriptable {

  /** @noSelf **/
  Evaluate(device: DoorControllerPS, hasActiveActions: Bool): Bool
}

declare interface BasicViabilityInterpreter extends IScriptable {

  /** @noSelf **/
  Evaluate(device: ScriptableDeviceComponentPS, hasActiveActions: Bool): EViabilityDecision
}

declare interface PlayerUnauthorized extends ActionBool {

  SetProperties(isLift: Bool): void
  /** @noSelf **/
  IsDefaultConditionMet(device: DoorControllerPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: DoorControllerPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface TogglePower extends ActionBool {

  SetProperties(status: EDeviceStatus): void
  SetProperties(status: EDeviceStatus, nameOnTrue: TweakDBID, nameOnFalse: TweakDBID): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface ToggleSeal extends ActionBool {

  SetProperties(isSealed: Bool): void
  /** @noSelf **/
  IsDefaultConditionMet(device: DoorControllerPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: DoorControllerPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetTweakDBChoiceRecord(): string
  GetInkWidgetTweakDBID(): TweakDBID
}

declare interface ForceOpen extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: DoorControllerPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: DoorControllerPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface SetOpened extends ActionBool {

  SetProperties(): void
  GetTweakDBChoiceRecord(): string
  /** @noSelf **/
  IsDefaultConditionMet(device: DoorControllerPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: DoorControllerPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
}

declare interface ActionRestrictionGroup_Record extends TweakDBRecord {

  InactiveReason(): string
  AllowedActionNames(): string[]
  GetAllowedActionNamesCount(): number
  GetAllowedActionNamesItem(index: number): string
  AllowedActionNamesContains(item: string): Bool
  DisallowedActionNames(): string[]
  GetDisallowedActionNamesCount(): number
  GetDisallowedActionNamesItem(index: number): string
  DisallowedActionNamesContains(item: string): Bool
}

declare interface Pay extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: DoorControllerPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: DoorControllerPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetInkWidgetTweakDBID(): TweakDBID
}

declare interface QuickHackToggleOpen extends ActionBool {

  SetProperties(isOpen: Bool): void
  /** @noSelf **/
  IsDefaultConditionMet(device: DoorControllerPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: DoorControllerPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface QuestForceOpen extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceClose extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceCloseImmediate extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceOpenScene extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceCloseScene extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceLock extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceUnlock extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceSeal extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceUnseal extends ActionBool {

  SetProperties(): void
}

declare interface DoorOpeningToken extends ActionBool {

  SetProperties(): void
  GetTweakDBChoiceRecord(): string
  /** @noSelf **/
  IsDefaultConditionMet(device: DoorControllerPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: DoorControllerPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
}

declare interface SetClosed extends ActionBool {

  SetProperties(): void
  GetTweakDBChoiceRecord(): string
  /** @noSelf **/
  IsDefaultConditionMet(device: DoorControllerPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: DoorControllerPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
}

declare interface ItemCost_Record extends ObjectActionCost_Record {

  Item(): Item_Record
}

declare interface ActionDemolition extends ActionSkillCheck {

  GetDefaultActionName(): CName
  GetInteractionIcon(): ChoiceCaptionIconPart_Record
}

declare interface ResolveSkillchecksEvent extends Event {

}

declare interface SetDoorType extends Event {

  GetFriendlyDescription(): string
}

declare interface SecuritySystemClearanceEntry {

}

declare interface AddUserEvent extends Event {

}

declare interface AttitudeGroup_Record extends TweakDBRecord {

  Parent(): AttitudeGroup_Record
  Name(): CName
  IsState(): Bool
}

declare interface DoorPersistentData {

}

declare interface MediaSystemUIPS extends VirtualSystemPS {

  GetActions(outActions: DeviceAction[], context: GetActionsContext): Bool
}

declare interface ResRef {

  /** @noSelf **/
  FromString(path: string): ResRef
  /** @noSelf **/
  FromHash(hash: number): ResRef
  /** @noSelf **/
  FromName(path: CName): ResRef
  /** @noSelf **/
  IsValid(path: ResRef): Bool
}

declare interface QuestForceFakeElevatorArrows extends ActionBool {

  SetProperties(property: Bool): void
}

declare interface QuestResetFakeElevatorArrows extends ActionBool {

  SetProperties(): void
}

declare interface InstallKeylogger extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
}

declare interface GlitchScreen extends ActionBool {

  SetProperties(isGlitching: Bool, actionID: TweakDBID, programID: TweakDBID): void
  GetInteractionIcon(): ChoiceCaptionIconPart_Record
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetTweakDBChoiceRecord(): string
  GetAttachedProgramTweakDBID(): TweakDBID
}

declare interface ToggleNetrunnerDive extends ActionBool {

  SetProperties(terminateDive: Bool, skipMinigame: Bool, attempt: number, isRemote: Bool): void
  GetTweakDBChoiceRecord(): string
  ShouldTerminate(): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
}

declare interface TakeOverSecuritySystem extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(requesterClearancer: Clearance): Bool
}

declare interface TerminalSetState extends Event {

}

declare interface LiftDepartedEvent extends Event {

}

declare interface RefreshFloorAuthorizationDataEvent extends Event {

}

declare interface LiftSetMovementStateEvent extends Event {

}

declare interface SetIsPlayerInsideLiftEvent extends Event {

}

declare interface LiftWidgetCustomData extends WidgetCustomData {

  GetMovementState(): gamePlatformMovementState
  SetMovementState(value: gamePlatformMovementState): void
}

declare interface AnimFastForwardEvent extends Event {

}

declare interface ArrivedAt extends Event {

}

declare interface TeleportTo extends Event {

}

declare interface ElevatorDeviceBlackboardDef extends DeviceBaseBlackboardDef {

}

declare interface LiftMovementLoadEvent extends Event {

}

declare interface DelayedUpdateDeviceStateEvent extends Event {

}

declare interface PSDeviceChangedEvent extends Event {

}

declare interface AnimFeatureMarkUnstable extends AnimFeature {

}

declare interface AnimFeature_SimpleDevice extends AnimFeatureMarkUnstable {

}

declare interface IMovingPlatformMovement extends IScriptable {

  SetInitData(type: gameMovingPlatformMovementInitializationType, value: number, startNode: NodeRef, endNode: NodeRef): void
}

declare interface IMovingPlatformMovementPointToPoint extends IMovingPlatformMovement {

}

declare interface MoveTo extends Event {

}

declare interface MovingPlatformMovementDynamic extends IMovingPlatformMovementPointToPoint {

}

declare interface LiftStartDelayEvent extends Event {

}

declare interface AdHocAnimationEvent extends Event {

}

declare interface LiftArrivedEvent extends Event {

}

declare interface AnimInputSetterUsesSleepMode extends Event {

}

declare interface ScanPlayerDelayEvent extends Event {

}

declare interface EntityGameInterface {

  /** @noSelf **/
  Destroy(self: EntityGameInterface): void
  /** @noSelf **/
  IsValid(self: EntityGameInterface): Bool
  /** @noSelf **/
  IsStatic(self: EntityGameInterface): Bool
  /** @noSelf **/
  GetEntity(self: EntityGameInterface): Entity
  /** @noSelf **/
  UnbindTransform(self: EntityGameInterface): void
  /** @noSelf **/
  BindToComponent(self: EntityGameInterface, target: EntityGameInterface, componentName: CName, slotName?: CName, keepWorldTransform?: Bool): void
  /** @noSelf **/
  ToggleSelectionEffect(self: EntityGameInterface, enable: Bool): void
}

declare interface TriggerVolumeOperationsTrigger extends DeviceOperationsTrigger {

  EvaluateTrigger(componentName: CName, owner: GameObject, activator: GameObject, operationType: ETriggerOperationType, container: DeviceOperationsContainer): void
}

declare interface TriggerVolumeOperationTriggerData extends DeviceOperationTriggerData {

}

declare interface RefreshPlayerAuthorizationEvent extends Event {

}

declare interface ReactoToPreventionSystem extends Event {

}

declare interface RemoveFromBlacklistEvent extends Event {

}

declare interface NPCType_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataNPCType
}

declare interface MountEventData extends IScriptable {

  IsTransitionForced(): Bool
}

declare interface MountAIEvent extends AIEvent {

}

declare interface PreventionVisibilityRequest extends ScriptableSystemRequest {

}

declare interface PreventionVehicleStolenRequest extends ScriptableSystemRequest {

}

declare interface PreventionCombatStartedRequest extends ScriptableSystemRequest {

}

declare interface PreventionCrimeWitnessRequest extends ScriptableSystemRequest {

}

declare interface PreventionRegisterRequest extends ScriptableSystemRequest {

}

declare interface PreventionSecurityAreaRequest extends ScriptableSystemRequest {

}

declare interface PreventionPoliceSecuritySystemRequest extends ScriptableSystemRequest {

}

declare interface InteractionAttemptedChoice {

}

declare interface TogglePreventionSystem extends ScriptableSystemRequest {

}

declare interface Affiliation_Record extends TweakDBRecord {

  EnumComment(): string
  AnimWrappers(): CName[]
  GetAnimWrappersCount(): number
  GetAnimWrappersItem(index: number): CName
  AnimWrappersContains(item: CName): Bool
  LocalizedName(): CName
  EnumName(): CName
  IconPath(): CName
  Type(): gamedataAffiliation
}

declare interface BountyResetRequest extends ScriptableSystemRequest {

}

declare interface PreventionConsoleInstructionRequest extends ScriptableSystemRequest {

}

declare interface OutputPersistentData {

  /** @noSelf **/
  IsValid(self: OutputPersistentData): Bool
}

declare interface SensorDeviceController extends ExplosiveDeviceController {

  GetPS(): SensorDeviceControllerPS
  OnEditorAttach(): void
  OnGameAttach(): void
  OnSensorDeviceRenderDebug(debugDrawer: DebugDrawer): void
  OnRenderSelection(debugDrawer: DebugDrawer): void
  SensorDeviceRenderDebug(debugDrawer: DebugDrawer): void
}

declare interface FragmentBuilder {

  /** @noSelf **/
  Construct(self: FragmentBuilder, debugDrawer: DebugDrawer): void
  /** @noSelf **/
  SetColor(self: FragmentBuilder, color: Color): void
  /** @noSelf **/
  PushLocalTransform(self: FragmentBuilder): void
  /** @noSelf **/
  PopLocalTransform(self: FragmentBuilder): void
  /** @noSelf **/
  BindTransform(self: FragmentBuilder, localToWorld: Matrix): void
  /** @noSelf **/
  AddArrow(self: FragmentBuilder, start: Vector4, end: Vector4): void
  /** @noSelf **/
  AddWireAngledRange(self: FragmentBuilder, matrix: Matrix, height: number, range: number, rangeAngle: number, drawSides: Bool): void
  /** @noSelf **/
  Done(self: FragmentBuilder): void
}

declare interface Matrix {

  /** @noSelf **/
  Identity(): Matrix
  /** @noSelf **/
  BuiltTranslation(move: Vector4): Matrix
  /** @noSelf **/
  BuiltRotation(rot: EulerAngles): Matrix
  /** @noSelf **/
  BuiltScale(scale: Vector4): Matrix
  /** @noSelf **/
  BuiltPreScale(scale: Vector4): Matrix
  /** @noSelf **/
  BuiltTRS(translation?: Vector4, rotation?: EulerAngles, scale?: Vector4): Matrix
  /** @noSelf **/
  BuiltRTS(rotation?: EulerAngles, translation?: Vector4, scale?: Vector4): Matrix
  /** @noSelf **/
  BuildFromDirectionVector(dirVec: Vector4, upVec?: Vector4): Matrix
  /** @noSelf **/
  GetTranslation(m: Matrix): Vector4
  /** @noSelf **/
  GetRotation(m: Matrix): EulerAngles
  /** @noSelf **/
  GetScale(m: Matrix): Vector4
  /** @noSelf **/
  GetAxisX(m: Matrix): Vector4
  /** @noSelf **/
  GetAxisY(m: Matrix): Vector4
  /** @noSelf **/
  GetAxisZ(m: Matrix): Vector4
  /** @noSelf **/
  GetDirectionVector(m: Matrix): Vector4
  /** @noSelf **/
  GetInverted(m: Matrix): Matrix
  /** @noSelf **/
  GetInvertedFull(m: Matrix): Matrix
  /** @noSelf **/
  ToQuat(m: Matrix): Quaternion
  /** @noSelf **/
  IsOk(m: Matrix): Bool
}

declare interface DebugDrawer {

  /** @noSelf **/
  TestDebugFilterMask(debugDrawer: DebugDrawer, debugFilterName: string): Bool
}

declare interface SimpleTargetManager extends ScriptableComponent {

  /** @noSelf **/
  AddTarget(targetsList: Target[], goTarget: GameObject, isInteresting: Bool, isVisible: Bool): void
  /** @noSelf **/
  RemoveTarget(targetsList: Target[], targetToRemove: GameObject): Bool
  /** @noSelf **/
  SetTargetVisible(targetsList: Target[], targetToRemove: GameObject, isVisible: Bool): Bool
  /** @noSelf **/
  RemoveAllTargets(targetsList: Target[]): void
  /** @noSelf **/
  GetFirstInterestingTargetObject(targetsList: Target[]): GameObject
  /** @noSelf **/
  GetFirstInterestingTarget(targetsList: Target[]): Target
  /** @noSelf **/
  GetSpecificTarget(targetsList: Target[], target: GameObject): Target
  /** @noSelf **/
  GetSpecificTarget(targetsList: Target[], targetID: EntityID): Target
  /** @noSelf **/
  GetSpecificTarget(targetsList: Target[], index: number): Target
  /** @noSelf **/
  IsTargetAlreadyAdded(targets: Target[], targetToCheck: Target): number
  /** @noSelf **/
  IsTargetAlreadyAdded(targetsList: Target[], gameObject: GameObject): number
  /** @noSelf **/
  IsTargetVisible(targetsList: Target[], gameObject: GameObject): Bool
  /** @noSelf **/
  HasInterestingTargets(targetsList: Target[]): Bool
}

declare interface AnimTargetAddEvent extends Event {

  SetEntityTarget(targetEntity: Entity, slotTargetName: CName, targetOffsetEntity: Vector4): void
  SetEntityTargetFromPast(transformHistoryComponent: TransformHistoryComponent, timeDelay: number, targetOffsetEntity: Vector4): void
  SetStaticTarget(staticTargetPositionWs: Vector4): void
  SetPositionProvider(provider: IPositionProvider): void
}

declare interface LookAtRemoveEvent extends Event {

  /** @noSelf **/
  QueueRemoveLookatEvent(owner: GameObject, addedBeforeEvent: LookAtAddEvent): void
  /** @noSelf **/
  QueueDelayedRemoveLookatEvent(context: ScriptExecutionContext, addedBeforeEvent: LookAtAddEvent, lookAtDeactivationDelay: number): void
}

declare interface LookAtAddEvent extends AnimTargetAddEvent {

  SetStyle(style: animLookAtStyle): void
  SetOutTransitionStyle(outTransitionStyle: animLookAtStyle): void
  SetLimits(softLimitDegreesType: animLookAtLimitDegreesType, hardLimitDegreesType: animLookAtLimitDegreesType, hardLimitDistanceType: animLookAtLimitDistanceType, backLimitDegreesType: animLookAtLimitDegreesType): void
  SetAdditionalPartsArray(additionalParts: LookAtPartRequest[]): void
  SetDebugInfo(debugInfo: string): void
}

declare interface LookAtRequest {

}

declare interface LookAtPreset_Record extends TweakDBRecord {

  LookAtParts(outList: LookAtPart_Record[]): void
  GetLookAtPartsCount(): number
  GetLookAtPartsItem(index: number): LookAtPart_Record
  LookAtPartsContains(item: LookAtPart_Record): Bool
  BodyPart(): CName
  SoftLimitDegrees(): number
  TransitionSpeed(): number
  Priority(): number
  Suppress(): number
  BackLimitDegrees(): number
  Mode(): number
  HardLimitDistance(): number
  HardLimitDegrees(): number
  FollowingSpeedFactorOverride(): number
  OutTransitionSpeed(): number
  CalculatePositionInParentSpace(): Bool
  HasOutTransition(): Bool
  AttachLeftHandtoRightHand(): Bool
  AttachRightHandtoLeftHand(): Bool
}

declare interface LookAtLimits {

}

declare interface PlayerTotalDamageAgainstHealth {

}

declare interface TargetedObjectDeathListener extends CustomValueStatPoolsListener {

  OnStatPoolMinValueReached(value: number): Bool
}

declare interface UnregisterListenerOnTargetHPEvent extends Event {

}

declare interface SetJammedEvent extends Event {

}

declare interface UpdateDebuggerRequest extends ScriptableSystemRequest {

}

declare interface SecSystemDebugger extends ScriptableSystem {

  OnRealTimeUpdate(req: RealTimeUpdateRequest): void
  OnUpdateDebuggerRequest(req: UpdateDebuggerRequest): void
  RealTimeUpdate(evt: TickableEvent, time: number): void
  Clean(dvs: DebugVisualizerSystem): void
  Update(sys: SecuritySystemControllerPS, time: number, instructionsAttached: Bool, inputAttached: Bool, trace: CName, instruction?: EReprimandInstructions, recentInput?: SecuritySystemInput): void
}

declare interface DebugVisualizerSystem extends gameIDebugVisualizerSystem {

  DrawRect(position: Vector4, size: Vector4, color?: Color, lifetime?: number): number
  DrawLine(start: Vector4, end: Vector4, color?: Color, lifetime?: number): number
  DrawLine3D(start: Vector4, end: Vector4, color?: Color, lifetime?: number): number
  DrawText(position: Vector4, text: string, textAlignment?: gameDebugViewETextAlignment, color?: Color, lifetime?: number): number
  DrawText3D(position: Vector4, text: string, color?: Color, lifetime?: number): number
  DrawWireBox(boxMin: Vector4, boxMax: Vector4, color?: Color, lifetime?: number): number
  DrawWireSphere(position: Vector4, radius: number, color?: Color, lifetime?: number): number
  DrawArrow(start: Vector4, end: Vector4, color?: Color, lifetime?: number): number
  ClearAll(): void
  ClearLayer(layerId: number): void
  SetPosition(layerId: number, position: Vector4): void
  SetScale(layerId: number, scale: Vector4): void
}

declare interface SColor {

  /** @noSelf **/
  Red(alpha?: number): Color
  /** @noSelf **/
  Green(alpha?: number): Color
  /** @noSelf **/
  Blue(alpha?: number): Color
  /** @noSelf **/
  White(alpha?: number): Color
  /** @noSelf **/
  Black(alpha?: number): Color
  /** @noSelf **/
  Grey(alpha?: number): Color
  /** @noSelf **/
  Yellow(alpha?: number): Color
  /** @noSelf **/
  Orange(alpha?: number): Color
  /** @noSelf **/
  Pink(alpha?: number): Color
  /** @noSelf **/
  Purple(alpha?: number): Color
}

declare interface SysDebuggerEvent extends TickableEvent {

}

declare interface RealTimeUpdateRequest extends ScriptableSystemRequest {

}

declare interface AreaEntry {

}

declare interface BlacklistEntry extends IScriptable {

  Initialize(entityID: EntityID, reason: BlacklistReason, id: number): void
  GetEntityID(): EntityID
  GetReason(): BlacklistReason
  GetWarningsCount(): number
  AddWarning(): void
  ResetWarnings(): void
  UpdateBlacklistEntry(reason: BlacklistReason, id: number): Bool
  ForgetReason(): void
}

declare interface ReprimandData {

}

declare interface DisableAreaIndicatorEvent extends Event {

}

declare interface TargetLockedEvent extends Event {

}

declare interface SensePreset_Record extends TweakDBRecord {

  Curves(outList: DetectionCurve_Record[]): void
  GetCurvesCount(): number
  GetCurvesItem(index: number): DetectionCurve_Record
  CurvesContains(item: DetectionCurve_Record): Bool
  Shapes(outList: SenseShape_Record[]): void
  GetShapesCount(): number
  GetShapesItem(index: number): SenseShape_Record
  ShapesContains(item: SenseShape_Record): Bool
  MaterialCurves(outList: DetectionCurve_Record[]): void
  GetMaterialCurvesCount(): number
  GetMaterialCurvesItem(index: number): DetectionCurve_Record
  MaterialCurvesContains(item: DetectionCurve_Record): Bool
  DayNightCurve(): CName
  DetectionCoolDownTime(): number
  DetectionPartCoolDownTime(): number
  DetectionDropFactor(): number
  DetectionFactor(): number
  IgnorePhysicsTest(): Bool
  UseZCorrection(): Bool
}

declare interface OnDetectedEvent extends SenseVisibilityEvent {

}

declare interface OnRemoveDetection extends Event {

}

declare interface LostTargetDelayFalsePositivesDelay extends Event {

}

declare interface CameraDeadBodyData extends IScriptable {

}

declare interface GameSessionDataSystem extends ScriptableSystem {

  GetModule(dataType: EGameSessionDataType): GameSessionDataModule
  OnAttach(): void
  OnDetach(): void
  Initialize(): void
  Uninitialize(): void
  /** @noSelf **/
  AddDataEntryRequest(context: GameInstance, dataType: EGameSessionDataType, data: Variant): void
  OnDataEntryRequest(request: DataEntryRequest): void
  /** @noSelf **/
  CheckDataRequest(context: GameInstance, dataType: EGameSessionDataType, dataHelper: Variant): Bool
  IsDataValid(dataType: EGameSessionDataType, data: Variant): Bool
  RefreshDebug(): void
}

declare interface GameSessionDataModule extends IScriptable {

  Initialize(): void
  Uninitialize(): void
  GetModuleType(): EGameSessionDataType
  IsDataValid(data: Variant): Bool
  AddEntry(data: Variant): void
  CheckData(data: Variant): Bool
  RefreshDebug(context: GameInstance): void
}

declare interface CameraDeadBodySessionDataModule extends GameSessionDataModule {

  Initialize(): void
  IsDataValid(data: Variant): Bool
  AddEntry(data: Variant): void
  CheckData(data: Variant): Bool
  RefreshDebug(context: GameInstance): void
}

declare interface CameraDeadBodyInternalData extends IScriptable {

  AddEntry(entryID: EntityID): void
  ContainsEntry(entryID: EntityID): Bool
}

declare interface CameraTagEnemyLimitDataModule extends GameSessionDataModule {

  Initialize(): void
  Uninitialize(): void
  IsDataValid(data: Variant): Bool
  AddEntry(data: Variant): void
  CleanupNulls(): void
  SendCameraTagLockEvent(index: number): void
  CheckData(data: Variant): Bool
  RefreshDebug(context: GameInstance): void
}

declare interface CameraTagLimitData extends IScriptable {

}

declare interface CameraTagLockEvent extends Event {

}

declare interface DataEntryRequest extends ScriptableSystemRequest {

}

declare interface ISenseShape extends IScriptable {

  GetType(): senseEShapeType
}

declare interface SenseCone extends ISenseShape {

}

declare interface SecuritySystemSupport extends Event {

}

declare interface SensePresetChangeEvent extends SenseVisibilityEvent {

}

declare interface SecuritySystemForceAttitudeChange extends ScriptableDeviceAction {

}

declare interface ReprimandUpdate extends Event {

  /** @noSelf **/
  Construct(performer: GameObject, target: EntityID, instructions: EReprimandInstructions, pos?: Vector4): ReprimandUpdate
}

declare interface DisableAimAssist extends Event {

}

declare interface ReprimandAgentDisconnectEvent extends Event {

}

declare interface TargetTrackingExtension extends TargetTrackerComponent {

  RegisterTrackedSquadMember(cssi: CombatSquadScriptInterface): void
  RevaluateTrackedSquads(): void
  RemoveHostileCamerasFromThreats(): void
  SquadTrackedMembersAmount(cssi: CombatSquadScriptInterface): number
  IsSquadTracked(cssi: CombatSquadScriptInterface): Bool
  /** @noSelf **/
  InjectThreat(puppet: ScriptedPuppet, threat: TrackedLocation): void
  /** @noSelf **/
  InjectThreat(puppet: ScriptedPuppet, threat: Entity): void
  /** @noSelf **/
  InjectThreat(puppet: ScriptedPuppet, threat: Entity, accuracy: number, cooldown?: number): void
  /** @noSelf **/
  OnSetThreatsPersistenceRequest(evt: SetThreatsPersistenceRequest): Bool
  WasThreatPersistent(threat: Entity): Bool
  /** @noSelf **/
  OnHit(ownerPuppet: ScriptedPuppet, evt: gameHitEvent): void
  /** @noSelf **/
  Get(puppet: ScriptedPuppet, targetTracker: TargetTrackingExtension): Bool
  /** @noSelf **/
  Get(puppet: ScriptedPuppet, targetTracker: TargetTrackerComponent): Bool
  /** @noSelf **/
  Get(context: ScriptExecutionContext, targetTracker: TargetTrackerComponent): Bool
  /** @noSelf **/
  GetStrong(context: ScriptExecutionContext, targetTracker: TargetTrackerComponent): Bool
  /** @noSelf **/
  GetTrackedLocation(puppet: ScriptedPuppet, target: Entity, trackedLocation: TrackedLocation): Bool
  /** @noSelf **/
  GetTrackedLocation(context: ScriptExecutionContext, target: Entity, trackedLocation: TrackedLocation): Bool
  /** @noSelf **/
  GetTopThreat(context: ScriptExecutionContext, visible: Bool, trackedLocation: TrackedLocation): Bool
  /** @noSelf **/
  GetPlayerFromThreats(hostileThreats: TrackedLocation[], player: GameObject): Bool
  GetDroppedThreat(game: GameInstance, threatData: DroppedThreatData): Bool
  SetRecentlyDroppedThreat(game: GameInstance, threat: Entity, position: Vector4, validFor: number): void
  OnEnemyPushedToSquad(evt: EnemyPushedToSquad): Bool
  ResetRecentlyDroppedThreat(): void
  OnHostJoinedSquad(th: HostJoinedSquad): Bool
  OnHostLeftSquad(th: HostLeftSquad): Bool
  RemoveWholeSquadFromThreats(cssi: CombatSquadScriptInterface): void
  OnThreatRemoved(th: ThreatRemoved): Bool
  TryToRegisterTrackedSquad(threat: ScriptedPuppet): void
  OnHostileThreatAdded(owner: Entity, threat: Entity): void
  OnSquadmateDeath(evt: OnSquadmateDied): Bool
  OnNewThreat(th: NewThreat): Bool
  OnHostileThreatDetected(th: HostileThreatDetected): Bool
  OnPlayerHostileThreatDetected(evt: PlayerHostileThreatDetected): Bool
  OnEnemyThreatDetected(th: EnemyThreatDetected): Bool
  /** @noSelf **/
  IsThreatInThreatList(owner: ScriptedPuppet, threat: Entity, visible: Bool, hostile: Bool): Bool
  TryToPlayVOOnCompanion(owner: ScriptedPuppet, threat: GameObject, detectedBySelf: Bool): void
  OnPullSquadSyncRequest(evt: PullSquadSyncRequest): Bool
}

declare interface SquadScriptInterface extends IScriptable {

  GetName(): CName
  GetTemplate(): CName
  Join(et: Entity): Bool
  Leave(et: Entity): Bool
  OpenSquadAction(name: CName, et: Entity, timeout: number): Bool
  RefreshSquadAction(name: CName, et: Entity, timeout: number): Bool
  RevokeSquadAction(name: CName, et: Entity): Bool
  TriggerEvaluation(name: CName, et: Entity): Bool
  TriggerActivation(name: CName, et: Entity): Bool
  TriggerDeactivation(name: CName, et: Entity): Bool
  RequestOrder(sqAction: CName, et: Entity): Bool
  GiveOrder(sqAction: CName, et: Entity): number
  AckOrder(sqAction: CName, et: Entity): Bool
  RevokeOrder(sqAction: CName, et: Entity): Bool
  Commit(sqAction: CName, et: Entity): Bool
  ReportDone(sqAction: CName, et: Entity): Bool
  ReportFail(sqAction: CName, et: Entity): Bool
  ListMembers(): Entity[]
  ListMembersWeak(): Entity[]
  ListMembersWithSquadActionWeak(sqAction: CName): Entity[]
  GetMembersCount(): number
  IsSquadActionOpen(sqAction: CName, et: Entity): Bool
  HasOrderBySquadAction(sqAction: CName, et: Entity): Bool
  HasAcknowledgedOrderBySquadAction(sqAction: CName, et: Entity): Bool
  GetOrderById(orderId: number): SquadOrder
  GetAllOrders(et: Entity): number[]
  GetAllCommitedOrders(et: Entity): number[]
  GetAllAcknowledgedOrders(et: Entity): number[]
  GetSquadType(): AISquadType
  LockAccess(): Bool
  UnlockAccess(): Bool
  GuardedCall(callThisFunction: CName): void
}

declare interface AISquadHelper extends IScriptable {

  /** @noSelf **/
  GetSquadmates(obj: GameObject, membersList: Entity[], dontRemoveSelf?: Bool): Bool
  /** @noSelf **/
  GetSquadmatesFromAttitudeSquad(obj: GameObject, membersList: Entity[], dontRemoveSelf?: Bool): Bool
  /** @noSelf **/
  GetSquadmatesID(obj: GameObject, membersListID: EntityID[]): Bool
  /** @noSelf **/
  GetSquadMemberInterfaceForAttitudeSquad(obj: GameObject, squadInterface: SquadScriptInterface): Bool
  /** @noSelf **/
  GetSquadMemberInterface(obj: GameObject, squadInterface: SquadScriptInterface): Bool
  /** @noSelf **/
  GetCombatSquadInterface(obj: GameObject, squadInterface: CombatSquadScriptInterface): Bool
  /** @noSelf **/
  GetSquadBaseInterface(obj: GameObject, squadBaseInterface: PuppetSquadInterface): Bool
  /** @noSelf **/
  GetPlayerSquadInterface(obj: GameObject, playerSquadInterface: PlayerSquadInterface): Bool
  /** @noSelf **/
  GetAllSquadMemberInterfaces(obj: GameObject): SquadScriptInterface[]
  /** @noSelf **/
  LeaveSquad(obj: GameObject, squadType: AISquadType): Bool
  /** @noSelf **/
  LeaveAllSquads(obj: GameObject): Bool
  /** @noSelf **/
  PlayerSquadOrderStringToEnum(playerSquadOrderName: string): EAIPlayerSquadOrder
  /** @noSelf **/
  SendStimFromSquadTargetToMember(member: Entity, actionName: CName): void
  /** @noSelf **/
  GetCurrentSquadRing(puppet: ScriptedPuppet): gamedataAIRingType
  /** @noSelf **/
  SquadRingTypeToTicketName(type: gamedataAIRingType): CName
  /** @noSelf **/
  SquadRingTypeToTicketString(type: gamedataAIRingType): string
  /** @noSelf **/
  NotifySquadOnIncapacitated(puppet: ScriptedPuppet): void
  /** @noSelf **/
  RemoveThreatFromSquad(puppet: ScriptedPuppet, threat: TrackedLocation): void
  /** @noSelf **/
  RemoveThreatOnSquadmate(game: GameInstance, squadmate: ScriptedPuppet, threat: TrackedLocation): void
  /** @noSelf **/
  GetThreatLocationFromSquad(puppet: ScriptedPuppet, threat: Entity, threatLocation: TrackedLocation): Bool
  /** @noSelf **/
  GeThreatLocationFromSquadmate(squadmate: ScriptedPuppet, threat: Entity, threatLocation: TrackedLocation): Bool
  /** @noSelf **/
  PullSquadSync(puppet: ScriptedPuppet, squadType: AISquadType): void
  /** @noSelf **/
  PullSquadSyncOnSquadmate(game: GameInstance, squadmate: ScriptedPuppet, squadType: AISquadType, currentTopThreat: Entity): void
  /** @noSelf **/
  IsSignalActive(owner: ScriptedPuppet, signalName: CName): Bool
  /** @noSelf **/
  EnterAlerted(owner: ScriptedPuppet): void
}

declare interface SquadMemberComponent extends GameComponent {

  MySquad(sqtype: AISquadType): SquadScriptInterface
  MySquadName(sqtype: AISquadType): CName
  MySquadNameCurrentOrRecent(sqtype: AISquadType): CName
  MySquads(): SquadScriptInterface[]
  MySquadsNames(): CName[]
  MySquadsNamesCurrentOrRecent(): CName[]
  FindSquad(sqName: CName): SquadScriptInterface
  GetGameTime(): number
}

declare interface CombatSquadScriptInterface extends SquadScriptInterface {

  GetDefensiveCombatAlley(): CombatAlley
  GetOffensiveCombatAlley(): CombatAlley
  AddEnemy(et: Entity): Bool
  RemoveEnemy(et: Entity): Bool
  EnemyList(): Entity[]
  EnemyListWeak(): Entity[]
  IsEnemy(potentialEnemy: Entity): Bool
  GetEnemiesCount(): number
  SetAsEnemyAttacker(squadMember: Entity, enemy: Entity): void
  GetEnemyAttackersCount(enemy: Entity): number
  RegisterTactic(sqAction: CName, sectors: AICombatSectorType[], alley: CombatAlley, timeout: number): void
  UnregisterTactic(sqAction: CName): void
  ValidCombatSquad(): Bool
  GetTacticRatio(): TacticRatio
  PullEnemies(sourceSquadName: CName): void
}

declare interface PuppetSquadInterface extends CombatSquadScriptInterface {

  OnInitialise(): Bool
  OnOpenSquadAction(actionName: CName, entity: Entity): Bool
  OnAckOrder(orderId: number, actionName: CName, entity: Entity): Bool
  OnGiveOrder(orderId: number, actionName: CName, entity: Entity): Bool
  OnCommitToOrder(actionName: CName, orderId: number, entity: Entity): Bool
  OnCloseSquadAction(actionName: CName, entity: Entity): Bool
  OnOrderRevoked(orderId: number, actionName: CName, entity: Entity): Bool
  OnOrderDone(orderId: number, actionName: CName, entity: Entity): Bool
  OnOrderFail(orderId: number, actionName: CName, entity: Entity): Bool
  OnEvaluationActivation(actionName: CName, entity: Entity): Bool
  OnEvaluationDeActivation(actionName: CName, entity: Entity): Bool
  EvaluateTicketActivation(actionName: CName, entity: Entity, ticketRecord: AITicket_Record, ticketHistoryID: number, squadRecord: AISquadParams_Record): Bool
  RandomizeDeactivationConditionCheckInterval(ticketRecord: AITicket_Record, ticketHistoryID: number): void
  EvaluateTicketDeactivation(actionName: CName, entity: Entity, ticketRecord: AITicket_Record, ticketHistoryID: number, squadRecord: AISquadParams_Record): Bool
  ReleaseSquadMembersTickets(actionName: CName, entity: Entity): void
  GetAcknowledgeDelay(entity: Entity, ticketRecord: AITicket_Record, ticketHistoryID: number, acknowledgeDelay: number): Bool
  AcknowledgeTicket(actionName: CName, entity: Entity, ticketRecord: AITicket_Record, ticketHistoryID: number, delay: number): Bool
  ProcessRingTicket(entity: Entity, ticketRecord: AITicket_Record): void
  GetTicketType(actionName: CName, entity: Entity, ticketRecord: AITicket_Record, ticketHistoryID: number, squadRecord: AISquadParams_Record): Bool
  GetTicketType(actionName: CName, entity: Entity, ticketRecord: AITicket_Record, ticketHistoryID: number): Bool
  GetTicketHistoryID(actionName: CName): number
  GetSquadRecord(entity: Entity, squadRecord: AISquadParams_Record): Bool
  GetAITime(entity: Entity): number
  CheckCooldown(entity: Entity, ticketRecord: AITicket_Record, ticketHistoryID: number): Bool
  UpdateTicketHistory(entity: Entity, ticketRecord: AITicket_Record, ticketHistoryID: number, ticketStatus: EAITicketStatus): void
  AllocateTicketHistoryArray(): void
  AllocateTacticsSectors(): void
  CheckTicketConditions(actionName: CName, entity: Entity): Bool
  SimpleTicketConditionsCheck(actionName: CName, entity: Entity): Bool
  GetLastTicketRecipient(actionName: CName): EntityID
}

declare interface AIScriptSquad extends IScriptable {

  /** @noSelf **/
  GetBaseSquadRecord(squadRecord: AISquadParams_Record): Bool
  /** @noSelf **/
  GetSquadRecord(entity: Entity, squadRecord: AISquadParams_Record): Bool
  /** @noSelf **/
  GetTicketRecord(ticketName: CName, squadRecord: AISquadParams_Record, ticketRecord: AITicket_Record): Bool
  /** @noSelf **/
  TicketDebugHelper(ticketNameCheck: string, entity: Entity, ticketRecord: AITicket_Record): Bool
  /** @noSelf **/
  CanPerformTicket(context: ScriptExecutionContext, actionType: AITicketType_Record): Bool
  /** @noSelf **/
  OpenTicket(context: ScriptExecutionContext, actionType: AITicketType_Record): void
  /** @noSelf **/
  CommitToTicket(context: ScriptExecutionContext, actionType: AITicketType_Record): void
  /** @noSelf **/
  CompleteTicket(context: ScriptExecutionContext, actionType: AITicketType_Record): void
  /** @noSelf **/
  FailTicket(context: ScriptExecutionContext, actionType: AITicketType_Record): void
  /** @noSelf **/
  CloseTicket(context: ScriptExecutionContext, actionType: AITicketType_Record): void
  /** @noSelf **/
  RevokeTicket(context: ScriptExecutionContext, actionType: AITicketType_Record): void
  /** @noSelf **/
  EvaluateTicketActivation(context: ScriptExecutionContext, actionType: AITicketType_Record): void
  /** @noSelf **/
  EvaluateTicketDeactivation(context: ScriptExecutionContext, actionType: AITicketType_Record): void
  /** @noSelf **/
  HasOrder(context: ScriptExecutionContext, ticketName: CName): Bool
  /** @noSelf **/
  HasOrder(puppet: ScriptedPuppet, ticketName: CName): Bool
  /** @noSelf **/
  SignalSquad(context: ScriptExecutionContext, actionName: CName, verb: EAISquadVerb): void
  /** @noSelf **/
  CheckTickets(context: ScriptExecutionContext, actionRecord: AIAction_Record): Bool
  /** @noSelf **/
  CloseTickets(context: ScriptExecutionContext, actionRecord: AIAction_Record): void
  /** @noSelf **/
  RevokeTickets(context: ScriptExecutionContext, actionRecord: AIAction_Record): void
  /** @noSelf **/
  RequestTickets(context: ScriptExecutionContext, actionRecord: AIAction_Record): void
  /** @noSelf **/
  EvaluateTicketsActivation(context: ScriptExecutionContext, actionRecord: AIAction_Record): void
  /** @noSelf **/
  EvaluateTicketsDeactivation(context: ScriptExecutionContext, actionRecord: AIAction_Record): void
  /** @noSelf **/
  CommitToTickets(context: ScriptExecutionContext, actionRecord: AIAction_Record): void
  /** @noSelf **/
  CompleteTickets(context: ScriptExecutionContext, actionRecord: AIAction_Record, succeed: Bool): void
  /** @noSelf **/
  WaitForTicketsAcknowledgement(context: ScriptExecutionContext, actionRecord: AIAction_Record): Bool
}

declare interface AISquadParams_Record extends TweakDBRecord {

  AllTickets(outList: AITicket_Record[]): void
  GetAllTicketsCount(): number
  GetAllTicketsItem(index: number): AITicket_Record
  AllTicketsContains(item: AITicket_Record): Bool
  OverridenTickets(outList: AITicket_Record[]): void
  GetOverridenTicketsCount(): number
  GetOverridenTicketsItem(index: number): AITicket_Record
  OverridenTicketsContains(item: AITicket_Record): Bool
  ProhibitedTickets(outList: AITicketType_Record[]): void
  GetProhibitedTicketsCount(): number
  GetProhibitedTicketsItem(index: number): AITicketType_Record
  ProhibitedTicketsContains(item: AITicketType_Record): Bool
}

declare interface AITicketType_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataAITicketType
}

declare interface SquadMemberBaseComponent extends SquadMemberComponent {

  OnGameAttach(): void
  OnSquadActionSignalReceived(signal: SquadActionSignal): void
  OnSquadActionEvent(evt: SquadActionEvent): Bool
  PerformSquadVerb(squadActionName: CName, squadVerb: EAISquadVerb): void
  GetSquadInterface(interface: SquadScriptInterface): Bool
  GetTicketType(actionName: CName, entity: Entity, squadInterface: SquadScriptInterface, ticketRecord: AITicket_Record): Bool
  GetSquadRecord(entity: Entity, squadInterface: SquadScriptInterface, squadRecord: AISquadParams_Record): Bool
}

declare interface SignalUserData extends IScriptable {

  HasTag(tag: CName): Bool
}

declare interface TaggedSignalUserData extends SignalUserData {

  AddTag(tag: CName): void
}

declare interface AIScriptUtils {

  /** @noSelf **/
  GetClosestPointOnSpline(game: GameInstance, splineRef: NodeRef, refPoint: Vector4, closestPoint: Vector4): Bool
  /** @noSelf **/
  GetStartPointOfSpline(game: GameInstance, splineRef: NodeRef, startPoint: Vector4): Bool
  /** @noSelf **/
  GetEndPointOfSpline(game: GameInstance, splineRef: NodeRef, endPoint: Vector4): Bool
  /** @noSelf **/
  IsSplineStartRecalculated(context: ScriptExecutionContext, splineRef: NodeRef): Bool
  /** @noSelf **/
  CalculateDistanceToEndFrom(game: GameInstance, splineRef: NodeRef, refPoint: Vector4, endDistance: number): Bool
  /** @noSelf **/
  ArePositionsEqual(a: Vector4, b: Vector4): Bool
  /** @noSelf **/
  GetActionNameFromRecord(recordId: TweakDBID, actionName: TweakDBID): Bool
  /** @noSelf **/
  IsArchetypeAction(recordId: TweakDBID): Bool
  /** @noSelf **/
  CheckActionCondition(ctx: ScriptExecutionContext, condition: AIActionCondition_Record): Bool
  /** @noSelf **/
  CallActivateSubAction(context: ScriptExecutionContext, subAction: AISubAction_Record): void
  /** @noSelf **/
  CallUpdateSubAction(context: ScriptExecutionContext, subAction: AISubAction_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  CallDeactivateSubAction(context: ScriptExecutionContext, subAction: AISubAction_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  CallGetAnimVariation(context: ScriptExecutionContext, subActionRecord: AISubAction_Record): number
  /** @noSelf **/
  CallGetPhaseDuration(context: ScriptExecutionContext, subActionRecord: AISubAction_Record, actionPhase: number, baseDuration: number): number
  /** @noSelf **/
  CallCheckSubCondition(context: ScriptExecutionContext, check: AIActionSubCondition_Record): Bool
  /** @noSelf **/
  GetActionTarget(context: ScriptExecutionContext, target: AIActionTarget_Record, object: GameObject): Bool
  /** @noSelf **/
  GetActionTarget2(context: ScriptExecutionContext, targetId: TweakDBID, predictionTime: number, object: GameObject, position: Vector4, coverId: number): Bool
  /** @noSelf **/
  CheckActionCooldowns(context: ScriptExecutionContext, check: AIAction_Record): Bool
  /** @noSelf **/
  CheckCooldownConditions(context: ScriptExecutionContext, check: AICooldownCond_Record): Bool
  /** @noSelf **/
  CheckAnimation(context: ScriptExecutionContext, animFeatureName: CName, animVariation: number, animState: number, triggerPreload: Bool): Bool
  /** @noSelf **/
  GetTicketType(ticketName: CName, puppet: gamePuppet, fallbackSquad: AISquadParams_Record, outTicket: AITicket_Record, outSquadRecord: AISquadParams_Record): Bool
  /** @noSelf **/
  GetWaterLevel(game: GameInstance, position: Vector3, outWaterLevel: number): Bool
}

declare interface SquadActionSignal extends TaggedSignalUserData {

}

declare interface SquadActionEvent extends Event {

}

declare interface AIAction_Record extends AINode_Record {

  AnimData(): AIActionAnimData_Record
  Recovery(): AIActionPhase_Record
  Startup(): AIActionPhase_Record
  Ability(): GameplayAbility_Record
  Loop(): AIActionPhase_Record
  Lookats(outList: AIActionLookAtData_Record[]): void
  GetLookatsCount(): number
  GetLookatsItem(index: number): AIActionLookAtData_Record
  LookatsContains(item: AIActionLookAtData_Record): Bool
  LoopSubActions(outList: AISubAction_Record[]): void
  GetLoopSubActionsCount(): number
  GetLoopSubActionsItem(index: number): AISubAction_Record
  LoopSubActionsContains(item: AISubAction_Record): Bool
  StartupSubActions(outList: AISubAction_Record[]): void
  GetStartupSubActionsCount(): number
  GetStartupSubActionsItem(index: number): AISubAction_Record
  StartupSubActionsContains(item: AISubAction_Record): Bool
  Abilities(outList: GameplayAbility_Record[]): void
  GetAbilitiesCount(): number
  GetAbilitiesItem(index: number): GameplayAbility_Record
  AbilitiesContains(item: GameplayAbility_Record): Bool
  StartupEndConditions(outList: AIActionCondition_Record[]): void
  GetStartupEndConditionsCount(): number
  GetStartupEndConditionsItem(index: number): AIActionCondition_Record
  StartupEndConditionsContains(item: AIActionCondition_Record): Bool
  RecoverySubActions(outList: AISubAction_Record[]): void
  GetRecoverySubActionsCount(): number
  GetRecoverySubActionsItem(index: number): AISubAction_Record
  RecoverySubActionsContains(item: AISubAction_Record): Bool
  SubActions(outList: AISubAction_Record[]): void
  GetSubActionsCount(): number
  GetSubActionsItem(index: number): AISubAction_Record
  SubActionsContains(item: AISubAction_Record): Bool
  RecoveryEndConditions(outList: AIActionCondition_Record[]): void
  GetRecoveryEndConditionsCount(): number
  GetRecoveryEndConditionsItem(index: number): AIActionCondition_Record
  RecoveryEndConditionsContains(item: AIActionCondition_Record): Bool
  Cooldowns(outList: AIActionCooldown_Record[]): void
  GetCooldownsCount(): number
  GetCooldownsItem(index: number): AIActionCooldown_Record
  CooldownsContains(item: AIActionCooldown_Record): Bool
  Tickets(outList: AITicketType_Record[]): void
  GetTicketsCount(): number
  GetTicketsItem(index: number): AITicketType_Record
  TicketsContains(item: AITicketType_Record): Bool
  LoopEndConditions(outList: AIActionCondition_Record[]): void
  GetLoopEndConditionsCount(): number
  GetLoopEndConditionsItem(index: number): AIActionCondition_Record
  LoopEndConditionsContains(item: AIActionCondition_Record): Bool
  InitCooldowns(outList: AIActionCooldown_Record[]): void
  GetInitCooldownsCount(): number
  GetInitCooldownsItem(index: number): AIActionCooldown_Record
  InitCooldownsContains(item: AIActionCooldown_Record): Bool
  Commands(): CName[]
  GetCommandsCount(): number
  GetCommandsItem(index: number): CName
  CommandsContains(item: CName): Bool
  AnimationWrapperOverrides(): CName[]
  GetAnimationWrapperOverridesCount(): number
  GetAnimationWrapperOverridesItem(index: number): CName
  AnimationWrapperOverridesContains(item: CName): Bool
  AllowBlendDuration(): number
  AllowBlendPercCap(): number
  TicketAcknowledgeTimeout(): number
  SubActionsCanCompleteAction(): Bool
  FailIfAnimationNotStreamedIn(): Bool
  DisableAction(): Bool
  WaitForAnimationToLoad(): Bool
  DisableActionInMultiplayer(): Bool
  CompleteWithFailure(): Bool
  RevokingTicketCompletesAction(): Bool
}

declare interface EnumNameToIndexCache {

  /** @noSelf **/
  Rebuild(cache: EnumNameToIndexCache, enumTypeName: CName): Bool
  /** @noSelf **/
  GetIndex(cache: EnumNameToIndexCache, enumValueName: CName, index: number): Bool
}

declare interface SquadTicketReceipt {

}

declare interface AIRingTicket_Record extends AITicket_Record {

  RingType(): AIRingType_Record
}

declare interface AICoverHelper extends IScriptable {

  /** @noSelf **/
  CoverExposureMethodNameToEnum(exposureMethodName: CName): AICoverExposureMethod
  /** @noSelf **/
  CoverHeightNameToEnum(coverHeight: CName): gameCoverHeight
  /** @noSelf **/
  CoverActionNameToEnum(actionName: CName): EAICoverAction
  /** @noSelf **/
  GetCoverBlackboard(puppet: ScriptedPuppet): IBlackboard
  /** @noSelf **/
  GetCoverManager(puppet: ScriptedPuppet): CoverManager
  /** @noSelf **/
  GetCurrentCoverStance(puppet: ScriptedPuppet): CName
  /** @noSelf **/
  GetCurrentCoverStance(puppet: ScriptedPuppet, coverStance: gameCoverHeight): void
  /** @noSelf **/
  SetCurrentCoverStance(puppet: ScriptedPuppet, value: gameCoverHeight): void
  /** @noSelf **/
  SetCurrentCoverStance(puppet: ScriptedPuppet, value: CName): void
  /** @noSelf **/
  GetDesiredCoverStance(puppet: ScriptedPuppet): CName
  /** @noSelf **/
  GetDesiredCoverStance(puppet: ScriptedPuppet, coverStance: gameCoverHeight): void
  /** @noSelf **/
  SetDesiredCoverStance(puppet: ScriptedPuppet, value: CName): void
  /** @noSelf **/
  SetDesiredCoverStance(puppet: ScriptedPuppet, value: gameCoverHeight): void
  /** @noSelf **/
  GetCoverExposureMethod(puppet: ScriptedPuppet): CName
  /** @noSelf **/
  GetCoverExposureMethod(puppet: ScriptedPuppet, method: AICoverExposureMethod): void
  /** @noSelf **/
  SetCoverExposureMethod(puppet: ScriptedPuppet, value: CName): void
  /** @noSelf **/
  SetCoverExposureMethod(puppet: ScriptedPuppet, value: AICoverExposureMethod): void
  /** @noSelf **/
  GetCoverNPCCurrentlyExposed(puppet: ScriptedPuppet): Bool
  /** @noSelf **/
  SetCoverNPCCurrentlyExposed(puppet: ScriptedPuppet, value: Bool): void
  /** @noSelf **/
  IsCurrentlyInCover(puppet: ScriptedPuppet): Bool
  /** @noSelf **/
  IsCurrentlyInShootingSpot(puppet: ScriptedPuppet): Bool
  /** @noSelf **/
  IsCurrentlyInSmartObject(puppet: ScriptedPuppet): Bool
  /** @noSelf **/
  GetCurrentCover(puppet: ScriptedPuppet): number
  /** @noSelf **/
  IsStandingExposureMethod(exposureMethodName: CName): Bool
  /** @noSelf **/
  IsUnsafeExposureMethod(exposureMethodName: CName): Bool
  /** @noSelf **/
  FillEmptyCoverExposureMethodArray(): AICoverExposureMethod[]
  /** @noSelf **/
  FillEmptyCoverExposureMethodNameArray(): CName[]
  /** @noSelf **/
  UnregisterLastCover(puppet: ScriptedPuppet): void
  /** @noSelf **/
  RegisterNewCover(puppet: ScriptedPuppet, coverId: number): void
  /** @noSelf **/
  GetAbsAngleFromCoverToTargetPosition(puppet: ScriptedPuppet, coverID: number, targetPosition: Vector4): number
  /** @noSelf **/
  GetAbsAngleFromCoverToCombatTarget(puppet: ScriptedPuppet, targetPosition: Vector4, coverID: number): number
  /** @noSelf **/
  GetAbsAngleFromCoverToMovementTarget(puppet: ScriptedPuppet, movementTargetPos: Vector4, coverID: number): number
  /** @noSelf **/
  GetCoverHeight(puppet: ScriptedPuppet, coverID: number): gameCoverHeight
  /** @noSelf **/
  GetCoverType(puppet: ScriptedPuppet, coverID: number, shootingSpot: Bool): gameCoverHeight
  /** @noSelf **/
  NotifyGotDamageInCover(puppet: ScriptedPuppet, coverID: number, damageTime: EngineTime, executingCoverAction: Bool): void
  /** @noSelf **/
  GetCoverRemainingHealthPerc(puppet: ScriptedPuppet, coverID: number): number
  /** @noSelf **/
  HasCoverExposureMethods(puppetOwner: ScriptedPuppet, coverID: number, target: GameObject, exposureMethods: AICoverExposureMethod[]): Bool
  /** @noSelf **/
  HasCoverExposureMethods(ownerPuppet: ScriptedPuppet, coverID: number, target: GameObject, exposureMethods: CName[]): Bool
  /** @noSelf **/
  GetAvailableExposureSpots(puppet: ScriptedPuppet, coverID: number, target: GameObject, requestedExposureMethods: AICoverExposureMethod[], lineOfSightTolerance: number, exposureMethodPriority?: AIExposureMethodType_Record[]): AICoverExposureMethod[]
  /** @noSelf **/
  GetAvailableExposureSpots(puppet: ScriptedPuppet, coverID: number, target: GameObject, record: AISubActionCover_Record, lineOfSightTolerance: number, exposureMethodPriority?: AIExposureMethodType_Record[]): AICoverExposureMethod[]
  /** @noSelf **/
  CalculateCoverExposureMethod(puppet: ScriptedPuppet, target: GameObject, coverID: number, record: AISubActionCover_Record, lineOfSightTolerance: number, trackedLocation: TrackedLocation): AICoverExposureMethod
  /** @noSelf **/
  ReturnHighestPriorityMethods(puppet: ScriptedPuppet, record: AISubActionCover_Record, exposureMethods: AICoverExposureMethod[]): AICoverExposureMethod[]
  /** @noSelf **/
  GetCoverStanceFromExposureSpot(puppet: ScriptedPuppet, exposureSpot: AICoverExposureMethod): gameCoverHeight
  /** @noSelf **/
  LeaveCoverImmediately(puppet: ScriptedPuppet): Bool
  /** @noSelf **/
  GetCurrentCoverId(puppet: ScriptedPuppet): number
}

declare interface AICoverDataDef extends AIBlackboardDef {

  AutoCreateInSystem(): Bool
  Initialize(blackboard: IBlackboard): void
}

declare interface AINetStateComponent extends ScriptableComponent {

  GetReplicatedHighLevelState(): number
  SetReplicatedHighLevelState(newState: number): Bool
  GetReplicatedUpperBodyState(): number
  SetReplicatedUpperBodyState(newState: number): Bool
  GetReplicatedStanceState(): number
  SetReplicatedStanceState(newState: number): Bool
  GetReplicatedHitReactionModeState(): number
  SetReplicatedHitReactionModeState(newState: number): Bool
  GetReplicatedBehaviorState(): number
  SetReplicatedBehaviorState(newState: number): Bool
  GetReplicatedPhaseState(): number
  SetReplicatedPhaseState(newState: number): Bool
  GetReplicatedDefenseMode(): number
  SetReplicatedDefenseMode(newState: number): Bool
  GetReplicatedLocomotionMode(): number
  SetReplicatedLocomotionMode(newState: number): Bool
}

declare interface NPCStatesComponent extends AINetStateComponent {

  OnGameAttach(): void
  GetCurrentHighLevelState(): gamedataNPCHighLevelState
  SetCurrentHighLevelState(newState: gamedataNPCHighLevelState): Bool
  GetPreviousHighLevelState(): gamedataNPCHighLevelState
  GetCurrentUpperBodyState(): gamedataNPCUpperBodyState
  SetCurrentUpperBodyState(newState: gamedataNPCUpperBodyState): Bool
  GetCurrentDefenseMode(): gamedataDefenseMode
  SetCurrentDefenseMode(newState: gamedataDefenseMode): Bool
  GetCurrentLocomotionMode(): gamedataLocomotionMode
  SetCurrentLocomotionMode(newState: gamedataLocomotionMode): Bool
  GetCurrentStanceState(): gamedataNPCStanceState
  SetPreviousStanceState(prevState: gamedataNPCStanceState): void
  GetPreviousStanceState(): gamedataNPCStanceState
  SetCurrentStanceState(newState: gamedataNPCStanceState): Bool
  SetPreviousHitReactionMode(prevState: EHitReactionMode): void
  GetPreviousHitReactionMode(): EHitReactionMode
  GetCurrentHitReactionModeState(): EHitReactionMode
  SetCurrentHitReactionModeState(newState: EHitReactionMode): Bool
  GetCurrentBehaviorState(): gamedataNPCBehaviorState
  SetCurrentBehaviorState(newState: gamedataNPCBehaviorState): Bool
  GetCurrentPhaseState(): ENPCPhaseState
  SetCurrentPhaseState(newState: ENPCPhaseState): Bool
  /** @noSelf **/
  GetAnimWrapperNameBasedOnHighLevelState(highLevelState: gamedataNPCHighLevelState): CName
  /** @noSelf **/
  GetAnimWrapperNameBasedOnStanceState(stanceState: gamedataNPCStanceState): CName
  /** @noSelf **/
  AlertPuppet(ownerPuppet: ScriptedPuppet): Bool
  GetPuppet(): ScriptedPuppet
  GetPuppetStateBlackboard(): IBlackboard
  OnNPCStateChangeSignalReceived(signal: NPCStateChangeSignal): void
  ChangeHighLevelState(newState: gamedataNPCHighLevelState): void
  ChangeDefenseMode(newState: gamedataDefenseMode): void
  ChangeLocomotionMode(newState: gamedataLocomotionMode): void
  ChangeUpperBodyState(newState: gamedataNPCUpperBodyState): void
  ChangeStanceState(newState: gamedataNPCStanceState): void
  ChangeHitReactionModeState(newState: EHitReactionMode): void
  ChangeBehaviorState(newState: gamedataNPCBehaviorState): void
  ChangePhaseState(newState: ENPCPhaseState): void
  UpdateHighLevelState(newState: gamedataNPCHighLevelState, previousState: gamedataNPCHighLevelState): void
  HandleCombatStateAnimHint(newState: gamedataNPCHighLevelState, previousState: gamedataNPCHighLevelState): void
  OnHighLevelStateEnter(newState: gamedataNPCHighLevelState, previousState: gamedataNPCHighLevelState): void
  OnHighLevelStateExit(leftState: gamedataNPCHighLevelState, nextState: gamedataNPCHighLevelState): void
  OnRelaxed(): void
  OnAlerted(): void
  OnCombat(): void
  OnDead(): void
  PlayDeadVO(): void
  OnNotifySecuritySystemCombatEvent(evt: NotifySecuritySystemCombatEvent): Bool
  NotifySecuritySystemCombat(): void
  UpdateUpperBodyState(): void
  GetUpperBodyStateForAnimGraph(): number
  OnUpperBodyStateChanged(): void
  OnNormal(): void
  OnShoot(): void
  OnReload(): void
  OnDefend(): void
  OnParry(): void
  OnAttack(): void
  OnChargeAttack(): void
  UpdateLocomotionMode(): void
  OnLocomotionModeChanged(): void
  OnStatic(): void
  OnMoving(): void
  UpdateDefenseMode(): void
  OnDefenseModeChanged(): void
  OnNoDefend(): void
  OnDefendAll(): void
  OnDefendMelee(): void
  OnDefendRanged(): void
  UpdateBehaviorState(): void
  UpdatePhaseState(): void
  UpdateDefensiveState(enable: Bool): void
  TurnOnParryState(): void
  TurnOffParryState(): void
  UpdateHitReactionsExceptionState(): void
  SendOnUnstoppableRemovedSignal(b: Bool): void
  OnRegular(statSystem: StatsSystem, entityID: EntityID, recordID: TweakDBID): void
  OnForceImpact(statSystem: StatsSystem, entityID: EntityID, recordID: TweakDBID): void
  OnForceStagger(statSystem: StatsSystem, entityID: EntityID, recordID: TweakDBID): void
  OnForceKnockdown(statSystem: StatsSystem, entityID: EntityID, recordID: TweakDBID): void
  OnFragile(statSystem: StatsSystem, entityID: EntityID, recordID: TweakDBID): void
  OnWeak(statSystem: StatsSystem, entityID: EntityID, recordID: TweakDBID): void
  OnTough(statSystem: StatsSystem, entityID: EntityID, recordID: TweakDBID): void
  OnBulky(statSystem: StatsSystem, entityID: EntityID, recordID: TweakDBID): void
  OnUnstoppable(statSystem: StatsSystem, entityID: EntityID, recordID: TweakDBID): void
  OnUnstoppableTwitchMin(statSystem: StatsSystem, entityID: EntityID, recordID: TweakDBID): void
  OnUnstoppableTwitchNone(statSystem: StatsSystem, entityID: EntityID, recordID: TweakDBID): void
  OnStaggerMin(statSystem: StatsSystem, entityID: EntityID, recordID: TweakDBID): void
  OnBulkyStaggerMin(statSystem: StatsSystem, entityID: EntityID, recordID: TweakDBID): void
  UpdateStanceState(): void
  OnStanceStateChanged(): void
  ToggleVehicleWindow(toggle: Bool): void
  OnStand(): void
  OnCrouch(): void
  OnCover(): void
  OnSwim(): void
  OnVehicle(): void
}

declare interface NPCStateChangeSignal extends TaggedSignalUserData {

}

declare interface gameBoolSignalTable extends IScriptable {

  GetOrCreateSignal(signalName: CName): number
  GetOrCreateTagSignal(signalName: CName): number
  Set(signalId: number, value: Bool): Bool
  SetWithData(signalId: number, data: SignalUserData): Bool
  SetByName(signalName: CName, value: Bool): Bool
  SetTimed(signalId: number, duration: number): Bool
  GetCurrentValue(signalId: number): Bool
  GetCurrentData(signalId: number): SignalUserData
}

declare interface gameHighLevelStateDataEvent extends Event {

}

declare interface AnimWrapperWeightSetter extends AnimInputSetter {

}

declare interface BumpComponent extends IPlacedComponent {

  SetBumpPolicy(policy: AIinfluenceEBumpPolicy): void
  OnAttach(): void
  ToggleComponentOn(): void
  /** @noSelf **/
  ToggleComponentOn(puppet: ScriptedPuppet): void
}

declare interface AnimFeature_NPCState extends AnimFeature {

}

declare interface DroppedThreatData {

}

declare interface CSH extends IScriptable {

  /** @noSelf **/
  GetCooldownSystem(go: GameObject): ICooldownSystem
}

declare interface ICooldownSystem extends IGameSystem {

  DoesCooldownExist(id: number): Bool
  GetCIDByOwnerAndName(owner: Entity, cdName: CName): number
  GetCIDByRecord(owner: Entity, record: TweakDBID): number
  GetCIDByItemID(itemId: ItemID): number
  Register(request: RegisterNewCooldownRequest): number
  RegisterAbility(request: RegisterNewAbilityCooldownRequest): number
  RegisterFromRecord(request: RegisterCooldownFromRecordRequest): number
  Remove(id: number): Bool
}

declare interface RegisterNewCooldownRequest {

}

declare interface PullSquadSyncRequest extends AIEvent {

}

declare interface NotifySecuritySystemCombatEvent extends Event {

}

declare interface StanceStateChangeEvent extends Event {

}

declare interface VehicleExternalWindowRequestEvent extends Event {

}

declare interface OnUnstoppableStateSignal extends TaggedSignalUserData {

}

declare interface AnimInputSetterFloat extends AnimInputSetter {

}

declare interface CombatQueriesRequest extends SignalUserData {

}

declare interface TrackedLocation {

}

declare interface LocationInformation {

}

declare interface gameAvailableExposureMethodResult {

}

declare interface CoverCommandParams extends IScriptable {

}

declare interface AISubActionCover_Record extends AISubAction_Record {

  Target(): AIActionTarget_Record
  InsideCoverReselectionCooldown(): AIActionCooldown_Record
  CoverExposureMethods(): CName[]
  GetCoverExposureMethodsCount(): number
  GetCoverExposureMethodsItem(index: number): CName
  CoverExposureMethodsContains(item: CName): Bool
  ExposureMethodPriority(outList: AIExposureMethodType_Record[]): void
  GetExposureMethodPriorityCount(): number
  GetExposureMethodPriorityItem(index: number): AIExposureMethodType_Record
  ExposureMethodPriorityContains(item: AIExposureMethodType_Record): Bool
  CommandCoverConditions(outList: AIActionCondition_Record[]): void
  GetCommandCoverConditionsCount(): number
  GetCommandCoverConditionsItem(index: number): AIActionCondition_Record
  CommandCoverConditionsContains(item: AIActionCondition_Record): Bool
  ClearLOSDistanceTolerance(): number
  ExposedInCover(): number
  PrioritizeBlindFireAfterHit(): number
  SetDesiredCover(): number
  SetCurrentCover(): Bool
  SetCoverExposureAnim(): Bool
  SetInitialCoverData(): Bool
}

declare interface AIRelatedComponents extends ScriptableComponent {

}

declare interface AIMandatoryComponents extends AIRelatedComponents {

}

declare interface HitReactionComponent extends AIMandatoryComponents {

  GetMaxHitChain(): number
  GetDeathHasBeenPlayed(): Bool
  GetHitCountInCombo(): number
  GetStrongHitCountInCombo(): number
  GetLastStimName(): CName
  GetDeathStimName(): CName
  GetHitReactionType(): number
  GetAttackTag(): CName
  GetAttackType(): gamedataAttackType
  GetSubAttackSubType(): gamedataAttackSubtype
  GetHitReactionData(): AnimFeature_HitReactionsData
  GetLastHitReactionData(): AnimFeature_HitReactionsData
  GetBlockCount(): number
  GetParryCount(): number
  GetDodgeCount(): number
  GetCumulatedDamage(): number
  GetLastHitReactionBehaviorData(): HitReactionBehaviorData
  GetHitReactionProxyAction(): ActionHitReactionScriptProxy
  GetLastStimID(): number
  GetHitSource(): GameObject
  GetHitInstigator(): GameObject
  GetHitPosition(): Vector4
  GetHitDirection(): Vector4
  UpdateDeathHasBeenPlayed(): void
  UpdateLastStimID(): number
  ResetHitCount(): void
  SetLastStimName(laststimName: CName): void
  SetDeathStimName(laststimName: CName): void
  UpdateBlockCount(): void
  UpdateParryCount(): void
  UpdateDodgeCount(): void
  GetOwnerPuppet(): ScriptedPuppet
  GetOwnerNPC(): NPCPuppet
  GetHealthPecentageNormalized(): number
  GetFrameDamage(): number
  GetPhysicalImpulse(attackData: AttackData, hitPosition: Vector4): number
  GetFrameWoundsDamage(): number
  GetFrameDismembermentDamage(): number
  GetOwnerHPPercentage(): number
  GetHitShapeUserData(): HitShapeUserDataBase
  ResetFrameDamage(): void
  GetBlockCountInterval(): number
  GetDodgeCountInterval(): number
  GetCurrentTime(): number
  IsOwnerFacingInstigator(): Bool
  NotifyAboutWoundedInstigated(instigator: GameObject, bodyPart: EHitReactionZone): void
  NotifyAboutDismembermentInstigated(instigator: GameObject, bodyPart: EHitReactionZone): void
  GetHitReactionStatThreshold(stat: gamedataStatType): number
  GetOwnerTotalHealth(): number
  GetOwnerCurrentHealth(): number
  GetIsOwnerImmuneToExtendedHitReaction(): number
  GetIsOwnerImmuneToMelee(): number
  OnGameAttach(): void
  OnGameDetach(): void
  OnHitIndicatorEnabledChanged(value: Bool): Bool
  OnResurrect(evt: ResurrectEvent): Bool
  OnHitReactionCumulativeDamageUpdate(evt: HitReactionCumulativeDamageUpdate): Bool
  RequestCumulativeDamageUpdate(): void
  OnHitReactionStopMotionExtraction(evt: HitReactionStopMotionExtraction): Bool
  OnRequestHitReaction(evt: HitReactionRequest): Bool
  OnForcedHitReaction(forcedHitReaction: ForcedHitReactionEvent): Bool
  OnForcedDeathEvent(forcedDeath: ForcedDeathEvent): Bool
  OnSetLastHitReactionBehaviorData(evt: LastHitDataEvent): Bool
  OnSetNewHitReactionBehaviorData(evt: NewHitDataEvent): Bool
  IsSoundCriticalHit(hitEvent: gameHitEvent): Bool
  GetKillSoundName(hitEvent: gameHitEvent): CName
  GetHitSoundName(hitEvent: gameHitEvent): CName
  EvaluateHit(newHitEvent: gameHitEvent): void
  UpdateCoverDamage(npc: NPCPuppet, coverId: number): void
  CacheVars(hitEvent: gameHitEvent): void
  IncrementHitCountData(): void
  GetHitCountData(index: number): number
  GetHitCountDataArrayCurrent(): number
  GetHitCountDataArrayEnd(): number
  GetDBParameters(): void
  SetHitReactionType(hitType: animHitReactionType): void
  SetHitReactionSource(hitSource: EAIHitSource): void
  SetStance(): void
  SetHitReactionThresholds(): void
  SetHitReactionImmunities(): void
  GetHitTimerAvailability(): Bool
  SetCumulatedDamages(target: GameObject): void
  SetCumulatedDamagesForDeadNPC(): void
  UpdateCumulatedDamages(deltaTime: number): Bool
  GetBodyPart(hitEvent: gameHitEvent): Bool
  CheckInstantDismembermentOnDeath(): Bool
  GetDismembermentWoundType(): gameDismWoundType
  ProcessDefeated(npc: NPCPuppet): Bool
  UpdateDefeated(): void
  DefeatedRemoveConditions(npc: NPCPuppet): Bool
  CheckBrainMeltDeath(): Bool
  ProcessDropWeaponOnHit(owner: GameObject, hitBodyPart: EHitReactionZone, hitReaction: animHitReactionType): void
  ProcessExtendedDeathAnimData(hitEvent: gameHitEvent): void
  ProcessExtendedHitReactionAnimData(hitEvent: gameHitEvent): void
  ProcessWoundsAndDismemberment(): void
  ReactionZoneEnumToBarkListEnum(reactionZone: EHitReactionZone): EBarkList
  ReactionZoneEnumToBodyPartID(reactionZone: EHitReactionZone): number
  WoundedBaseConditions(): Bool
  WoundedFleshConditions(): Bool
  WoundedCyberConditions(): Bool
  CanDieCondition(doNotCheckAttackData?: Bool): Bool
  DismembermentConditions(): Bool
  ProcessFragmentationSplinterReaction(hitPosition: Vector4): void
  ProcessExplosionDismembement(): void
  SendDismembermentCriticalEvent(dismembermentType: gameDismWoundType, bodyPart: gameDismBodyPart, explosionEpicentrum: Vector4, strength: number, hitPosition: Vector4): void
  GetHitIntensity(defeatedOverride: Bool): void
  IsPowerDifferenceBelow(powerDifferential: EPowerDifferential): Bool
  GetReactionType(): animHitReactionType
  IsStrongExplosion(attackData: AttackData): Bool
  SendDataToAIBehavior(reactionPlayed: animHitReactionType): void
  SendMechDataToAIBehavior(reactionPlayed: animHitReactionType): void
  SetHitSource(attackType: gamedataAttackType): void
  SetAnimVariation(): void
  StoreHitData(attackAngle: number, hitSeverity: EAIHitIntensity, reactionType: animHitReactionType, bodyPart: EHitReactionZone, variation: number): void
  SendTwitchDataToAnimationGraph(): void
  SendTwitchDataToPlayerAnimationGraph(playerObject: GameObject): void
  SetHitStimEvent(hitData: AnimFeature_HitReactionsData): void
  GetHitStimEvent(): AnimFeature_HitReactionsData
  GetLastHitTimeStamp(): number
  OnClearHitStimEvent(evt: ClearHitStimEvent): Bool
  /** @noSelf **/
  ClearHitStim(obj: GameObject): void
}

declare interface AnimFeature_HitReactionsData extends AnimFeature {

}

declare interface Attack_Melee_Record extends Attack_GameEffect_Record {

  AttackSubtype(): AttackSubtype_Record
  AttackDirection(): AttackDirection_Record
  StaminaCost(outList: StatModifier_Record[]): void
  GetStaminaCostCount(): number
  GetStaminaCostItem(index: number): StatModifier_Record
  StaminaCostContains(item: StatModifier_Record): Bool
  BlockCostFactor(): number
}

declare interface AttackSubtype_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataAttackSubtype
}

declare interface DamageSystem extends IDamageSystem {

  StartPipeline(evt: gameHitEvent): void
  StartProjectionPipeline(evt: gameProjectedHitEvent): void
  /** @noSelf **/
  GetDamageModFromCurve(curve: CName, value: number): number
  ProcessPipeline(hitEvent: gameHitEvent, cache: CacheData): void
  ProcessProjectionPipeline(hitEvent: gameProjectedHitEvent, cache: CacheData): void
  CheckProjectionPipelineTargetConditions(hitEvent: gameProjectedHitEvent): Bool
  SetPreviewTargetStruct(trackedTarget: GameObject, bodyPart: EHitReactionZone): void
  ClearPreviewTargetStruct(): void
  SetPreviewLock(newState: Bool): void
  GetHitReactionZone(hitEvent: gameProjectedHitEvent): EHitReactionZone
  GatherDebugData(hitEvent: gameHitEvent, cache: CacheData, hitDebugData: HitDebugData): void
  FillInDamageBlackboard(hitEvent: gameHitEvent): void
  GatherServerData(hitEvent: gameHitEvent, cache: CacheData, serverHitData: ServerHitData): void
  ConvertHitDataToDamageInfo(hitEvent: gameHitEvent): DamageInfo[]
  ProcessClientHit(serverHitData: ServerHitData): void
  ProcessClientKill(serverKillData: ServerKillData): void
  PreProcess(hitEvent: gameHitEvent, cache: CacheData): Bool
  ConvertDPSToHitDamage(hitEvent: gameHitEvent): void
  CalculateDamageVariants(hitEvent: gameHitEvent): void
  ModifyHitData(hitEvent: gameHitEvent): void
  ProcessDamageReduction(hitEvent: gameHitEvent): void
  ProcessLocalizedDamage(hitEvent: gameHitEvent): void
  ProcessFinisher(hitEvent: gameHitEvent): void
  CanTriggerMeleeLeapFinisher(attackData: AttackData, hitEvent: gameHitEvent): Bool
  IsPowerLevelDifferentialAcceptable(hitEvent: gameHitEvent): Bool
  ProcessInstantKill(hitEvent: gameHitEvent): void
  ProcessDodge(hitEvent: gameHitEvent): void
  ProcessPlayerIncomingDamageMultiplier(hitEvent: gameHitEvent): void
  InvulnerabilityCheck(hitEvent: gameHitEvent, cache: CacheData): void
  ImmortalityCheck(hitEvent: gameHitEvent, cache: CacheData): void
  DeathCheck(hitEvent: gameHitEvent): void
  Process(hitEvent: gameHitEvent, cache: CacheData): void
  ProcessHitReaction(hitEvent: gameHitEvent): void
  ProcessRagdollHit(hitEvent: gameHitEvent): void
  ProcessCrowdTarget(hitEvent: gameHitEvent): void
  TutorialAddIllegalActionFact(targetPuppet: NPCPuppet): void
  ProcessTurretAttack(hitEvent: gameHitEvent): void
  ProcessDeviceTarget(hitEvent: gameHitEvent): void
  ProcessOneShotProtection(hitEvent: gameHitEvent): void
  ProcessQuickHackModifiers(hitEvent: gameHitEvent): void
  ProcessVehicleTarget(hitEvent: gameHitEvent): void
  ProcessVehicleHit(hitEvent: gameHitEvent): void
  DealDamages(hitEvent: gameHitEvent): void
  SendDamageEvents(hitEvent: gameHitEvent, resourcesLost: SDamageDealt[]): void
  PostProcess(hitEvent: gameHitEvent): void
  ProcessStatusEffects(hitEvent: gameHitEvent): void
  ProcessStatusEffectApplicationStats(hitEvent: gameHitEvent): void
  ApplyStatusEffectByApplicationRate(hitEvent: gameHitEvent, statType: gamedataStatType, effect: TweakDBID): void
  IsImmune(target: GameObject, statusEffectID: TweakDBID): Bool
  ProcessReturnedDamage(hitEvent: gameHitEvent): void
  CalculateGlobalModifiers(hitEvent: gameHitEvent, cache: CacheData): void
  CalculateTargetModifiers(hitEvent: gameHitEvent): void
  CalculateSourceModifiers(hitEvent: gameHitEvent): void
  ProcessChargeAttack(hitEvent: gameHitEvent): void
  ProcessRicochetBonus(hitEvent: gameHitEvent): void
  ProcessStealthAttack(hitEvent: gameHitEvent): void
  CalculateSourceVsTargetModifiers(hitEvent: gameHitEvent): void
  CacheLocalVars(hitEvent: gameHitEvent, cache: CacheData): void
  ModifyHitFlagsForPlayer(hitEvent: gameHitEvent, cache: CacheData): void
  CheckForQuickExit(hitEvent: gameHitEvent, cache: CacheData): Bool
  IsTargetImmortal(cache: CacheData): Bool
  IsTargetInvulnerable(cache: CacheData): Bool
  ProcessEffectiveRange(hitEvent: gameHitEvent): void
  /** @noSelf **/
  GetEffectiveRangeModifierForWeapon(attackData: AttackData, hitPosition: Vector4): number
  ProcessArmor(hitEvent: gameHitEvent): void
  ProcessResistances(hitEvent: gameHitEvent): void
  ProcessCriticalHit(hitEvent: gameHitEvent): void
  ProcessBlockAndDeflect(hitEvent: gameHitEvent): void
  ProcessLevelDifference(hitEvent: gameHitEvent): void
  ScalePlayerDamage(hitEvent: gameHitEvent): void
  PlayFinisherGameEffect(hitEvent: gameHitEvent, hasFromFront: Bool, hasFromBack: Bool): Bool
  GetFinisherNameBasedOnWeapon(hitEvent: gameHitEvent, hasFromFront: Bool, hasFromBack: Bool, finisherName: CName): Bool
  RegisterListener(damageListener: ScriptedDamageSystemListener, registereeID: EntityID, callbackType: gameDamageCallbackType, damagePipelineType?: DMGPipelineType): void
  UnregisterListener(damageListener: ScriptedDamageSystemListener, registereeID: EntityID, callbackType: gameDamageCallbackType, damagePipelineType?: DMGPipelineType): void
  RegisterSyncListener(damageListener: ScriptedDamageSystemListener, registereeID: EntityID, callbackType: gameDamageCallbackType, stage: gameDamagePipelineStage, damagePipelineType?: DMGPipelineType): void
  UnregisterSyncListener(damageListener: ScriptedDamageSystemListener, registereeID: EntityID, callbackType: gameDamageCallbackType, stage: gameDamagePipelineStage, damagePipelineType?: DMGPipelineType): void
  ProcessSyncStageCallbacks(stage: gameDamagePipelineStage, hitEvent: gameHitEvent, damagePipelineType: DMGPipelineType): void
  SetTutorialFact(factName: CName): void
}

declare interface CacheData extends IScriptable {

}

declare interface WeakspotObject extends GameObject {

  GetRecord(): Weakspot_Record
  SetReplicationInstigator(instigator: GameObject): void
  GetReplicationInstigator(): GameObject
}

declare interface DialogChoiceHubs {

}

declare interface StatPoolsManager extends IScriptable {

  /** @noSelf **/
  ApplyDamage(hitEvent: gameHitEvent, forReal: Bool, valuesLost: SDamageDealt[]): void
  /** @noSelf **/
  ApplyLocalizedDamageSingle(hitEvent: gameHitEvent, dmg: number, dmgType: gamedataDamageType, poolType: gamedataStatPoolType, forReal: Bool, valuesLost: SDamageDealt[]): void
  /** @noSelf **/
  MergeStatPoolsLost(to: SDamageDealt[], from: SDamageDealt[]): void
  /** @noSelf **/
  GetBodyPartStatPool(obj: GameObject, bodyPartName: CName, poolType: gamedataStatPoolType): Bool
  /** @noSelf **/
  AddDrain(arr: SDamageDealt[], type: gamedataStatPoolType, value: number, dmgType: gamedataDamageType): void
  /** @noSelf **/
  ApplyDamageSingle(hitEvent: gameHitEvent, dmgType: gamedataDamageType, initialDamageValue: number, forReal: Bool, valuesLost: SDamageDealt[]): void
  /** @noSelf **/
  ApplyDamageToArmorSingle(hitEvent: gameHitEvent, dmgType: gamedataDamageType, initialDamageValue: number, forReal: Bool, valuesLost: SDamageDealt[]): void
  /** @noSelf **/
  ApplyStatusEffectDamage(hitEvent: gameHitEvent, resistPoolRecord: StatPool_Record, statusEffectID: TweakDBID): void
  /** @noSelf **/
  DrainStatPool(hitEvent: gameHitEvent, statPoolType: gamedataStatPoolType, value: number): void
  /** @noSelf **/
  IsStatPoolValid(type: gamedataStatPoolType): Bool
  /** @noSelf **/
  SimulateDamageDeal(hitEvent: gameHitEvent): Bool
}

declare interface HitData_Base extends HitShapeUserData {

  IsWeakspot(): Bool
}

declare interface ProcessVendettaAchievementEvent extends Event {

}

declare interface QueueCombatExperience extends PlayerScriptableSystemRequest {

}

declare interface SDamageDealt {

}

declare interface StatusEffectTriggerListener extends CustomValueStatPoolsListener {

  OnStatPoolMinValueReached(value: number): Bool
}

declare interface RemoveStatusEffectListenerEvent extends Event {

}

declare interface AddStatusEffectListenerEvent extends Event {

}

declare interface PlayerStaminaHelpers extends IScriptable {

  /** @noSelf **/
  GetExhaustedThreshold(): number
  /** @noSelf **/
  GetTiredThreshold(): number
  /** @noSelf **/
  GetExhaustedRecoveryAmount(): number
  /** @noSelf **/
  GetSprintStaminaCost(): number
  /** @noSelf **/
  GetSlideStaminaCost(): number
  /** @noSelf **/
  GetJumpStaminaCost(): number
  /** @noSelf **/
  GetDodgeStaminaCost(): number
  /** @noSelf **/
  GetAirDodgeStaminaCost(): number
  /** @noSelf **/
  GetExhaustedStatusEffectID(): TweakDBID
  /** @noSelf **/
  GetBlockStaminaCooldownName(): CName
  /** @noSelf **/
  GetBlockStaminaDelay(): number
  /** @noSelf **/
  OnPlayerBlock(player: PlayerPuppet): void
  /** @noSelf **/
  ModifyStamina(player: PlayerPuppet, delta: number, perc?: Bool): void
}

declare interface gameRagdollHitEvent extends gameHitEvent {

}

declare interface gameVehicleHitEvent extends gameHitEvent {

}

declare interface SecurityTurret extends SensorDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnDetach(): Bool
  IsTurret(): Bool
  GetScannerName(): string
  PushPersistentData(): void
  GetController(): SecurityTurretController
  GetDevicePS(): SecurityTurretControllerPS
  DeactivateDevice(): void
  ActivateDevice(): void
  SetLookAtPositionProviderOnFollowedTarget(evt: LookAtAddEvent, otherTarget?: GameObject): void
  TurnOffDevice(): void
  CutPower(): void
  TurnOnDevice(): void
  OnTCSTakeOverControlActivate(evt: TCSTakeOverControlActivate): Bool
  OnTCSTakeOverControlDeactivate(evt: TCSTakeOverControlDeactivate): Bool
  GetWeapon(): WeaponObject
  GiveWeaponToTurret(): void
  OnGrabReferenceToWeaponEvent(evt: GrabReferenceToWeaponEvent): Bool
  GrabReferenceToWeapon(): void
  SetAsIntrestingTarget(target: GameObject): Bool
  OnCurrentTargetAppears(target: GameObject): void
  OnTargetLocked(evt: TargetLockedEvent): Bool
  OnAllValidTargetsDisappears(): void
  ControlledDeviceInputAction(isPressed: Bool): void
  SelectShootingPattern(weapon: WeaponObject, weaponOwner: GameObject, forceReselection?: Bool): void
  ShootStart(): void
  ShootStop(): void
  GetFirerate(): number
  SetFirerate(value: number): void
  MultiplyBaseAIRecoil(): number
  ShootAttachedWeapon(shootStart?: Bool): void
  ProcessShootingPattern(): void
  ApplyShootingInterval(): void
  QueueNextShot(delay: number): void
  OnTurretShootingIntervalEvent(evt: TurretShootingIntervalEvent): Bool
  OnTurretBurstShootingDelayEvent(evt: TurretBurstShootingDelayEvent): Bool
  CheckTargetParameters(): void
  OnRipOff(evt: RipOff): Bool
  OnAutoKillDelayEvent(evt: AutoKillDelayEvent): Bool
  OnQuestResetDeviceToInitialState(evt: QuestResetDeviceToInitialState): Bool
  RipOffTurret(): void
  ToggleTurretVisuals(toggle: Bool): void
  OnDisassembleDevice(evt: DisassembleDevice): Bool
  EnterWorkspot(activator: GameObject, freeCamera?: Bool, componentName?: CName, deviceData?: CName): void
  OnWorkspotFinished(componentName: CName): Bool
  OnDeath(evt: gameDeathEvent): Bool
  OnActionEngineering(evt: ActionEngineering): Bool
  OnQuestForceReload(evt: QuestForceReload): Bool
  OnQuestForceOverheat(evt: QuestForceOverheat): Bool
  OnQuestRemoveWeapon(evt: QuestRemoveWeapon): Bool
  GetDeviceStateClass(): CName
  OnDamageReceived(evt: gameDamageReceivedEvent): Bool
  OnHit(evt: gameHitEvent): Bool
  ShouldShowDamageNumber(): Bool
  ApplyReplicatedState(state: DeviceReplicatedState): void
  /** @noSelf **/
  CreateInputHint(context: GameInstance, isVisible: Bool): void
  GetReplicationStateToUpdate(): SecurityTurretReplicatedState
  ReplicateIsShooting(isShooting: Bool): void
  ReplicateHealth(health: number): void
  ReplicateIsOn(isOn: Bool): void
  ReplicateIsDead(isDead: Bool): void
  GetRipOffTriggerSide(forEntity: Entity): EDoorTriggerSide
  DeterminGameplayRole(): EGameplayRole
  DeterminGameplayRoleMappinRange(data: SDeviceMappinData): number
  GetTurretWeapon(): WeaponObject
  GetObjectToForwardHighlight(): GameObject[]
}

declare interface AreaShapeComponent extends IPlacedComponent {

}

declare interface TriggerComponent extends AreaShapeComponent {

  GetNumberOverlappingActivators(): number
  GetOverlappingEntities(): Entity[]
  IsEntityOverlapping(entity: Entity): Bool
}

declare interface AnimFeature_SecurityTurretData extends AnimFeature {

}

declare interface SecurityTurretController extends SensorDeviceController {

  GetPS(): SecurityTurretControllerPS
}

declare interface SecurityTurretControllerPS extends SensorDeviceControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  GameAttached(): void
  SetDeviceState(state: EDeviceStatus): void
  GetIsUnderControl(): Bool
  GetLaserGameEffectRef(): EffectRef
  GetDeviceStatusAction(): SecurityTurretStatus
  GetVfxNameOnShoot(): string
  GetWeaponItemRecordString(): string
  ActionSecurityTurretStatus(): SecurityTurretStatus
  GetQuestActions(actions: DeviceAction[], context: GetActionsContext): void
  ActionRipOff(): RipOff
  OnRipOff(evt: RipOff): EntityNotificationType
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  GetMinigameActions(actions: DeviceAction[], context: GetActionsContext): void
  OnPendingSecuritySystemDisable(evt: PendingSecuritySystemDisable): EntityNotificationType
  OnSecuritySystemOutput(evt: SecuritySystemOutput): EntityNotificationType
  OnSecurityAreaCrossingPerimeter(evt: SecurityAreaCrossingPerimeter): EntityNotificationType
  CanPerformReprimand(): Bool
  ActionEngineering(context: GetActionsContext): ActionEngineering
  OnActionEngineering(evt: ActionEngineering): EntityNotificationType
  ActionDemolition(context: GetActionsContext): ActionDemolition
  OnActionDemolition(evt: ActionDemolition): EntityNotificationType
  Override(action: ScriptableDeviceAction): void
  RipOff(action: ScriptableDeviceAction): void
  OnDisassembleDevice(evt: DisassembleDevice): EntityNotificationType
  ActionQuestForceReload(): QuestForceReload
  OnQuestForceReload(evt: QuestForceReload): EntityNotificationType
  ActionQuestForceOverheat(): QuestForceOverheat
  OnQuestForceOverheat(evt: QuestForceOverheat): EntityNotificationType
  ActionQuestRemoveWeapon(): QuestRemoveWeapon
  OnQuestRemoveWeapon(evt: QuestRemoveWeapon): EntityNotificationType
  ActionProgramSetDeviceOff(): ProgramSetDeviceOff
  ActionProgramSetDeviceAttitude(): ProgramSetDeviceAttitude
  SendDeviceNotOperationalEvent(): void
  IsTurretOperationalUnderSecuritySystem(): Bool
  OnSetDeviceAttitude(evt: SetDeviceAttitude): EntityNotificationType
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface SecurityTurretStatus extends BaseDeviceStatus {

  SetProperties(deviceRef: ScriptableDeviceComponentPS): void
  GetCurrentDisplayString(): string
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface QuestForceTakeControlOverCamera extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceStopTakeControlOverCamera extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceReload extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceOverheat extends ActionBool {

  SetProperties(): void
}

declare interface QuestRemoveWeapon extends ActionBool {

  SetProperties(): void
}

declare interface RipOff extends ActionBool {

  SetProperties(): void
  GetTweakDBChoiceRecord(): string
}

declare interface ToggleTakeOverControl extends ActionBool {

  GetBaseCost(): number
  SetProperties(isDeviceUnderControl: Bool, createdAsQuickHack?: Bool): void
  GetTweakDBChoiceRecord(): string
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetInteractionIcon(): ChoiceCaptionIconPart_Record
}

declare interface PendingSecuritySystemDisable extends Event {

}

declare interface ActionEngineering extends ActionSkillCheck {

  GetDefaultActionName(): CName
  GetInteractionIcon(): ChoiceCaptionIconPart_Record
}

declare interface ProgramSetDeviceOff extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
}

declare interface ProgramSetDeviceAttitude extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
}

declare interface SecurityTurretOffline extends Event {

}

declare interface DeviceReplicatedState extends IScriptable {

}

declare interface SecurityTurretReplicatedState extends DeviceReplicatedState {

}

declare interface GrabReferenceToWeaponEvent extends Event {

}

declare interface VisibleObjectTypeEvent extends Event {

}

declare interface BaseDeviceData {

}

declare interface DebuggerProperties {

}

declare interface IVelocityProvider extends IScriptable {

}

declare interface MoveComponentVelocityProvider extends IVelocityProvider {

  /** @noSelf **/
  CreateMoveComponentVelocityProvider(puppet: gamePuppet): IVelocityProvider
}

declare interface IPositionProvider extends IScriptable {

  CalculatePosition(outPos: Vector4): Bool
  SetWorldOffset(worldOffset: Vector4): void
  GetWorldOffset(): Vector4
  /** @noSelf **/
  CreateStaticPositionProvider(position: WorldPosition): IPositionProvider
  /** @noSelf **/
  CreateEntityPositionProvider(entity: Entity, localOffset?: Vector3): IPositionProvider
  /** @noSelf **/
  CreateEntityHistoryPositionProvider(transformHistoryComp: TransformHistoryComponent, timeDelay: number, localOffset?: Vector3): IPositionProvider
  /** @noSelf **/
  CreateSlotPositionProvider(entity: Entity, slotName: CName, localOffset?: Vector3): IPositionProvider
  /** @noSelf **/
  CreatePlacedComponentPositionProvider(entity: IPlacedComponent, localOffset?: Vector3): IPositionProvider
  /** @noSelf **/
  CreateCollisionPredictionPositionProvider(targetPosProvider: IPositionProvider, ownerPosProvider: IPositionProvider, targetVelocityProvider: IVelocityProvider, ownerVelocity: number): IPositionProvider
}

declare interface AIWeapon extends IScriptable {

  /** @noSelf **/
  GetShotTimeStamp(weapon: WeaponObject): number
  /** @noSelf **/
  GetNextShotTimeStamp(weapon: WeaponObject): number
  /** @noSelf **/
  GetTotalNumberOfShots(weapon: WeaponObject): number
  /** @noSelf **/
  GetDesiredNumberOfShots(weapon: WeaponObject): number
  /** @noSelf **/
  GetIsFullyCharged(weapon: WeaponObject): Bool
  /** @noSelf **/
  UpdateSniperEffect(weapon: WeaponObject, duration: number): Bool
  /** @noSelf **/
  UpdateCharging(weapon: WeaponObject, timeStamp: number, weaponOwner: GameObject, chargeLevel: number): Bool
  /** @noSelf **/
  GetChargeLevel(weapon: WeaponObject, actionDuration: number, chargeLevel: number): Bool
  /** @noSelf **/
  HasExceededDesiredNumberOfShots(weapon: WeaponObject): Bool
  /** @noSelf **/
  GetShootingPatternPackage(weapon: WeaponObject): AIPatternsPackage_Record
  /** @noSelf **/
  SetShootingPatternPackage(weapon: WeaponObject, patternPackage: AIPatternsPackage_Record): void
  /** @noSelf **/
  GetShootingPattern(weapon: WeaponObject): AIPattern_Record
  /** @noSelf **/
  SetShootingPattern(weapon: WeaponObject, pattern: AIPattern_Record): void
  /** @noSelf **/
  GetPatternRange(weapon: WeaponObject): AIPattern_Record[]
  /** @noSelf **/
  SetPatternRange(weapon: WeaponObject, patternList: AIPattern_Record[]): void
  /** @noSelf **/
  QueueNextShot(weapon: WeaponObject, requestedTriggerMode: gamedataTriggerMode, timeStamp: number, delayForNextShot?: number): void
  /** @noSelf **/
  OnShotFired(weapon: WeaponObject, requestedTriggerMode: gamedataTriggerMode, timeStamp: number): void
  /** @noSelf **/
  CanWeaponOverheat(gameObject: WeaponObject): Bool
  /** @noSelf **/
  GetWeaponOverheatStatPool(gameObject: WeaponObject): number
  /** @noSelf **/
  ProcessWeaponOverheatStatPool(gameObject: WeaponObject, weaponOwner: GameObject, forceOverheat?: Bool): void
  /** @noSelf **/
  GetWeaponOverheatBB(weapon: WeaponObject): Bool
  /** @noSelf **/
  ForceWeaponOverheat(weapon: WeaponObject, weaponOwner: GameObject): void
  /** @noSelf **/
  OnFullyCharged(weapon: WeaponObject): void
  /** @noSelf **/
  WeaponOverheated(weapon: WeaponObject): void
  /** @noSelf **/
  WeaponCooledDownFromOverheat(weapon: WeaponObject): void
  /** @noSelf **/
  OnStartShooting(weapon: WeaponObject, desiredNumberOfShots?: number): void
  /** @noSelf **/
  OnStopShooting(weapon: WeaponObject, actionDuration: number): void
  /** @noSelf **/
  Fire(weaponOwner: GameObject, weapon: WeaponObject, timeStamp: number, tbhCoefficient: number, requestedTriggerMode: gamedataTriggerMode, targetPosition?: Vector4, target?: GameObject, rangedAttack?: TweakDBID, maxSpreadOverride?: number, aimingDelay?: number, offset?: Vector4, shouldTrackTarget?: Bool, predictionTime?: number, posProviderOverride?: IPositionProvider): void
  /** @noSelf **/
  SetAttackBasedOnTimeDilation(owner: GameObject, weapon: WeaponObject, overrideRangedAttack?: TweakDBID): void
  /** @noSelf **/
  GetShootingPatternDelayBetweenShots(totalShotsFired: number, pattern: AIPattern_Record): number
  /** @noSelf **/
  SelectShootingPattern(record: AISubActionShootWithWeapon_Record, weapon: WeaponObject, weaponOwner: GameObject, forceReselection?: Bool): void
  /** @noSelf **/
  SelectShootingPatternPackage(weaponOwner: GameObject, weapon: WeaponObject, records?: AIPatternsPackage_Record[]): AIPatternsPackage_Record
  /** @noSelf **/
  GetPatternPackagesMeetingConditionChecks(weaponOwner: GameObject, records: AIPatternsPackage_Record[], package: AIPatternsPackage_Record): Bool
  /** @noSelf **/
  GetShootingPatternsList(weaponOwner: GameObject, weapon: WeaponObject, chosenPackage: AIPatternsPackage_Record, patternsList: AIPattern_Record[]): Bool
  /** @noSelf **/
  CompareAIPatternRecordArrays(arr1: AIPattern_Record[], arr2: AIPattern_Record[]): Bool
  /** @noSelf **/
  SelectShootingPatternFromList(weapon: WeaponObject, patternsList: AIPattern_Record[], selectedPattern: AIPattern_Record): void
}

declare interface AIShootingDataDef extends AIBlackboardDef {

  AutoCreateInSystem(): Bool
  Initialize(blackboard: IBlackboard): void
}

declare interface TriggerMode_Record extends TweakDBRecord {

  Name(): string
  Type(): gamedataTriggerMode
}

declare interface SetWeaponOwnerEvent extends Event {

}

declare interface gameprojectileWeaponParams {

  /** @noSelf **/
  AddObjectToIgnoreCollisionWith(self: gameprojectileWeaponParams, entityID: EntityID): void
}

declare interface TargetShootComponent extends IComponent {

  IsTimeBetweenHitsEnabled(): Bool
  GetLastHitTime(): number
  SetLastHitTime(value: number): void
  GetValueFromCurve(curveName: CName, lookupValue: number): number
  GetDistanceCoefficientFromCurve(curveName: CName, lookupValue: number): number
  GetVisibilityCoefficientFromCurve(curveName: CName, lookupValue: number): number
  IsDebugEnabled(): Bool
  GetGameObject(): GameObject
  HandleWeaponShoot(weaponOwner: GameObject, weapon: WeaponObject, shootAtPoint: Vector4, maxSpread: number, coefficientMultiplier: number, miss: Bool): Vector4
  HandleWeaponShoot(weaponOwner: GameObject, weapon: WeaponObject, shootAtPoint: Vector4, maxSpread: number, coefficientMultiplier: number): Vector4
  CalculateMissOffset(weaponOwner: GameObject, weapon: WeaponObject, shootAtPointWS: Vector4, maxSpread: number, useForcedMissZOffset: Bool, forcedMissZOffset: number): Vector4
  GetPackageName(): string
  GetDifficultyLevelCoefficient(): number
  GetGroupCoefficient(weaponOwner: GameObject): number
  GetPlayersNumCoefficient(weaponOwner: GameObject): number
  GetDistanceCoefficient(weapon: WeaponObject, targetPosition: Vector4): number
  GetVisibilityCoefficient(weaponOwner: GameObject, weapon: WeaponObject, target: GameObject, visibilityThresholdCoefficient: number): number
  CalculateTimeBetweenHits(params: TimeBetweenHitsParameters): number
  ShouldBeHit(weaponOwner: GameObject, weapon: WeaponObject, visibilityThresholdCoefficient: number): Bool
}

declare interface TimeBetweenHitsParameters {

}

declare interface SourceShootComponent extends IComponent {

  GetContinuousLineOfSightToTarget(target: GameObject, continuousLineOfSight: number): Bool
  ClearDebugInformation(): void
  AppendDebugInformation(lineToAppend: string): void
  SetDebugParameters(params: TimeBetweenHitsParameters): void
}

declare interface RangedAttackPackage_Record extends TweakDBRecord {

  DefaultFire(): RangedAttack_Record
  ChargeFire(): RangedAttack_Record
}

declare interface RangedAttack_Record extends TweakDBRecord {

  PlayerAttack(): Attack_Record
  NPCAttack(): Attack_Record
  PlayerTimeDilated(): Attack_Projectile_Record
  NPCTimeDilated(): Attack_Projectile_Record
}

declare interface ToggleVisibilityInAnimSystemEvent extends Event {

}

declare interface CameraSystem extends ICameraSystem {

  PrepareBlendCamera(): void
  AbandonBlendCamera(): void
  GetActiveCameraWorldTransform(transform: Transform): Bool
  GetActiveCameraData(): CameraData
  GetActiveCameraFOV(): number
  GetAspectRatio(): number
  GetActiveCameraRight(): Vector4
  GetActiveCameraForward(): Vector4
  GetActiveCameraUp(): Vector4
  ProjectPoint(worldSpacePoint: Vector4): Vector4
  UnprojectPoint(screenSpacePoint: Vector2): Vector4
}

declare interface AIAttackAttemptEvent extends Event {

}

declare interface AIPattern_Record extends TweakDBRecord {

  ActivationConditions(outList: AIActionCondition_Record[]): void
  GetActivationConditionsCount(): number
  GetActivationConditionsItem(index: number): AIActionCondition_Record
  ActivationConditionsContains(item: AIActionCondition_Record): Bool
  Delays(outList: AIPatternDelay_Record[]): void
  GetDelaysCount(): number
  GetDelaysItem(index: number): AIPatternDelay_Record
  DelaysContains(item: AIPatternDelay_Record): Bool
  PatternSize(): number
}

declare interface AIPatternDelay_Record extends TweakDBRecord {

  ShotNumber(): number
  Delay(): number
}

declare interface AIPatternsPackage_Record extends TweakDBRecord {

  ActivationConditions(outList: AIActionCondition_Record[]): void
  GetActivationConditionsCount(): number
  GetActivationConditionsItem(index: number): AIActionCondition_Record
  ActivationConditionsContains(item: AIActionCondition_Record): Bool
  Patterns(outList: AIPattern_Record[]): void
  GetPatternsCount(): number
  GetPatternsItem(index: number): AIPattern_Record
  PatternsContains(item: AIPattern_Record): Bool
}

declare interface AICondition extends IScriptable {

  /** @noSelf **/
  ActivationCheck(context: ScriptExecutionContext, actionRecord: AIAction_Record): Bool
  /** @noSelf **/
  NextPhaseCheck(context: ScriptExecutionContext, phase: AIActionPhase_Record, actionRecord: AIAction_Record, repeatCheck: Bool): Bool
  /** @noSelf **/
  AnimationStreamedInCheck(context: ScriptExecutionContext, actionRecord: AIAction_Record): Bool
  /** @noSelf **/
  CheckAbility(context: ScriptExecutionContext, actionRecord: AIAction_Record): Bool
  /** @noSelf **/
  CheckActionConditions(context: ScriptExecutionContext, conditions: AIActionCondition_Record[]): Bool
  /** @noSelf **/
  CheckActionCondition(context: ScriptExecutionContext, condition: AIActionCondition_Record): Bool
  /** @noSelf **/
  CheckActionCondition(puppet: ScriptedPuppet, condition: AIActionCondition_Record): Bool
  /** @noSelf **/
  CheckSlots(context: ScriptExecutionContext, condition: AIActionCondition_Record): Bool
  /** @noSelf **/
  CheckItems(context: ScriptExecutionContext, condition: AIActionCondition_Record): Bool
  /** @noSelf **/
  CheckAbilities(context: ScriptExecutionContext, condition: AIActionCondition_Record): Bool
  /** @noSelf **/
  CheckStatusEffects(context: ScriptExecutionContext, condition: AIActionCondition_Record): Bool
  /** @noSelf **/
  CheckSignals(context: ScriptExecutionContext, condition: AIActionCondition_Record): Bool
  /** @noSelf **/
  CheckSpatials(context: ScriptExecutionContext, condition: AIActionCondition_Record): Bool
  /** @noSelf **/
  CheckMovements(context: ScriptExecutionContext, condition: AIActionCondition_Record): Bool
  /** @noSelf **/
  CheckCommands(context: ScriptExecutionContext, condition: AIActionCondition_Record): Bool
  /** @noSelf **/
  CheckTickets(context: ScriptExecutionContext, condition: AIActionCondition_Record): Bool
  /** @noSelf **/
  CheckStatPools(context: ScriptExecutionContext, condition: AIActionCondition_Record): Bool
  /** @noSelf **/
  CheckAmmoCounts(context: ScriptExecutionContext, condition: AIActionCondition_Record): Bool
  /** @noSelf **/
  CheckWeakSpots(context: ScriptExecutionContext, condition: AIActionCondition_Record): Bool
  /** @noSelf **/
  CheckVehicles(context: ScriptExecutionContext, condition: AIActionCondition_Record): Bool
  /** @noSelf **/
  CheckTresspassings(context: ScriptExecutionContext, condition: AIActionCondition_Record): Bool
  /** @noSelf **/
  CheckRestrictedMovementAreas(context: ScriptExecutionContext, condition: AIActionCondition_Record): Bool
  /** @noSelf **/
  CheckCalculatePaths(context: ScriptExecutionContext, condition: AIActionCondition_Record): Bool
  /** @noSelf **/
  CheckCalculateLineOfSightVector(context: ScriptExecutionContext, condition: AIActionCondition_Record): Bool
  /** @noSelf **/
  CheckReactions(context: ScriptExecutionContext, condition: AIActionCondition_Record): Bool
  /** @noSelf **/
  CheckLookats(context: ScriptExecutionContext, condition: AIActionCondition_Record): Bool
  /** @noSelf **/
  CheckStates(context: ScriptExecutionContext, condition: AIActionCondition_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AISlotCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIItemCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIIsOnNavmeshCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIStatusEffectCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AISignalCond_Record): Bool
  /** @noSelf **/
  CheckDistanceInternal(owner: gamePuppet, sourcePosition: Vector4, targetPosition: Vector4, distanceRange: Vector2, condition: AISpatialCond_Record, returnVal: Bool): Bool
  /** @noSelf **/
  CheckAngle2ObjInternal(owner: gamePuppet, source: GameObject, sourcePosition: Vector4, sourceCoverID: number, target: GameObject, targetPosition: Vector4, targetCoverID: number, coneAngleRange: Vector2, condition: AISpatialCond_Record, returnVal: Bool): Bool
  /** @noSelf **/
  CheckAngle3ObjInternal(owner: gamePuppet, source: GameObject, sourcePosition: Vector4, sourceCoverID: number, target: GameObject, targetPosition: Vector4, targetCoverID: number, targetOpt: GameObject, targetPositionOpt: Vector4, targetCoverIDOpt: number, coneAngleRange: Vector2, condition: AISpatialCond_Record, returnVal: Bool): Bool
  /** @noSelf **/
  CheckZDiffInternal(sourcePosition: Vector4, targetPosition: Vector4, ZDiffRange: Vector2, condition: AISpatialCond_Record, returnVal: Bool): Bool
  /** @noSelf **/
  CheckSpatial(ownerContext: ScriptExecutionContext, targetContext: ScriptExecutionContext, condition: AISpatialCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AISpatialCond_Record): Bool
  /** @noSelf **/
  OnCantFindProperCheck(conditionName: CName): void
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIExtendTargetCirclingCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIMovementCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIStatPoolCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIAmmoCountCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIWeakSpotCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AITresspassingCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIRestrictedMovementAreaCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AICalculatePathCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AICalculateLineOfSightVector_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIReactionCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AILookAtCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIPreviousAttackCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIBlockCountCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIOptimalDistanceCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIDodgeCountCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIIsInActiveCameraCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIThrowCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIFriendlyFireCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIWeaponLockedOnTargetCond_Record): Bool
  /** @noSelf **/
  IsAwareOfBeingFlankedByThreat(ownerPuppet: ScriptedPuppet, threat: TrackedLocation): Bool
  /** @noSelf **/
  IsAwareOfBeingFlankedByAnyThreat(ownerPuppet: ScriptedPuppet, threats: TrackedLocation[]): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AICoverCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIGoToCoverCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIValidCoversCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIHitCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AITargetCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIStateCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIVehicleCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIDriverCond_Record): Bool
  /** @noSelf **/
  CheckAbility(context: ScriptExecutionContext, ability: GameplayAbility_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIAbilityCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIInTacticPositionCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIWorkspotCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AISecurityCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIHasWeapon_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AISquadCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AICommandCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AINPCTypeCond_Record): Bool
  /** @noSelf **/
  GetPuppetVelocity(puppet: ScriptedPuppet, timePeriod: number): Vector4
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIVelocityCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIVelocityDotCond_Record): Bool
  /** @noSelf **/
  Check(context: ScriptExecutionContext, condition: AIVelocitiesDotCond_Record): Bool
}

declare interface AIActionAnimData_Record extends TweakDBRecord {

  Direction(): AIActionAnimDirection_Record
  AnimSlot(): AIActionAnimSlot_Record
  AnimVariationSubAction(): AISubAction_Record
  AnimFeature(): CName
  AnimVariation(): number
  WeaponOverride(): number
  RagdollOnDeath(): Bool
  UpdateMovePolicy(): Bool
}

declare interface AIActionAnimSlot_Record extends TweakDBRecord {

  StartupSlide(): AIActionSlideData_Record
  LoopSlide(): AIActionSlideData_Record
  RecoverySlide(): AIActionSlideData_Record
  UsePoseMatching(): Bool
  UseRootMotion(): Bool
  ResetRagdollOnStart(): Bool
  UseDynamicObjectsCheck(): Bool
}

declare interface GameplayAbility_Record extends TweakDBRecord {

  AbilityPackage(): GameplayLogicPackage_Record
  PrereqsForUse(outList: IPrereq_Record[]): void
  GetPrereqsForUseCount(): number
  GetPrereqsForUseItem(index: number): IPrereq_Record
  PrereqsForUseContains(item: IPrereq_Record): Bool
  Loc_key_name(): CName
  Loc_key_desc(): CName
  ShowInCodex(): Bool
}

declare interface AIActionPhase_Record extends TweakDBRecord {

  ChangeNPCState(): AIActionChangeNPCState_Record
  DynamicDuration(): AISubAction_Record
  MovePolicy(): MovementPolicy_Record
  NotRepeatPhaseCondition(outList: AIActionCondition_Record[]): void
  GetNotRepeatPhaseConditionCount(): number
  GetNotRepeatPhaseConditionItem(index: number): AIActionCondition_Record
  NotRepeatPhaseConditionContains(item: AIActionCondition_Record): Bool
  ToNextPhaseCondition(outList: AIActionCondition_Record[]): void
  GetToNextPhaseConditionCount(): number
  GetToNextPhaseConditionItem(index: number): AIActionCondition_Record
  ToNextPhaseConditionContains(item: AIActionCondition_Record): Bool
  Repeat(): number
  Duration(): number
  AnimationDuration(): number
  ToNextPhaseConditionCheckInterval(): number
  ConditionSuccessDuration(): number
  UseDurationFromAnimSlot(): Bool
  CompleteActionWithFailureOnCondition(): Bool
}

declare interface AIActionCondition_Record extends TweakDBRecord {

  BlockCount(): AIBlockCountCond_Record
  Target(): AITargetCond_Record
  FriendlyFire(): AIFriendlyFireCond_Record
  PreviousAttack(): AIPreviousAttackCond_Record
  CanThrow(): AIThrowCond_Record
  Condition(): AIActionSubCondition_Record
  OptimalDistance(): AIOptimalDistanceCond_Record
  DodgeCount(): AIDodgeCountCond_Record
  WeaponLockedOnTarget(): AIWeaponLockedOnTargetCond_Record
  Cover(): AICoverCond_Record
  GoToCover(): AIGoToCoverCond_Record
  ValidCover(): AIValidCoversCond_Record
  Hit(): AIHitCond_Record
  Workspot(): AIWorkspotCond_Record
  Security(): AISecurityCond_Record
  Weapon(): AIHasWeapon_Record
  NpcType(): AINPCTypeCond_Record
  Lookat(outList: AILookAtCond_Record[]): void
  GetLookatCount(): number
  GetLookatItem(index: number): AILookAtCond_Record
  LookatContains(item: AILookAtCond_Record): Bool
  WeakSpotAND(outList: AIWeakSpotCond_Record[]): void
  GetWeakSpotANDCount(): number
  GetWeakSpotANDItem(index: number): AIWeakSpotCond_Record
  WeakSpotANDContains(item: AIWeakSpotCond_Record): Bool
  CommandAND(outList: AICommandCond_Record[]): void
  GetCommandANDCount(): number
  GetCommandANDItem(index: number): AICommandCond_Record
  CommandANDContains(item: AICommandCond_Record): Bool
  SlotOR(outList: AISlotCond_Record[]): void
  GetSlotORCount(): number
  GetSlotORItem(index: number): AISlotCond_Record
  SlotORContains(item: AISlotCond_Record): Bool
  SpatialAND(outList: AISpatialCond_Record[]): void
  GetSpatialANDCount(): number
  GetSpatialANDItem(index: number): AISpatialCond_Record
  SpatialANDContains(item: AISpatialCond_Record): Bool
  SignalAND(outList: AISignalCond_Record[]): void
  GetSignalANDCount(): number
  GetSignalANDItem(index: number): AISignalCond_Record
  SignalANDContains(item: AISignalCond_Record): Bool
  Reaction(outList: AIReactionCond_Record[]): void
  GetReactionCount(): number
  GetReactionItem(index: number): AIReactionCond_Record
  ReactionContains(item: AIReactionCond_Record): Bool
  StatPoolOR(outList: AIStatPoolCond_Record[]): void
  GetStatPoolORCount(): number
  GetStatPoolORItem(index: number): AIStatPoolCond_Record
  StatPoolORContains(item: AIStatPoolCond_Record): Bool
  StatusEffectOR(outList: AIStatusEffectCond_Record[]): void
  GetStatusEffectORCount(): number
  GetStatusEffectORItem(index: number): AIStatusEffectCond_Record
  StatusEffectORContains(item: AIStatusEffectCond_Record): Bool
  CalculateLineOfSightVector(outList: AICalculateLineOfSightVector_Record[]): void
  GetCalculateLineOfSightVectorCount(): number
  GetCalculateLineOfSightVectorItem(index: number): AICalculateLineOfSightVector_Record
  CalculateLineOfSightVectorContains(item: AICalculateLineOfSightVector_Record): Bool
  StatPoolAND(outList: AIStatPoolCond_Record[]): void
  GetStatPoolANDCount(): number
  GetStatPoolANDItem(index: number): AIStatPoolCond_Record
  StatPoolANDContains(item: AIStatPoolCond_Record): Bool
  SquadAND(outList: AISquadCond_Record[]): void
  GetSquadANDCount(): number
  GetSquadANDItem(index: number): AISquadCond_Record
  SquadANDContains(item: AISquadCond_Record): Bool
  InventoryOR(outList: AIItemCond_Record[]): void
  GetInventoryORCount(): number
  GetInventoryORItem(index: number): AIItemCond_Record
  InventoryORContains(item: AIItemCond_Record): Bool
  InventoryAND(outList: AIItemCond_Record[]): void
  GetInventoryANDCount(): number
  GetInventoryANDItem(index: number): AIItemCond_Record
  InventoryANDContains(item: AIItemCond_Record): Bool
  InTacticPosition(outList: AIInTacticPositionCond_Record[]): void
  GetInTacticPositionCount(): number
  GetInTacticPositionItem(index: number): AIInTacticPositionCond_Record
  InTacticPositionContains(item: AIInTacticPositionCond_Record): Bool
  WeakSpotOR(outList: AIWeakSpotCond_Record[]): void
  GetWeakSpotORCount(): number
  GetWeakSpotORItem(index: number): AIWeakSpotCond_Record
  WeakSpotORContains(item: AIWeakSpotCond_Record): Bool
  CalculatePath(outList: AICalculatePathCond_Record[]): void
  GetCalculatePathCount(): number
  GetCalculatePathItem(index: number): AICalculatePathCond_Record
  CalculatePathContains(item: AICalculatePathCond_Record): Bool
  AmmoCountAND(outList: AIAmmoCountCond_Record[]): void
  GetAmmoCountANDCount(): number
  GetAmmoCountANDItem(index: number): AIAmmoCountCond_Record
  AmmoCountANDContains(item: AIAmmoCountCond_Record): Bool
  CommandOR(outList: AICommandCond_Record[]): void
  GetCommandORCount(): number
  GetCommandORItem(index: number): AICommandCond_Record
  CommandORContains(item: AICommandCond_Record): Bool
  SquadOR(outList: AISquadCond_Record[]): void
  GetSquadORCount(): number
  GetSquadORItem(index: number): AISquadCond_Record
  SquadORContains(item: AISquadCond_Record): Bool
  SlotAND(outList: AISlotCond_Record[]): void
  GetSlotANDCount(): number
  GetSlotANDItem(index: number): AISlotCond_Record
  SlotANDContains(item: AISlotCond_Record): Bool
  RestrictedMovementArea(outList: AIRestrictedMovementAreaCond_Record[]): void
  GetRestrictedMovementAreaCount(): number
  GetRestrictedMovementAreaItem(index: number): AIRestrictedMovementAreaCond_Record
  RestrictedMovementAreaContains(item: AIRestrictedMovementAreaCond_Record): Bool
  AmmoCountOR(outList: AIAmmoCountCond_Record[]): void
  GetAmmoCountORCount(): number
  GetAmmoCountORItem(index: number): AIAmmoCountCond_Record
  AmmoCountORContains(item: AIAmmoCountCond_Record): Bool
  MovementOR(outList: AIMovementCond_Record[]): void
  GetMovementORCount(): number
  GetMovementORItem(index: number): AIMovementCond_Record
  MovementORContains(item: AIMovementCond_Record): Bool
  Cooldown(outList: AICooldownCond_Record[]): void
  GetCooldownCount(): number
  GetCooldownItem(index: number): AICooldownCond_Record
  CooldownContains(item: AICooldownCond_Record): Bool
  SignalOR(outList: AISignalCond_Record[]): void
  GetSignalORCount(): number
  GetSignalORItem(index: number): AISignalCond_Record
  SignalORContains(item: AISignalCond_Record): Bool
  VehicleOR(outList: AIVehicleCond_Record[]): void
  GetVehicleORCount(): number
  GetVehicleORItem(index: number): AIVehicleCond_Record
  VehicleORContains(item: AIVehicleCond_Record): Bool
  SpatialOR(outList: AISpatialCond_Record[]): void
  GetSpatialORCount(): number
  GetSpatialORItem(index: number): AISpatialCond_Record
  SpatialORContains(item: AISpatialCond_Record): Bool
  MovementAND(outList: AIMovementCond_Record[]): void
  GetMovementANDCount(): number
  GetMovementANDItem(index: number): AIMovementCond_Record
  MovementANDContains(item: AIMovementCond_Record): Bool
  StatusEffectAND(outList: AIStatusEffectCond_Record[]): void
  GetStatusEffectANDCount(): number
  GetStatusEffectANDItem(index: number): AIStatusEffectCond_Record
  StatusEffectANDContains(item: AIStatusEffectCond_Record): Bool
  VehicleAND(outList: AIVehicleCond_Record[]): void
  GetVehicleANDCount(): number
  GetVehicleANDItem(index: number): AIVehicleCond_Record
  VehicleANDContains(item: AIVehicleCond_Record): Bool
  Ability(outList: AIAbilityCond_Record[]): void
  GetAbilityCount(): number
  GetAbilityItem(index: number): AIAbilityCond_Record
  AbilityContains(item: AIAbilityCond_Record): Bool
  State(outList: AIStateCond_Record[]): void
  GetStateCount(): number
  GetStateItem(index: number): AIStateCond_Record
  StateContains(item: AIStateCond_Record): Bool
  Tresspassing(outList: AITresspassingCond_Record[]): void
  GetTresspassingCount(): number
  GetTresspassingItem(index: number): AITresspassingCond_Record
  TresspassingContains(item: AITresspassingCond_Record): Bool
}

declare interface AIActionTarget extends IScriptable {

  /** @noSelf **/
  Set(context: ScriptExecutionContext, record: AIActionTarget_Record, entity?: Entity, pos?: Vector4, coverID?: number): Bool
  /** @noSelf **/
  Get(context: ScriptExecutionContext, record: AIActionTarget_Record, getSlotPosition: Bool, obj: GameObject, pos: Vector4, coverID: number, predictionTime?: number): Bool
  /** @noSelf **/
  Get(context: ScriptExecutionContext, record: AIActionTarget_Record, obj: GameObject, pos: Vector4, coverID: number, predictionTime?: number): Bool
  /** @noSelf **/
  GetLegacy(context: ScriptExecutionContext, record: AIActionTarget_Record, getSlotPosition: Bool, obj: GameObject, pos: Vector4, coverID: number, predictionTime?: number): Bool
  /** @noSelf **/
  Get(context: ScriptExecutionContext, record: AIActionTarget_Record, getSlotPosition: Bool, obj: GameObject, position: Vector4, predictionTime?: number): Bool
  /** @noSelf **/
  GetObject(context: ScriptExecutionContext, record: AIActionTarget_Record, object: GameObject): Bool
  /** @noSelf **/
  GetNetrunnerProxy(context: ScriptExecutionContext): GameObject
  /** @noSelf **/
  GetObjectLegacy(context: ScriptExecutionContext, record: AIActionTarget_Record, object: GameObject): Bool
  /** @noSelf **/
  GetPosition(context: ScriptExecutionContext, record: AIActionTarget_Record, position: Vector4, getSlotPosition: Bool, predictionTime?: number): Bool
  /** @noSelf **/
  GetCurrentCoverID(context: ScriptExecutionContext, coverID: number, position: Vector4): Bool
  /** @noSelf **/
  GetCurrentCoverID(context: ScriptExecutionContext, coverID: number): Bool
  /** @noSelf **/
  GetCoverID(context: ScriptExecutionContext, record: AIActionTarget_Record, coverID: number, position: Vector4): Bool
  /** @noSelf **/
  GetCoverID(context: ScriptExecutionContext, record: AIActionTarget_Record, coverID: number): Bool
  /** @noSelf **/
  GetCoverPosition(context: ScriptExecutionContext, coverID: number, position: Vector4): Bool
  /** @noSelf **/
  GetVehicleObject(context: ScriptExecutionContext, record: AIActionTarget_Record, vehicleObject: VehicleObject): Bool
  /** @noSelf **/
  UpdateThreatsValue(puppet: NPCPuppet, newTargetObject: GameObject, timeSinceTargetChange: number): void
  /** @noSelf **/
  RegularThreatCalculation(owner: ScriptedPuppet, ownerPos: Vector4, targetTrackerComponent: TargetTrackerComponent, newTargetObject: GameObject, threat: GameObject, timeSinceTargetChange: number, currentTime: number, threatValue: number): void
  /** @noSelf **/
  BossThreatCalculation(owner: ScriptedPuppet, ownerPos: Vector4, targetTrackerComponent: TargetTrackerComponent, newTargetObject: GameObject, threat: GameObject, timeSinceTargetChange: number, currentTime: number, threatValue: number): void
  /** @noSelf **/
  MadnessThreatCalculation(owner: ScriptedPuppet, ownerPos: Vector4, targetTrackerComponent: TargetTrackerComponent, newTargetObject: GameObject, threat: GameObject, timeSinceTargetChange: number, currentTime: number, threatValue: number): void
  /** @noSelf **/
  HasWeaponInInventory(owner: GameObject): Bool
  /** @noSelf **/
  GetDistanceToThreat(ownerPos: Vector4, threat: GameObject, zDiff: number, positionOfRoot?: Bool): number
  /** @noSelf **/
  GetThreatDistanceModifier(targetTrackerComponent: TargetTrackerComponent, distance: number): number
  /** @noSelf **/
  GetThreatZDiffModifier(zDiff: number): number
  /** @noSelf **/
  GetThreatHisteresisModifier(targetTrackerComponent: TargetTrackerComponent, threat: GameObject, currentTarget: GameObject, timeSinceTargetChange: number): number
  /** @noSelf **/
  GetThreatDamageModifier(targetTrackerComponent: TargetTrackerComponent, puppet: ScriptedPuppet, threat: GameObject, distance: number, currentTime: number): number
  /** @noSelf **/
  GetThreatAttackersModifier(targetTrackerComponent: TargetTrackerComponent, puppet: ScriptedPuppet, threat: GameObject): number
  /** @noSelf **/
  GetThreatLastVisibilityModifier(puppet: ScriptedPuppet, threat: GameObject): number
  /** @noSelf **/
  GetClosestMemberId(smi: SquadScriptInterface, pos: Vector4): EntityID
}

declare interface AIActionTarget_Record extends TweakDBRecord {

  EnumComment(): string
  TrackingMode(): TrackingMode_Record
  BehaviorArgumentName(): CName
  EnumName(): CName
  TargetSlot(): CName
  IsObject(): Bool
  IsCoverID(): Bool
  IsPosition(): Bool
  Type(): gamedataAIActionTarget
}

declare interface AITweakActionSystem extends IGameSystem {

  EvaluateActionCondition(ctx: ScriptExecutionContext, record: AIActionCondition_Record): Bool
  EvaluateActionTargetObject(ctx: ScriptExecutionContext, recordId: TweakDBID, object: GameObject): Bool
  EvaluateActionTargetAll(ctx: ScriptExecutionContext, recordId: TweakDBID, predictionTime: number, object: GameObject, position: Vector4, coverId: number): Bool
  IsTweakCompositeAlternativesLimitEnabled(ctx: ScriptExecutionContext, playerInCombat: Bool): Bool
  GetTweakCompositeAlternativesLimit(ctx: ScriptExecutionContext): number
}

declare interface TrackingMode_Record extends TweakDBRecord {

  EnumName(): string
  EnumComment(): string
  Type(): gamedataTrackingMode
}

declare interface SurveillanceCamera extends SensorDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  ResolveGameplayState(): void
  OnDetach(): Bool
  GetController(): SurveillanceCameraController
  GetDevicePS(): SurveillanceCameraControllerPS
  IsSurveillanceCamera(): Bool
  GetScannerName(): string
  SetAsIntrestingTarget(target: GameObject): Bool
  OnValidTargetAppears(target: GameObject): void
  OnCurrentTargetAppears(target: GameObject): void
  SetWarningMessage(lockey: string): void
  OnValidTargetDisappears(target: GameObject): void
  OnAllValidTargetsDisappears(): void
  OnEnterShapeEvent(evt: EnterShapeEvent): Bool
  OnExitShapeEvent(evt: ExitShapeEvent): Bool
  PushPersistentData(): void
  RestoreDeviceState(): void
  DeactivateDevice(): void
  ActivateDevice(): void
  TurnOffDevice(): void
  TurnOnDevice(): void
  CutPower(): void
  OnToggleStreamFeed(evt: ToggleStreamFeed): Bool
  OnToggleCamera(evt: ToggleON): Bool
  TurnOnCamera(): void
  TurnOffCamera(): void
  OnDeath(evt: gameDeathEvent): Bool
  OnSetDeviceAttitude(evt: SetDeviceAttitude): Bool
  SetForcedSensesTracing(): void
  OnCameraTagLockEvent(evt: CameraTagLockEvent): Bool
  RegisterToGameSessionDataSystem(add: Bool): void
  ToggleFeed(shouldBeOn: Bool): void
  RequestAlarm(): void
  OverrideLookAtSetupHor(lookAtEntityEvent: LookAtAddEvent): void
  DeterminGameplayRole(): EGameplayRole
  OnActionEngineering(evt: ActionEngineering): Bool
  OnTCSTakeOverControlActivate(evt: TCSTakeOverControlActivate): Bool
  OnTCSTakeOverControlDeactivate(evt: TCSTakeOverControlDeactivate): Bool
}

declare interface VirtualCameraComponent extends entCameraComponent {

  GetVirtualCameraName(): CName
  SetVirtualCameraName(newName: CName): void
}

declare interface SurveillanceCameraController extends SensorDeviceController {

  GetPS(): SurveillanceCameraControllerPS
}

declare interface SurveillanceCameraControllerPS extends SensorDeviceControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  GameAttached(): void
  PushResaveData(data: SurveillanceCameraResaveData): void
  GetCameraState(): ESurveillanceCameraStatus
  DetermineGameplayViability(context: GetActionsContext, hasActiveActions: Bool): Bool
  ForceRevealEnemies(reveal: Bool): void
  ShouldRevealEnemies(): Bool
  GetQuestFactOnDetection(): CName
  GetDeviceStatusAction(): SurveillanceCameraStatus
  ActionSurveillanceCameraStatus(): SurveillanceCameraStatus
  ActionToggleStreamFeed(shouldStream: Bool): ToggleStreamFeed
  ActionCameraTagSeenEnemies(): CameraTagSeenEnemies
  ActionQuestForceReplaceStreamWithVideo(): QuestForceReplaceStreamWithVideo
  ActionQuestForceStopReplacingStream(): QuestForceStopReplacingStream
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  GetMinigameActions(actions: DeviceAction[], context: GetActionsContext): void
  GetQuestActions(actions: DeviceAction[], context: GetActionsContext): void
  OnToggleStreamFeed(evt: ToggleStreamFeed): EntityNotificationType
  OnToggleON(evt: ToggleON): EntityNotificationType
  OnQuestForceReplaceStreamWithVideo(evt: QuestForceReplaceStreamWithVideo): EntityNotificationType
  OnQuestForceStopReplacingStream(evt: QuestForceStopReplacingStream): EntityNotificationType
  OnCameraTagSeenEnemies(evt: CameraTagSeenEnemies): EntityNotificationType
  OnSetDeviceAttitude(evt: SetDeviceAttitude): EntityNotificationType
  HandleFeedReceiversArray(shouldAdd: Bool, hasHack: Bool): void
  IsRequesterOnTheList(requester: EntityID): Bool
  GetMostRecentRequester(): EntityID
  GetFeedReceiversArray(): EntityID[]
  ShouldStream(): Bool
  GetfollowedTargetID(): EntityID
  IsStreaming(): Bool
  IsDetecting(): Bool
  IsDetectingDebug(): Bool
  GetVirtualSystemType(): EVirtualSystem
  GetWidgetTypeName(): CName
  GetDeviceIconPath(): string
  GetBackgroundTextureTweakDBID(): TweakDBID
  GetDeviceIconTweakDBID(): TweakDBID
  GetDeviceWidget(context: GetActionsContext): SDeviceWidgetPackage
  ClearFeedReceivers(): void
  CanStreamVideo(): Bool
  ThreatDetected(isDetected: Bool): void
  OnTCSTakeOverControlDeactivate(evt: TCSTakeOverControlDeactivate): EntityNotificationType
  GetFakeToggleStreamAction(startStream: Bool, whoIsReceiving: EntityID): ToggleStreamFeed
  LogActionDetails(action: ScriptableDeviceAction, cachedStatus: BaseDeviceStatus, context?: string, status?: string, overrideStatus?: Bool): void
  ActionEngineering(context: GetActionsContext): ActionEngineering
  OnActionEngineering(evt: ActionEngineering): EntityNotificationType
  Override(action: ScriptableDeviceAction): void
}

declare interface SurveillanceCameraViabilityInterpreter extends IScriptable {

  /** @noSelf **/
  Evaluate(device: SurveillanceCameraControllerPS, hasActiveActions: Bool): Bool
}

declare interface CameraQuestProperties {

}

declare interface SurveillanceCameraStatus extends BaseDeviceStatus {

  SetProperties(deviceRef: ScriptableDeviceComponentPS): void
  GetCurrentDisplayString(): string
  GetStatusValue(): number
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface ToggleStreamFeed extends ActionBool {

  GetBaseCost(): number
  SetProperties(isStreaming: Bool): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface CameraSetup {

}

declare interface CameraTagSeenEnemies extends ActionBool {

  GetBaseCost(): number
  SetProperties(): void
  GetInteractionIcon(): ChoiceCaptionIconPart_Record
}

declare interface QuestForceReplaceStreamWithVideo extends ActionName {

  SetProperties(binkPath: CName): void
}

declare interface QuestForceStopReplacingStream extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceTakeControlOverCameraWithChain extends ActionBool {

  SetProperties(): void
}

declare interface VRoomFeed extends Event {

}

declare interface FeedEvent extends Event {

}

declare interface BinkVideoEvent extends Event {

}

declare interface PSRefreshEvent extends Event {

}

declare interface RevealRequestEvent extends Event {

  CreateRequest(doReveal: Bool, whoWantsToReveal: EntityID): void
  GetShouldReveal(): Bool
  GetRequester(): EntityID
  SetOneFrame(): void
  IsOneFrame(): Bool
}

declare interface DeviceActionOperationsTrigger extends DeviceOperationsTrigger {

  EvaluateTrigger(actionClassName: CName, owner: GameObject, container: DeviceOperationsContainer): void
  RestoreOperation(actionClassName: CName, owner: GameObject, container: DeviceOperationsContainer): void
}

declare interface DeviceActionOperationTriggerData extends DeviceOperationTriggerData {

}

declare interface SensorObjectComponent extends IPlacedComponent {

  SetSensorObjectType(objectType: gamedataSenseObjectType): Bool
  GetTimeSinceLastEntityVisible(entityID: EntityID): number
  SetMainTrackedObject(target: GameObject): Bool
  SetMainTrackedObjectTraceZOffset(traceType: AdditionalTraceType, zOffset: number): Bool
  GetDistToTraceEndFromPosToMainTrackedObject(traceType: AdditionalTraceType): number
  SetForcedSensesTracing(targetObjectType: gamedataSenseObjectType, attitudeToTarget: EAIAttitude): Bool
  RemoveForcedSensesTracing(targetObjectType: gamedataSenseObjectType, attitudeToTarget: EAIAttitude): Bool
  SetTickDistanceOverride(overrideDistance: number): Bool
  SetHasPierceableWapon(hasTechWeapon: Bool): Bool
}

declare interface AISlotCond_Record extends AIItemCond_Record {

  RequestedTriggerModes(): TriggerMode_Record
  Target(): AIActionTarget_Record
  Slot(): AttachmentSlot_Record
  CheckIfEmptySlotIsSpawningItem(): number
}

declare interface AIActionTransactionSystem extends IScriptable {

  /** @noSelf **/
  ChooseSingleItemsSetFromPool(powerLevel: number, seed: number, itemPool: NPCEquipmentItemPool_Record): NPCEquipmentItem_Record[]
  /** @noSelf **/
  CalculateEquipmentItems(puppet: ScriptedPuppet, equipmentGroupName: CName, items: NPCEquipmentItem_Record[], powerLevel?: number): void
  /** @noSelf **/
  CalculateEquipmentItems(puppet: ScriptedPuppet, equipmentGroupRecord: NPCEquipmentGroup_Record, items: NPCEquipmentItem_Record[], powerLevel: number): void
  /** @noSelf **/
  ShouldPerformEquipmentCheck(obj: ScriptedPuppet, equipmentGroup: CName): Bool
  /** @noSelf **/
  CheckEquipmentGroupForEquipment(context: ScriptExecutionContext, condition: AIItemCond_Record): Bool
  /** @noSelf **/
  CheckSlotsForEquipment(context: ScriptExecutionContext, equipmentGroup: CName): Bool
  /** @noSelf **/
  GetEquipment(context: ScriptExecutionContext, checkPrimaryEquipment: Bool, itemsList: NPCItemToEquip[]): Bool
  /** @noSelf **/
  GetEquipmentWithCondition(context: ScriptExecutionContext, checkPrimaryEquipment: Bool, checkForUnequip: Bool, itemsList: NPCItemToEquip[]): Bool
  /** @noSelf **/
  GetDefaultEquipment(context: ScriptExecutionContext, characterRecord: Character_Record, checkForUnequip: Bool, itemsList: NPCItemToEquip[]): Bool
  /** @noSelf **/
  GetOnBodyEquipment(obj: ScriptedPuppet, itemsToEquip: NPCItemToEquip[]): Bool
  /** @noSelf **/
  GetOnBodyEquipmentRecords(obj: ScriptedPuppet, outEquipmentRecords: NPCEquipmentItem_Record[]): Bool
  /** @noSelf **/
  GetItemsBodySlot(owner: ScriptedPuppet, itemID: ItemID, onBodySlotID: TweakDBID): Bool
  /** @noSelf **/
  GetItemID(obj: ScriptedPuppet, itemRecord: Item_Record, onBodySlotID: TweakDBID, itemID: ItemID): Bool
  /** @noSelf **/
  GetItemIDFromRecord(itemRecord: Item_Record, itemID: ItemID): Bool
  /** @noSelf **/
  GetFirstItemID(owner: GameObject, itemTag: CName, itemID: ItemID): Bool
  /** @noSelf **/
  GetFirstItemID(owner: GameObject, itemType: ItemType_Record, itemTag: CName, itemID: ItemID): Bool
  /** @noSelf **/
  GetFirstItemID(owner: GameObject, itemCategory: ItemCategory_Record, itemTag: CName, itemID: ItemID): Bool
  /** @noSelf **/
  IsSlotEmptySpawningItem(owner: GameObject, slotID: TweakDBID): Bool
  /** @noSelf **/
  DoesItemMeetRequirements(weaponItemID: ItemID, condition: AIItemCond_Record, evolution: WeaponEvolution_Record): Bool
}

declare interface NPCEquipmentItemPool_Record extends NPCEquipmentGroupEntry_Record {

  Pool(outList: NPCEquipmentItemsPoolEntry_Record[]): void
  GetPoolCount(): number
  GetPoolItem(index: number): NPCEquipmentItemsPoolEntry_Record
  PoolContains(item: NPCEquipmentItemsPoolEntry_Record): Bool
}

declare interface NPCEquipmentItemsPoolEntry_Record extends TweakDBRecord {

  Items(outList: NPCEquipmentItem_Record[]): void
  GetItemsCount(): number
  GetItemsItem(index: number): NPCEquipmentItem_Record
  ItemsContains(item: NPCEquipmentItem_Record): Bool
  MinLevel(): number
  Weight(): number
}

declare interface NPCEquipmentGroup_Record extends TweakDBRecord {

  EquipmentItems(outList: NPCEquipmentGroupEntry_Record[]): void
  GetEquipmentItemsCount(): number
  GetEquipmentItemsItem(index: number): NPCEquipmentGroupEntry_Record
  EquipmentItemsContains(item: NPCEquipmentGroupEntry_Record): Bool
}

declare interface NPCEquipmentItem_Record extends NPCEquipmentGroupEntry_Record {

  OnBodySlot(): AttachmentSlot_Record
  Item(): Item_Record
  EquipSlot(): AttachmentSlot_Record
  EquipCondition(outList: AIActionCondition_Record[]): void
  GetEquipConditionCount(): number
  GetEquipConditionItem(index: number): AIActionCondition_Record
  EquipConditionContains(item: AIActionCondition_Record): Bool
  UnequipCondition(outList: AIActionCondition_Record[]): void
  GetUnequipConditionCount(): number
  GetUnequipConditionItem(index: number): AIActionCondition_Record
  UnequipConditionContains(item: AIActionCondition_Record): Bool
}

declare interface NPCItemToEquip {

}

declare interface AIActionDataDef extends AIBlackboardDef {

  AutoCreateInSystem(): Bool
  Initialize(blackboard: IBlackboard): void
}

declare interface AIAbilityCond_Record extends AIActionSubCondition_Record {

  Abilities(outList: GameplayAbility_Record[]): void
  GetAbilitiesCount(): number
  GetAbilitiesItem(index: number): GameplayAbility_Record
  AbilitiesContains(item: GameplayAbility_Record): Bool
}

declare interface AIStatusEffectCond_Record extends AIActionSubCondition_Record {

  Target(): AIActionTarget_Record
  StatusEffect(): StatusEffect_Record
  StatusEffectType(): StatusEffectType_Record
  GameplayTag(): CName
}

declare interface StatusEffectType_Record extends TweakDBRecord {

  EnumName(): string
  EnumComment(): string
  Type(): gamedataStatusEffectType
}

declare interface AISignalCond_Record extends AIActionSubCondition_Record {

  Name(): CName
}

declare interface AISpatialCond_Record extends AIActionSubCondition_Record {

  TargetOpt(): AIActionTarget_Record
  Source(): AIActionTarget_Record
  Target(): AIActionTarget_Record
  SpatialHintMults(): Vector3
  ZDiff(): Vector2
  ConeAngle(): Vector2
  Distance(): Vector2
  AngleDirection(): number
  PredictionTime(): number
  UseTargetPOV(): Bool
}

declare interface CombatSpaceHelper {

  /** @noSelf **/
  GetDistanceMultiplier(owner: GameObject, multipliers: Vector3): number
}

declare interface AIMovementCond_Record extends AIActionSubCondition_Record {

  Destination(): AIActionTarget_Record
  MovementType(): CName
  OffMeshLinkType(): CName
  SpatialHintMults(): Vector3
  Slope(): Vector2
  DistanceToDestination(): Vector2
  ConstrainedByRestrictedArea(): number
  LineOfSightFailed(): number
  IsUsingOffMeshLink(): number
  IsPauseByDynamicCollision(): number
  IsMoving(): number
  IsEvaluated(): number
  PathFindingFailed(): number
  IsDestinationCalculated(): number
  IsDestinationChanged(): number
}

declare interface MovePoliciesComponent extends IComponent {

  AddPolicies(object: MovePolicies): void
  PopPolicies(object: MovePolicies): void
  GetTopPolicies(): MovePolicies
  GetDestination(): Vector4
  GetDistanceToDestination(): number
  GetDistanceToDestinationFrom(destination: Vector4): number
  GetClosestPointToPath(point: Vector4): Vector4
  GetInclineAngle(): number
  ChangeMovementType(movementType: moveMovementType): Bool
  IsPathfindingFailed(): Bool
  IsConstrainedByRestrictedArea(): Bool
  HasLineOfSightFailed(): Bool
  IsInIdle(): Bool
  IsTopPolicyEvaluated(): Bool
  IsPausedByDynamicCollision(): Bool
  IsDestinationCalculated(): Bool
  IsDestinationChanged(): Bool
  IsOnOffMeshLink(): Bool
  GetOffMeshLinkType(type: worldOffMeshConnectionType): Bool
  GetExplorationOffMeshLinkType(): moveExplorationType
  IsOnStairs(): Bool
}

declare interface MovePolicies extends IScriptable {

  SetDestinationPosition(position: Vector4): void
  SetInvalidDestinationPosition(): void
  SetDestinationObject(object: GameObject): void
  SetDestinationCover(cover: number): void
  SetStrafingTarget(object: GameObject): void
  SetStrafingPosition(position: Vector4): void
  SetDestinationOrientation(oreiantation: Quaternion): void
  SetDistancePolicy(distance: number, tolerance: number): void
  SetMinDistancePolicy(minDistance: number): void
  SetStrafingPredictionTime(strafingPredictionTime: number, strafingPredictionVelocityMax: number): void
  SetDynamicTargetUpdateTimer(updateTimer: number, distance: number): void
  SetStrafingRotationOffset(angle: number): void
  SetCirclingPolicy(direction: moveCirclingDirection): void
  SetMovementType(movementType: moveMovementType): void
  SetStopOnObstacle(stopOnObstacle: Bool): void
  SetAvoidObstacleWithinTolerance(avoidWiyhinTolerance: Bool): void
  SetKeepLineOfSight(los: moveLineOfSight): void
  SetGetOutOfWay(getOutOfWay: Bool): void
  SetUseLineOfSitePrecheck(precheck: Bool): void
  SetUseFollowSlots(use: Bool): void
  SetUseSymmetricAnglesScores(use: Bool): void
  SetSquadInfo(squadIndex: number, squadSize: number): void
  SetCollisionAvoidancePolicy(avoidance: Bool, reservation: Bool): void
  SetInRestrictedArea(inRestrictedArea: Bool): void
  SetAvoidThreat(avoidThreat: Bool): void
  SetUseStartStop(useStart: Bool, useStop: Bool): void
  SetIgnoreNavigation(ignore: Bool): void
  SetUseOffMeshAllowedTags(useOffMeshBlockedTags: Bool): void
  AddAllowedTag(tag: CName): void
  SetUseOffMeshBlockedTags(useOffMeshAllowedTags: Bool): void
  AddBlockedTag(tag: CName): void
  GetMovementType(): moveMovementType
  SetIdleTurnsDeadZoneAngle(angle: number): void
  GetIdleTurnsDeadZoneAngle(): number
  SetPositionProvider(provider: IPositionProvider): void
  SetStrafingPositionProvider(provider: IPositionProvider): void
  SetCalculateStartTangent(calculateTangent: Bool): void
  SetDebugName(debugName: CName): void
  SetTweakDBID(id: TweakDBID): void
  SetMaxPathLengthToDirectDistanceRatioCurve(curveName: CName): void
  GetMaxPathLengthToDirectDistanceRatioCurve(): CName
  SetMaxPathLength(length: number): void
  GetMaxPathLength(): number
  SetLocalTargetOffset(position: Vector4): void
  /** @noSelf **/
  GetInvalidPos(): Vector4
  SetCostModCircle(costModCircle: NavigationCostModCircle): void
}

declare interface AICommandCond_Record extends AIActionSubCondition_Record {

  Target(): AIActionTarget_Record
  HasCommands(): CName[]
  GetHasCommandsCount(): number
  GetHasCommandsItem(index: number): CName
  HasCommandsContains(item: CName): Bool
  HasNewOrOverridenCommands(): CName[]
  GetHasNewOrOverridenCommandsCount(): number
  GetHasNewOrOverridenCommandsItem(index: number): CName
  HasNewOrOverridenCommandsContains(item: CName): Bool
}

declare interface AIActiveCommandList {

  /** @noSelf **/
  Size(list: AIActiveCommandList): number
  /** @noSelf **/
  Add(list: AIActiveCommandList, command: AICommand): void
  /** @noSelf **/
  Remove(list: AIActiveCommandList, commandName: CName): void
  /** @noSelf **/
  TrackActionCommand(list: AIActiveCommandList, commandName: CName): void
  /** @noSelf **/
  ClearActionCommand(list: AIActiveCommandList, commandName: CName): void
  /** @noSelf **/
  IsActionCommandByName(list: AIActiveCommandList, commandName: CName): Bool
  /** @noSelf **/
  IsActionCommandById(list: AIActiveCommandList, commandId: number): Bool
  /** @noSelf **/
  Contains(list: AIActiveCommandList, command: CName): Bool
  /** @noSelf **/
  ContainsById(list: AIActiveCommandList, commandId: number): Bool
  /** @noSelf **/
  GetId(list: AIActiveCommandList, command: CName, id: number): Bool
}

declare interface AISquadCond_Record extends AIActionSubCondition_Record {

  HasTickets(outList: AITicketType_Record[]): void
  GetHasTicketsCount(): number
  GetHasTicketsItem(index: number): AITicketType_Record
  HasTicketsContains(item: AITicketType_Record): Bool
  TicketsConditionCheck(outList: AITicketType_Record[]): void
  GetTicketsConditionCheckCount(): number
  GetTicketsConditionCheckItem(index: number): AITicketType_Record
  TicketsConditionCheckContains(item: AITicketType_Record): Bool
}

declare interface AIActionCooldown_Record extends TweakDBRecord {

  ActivationCondition(outList: AIActionCondition_Record[]): void
  GetActivationConditionCount(): number
  GetActivationConditionItem(index: number): AIActionCondition_Record
  ActivationConditionContains(item: AIActionCondition_Record): Bool
  Name(): CName
  Duration(): number
}

declare interface AITicketCondition extends IScriptable {

  /** @noSelf **/
  PerformChecking(entity: Entity, interface: PuppetSquadInterface, conditions: AITicketCondition_Record[], ticketRecord: AITicket_Record, squadRecord: AISquadParams_Record): Bool
  /** @noSelf **/
  PerformChecking(entity: Entity, interface: PuppetSquadInterface, conditions: AITicketCondition_Record[], ticketRecord: AITicket_Record): Bool
  /** @noSelf **/
  Check(entity: Entity, interface: PuppetSquadInterface, check: AITicketCheck_Record, ticketRecord: AITicket_Record, squadMembers: Entity[]): Bool
  /** @noSelf **/
  CheckOR(entity: Entity, interface: PuppetSquadInterface, check: AISquadORCondition_Record, ticketRecord: AITicket_Record, squadMembers: Entity[]): Bool
  /** @noSelf **/
  CheckContainsSelf(entity: Entity, interface: PuppetSquadInterface, check: AISquadContainsSelfCheck_Record, squadMembers: Entity[]): Bool
  /** @noSelf **/
  CheckMembersAmount(entity: Entity, interface: PuppetSquadInterface, check: AISquadMembersAmountCheck_Record, squadMembers: Entity[]): Bool
  /** @noSelf **/
  CheckAND(entity: Entity, interface: PuppetSquadInterface, check: AISquadANDCondition_Record, ticketRecord: AITicket_Record, squadMembers: Entity[]): Bool
  /** @noSelf **/
  FilterOut(entity: Entity, interface: PuppetSquadInterface, filter: AITicketFilter_Record, ticketRecord: AITicket_Record, squadMembers: Entity[]): void
  /** @noSelf **/
  CheckNumberOfTickets(entity: Entity, interface: PuppetSquadInterface, ticketRecord: AITicket_Record): Bool
  /** @noSelf **/
  FilterAgainstChoosingPreviouslySelected(entity: Entity, interface: PuppetSquadInterface, condition: AISquadAvoidLastFilter_Record, squadMembers: Entity[]): void
  /** @noSelf **/
  CheckDistanceRelationToTarget(entity: Entity, interface: PuppetSquadInterface, condition: AISquadDistanceRelationToTargetCheck_Record, closest: Bool, squadMembers: Entity[]): Bool
  /** @noSelf **/
  FilterSpatialForOwnTarget(entity: Entity, condition: AISquadSpatialForOwnTarget_Record, squadMembers: Entity[]): void
  /** @noSelf **/
  FilterAICondition(condition: AISquadFilterByAICondition_Record, squadMembers: Entity[]): void
  /** @noSelf **/
  CheckDistanceRelationToSector(entity: Entity, interface: PuppetSquadInterface, condition: AISquadDistanceRelationToSectorCheck_Record, closest: Bool, ticketRecord: AITicket_Record, squadMembers: Entity[]): Bool
  /** @noSelf **/
  FilterJustSelf(entity: Entity, condition: AISquadJustSelfFilter_Record, squadMembers: Entity[]): void
  /** @noSelf **/
  FilterInSector(interface: PuppetSquadInterface, condition: AISquadInSectorFilter_Record, ticketRecord: AITicket_Record, squadMembers: Entity[]): void
  /** @noSelf **/
  FilterTargetSpotted(entity: Entity, condition: AISquadFilterOwnTargetSpotted_Record, squadMembers: Entity[]): void
  /** @noSelf **/
  IsTargetSpotted(context: ScriptExecutionContext, target: GameObject): Bool
  /** @noSelf **/
  GetItem(entity: Entity): ItemObject
  /** @noSelf **/
  FilterItemTypePredicate(itemRecord: Item_Record, condition: AISquadItemTypePriorityFilter_Record, index: number): Bool
  /** @noSelf **/
  FilterItemTypePredicate(itemRecord: Item_Record, condition: AISquadItemCategoryPriorityFilter_Record, index: number): Bool
  /** @noSelf **/
  FilterItemPriority(condition: AISquadItemPriorityFilter_Record, squadMembers: Entity[]): void
}

declare interface AISquadAvoidLastFilter_Record extends AITicketFilter_Record {

}

declare interface AISquadFilterByAICondition_Record extends AITicketFilter_Record {

  Condition(): AIActionCondition_Record
}

declare interface AISquadInSectorFilter_Record extends AITicketFilter_Record {

  Sectors(outList: AISectorType_Record[]): void
  GetSectorsCount(): number
  GetSectorsItem(index: number): AISectorType_Record
  SectorsContains(item: AISectorType_Record): Bool
}

declare interface AITacticTicket_Record extends AITicket_Record {

  Sectors(outList: AISectorType_Record[]): void
  GetSectorsCount(): number
  GetSectorsItem(index: number): AISectorType_Record
  SectorsContains(item: AISectorType_Record): Bool
  TacticTimeout(): number
  OffensiveTactic(): Bool
}

declare interface AISectorType_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
}

declare interface CombatAlley extends IScriptable {

  GetSector(pos: Vector4): AICombatSectorType
  GetDistanceFromSector(sector: AICombatSectorType, pos: Vector4): number
  GetFurtherstMemberFromSector(sector: AICombatSectorType): Entity
  GetClosestMemberFromSector(sector: AICombatSectorType): Entity
  GetReferencePoint(): Vector4
  GetTargetPoint(): Vector4
}

declare interface AISquadJustSelfFilter_Record extends AITicketFilter_Record {

}

declare interface AISquadSpatialForOwnTarget_Record extends AITicketFilter_Record {

  Spatial(): AISpatialCond_Record
}

declare interface AISquadFilterOwnTargetSpotted_Record extends AITicketFilter_Record {

  Target(): AIActionTarget_Record
}

declare interface AISquadItemTypePriorityFilter_Record extends AISquadItemPriorityFilter_Record {

  Types(outList: ItemType_Record[]): void
  GetTypesCount(): number
  GetTypesItem(index: number): ItemType_Record
  TypesContains(item: ItemType_Record): Bool
}

declare interface AISquadItemCategoryPriorityFilter_Record extends AISquadItemPriorityFilter_Record {

  Categories(outList: ItemCategory_Record[]): void
  GetCategoriesCount(): number
  GetCategoriesItem(index: number): ItemCategory_Record
  CategoriesContains(item: ItemCategory_Record): Bool
}

declare interface AISquadORCondition_Record extends AITicketCheck_Record {

  OR(outList: AITicketCheck_Record[]): void
  GetORCount(): number
  GetORItem(index: number): AITicketCheck_Record
  ORContains(item: AITicketCheck_Record): Bool
}

declare interface AISquadANDCondition_Record extends AITicketCheck_Record {

  AND(outList: AITicketCheck_Record[]): void
  GetANDCount(): number
  GetANDItem(index: number): AITicketCheck_Record
  ANDContains(item: AITicketCheck_Record): Bool
}

declare interface AISquadMembersAmountCheck_Record extends AITicketCheck_Record {

  MaxAmount(): number
  MinAmount(): number
  CountSelf(): Bool
}

declare interface AISquadContainsSelfCheck_Record extends AITicketCheck_Record {

}

declare interface AIStatPoolCond_Record extends AIActionSubCondition_Record {

  Target(): AIActionTarget_Record
  StatPool(): StatPool_Record
  Percentage(): Vector2
  IsIncreasing(): number
}

declare interface AIAmmoCountCond_Record extends AIActionSubCondition_Record {

  WeaponSlot(): AttachmentSlot_Record
  Percentage(): Vector2
  Max(): number
  Min(): number
}

declare interface WeakspotComponent extends IComponent {

  GetWeakspots(outWeakspots: WeakspotObject[]): void
}

declare interface AIWeakSpotCond_Record extends AIActionSubCondition_Record {

  Weakspot(): Weakspot_Record
  IncludeDestroyed(): Bool
}

declare interface AIVehicleCond_Record extends AIActionSubCondition_Record {

  Vehicle(): AIActionTarget_Record
  HasTags(): CName[]
  GetHasTagsCount(): number
  GetHasTagsItem(index: number): CName
  HasTagsContains(item: CName): Bool
  FreeSlots(outList: VehicleSeat_Record[]): void
  GetFreeSlotsCount(): number
  GetFreeSlotsItem(index: number): VehicleSeat_Record
  FreeSlotsContains(item: VehicleSeat_Record): Bool
  ActivePassangers(): Vector2
  CurrentSpeed(): Vector2
  DriverCheck(): number
}

declare interface AITresspassingCond_Record extends AIActionSubCondition_Record {

  Target(): AIActionTarget_Record
}

declare interface AIRestrictedMovementAreaCond_Record extends AIActionSubCondition_Record {

  Target(): AIActionTarget_Record
}

declare interface RestrictMovementAreaManager extends IRestrictMovementAreaManager {

  HasAssignedRestrictMovementArea(npcEntityID: EntityID): Bool
  AssignRestrictMovementArea(npcEntityID: EntityID, restrictMovementArea: NodeRef): Bool
  IsPointInRestrictMovementArea(npcEntityID: EntityID, point: Vector4, onlyActualArea?: Bool): Bool
  IsPointInPursuitZone(npcEntityID: EntityID, point: Vector4): Bool
  FindPointInRestrictMovementArea(npcEntityID: EntityID, referencePoint: Vector4, restrictMovementAreaPoint: Vector4): Bool
  GetAllPuppetsInRestrictMovementArea(area: RestrictMovementArea): EntityID[]
}

declare interface AICalculatePathCond_Record extends AIActionSubCondition_Record {

  Target(): AIActionTarget_Record
  AllowedOffMeshTags(): CName[]
  GetAllowedOffMeshTagsCount(): number
  GetAllowedOffMeshTagsItem(index: number): CName
  AllowedOffMeshTagsContains(item: CName): Bool
  StartPositionOffset(): Vector3
  DirectionAngle(): number
  Distance(): number
  Tolerance(): number
  CheckStraightPath(): Bool
  CheckDynamicObstacle(): Bool
}

declare interface AIPositionSpec {

  /** @noSelf **/
  IsEmpty(position: AIPositionSpec): Bool
  /** @noSelf **/
  IsEntity(position: AIPositionSpec): Bool
  /** @noSelf **/
  IsWorldPosition(position: AIPositionSpec): Bool
  /** @noSelf **/
  GetEntity(position: AIPositionSpec): Entity
  /** @noSelf **/
  GetWorldPosition(position: AIPositionSpec): Vector4
  /** @noSelf **/
  SetEntity(aiPositionSpec: AIPositionSpec, entity: Entity): void
  /** @noSelf **/
  SetWorldPosition(aiPositionSpec: AIPositionSpec, position: WorldPosition): void
}

declare interface AINavigationSystemQuery {

}

declare interface AIINavigationSystem extends IGameSystem {

  StartPathfinding(query: AINavigationSystemQuery): number
  StopPathfinding(id: number): Bool
  GetResult(id: number, result: AINavigationSystemResult): Bool
}

declare interface AINavigationSystemResult {

}

declare interface NavigationFindWallResult extends IScriptable {

}

declare interface AICalculateLineOfSightVector_Record extends AIActionSubCondition_Record {

  StartPosition(): AIActionTarget_Record
  EndPosition(): AIActionTarget_Record
  StartPositionOffset(): Vector3
  EndPositionOffset(): Vector3
  IgnoreTransparentSurfaces(): Bool
}

declare interface SenseManager extends ISenseManager {

  IsPositionVisible(start: Vector4, end: Vector4): Bool
  IsObjectVisible(source: EntityID, target: EntityID): Bool
}

declare interface AIReactionCond_Record extends AIActionSubCondition_Record {

  Preset(): ReactionPreset_Record
  ThresholdValue(): StatPool_Record
  StimType(outList: StimType_Record[]): void
  GetStimTypeCount(): number
  GetStimTypeItem(index: number): StimType_Record
  StimTypeContains(item: StimType_Record): Bool
  ReactionBehaviorName(): CName
  ValidStimPosition(): Bool
  InvestigateController(): Bool
}

declare interface AIReactionData extends IScriptable {

}

declare interface StimType_Record extends TweakDBRecord {

  Comment(): string
  EnumName(): CName
  Type(): gamedataStimType
}

declare interface AILookAtCond_Record extends AIActionSubCondition_Record {

  Target(): AIActionTarget_Record
  RightArmLookAtActive(): number
}

declare interface AIStateCond_Record extends AIActionSubCondition_Record {

  Target(): AIActionTarget_Record
  InStates(): CName[]
  GetInStatesCount(): number
  GetInStatesItem(index: number): CName
  InStatesContains(item: CName): Bool
  CheckAllTypes(): Bool
}

declare interface AIActionChecks extends IScriptable {

  /** @noSelf **/
  CheckOwnerState(puppet: ScriptedPuppet, npcStates: AIActionNPCStates, checkAll: Bool): Bool
  /** @noSelf **/
  CheckTargetState(target: ScriptedPuppet, targetStates: AIActionTargetStates, checkAll: Bool): Bool
  /** @noSelf **/
  CheckAllNPCStateTypes(puppet: ScriptedPuppet, npcStates: AIActionNPCStates): Bool
  /** @noSelf **/
  CheckNPCState(puppet: ScriptedPuppet, npcStates: AIActionNPCStates): Bool
  /** @noSelf **/
  CheckAllPlayerStateTypes(playerPuppet: ScriptedPuppet, playerStates: AIActionPlayerStates): Bool
  /** @noSelf **/
  CheckPlayerState(playerPuppet: ScriptedPuppet, playerStates: AIActionPlayerStates): Bool
  /** @noSelf **/
  CheckHighLevelState(puppet: ScriptedPuppet, highLevelStates: gamedataNPCHighLevelState[]): Bool
  /** @noSelf **/
  CheckUpperBodyState(puppet: ScriptedPuppet, upperBodyStates: gamedataNPCUpperBodyState[]): Bool
  /** @noSelf **/
  CheckStanceState(puppet: ScriptedPuppet, stanceStates: gamedataNPCStanceState[]): Bool
  /** @noSelf **/
  CheckBehaviorState(puppet: ScriptedPuppet, behaviorStates: gamedataNPCBehaviorState[]): Bool
  /** @noSelf **/
  CheckDefenseMode(puppet: ScriptedPuppet, defenseMode: gamedataDefenseMode[]): Bool
  /** @noSelf **/
  CheckLocomotionMode(puppet: ScriptedPuppet, locomotionMode: gamedataLocomotionMode[]): Bool
  /** @noSelf **/
  GetPSMBlackbordInt(playerPuppet: ScriptedPuppet, id: BlackboardID_Int): number
  /** @noSelf **/
  CheckPSMLocomotionState(playerPuppet: ScriptedPuppet, locomotionStates: gamePSMLocomotionStates[]): Bool
  /** @noSelf **/
  CheckPSMUpperBodyState(playerPuppet: ScriptedPuppet, upperBodyStates: gamePSMUpperBodyStates[]): Bool
  /** @noSelf **/
  CheckPSMMeleeState(playerPuppet: ScriptedPuppet, meleeStates: gamePSMMelee[]): Bool
  /** @noSelf **/
  CheckPSMZoneState(playerPuppet: ScriptedPuppet, zoneStates: gamePSMZones[]): Bool
  /** @noSelf **/
  CheckPSMBodyCarryState(playerPuppet: ScriptedPuppet, bodyCarryStates: gamePSMBodyCarrying[]): Bool
  /** @noSelf **/
  CheckMountedVehicleDesiredTags(puppet: ScriptedPuppet, desiredTags: CName[]): Bool
}

declare interface AIActionNPCStates {

}

declare interface AIActionPlayerStates {

}

declare interface AIActionTargetStates {

}

declare interface AIActionParams extends IScriptable {

  /** @noSelf **/
  CreateActionID(context: ScriptExecutionContext, puppet: ScriptedPuppet, actionStringName: string, actionPackageType: AIactionParamsPackageTypes, actionName: CName): TweakDBID
  /** @noSelf **/
  TempGetIsValid(actionID: TweakDBID): Bool
  /** @noSelf **/
  GetOwnerStatesFromArray(ownerStates: CName[]): AIActionNPCStates
  /** @noSelf **/
  GetTargetStatesFromArray(targetStates: CName[]): AIActionTargetStates
  /** @noSelf **/
  GetTargetStatesFromArray(targetStates: CName[], target: GameObject): AIActionTargetStates
  /** @noSelf **/
  PushBackNPCState(npcStates: AIActionNPCStates, stateName: CName): void
  /** @noSelf **/
  PushBackPlayerState(playerStates: AIActionPlayerStates, stateName: CName): void
  /** @noSelf **/
  GetUpperBodyStateFromName(nameParam: CName): gamedataNPCUpperBodyState
  /** @noSelf **/
  GetBehaviorStateFromName(nameParam: CName): gamedataNPCBehaviorState
  /** @noSelf **/
  GetStanceStateFromName(nameParam: CName): gamedataNPCStanceState
  /** @noSelf **/
  GetHighLevelStateFromName(nameParam: CName): gamedataNPCHighLevelState
  /** @noSelf **/
  GetDefenseModeFromName(nameParam: CName): gamedataDefenseMode
  /** @noSelf **/
  GetLocomotionModeFromName(nameParam: CName): gamedataLocomotionMode
  /** @noSelf **/
  GetPSMLocomotionStateFromName(nameParam: CName, locomotionState: gamePSMLocomotionStates): Bool
  /** @noSelf **/
  GetPSMUpperBodyStateFromName(nameParam: CName, upperBodyState: gamePSMUpperBodyStates): Bool
  /** @noSelf **/
  GetPSMMeleeStateFromName(nameParam: CName, meleeState: gamePSMMelee): Bool
  /** @noSelf **/
  GetPSMZoneStateFromName(nameParam: CName, zoneState: gamePSMZones): Bool
  /** @noSelf **/
  GetPSMBodyCarryStateFromName(nameParam: CName, bodyCarryState: gamePSMBodyCarrying): Bool
}

declare interface AITweakParams extends IScriptable {

  /** @noSelf **/
  GetStringFromTweak(actionID: TweakDBID, paramName: string): string
  /** @noSelf **/
  GetStringArrayFromTweak(actionID: TweakDBID, paramName: string): string[]
  /** @noSelf **/
  GetCNameFromTweak(actionID: TweakDBID, paramName: string): CName
  /** @noSelf **/
  GetCNameArrayFromTweak(actionID: TweakDBID, paramName: string): CName[]
  /** @noSelf **/
  GetFloatFromTweak(actionID: TweakDBID, paramName: string): number
  /** @noSelf **/
  GetFloatArrayFromTweak(actionID: TweakDBID, paramName: string): number[]
  /** @noSelf **/
  GetIntFromTweak(actionID: TweakDBID, paramName: string): number
  /** @noSelf **/
  GetIntArrayFromTweak(actionID: TweakDBID, paramName: string): number[]
  /** @noSelf **/
  GetVectorFromTweak(actionID: TweakDBID, paramName: string): Vector3
  /** @noSelf **/
  GetBoolFromTweak(actionID: TweakDBID, paramName: string): Bool
}

declare interface AIIsOnNavmeshCond_Record extends AIActionSubCondition_Record {

  Target(): AIActionTarget_Record
  Radius(): number
}

declare interface AIExtendTargetCirclingCond_Record extends AIActionSubCondition_Record {

  Target(): AIActionTarget_Record
  DestinationTarget(): AIActionTarget_Record
  SpreadIncreaseAngle(): number
}

declare interface AIPreviousAttackCond_Record extends AIActionSubCondition_Record {

  PreviousAttackName(): CName[]
  GetPreviousAttackNameCount(): number
  GetPreviousAttackNameItem(index: number): CName
  PreviousAttackNameContains(item: CName): Bool
  TimeWindow(): number
}

declare interface AIBlockCountCond_Record extends AIActionSubCondition_Record {

  OwnerAttackParriedCount(): number
  MaxParryCount(): number
  MaxBlockCount(): number
  OwnerAttackBlockedCount(): number
  MinParryCount(): number
  MinBlockCount(): number
}

declare interface AIOptimalDistanceCond_Record extends AIActionSubCondition_Record {

  Source(): AIActionTarget_Record
  Target(): AIActionTarget_Record
  CheckRings(outList: AIRingType_Record[]): void
  GetCheckRingsCount(): number
  GetCheckRingsItem(index: number): AIRingType_Record
  CheckRingsContains(item: AIRingType_Record): Bool
  PredictionTime(): number
  DistanceMult(): number
  ToleranceOffset(): number
  DistanceOffset(): number
  ToleranceMult(): number
  FailWhenCloserThanCurrentRing(): Bool
  FailWhenFurtherThantCurrentRing(): Bool
}

declare interface AIRingType_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Distance(): number
  Tolerance(): number
  Type(): gamedataAIRingType
}

declare interface AIDodgeCountCond_Record extends AIActionSubCondition_Record {

  MinDodgeCount(): number
  MaxDodgeCount(): number
  OwnerAttackDodgedCount(): number
}

declare interface AIIsInActiveCameraCond_Record extends AIActionSubCondition_Record {

  Target(): AIActionTarget_Record
  Height(): number
  Radius(): number
}

declare interface CameraSystemHelper extends IScriptable {

  /** @noSelf **/
  IsInCameraFrustum(obj: GameObject, objHeight: number, objRadius: number): Bool
  /** @noSelf **/
  HandlePairOfCorners(cameraSys: CameraSystem, center: Vector4, offset: Vector4, projectedMin: Vector4, projectedMax: Vector4, bestProjected: Vector4): void
  /** @noSelf **/
  MinVector2D(a: Vector4, b: Vector4): Vector4
  /** @noSelf **/
  MaxVector2D(a: Vector4, b: Vector4): Vector4
  /** @noSelf **/
  MinAbsVector2D(a: Vector4, b: Vector4): Vector4
}

declare interface AIThrowCond_Record extends AIActionSubCondition_Record {

  Target(): AIActionTarget_Record
  WeaponSlot(): AttachmentSlot_Record
  PredictionTime(): number
  ThrowAngle(): number
  ClearLOSDistanceTolerance(): number
}

declare interface ThrowableWeaponObject extends WeaponObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnInitialize(eventData: gameprojectileSetUpEvent): Bool
  OnShoot(eventData: gameprojectileShootEvent): Bool
  OnShootTarget(eventData: gameprojectileShootTargetEvent): Bool
  OnThrow(eventData: gameprojectileShootEvent): void
  OnCollision(eventData: gameprojectileHitEvent): Bool
  OnTick(eventData: gameprojectileTickEvent): Bool
}

declare interface gameprojectileScriptCollisionEvaluator extends gameprojectileCollisionEvaluator {

  EvaluateCollision(defaultOnCollisionAction: gameprojectileOnCollisionAction, params: CollisionEvaluatorParams): gameprojectileOnCollisionAction
}

declare interface WeaponCollisionEvaluator extends gameprojectileScriptCollisionEvaluator {

  EvaluateCollision(defaultOnCollisionAction: gameprojectileOnCollisionAction, params: CollisionEvaluatorParams): gameprojectileOnCollisionAction
}

declare interface CollisionEvaluatorParams extends IScriptable {

}

declare interface FxPackage extends IFxPackage {

  GetVfxGroundThrow(): FxResource
}

declare interface gameprojectileShootEvent extends gameprojectileSetUpEvent {

}

declare interface gameprojectileHitInstance {

}

declare interface gameprojectileHitEvent extends Event {

}

declare interface ProjectileGameEffectHelper extends IScriptable {

  /** @noSelf **/
  FillProjectileHitAoEData(source: GameObject, instigator: GameObject, position: Vector4, radius: number, attackRecord?: Attack_Record, weapon?: WeaponObject): Bool
  /** @noSelf **/
  FillProjectileHitData(source: GameObject, user: GameObject, projectileComponent: ProjectileComponent, eventData: gameprojectileHitEvent): Bool
  /** @noSelf **/
  RunEffectFromAttack(instigator: GameObject, source: GameObject, weapon: WeaponObject, attackRecord: Attack_Record, eventData: gameprojectileHitEvent): Bool
}

declare interface StartGrenadeThrowQueryEvent extends Event {

}

declare interface gameGrenadeThrowQueryParams {

}

declare interface gameICombatQueriesSystem extends IGameSystem {

  StartGrenadeThrowQuery(queryParams: gameGrenadeThrowQueryParams): number
  StopGrenadeThrowQuery(requester: GameObject, queryId: number): void
  StopGrenadeThrowQueries(requester: GameObject): void
  StopAllGrenadeThrowQueries(): void
  CheckGrenadeThrowQuery(requester: GameObject, refQueryId: number, outTargetPosition: Vector4, outThrowAngleDegrees: number, outStartPos: gameGrenadeThrowStartType): Bool
}

declare interface IFriendlyFireSystem extends IGameSystem {

  StartChecking(params: FriendlyFireParams): number
  StopChecking(id: number): Bool
  Check(id: number): Bool
  UpdateCurrentTargetComponent(id: number, currentTarget: TargetingComponent): void
  UpdateCurrentTargetObject(id: number, currentTarget: GameObject): void
  SetFFApplyAttitude(id: number, FFApplyAttitude: number): void
}

declare interface AIWeaponLockedOnTargetCond_Record extends AIActionSubCondition_Record {

  WeaponSlot(): AttachmentSlot_Record
}

declare interface AICoverCond_Record extends AIActionSubCondition_Record {

  Cover(): AIActionTarget_Record
  Target(): AIActionTarget_Record
  DesiredCover(): AIActionTarget_Record
  Owner(): AIActionTarget_Record
  CheckChosenExposureMethod(): CName[]
  GetCheckChosenExposureMethodCount(): number
  GetCheckChosenExposureMethodItem(index: number): CName
  CheckChosenExposureMethodContains(item: CName): Bool
  CoverExposureMethods(): CName[]
  GetCoverExposureMethodsCount(): number
  GetCoverExposureMethodsItem(index: number): CName
  CoverExposureMethodsContains(item: CName): Bool
  MaxCoverToTargetAngle(): number
  MinCoverHealth(): number
  IsOwnerCrouching(): number
  IsProtectingHorizontallyAgainstTarget(): number
  DesiredCoverChanged(): number
  PredictionTime(): number
  IsOwnerExposed(): number
  CoverType(): number
  CheckIfCoverTransitionRequired(): Bool
}

declare interface AIGoToCoverCond_Record extends AIActionSubCondition_Record {

  Cover(): AIActionTarget_Record
  Target(): AIActionTarget_Record
  DesiredCover(): AIActionTarget_Record
  IsCoverSelected(): number
  DesiredCoverChanged(): number
  IsEnteringOrLeavingCover(): number
}

declare interface AIValidCoversCond_Record extends AIActionSubCondition_Record {

  Target(): AIActionTarget_Record
  LimitToRings(outList: AIRingType_Record[]): void
  GetLimitToRingsCount(): number
  GetLimitToRingsItem(index: number): AIRingType_Record
  LimitToRingsContains(item: AIRingType_Record): Bool
  CoversWithLOS(): number
  CheckCurrentlyActiveRing(): Bool
}

declare interface MultiSelectCovers extends IScriptable {

}

declare interface AIHitCond_Record extends AIActionSubCondition_Record {

  Target(): AIActionTarget_Record
  AttackTag(): CName
  MinHitSeverity(): number
  MaxHitSeverity(): number
  TargetHitCount(): number
  HitTimeout(): number
  CumulatedDamageThreshold(): number
}

declare interface AITargetCond_Record extends AIActionSubCondition_Record {

  IsCombatTargetVisibleFrom(): AIAdditionalTraceType_Record
  Target(): AIActionTarget_Record
  MinAccuracyValue(): number
  MinDetectionValue(): number
  IsVisible(): number
  InvalidExpectation(): number
  MinAccuracySharedValue(): number
  IsAlive(): number
  MaxVisibilityToTargetDistance(): number
  IsActive(): number
  IsMoving(): number
  Attitude(): number
}

declare interface AIAdditionalTraceType_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataAIAdditionalTraceType
}

declare interface AVObject extends VehicleObject {

}

declare interface AIWorkspotCond_Record extends AIActionSubCondition_Record {

  WorkspotObj(): AIActionTarget_Record
  IsInWorkspot(): number
}

declare interface WorkspotEntryData extends IScriptable {

}

declare interface AISecurityCond_Record extends AIActionSubCondition_Record {

  AreaType(): AIActionSecurityAreaType_Record
  IsConnected(): number
}

declare interface AIActionSecurityAreaType_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataAIActionSecurityAreaType
}

declare interface PuppetDeviceLinkPS extends DeviceLinkComponentPS {

  /** @noSelf **/
  CreateAndAcquirePuppetDeviceLinkPS(game: GameInstance, id: EntityID): PuppetDeviceLinkPS
  /** @noSelf **/
  AcquirePuppetDeviceLink(game: GameInstance, entityID: EntityID): PuppetDeviceLinkPS
  OnDeviceLinkRequest(evt: DeviceLinkRequest): EntityNotificationType
  AreIncomingEventsSuppressed(): Bool
  AreOutgoingEventsSuppressed(): Bool
  TriggerSecuritySystemNotification(lastKnownPosition: Vector4, whoBreached: GameObject, type: ESecurityNotificationType, stimType?: gamedataStimType): void
  OnSecuritySystemOutput(evt: SecuritySystemOutput): EntityNotificationType
  OnSuppressNPCInSecuritySystem(evt: SuppressNPCInSecuritySystem): EntityNotificationType
  OnSecuritySystemSupport(evt: SecuritySystemSupport): EntityNotificationType
  PerformNPCBreach(state: HackingMinigameState): void
  NotifyAboutSpottingPlayer(doSee: Bool): void
  PingSquadNetwork(): void
  ActionPingSquad(): PingSquad
  IsPuppet(): Bool
}

declare interface SecuritySystemData {

  /** @noSelf **/
  AreIncomingEventsSuppressed(self: SecuritySystemData): Bool
  /** @noSelf **/
  AreOutgoingEventsSuppressed(self: SecuritySystemData): Bool
}

declare interface SuppressNPCInSecuritySystem extends Event {

  GetFriendlyDescription(): string
}

declare interface NPCBreachEvent extends Event {

}

declare interface ExecutePuppetActionEvent extends Event {

}

declare interface PuppetAction extends ScriptableDeviceAction {

  GetTweakDBChoiceRecord(): string
  GetTweakDBChoiceID(): TweakDBID
  GetObjectActionRecord(): ObjectAction_Record
}

declare interface PingSquad extends PuppetAction {

  ShouldForward(): Bool
  SetShouldForward(shouldForward: Bool): void
}

declare interface AcquireDeviceLink extends Event {

}

declare interface AIHasWeapon_Record extends AIActionSubCondition_Record {

  ItemType(outList: ItemType_Record[]): void
  GetItemTypeCount(): number
  GetItemTypeItem(index: number): ItemType_Record
  ItemTypeContains(item: ItemType_Record): Bool
  ItemCategory(outList: ItemCategory_Record[]): void
  GetItemCategoryCount(): number
  GetItemCategoryItem(index: number): ItemCategory_Record
  ItemCategoryContains(item: ItemCategory_Record): Bool
  ItemTag(): CName
}

declare interface AINPCTypeCond_Record extends AIActionSubCondition_Record {

  Target(): AIActionTarget_Record
  AllowedNPCTypes(outList: NPCType_Record[]): void
  GetAllowedNPCTypesCount(): number
  GetAllowedNPCTypesItem(index: number): NPCType_Record
  AllowedNPCTypesContains(item: NPCType_Record): Bool
  IsFollower(): number
}

declare interface TransformHistoryComponent extends IComponent {

  GetInterpolatedPositionFromHistory(delay: number): Vector4
  GetVelocity(period: number): Vector4
}

declare interface AIVelocityCond_Record extends AIActionSubCondition_Record {

  Target(): AIActionTarget_Record
  Range(): Vector2
  TimePeriod(): number
}

declare interface AIVelocityDotCond_Record extends AIActionSubCondition_Record {

  VelocityTarget(): AIActionTarget_Record
  PositionTarget(): AIActionTarget_Record
  DotRange(): Vector2
  TimePeriod(): number
}

declare interface AIVelocitiesDotCond_Record extends AIActionSubCondition_Record {

  FirstTarget(): AIActionTarget_Record
  SecondTarget(): AIActionTarget_Record
  DotRange(): Vector2
  FirstTimePeriod(): number
  SecondTimePeriod(): number
}

declare interface TurretShootingIntervalEvent extends Event {

}

declare interface TankObject extends VehicleObject {

}

declare interface TurretBurstShootingDelayEvent extends Event {

}

declare interface AutoKillDelayEvent extends Event {

}

declare interface ManagePersonalLinkChangeEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface gameTargetHitEvent extends gameHitEvent {

}

declare interface gameTargetDamageEvent extends gameTargetHitEvent {

}

declare interface SHitStatusEffect {

}

declare interface StatusEffectAttackData_Record extends TweakDBRecord {

  StatusEffect(): StatusEffect_Record
  ResistPool(): StatPool_Record
  StacksToApply(): number
  ApplyImmediately(): Bool
}

declare interface previewTargetStruct {

}

declare interface HitDebugData extends IScriptable {

}

declare interface DamageDebugData extends IScriptable {

}

declare interface ServerHitData extends IScriptable {

}

declare interface DamageInfo {

}

declare interface DamageInfoUserData extends IScriptable {

}

declare interface HitShapeResult {

}

declare interface KillInfo {

}

declare interface ServerKillData extends IScriptable {

}

declare interface IDamageSystemListener extends IScriptable {

}

declare interface ResetFrameDamage extends Event {

}

declare interface WoundedInstigated extends Event {

}

declare interface DismembermentInstigated extends Event {

}

declare interface ActionHitReactionScriptProxy extends CActionScriptProxy {

  Setup(hitReactionsData: AnimFeature_HitReactionsData, fastForward?: Bool): Bool
}

declare interface UI_DamageInfoDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface HitReactionCumulativeDamageUpdate extends Event {

}

declare interface HitReactionRequest extends Event {

}

declare interface ForcedHitReactionEvent extends Event {

}

declare interface PuppetListener extends IScriptable {

  RegisterOwner(owner: PrereqState): Bool
  ModifyOwner(owner: PrereqState): void
  OnRevealedStateChanged(isRevealed: Bool): void
  OnHitReactionTypeChanged(hitType: number): void
  OnHitReactionSourceChanged(hitSource: number): void
  OnIsTrackingPlayerChanged(isTrackingPlayer: Bool): void
}

declare interface NPCRevealedPrereqState extends PrereqState {

}

declare interface NPCHitReactionTypePrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
  EvaluateCondition(hitType: number): Bool
}

declare interface NPCHitReactionTypePrereqState extends PrereqState {

}

declare interface AddOrRemoveListenerEvent extends Event {

}

declare interface NPCHitSourcePrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
  EvaluateCondition(hitSource: number): Bool
}

declare interface NPCHitSourcePrereqState extends PrereqState {

}

declare interface NPCTrackingPlayerPrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
  EvaluateCondition(isTrackingPlayer: Bool): Bool
}

declare interface NPCTrackingPlayerPrereqState extends PrereqState {

}

declare interface ForcedDeathEvent extends Event {

}

declare interface LastHitDataEvent extends Event {

}

declare interface NewHitDataEvent extends Event {

}

declare interface ScriptHitData {

}

declare interface AttackDirection_Record extends TweakDBRecord {

  Direction(): MeleeAttackDirection_Record
  StartPosition(): Vector3
  EndPosition(): Vector3
}

declare interface MeleeAttackDirection_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataMeleeAttackDirection
}

declare interface DismembermentComponent extends IComponent {

  ReportExplosion(hitPosition: Vector4, strength: number): void
  DoDismemberment(bodyPart: gameDismBodyPart, woundType: gameDismWoundType, strength?: number, isCritical?: Bool, debrisPath?: string, debrisStrength?: number): void
  SpawnGutsFromLastHit(resourcePath: string, strength: number): void
  GetDismemberedLimbCount(): DismemberedLimbCount
  /** @noSelf **/
  RequestGutsFromLastHit(obj: GameObject, resourcePath: string, strength: number): void
  /** @noSelf **/
  RequestDismemberment(obj: GameObject, bodyPart: gameDismBodyPart, woundType: gameDismWoundType, hitPosition?: Vector4, isCritical?: Bool, debrisPath?: string, debrisStrength?: number): void
  OnDismemberment(evt: DismembermentEvent): Bool
  OnDismembermentExplosion(evt: DismembermentExplosionEvent): Bool
  OnDismembermentDebris(evt: DismembermentDebrisEvent): Bool
}

declare interface DismembermentDebrisEvent extends Event {

}

declare interface DismembermentEvent extends Event {

}

declare interface DismembermentAudioEvent extends Event {

}

declare interface DismembermentExplosionEvent extends Event {

}

declare interface RagdollActivationRequestEvent extends Event {

  DebugSetSourceName(debugSourceName: CName): void
}

declare interface RagdollActivationRequestData {

}

declare interface RagdollApplyImpulseEvent extends Event {

}

declare interface RequestDismembermentEvent extends AIEvent {

}

declare interface ClearHitStimEvent extends Event {

}

declare interface AIExposureMethodType_Record extends TweakDBRecord {

  EnumComment(): string
  Priority(): number[]
  GetPriorityCount(): number
  GetPriorityItem(index: number): number
  PriorityContains(item: number): Bool
  EnumName(): CName
  Type(): gamedataAIExposureMethodType
}

declare interface PlayerSquadInterface extends PuppetSquadInterface {

  BroadcastCommand(command: AICommand): void
  GiveCommandToSquadMember(member: Entity, command: AICommand): void
}

declare interface TurnOnVisibilitySenseComponent extends Event {

}

declare interface SetThreatsPersistenceRequest extends AIEvent {

}

declare interface ThreatPersistanceMemory {

}

declare interface HostLeftSquad extends AIEvent {

}

declare interface OnSquadmateDied extends Event {

}

declare interface ThreatRemoved extends AIEvent {

}

declare interface BossHealthBarGameController extends inkHUDGameController {

  OnInitialize(): Bool
  UpdateHealthValue(newValue: number): void
  OnBossCombatNotifier(evt: BossCombatNotifier): Bool
  OnThreatDefeated(evt: ThreatDefeated): Bool
  OnThreatUnconscious(evt: ThreatUnconscious): Bool
  OnThreatKilled(evt: ThreatDeath): Bool
  OnThreatRemoved(evt: ThreatRemoved): Bool
  OnThreatInvalid(evt: ThreatInvalid): Bool
  OnAnimationEnd(e: inkAnimProxy): Bool
  OnDamageDealt(evt: gameTargetDamageEvent): Bool
  AddBoss(boss: NPCPuppet, priorityTarget?: Bool): void
  RemoveBoss(boss: NPCPuppet): void
  ReevaluateBossArray(): void
  ShowBossHealthBar(puppet: NPCPuppet): void
  HideBossHealthBar(): void
  RegisterToNewBoss(boss: NPCPuppet): void
  UnregisterPreviousBoss(): void
  /** @noSelf **/
  ReevaluateBossHealthBar(puppet: NPCPuppet, target: GameObject, combatEnded?: Bool): void
  /** @noSelf **/
  ReevaluateBossHealthBar(puppet: NPCPuppet, targetTracker: TargetTrackingExtension, combatEnded?: Bool): void
}

declare interface ProgressBarSimpleWidgetLogicController extends inkLogicController {

  OnInitialize(): Bool
  SetDefaultValues(): void
  SetProgress(newValue: number, silent: Bool): Bool
  GetFullSize(): Vector2
}

declare interface inkCompoundWidget extends inkWidget {

  GetNumChildren(): number
  AddChild(widgetTypeName: CName): inkWidget
  AddChildWidget(widget: inkWidget): void
  GetWidgetByPath(path: inkWidgetPath): inkWidget
  GetWidgetByIndex(index: number): inkWidget
  GetWidget(path: inkWidgetPath): inkWidget
  GetWidget(index: number): inkWidget
  GetWidgetByPathName(widgetNamePath: CName): inkWidget
  GetWidget(path: CName): inkWidget
  RemoveChild(childWidget: inkWidget): void
  RemoveChildByIndex(index: number): void
  RemoveChildByName(widgetName: CName): void
  RemoveAllChildren(): void
  ReorderChild(childWidget: inkWidget, newIndex: number): void
  GetChildOrder(): inkEChildOrder
  SetChildOrder(newOrder: inkEChildOrder): void
  GetChildMargin(): inkMargin
  SetChildMargin(newMargin: inkMargin): void
  GetChildPosition(widget: inkWidget): Vector2
  GetChildSize(widget: inkWidget): Vector2
}

declare interface inkAnimSize extends inkAnimInterpolator {

  GetStartSize(): Vector2
  GetEndSize(): Vector2
  SetStartSize(startSize: Vector2): void
  SetEndSize(endSize: Vector2): void
}

declare interface NameplateBarLogicController extends ProgressBarSimpleWidgetLogicController {

  SetNameplateBarProgress(newValue: number, silent: Bool): void
  SetDamagePreview(damage: number, offset: number): void
}

declare interface DamagePreviewController extends inkLogicController {

  OnInitialize(): Bool
  SetPreview(damageScale: number, positionOffset: number): void
  OnAnimationEnd(e: inkAnimProxy): Bool
}

declare interface BossHealthStatListener extends ScriptStatPoolsListener {

  BindHealthbar(bar: BossHealthBarGameController): void
  OnStatPoolValueChanged(oldValue: number, newValue: number, percToPoints: number): void
}

declare interface inkTextRef extends inkLeafRef {

  /** @noSelf **/
  GetText(self: inkTextRef): string
  /** @noSelf **/
  SetText(self: inkTextRef, displayText: string, textParams?: inkTextParams): void
  /** @noSelf **/
  SetTextDirect(self: inkTextRef, displayText: string): void
  /** @noSelf **/
  SetLocalizedText(self: inkTextRef, locKey: CName, textParams?: inkTextParams): void
  /** @noSelf **/
  SetLocalizedTextString(self: inkTextRef, locKey: string, textParams?: inkTextParams): void
  /** @noSelf **/
  SetLocalizedTextScript(self: inkTextRef, locKey: string, textParams?: inkTextParams): void
  /** @noSelf **/
  SetLocalizedTextScript(self: inkTextRef, locKey: CName, textParams?: inkTextParams): void
  /** @noSelf **/
  GetTextParameters(self: inkTextRef): inkTextParams
  /** @noSelf **/
  SetTextParameters(self: inkTextRef, textParams: inkTextParams): void
  /** @noSelf **/
  GetLocalizationKey(self: inkTextRef): CName
  /** @noSelf **/
  SetLocalizationKey(self: inkTextRef, displayText: CName): void
  /** @noSelf **/
  SetLocalizationKeyString(self: inkTextRef, displayText: string): void
  /** @noSelf **/
  UpdateLanguageResources(self: inkTextRef, applyFontModifiers?: Bool): void
  /** @noSelf **/
  SetTextFromParts(self: inkTextRef, textpart1: string, textpart2?: string, textpart3?: string): void
  /** @noSelf **/
  GetVerticalAlignment(self: inkTextRef): textVerticalAlignment
  /** @noSelf **/
  SetVerticalAlignment(self: inkTextRef, verticalAlignment: textVerticalAlignment): void
  /** @noSelf **/
  GetVerticalAlignmentEnumValue(self: inkTextRef, nameValue: CName): textVerticalAlignment
  /** @noSelf **/
  GetHorizontalAlignment(self: inkTextRef): textHorizontalAlignment
  /** @noSelf **/
  SetHorizontalAlignment(self: inkTextRef, horizontalAlignment: textHorizontalAlignment): void
  /** @noSelf **/
  GetHorizontalAlignmentEnumValue(self: inkTextRef, nameValue: CName): textHorizontalAlignment
  /** @noSelf **/
  SetFontFamily(self: inkTextRef, fontFamilyPath: string, fontStyle?: CName): void
  /** @noSelf **/
  GetFontStyle(self: inkTextRef): CName
  /** @noSelf **/
  SetFontStyle(self: inkTextRef, fontStyle: CName): void
  /** @noSelf **/
  GetFontSize(self: inkTextRef): number
  /** @noSelf **/
  SetFontSize(self: inkTextRef, textSize: number): void
  /** @noSelf **/
  GetLetterCase(self: inkTextRef): textLetterCase
  /** @noSelf **/
  SetLetterCase(self: inkTextRef, letterCase: textLetterCase): void
  /** @noSelf **/
  EnableAutoScroll(self: inkTextRef, enableState: Bool): void
  /** @noSelf **/
  SetDateTimeByTimestamp(self: inkTextRef, timestamp: number): void
  /** @noSelf **/
  GetScrollTextSpeed(self: inkTextRef): number
  /** @noSelf **/
  SetScrollTextSpeed(self: inkTextRef, scrollTextSpeed: number): void
}

declare interface BossCombatNotifier extends Event {

}

declare interface ThreatDefeated extends AIEvent {

}

declare interface ThreatUnconscious extends AIEvent {

}

declare interface ThreatDeath extends AIEvent {

}

declare interface ThreatInvalid extends AIEvent {

}

declare interface HostileThreatDetected extends AIEvent {

}

declare interface PlayerHostileThreatDetected extends HostileThreatDetected {

}

declare interface NewThreat extends AIEvent {

}

declare interface EnemyThreatDetected extends AIEvent {

}

declare interface Rule_Record extends TweakDBRecord {

  Stimulus(): StimType_Record
  Output(): Output_Record
  WorkspotOutput(): CName
  Cooldown(): number
}

declare interface ReactionOutput {

}

declare interface Output_Record extends TweakDBRecord {

  OutputName(): string
  Priority(): number
  AIPriority(): number
  Type(): gamedataOutput
}

declare interface DetectionRiseEvent extends SenseVisibilityEvent {

}

declare interface OnBeingNoticed extends Event {

}

declare interface ForceReactivateHighlightsEvent extends Event {

}

declare interface NetworkLinkQuickhackEvent extends Event {

}

declare interface TargetAssessmentRequest extends ScriptableDeviceAction {

}

declare interface SenseEnabledEvent extends Event {

}

declare interface ReevaluateDetectionOverwriteEvent extends Event {

}

declare interface AttitudeChangedEvent extends Event {

}

declare interface SuspiciousObjectEvent extends Event {

}

declare interface StatusEffectEvent extends Event {

}

declare interface HACK_UseSensePresetEvent extends Event {

}

declare interface FriendlyTargetWeaponChangeCallback extends AttachmentSlotsScriptCallback {

  OnItemEquipped(slotID: TweakDBID, itemID: ItemID): void
}

declare interface OwnerWeaponChangeCallback extends AttachmentSlotsScriptCallback {

  OnItemEquipped(slotID: TweakDBID, itemID: ItemID): void
}

declare interface AIAssignRoleCommand extends AICommand {

}

declare interface NPCRoleChangeEvent extends Event {

}

declare interface AutocraftActivateRequest extends ScriptableSystemRequest {

}

declare interface UI_CompanionDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface AddSubCharacterRequest extends ScriptableSystemRequest {

}

declare interface RemoveSubCharacterRequest extends ScriptableSystemRequest {

}

declare interface SubCharEquipRequest extends EquipRequest {

}

declare interface UnequipRequest extends PlayerScriptableSystemRequest {

}

declare interface SubCharUnequipRequest extends UnequipRequest {

}

declare interface SpawnUniqueSubCharacterRequest extends ScriptableSystemRequest {

}

declare interface SpawnUniquePursuitSubCharacterRequest extends ScriptableSystemRequest {

}

declare interface DespawnUniqueSubCharacterRequest extends ScriptableSystemRequest {

}

declare interface SmartDespawnRequest extends Event {

}

declare interface CancelSmartDespawnRequest extends Event {

}

declare interface SetQuickHackableMask extends Event {

}

declare interface ReevaluatePresetEvent extends Event {

}

declare interface Inventory extends GameComponent {

  IsAccessible(): Bool
  ReinitializeStatsOnAllItems(): Bool
  IsChoiceAvailable(itemActionRecord: ItemAction_Record, requester: GameObject, ownerEntID: EntityID, itemID: ItemID): gameinteractionsELootChoiceType
  OnLootAllEvent(evt: OnLootAllEvent): Bool
  OnInteractionUsed(evt: InteractionChoiceEvent): Bool
}

declare interface InteractionEvent extends Event {

  IsInputLayerEvent(): Bool
}

declare interface LootChoiceActionWrapper {

  /** @noSelf **/
  IsValid(wrapper: LootChoiceActionWrapper): Bool
  /** @noSelf **/
  IsIllegal(wrapper: LootChoiceActionWrapper): Bool
  /** @noSelf **/
  IsHandledByCode(wrapper: LootChoiceActionWrapper): Bool
  /** @noSelf **/
  Unwrap(choiceEvent: InteractionChoiceEvent): LootChoiceActionWrapper
}

declare interface AnimFeature_ProceduralLean extends AnimFeature {

}

declare interface gameCurveStatModifierData extends gameStatModifierData {

}

declare interface MarketSystemRequest extends ScriptableSystemRequest {

}

declare interface AttachVendorRequest extends MarketSystemRequest {

}

declare interface NPCDeathListener extends ScriptStatPoolsListener {

  OnStatPoolAdded(): Bool
  OnStatPoolCustomLimitReached(value: number): Bool
  OnStatPoolMinValueReached(value: number): Bool
  SendPotentialDeathEvent(): void
}

declare interface gamePotentialDeathEvent extends Event {

}

declare interface EvaluateLootQualityEvent extends Event {

}

declare interface PreloadAnimationsEvent extends Event {

}

declare interface NPCGodModeListener extends ScriptStatsListener {

  OnGodModeChanged(ownerID: EntityID, newType: gameGodModeType): void
}

declare interface Bounty {

}

declare interface SetBountyObjectEvent extends Event {

}

declare interface BountyManager extends IScriptable {

  /** @noSelf **/
  GenerateBounty(target: NPCPuppet): Bounty
  /** @noSelf **/
  SetBountyFromID(bountyID: TweakDBID, target: NPCPuppet): Bounty
  /** @noSelf **/
  CompleteBounty(target: NPCPuppet): void
}

declare interface BountyDrawTable_Record extends TweakDBRecord {

  BountyChoices(outList: Bounty_Record[]): void
  GetBountyChoicesCount(): number
  GetBountyChoicesItem(index: number): Bounty_Record
  BountyChoicesContains(item: Bounty_Record): Bool
}

declare interface Bounty_Record extends TweakDBRecord {

  BountySetter(): Affiliation_Record
  Reward(): RewardBase_Record
  Transgressions(outList: Transgression_Record[]): void
  GetTransgressionsCount(): number
  GetTransgressionsItem(index: number): Transgression_Record
  TransgressionsContains(item: Transgression_Record): Bool
  DrawWeight(): number
  WantedStars(): number
}

declare interface RewardBase_Record extends TweakDBRecord {

  Name(): string
  Recipes(outList: Item_Record[]): void
  GetRecipesCount(): number
  GetRecipesItem(index: number): Item_Record
  RecipesContains(item: Item_Record): Bool
  StatModifiers(outList: StatModifier_Record[]): void
  GetStatModifiersCount(): number
  GetStatModifiersItem(index: number): StatModifier_Record
  StatModifiersContains(item: StatModifier_Record): Bool
  CurrencyPackage(outList: CurrencyReward_Record[]): void
  GetCurrencyPackageCount(): number
  GetCurrencyPackageItem(index: number): CurrencyReward_Record
  CurrencyPackageContains(item: CurrencyReward_Record): Bool
  Experience(outList: XPPoints_Record[]): void
  GetExperienceCount(): number
  GetExperienceItem(index: number): XPPoints_Record
  ExperienceContains(item: XPPoints_Record): Bool
  Items(outList: InventoryItem_Record[]): void
  GetItemsCount(): number
  GetItemsItem(index: number): InventoryItem_Record
  ItemsContains(item: InventoryItem_Record): Bool
  Achievement(outList: Achievement_Record[]): void
  GetAchievementCount(): number
  GetAchievementItem(index: number): Achievement_Record
  AchievementContains(item: Achievement_Record): Bool
  PhotoModeItem(outList: PhotoModeItem_Record[]): void
  GetPhotoModeItemCount(): number
  GetPhotoModeItemItem(index: number): PhotoModeItem_Record
  PhotoModeItemContains(item: PhotoModeItem_Record): Bool
}

declare interface XPPoints_Record extends TweakDBRecord {

  Type(): Proficiency_Record
  QuantityModifiers(outList: StatModifier_Record[]): void
  GetQuantityModifiersCount(): number
  GetQuantityModifiersItem(index: number): StatModifier_Record
  QuantityModifiersContains(item: StatModifier_Record): Bool
}

declare interface CurrencyReward_Record extends TweakDBRecord {

  Currency(): Item_Record
  QuantityModifiers(outList: StatModifier_Record[]): void
  GetQuantityModifiersCount(): number
  GetQuantityModifiersItem(index: number): StatModifier_Record
  QuantityModifiersContains(item: StatModifier_Record): Bool
}

declare interface Transgression_Record extends TweakDBRecord {

  LocalizedDescription(): string
  DrawWeight(): number
  Severity(): number
}

declare interface ExperiencePointsEvent extends Event {

}

declare interface BountyCompletionEvent extends Event {

}

declare interface SetBountyEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface PlayerDetectionChangedEvent extends Event {

}

declare interface gameEntityStubComponentPS extends GameComponentPS {

  GetSpawnerID(): EntityID
  GetOwnerCommunityEntryName(): CName
  /** @noSelf **/
  GetPSComponentName(): CName
}

declare interface NPCstubData {

}

declare interface ItemAddedToSlot extends Event {

  GetSlotID(): TweakDBID
  GetPrevItemID(): ItemID
  GetItemID(): ItemID
}

declare interface CacheItemEquippedToHandsEvent extends Event {

}

declare interface AnimFeature_EquipUnequipItem extends AnimFeature {

}

declare interface GrenadeAnimFeatureChangeEvent extends Event {

}

declare interface DEBUG_VisualizerComponent extends ScriptableComponent {

  VisualizePuppets(pups: ScriptedPuppet[], infDuration: Bool, duration: number): void
  VisualizePuppetInternal(index: number): void
  ClearPuppetVisualization(): void
  ClearPuppet(index: number): void
  GetNextOffset(): Vector4
  VisualizeDisplayName(scale: number): void
  VisualizeImmortality(scale: number): void
  VisualizeAttitude(scale: number): void
  ShowText(offset: Vector4, str: string, color: Color, scale: number): void
  OnGameAttach(): void
  OnUpdate(dt: number): void
  ToggleShowWeaponsStreaming(): void
  ShowEquipStartText(puppet: gamePuppet, slotID: TweakDBID, itemID: ItemID): void
  ShowEquipEndText(puppet: gamePuppet, slotID: TweakDBID, itemID: ItemID): void
}

declare interface DEBUG_VisualRecord {

}

declare interface ItemRemovedFromSlot extends Event {

  GetSlotID(): TweakDBID
  GetItemID(): ItemID
}

declare interface OnBeingTarget extends Event {

}

declare interface ForcedRagdollDeathSignal extends TaggedSignalUserData {

}

declare interface ApplyStatusEffectEvent extends StatusEffectEvent {

}

declare interface DefeatedEvent extends Event {

}

declare interface CachedBoolValue {

  /** @noSelf **/
  SetDirty(cachedValue: CachedBoolValue): void
  /** @noSelf **/
  GetIfNotDirty(cachedValue: CachedBoolValue, value: Bool): Bool
  /** @noSelf **/
  Set(cachedValue: CachedBoolValue, value: Bool): void
}

declare interface AndroidTurnOff extends Event {

}

declare interface AndroidTurnOn extends Event {

}

declare interface NameplateVisibleEvent extends Event {

}

declare interface AIGateSignal {

  /** @noSelf **/
  IsEmpty(self: AIGateSignal): Bool
  /** @noSelf **/
  GetTagCount(self: AIGateSignal): number
  /** @noSelf **/
  GetTag(self: AIGateSignal, index: number): CName
  /** @noSelf **/
  HasTag(self: AIGateSignal, tag: CName): Bool
  /** @noSelf **/
  AddTag(self: AIGateSignal, tag: CName): void
  /** @noSelf **/
  HasAllTagsOf(self: AIGateSignal, other: AIGateSignal): Bool
  /** @noSelf **/
  HasFlag(self: AIGateSignal, flag: AISignalFlags): Bool
  /** @noSelf **/
  AddFlag(self: AIGateSignal, flag: AISignalFlags): void
}

declare interface AISignalHandlerComponent extends IComponent {

  AddSignal(signal: AIGateSignal, keepActive?: Bool): number
  RemoveSignal(id: number): Bool
  ConsumeSignal(tag: CName): void
  IsHighestPriority(tag: CName, signalId: number): Bool
  GetSignal(signalId: number, signal: AIGateSignal): Bool
  HasSignalWithTag(tag: CName): Bool
  GetHighestPrioritySignal(signal: AIGateSignal, signalId: number): Bool
  /** @noSelf **/
  Get(entity: Entity): AISignalHandlerComponent
}

declare interface AccessBreach extends PuppetAction {

  SetProperties(networkName: string, npcCount: number, attemptsCount: number, isRemote: Bool, isSuicide: Bool): void
  SetAttemptCount(amount: number): void
  StartUpload(gameInstance: GameInstance): void
  CompleteAction(gameInstance: GameInstance): void
  GetNetworkBlackboard(gameInstance: GameInstance): IBlackboard
  GetNetworkBlackboardDef(): NetworkBlackboardDef
  SendNanoWireBreachEventToPSM(id: CName, isActive: Bool, gameInstance: GameInstance): void
}

declare interface AccessBreachListener extends QuickHackUploadListener {

}

declare interface PlayerQuickhackData {

}

declare interface StartTakedownEvent extends Event {

}

declare interface NonStealthQuickHackVictimEvent extends Event {

  /** @noSelf **/
  Create(instigatorID: EntityID): NonStealthQuickHackVictimEvent
}

declare interface StatusEffectAIData_Record extends TweakDBRecord {

  BehaviorEventFlag(): StatusEffectAIBehaviorFlag_Record
  BehaviorType(): StatusEffectAIBehaviorType_Record
  SensePreset(): SensePreset_Record
  Stimulis(outList: Stim_Record[]): void
  GetStimulisCount(): number
  GetStimulisItem(index: number): Stim_Record
  StimulisContains(item: Stim_Record): Bool
  ActivationPrereqs(outList: IPrereq_Record[]): void
  GetActivationPrereqsCount(): number
  GetActivationPrereqsItem(index: number): IPrereq_Record
  ActivationPrereqsContains(item: IPrereq_Record): Bool
  BehaviorSignalResendDelay(outList: StatModifier_Record[]): void
  GetBehaviorSignalResendDelayCount(): number
  GetBehaviorSignalResendDelayItem(index: number): StatModifier_Record
  BehaviorSignalResendDelayContains(item: StatModifier_Record): Bool
  BehaviourName(): CName
  Priority(): number
  StimRangeMultiplier(): number
  UpdateSenses(): Bool
  ShouldDelayStatusEffectApplication(): Bool
  ShouldProcessAIDataOnReapplication(): Bool
}

declare interface DelayedStatusEffectApplicationEvent extends Event {

}

declare interface UncontrolledMovementStartEvent extends Event {

  DebugSetSourceName(debugSourceName: CName): void
}

declare interface StatusEffectAIBehaviorFlag_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataStatusEffectAIBehaviorFlag
}

declare interface StatusEffectSignalEvent extends Event {

}

declare interface CheckUncontrolledMovementStatusEffectEvent extends Event {

}

declare interface HackPlayerEvent extends Event {

}

declare interface ResurrectEvent extends Event {

}

declare interface RemoveStatusEffect extends StatusEffectEvent {

}

declare interface DeadBodyEvent extends Event {

}

declare interface UncontrolledMovementEndEvent extends Event {

}

declare interface CacheStatusEffectAnimEvent extends Event {

}

declare interface RemoveStatusEffectEvent extends Event {

  SetEffectID(effectName: string): void
}

declare interface RemoveAllStatusEffectOfTypeEvent extends Event {

}

declare interface StatusEffectFX_Record extends TweakDBRecord {

  Name(): CName
  ShouldReapply(): Bool
}

declare interface CacheStatusEffectFXEvent extends Event {

}

declare interface SpawnableObjectPriority_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataSpawnableObjectPriority
}

declare interface CheckPuppetRagdollStateEvent extends Event {

}

declare interface AnimVisibilityChangedEvent extends Event {

}

declare interface AnimFeature_RagdollState extends AnimFeature {

}

declare interface CrowdMemberComponent extends IComponent {

  ChangeFearStage(stage: gameFearStage, playInitAniation?: Bool): Bool
  ChangeMoveType(name: CName): Bool
  IsInCrowd(): Bool
  SetThreatLastKnownPosition(position: Vector4): void
  TryChangeMovementDirection(): void
  TryStopTrafficMovement(): void
  GetMovementDirection(): Vector4
  CheckEmptyPath(distance: number): Bool
  CheckIsMoving(): Bool
  AllowWorkspotsUsage(allowUsage: Bool): void
  OnCrowdReaction(stimType: gamedataStimType): void
}

declare interface CheckDeadPuppetDisposedEvent extends Event {

}

declare interface RagdollImpactEvent extends Event {

}

declare interface RagdollImpactPointData {

}

declare interface RagdollDamagePollData {

}

declare interface StartRagdollDamageEvent extends Event {

}

declare interface AISubActionForceHitReaction_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionForceHitReaction_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionForceHitReaction_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionForceHitReaction_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  SendForcedTwitchDataToAnimationGraph(target: GameObject, hitDirection: number, hitIntensity: number, hitType: number, hitBodyPart: number, stance: number, animVariation: number, hitSource: number): void
  /** @noSelf **/
  SendForcedHitDataToAIBehavior(target: GameObject, hitDirection: number, hitIntensity: number, hitType: number, hitBodyPart: number, stance: number, animVariation: number, hitSource: number): void
}

declare interface AISubActionForceHitReaction_Record extends AISubAction_Record {

  Target(): AIActionTarget_Record
  PauseCondition(outList: AIActionCondition_Record[]): void
  GetPauseConditionCount(): number
  GetPauseConditionItem(index: number): AIActionCondition_Record
  PauseConditionContains(item: AIActionCondition_Record): Bool
  HitBodyPart(): number
  HitIntensity(): number
  HitSource(): number
  HitDirection(): number
  Stance(): number
  AnimVariation(): number
  Delay(): number
  HitType(): number
}

declare interface RagdollToggleDelayEvent extends Event {

}

declare interface ScanningLookAtEvent extends Event {

}

declare interface PlayerStatsListener extends ScriptStatsListener {

  OnStatChanged(ownerID: StatsObjectID, statType: gamedataStatType, diff: number, total: number): void
}

declare interface NPCAfterDeathOrDefeatEvent extends Event {

}

declare interface NPCKillDataTrackingRequest extends PlayerScriptableSystemRequest {

}

declare interface ContinuousAttackEffector_Record extends ContinuousEffector_Record {

  AttackRecord(): Attack_Record
}

declare interface FinisherEffectorActionOn extends Event {

}

declare interface TerminateReactionLookatEvent extends Event {

}

declare interface AIScriptsTargetTrackingListener extends AIITargetTrackingListener {

  SetAccuracyBound(bound: number): void
  SetSharedAccuracyBound(bound: number): void
  OnAccuracyBoundReached(above: Bool): void
  OnSharedAccuracyBoundReached(above: Bool): void
}

declare interface LootPickupDelayEvent extends Event {

}

declare interface SquadOrder {

}

declare interface DestroyLink extends Event {

}

declare interface PlayerHandicapSystem extends ScriptableSystem {

  /** @noSelf **/
  GetInstance(owner: GameObject): PlayerHandicapSystem
  CanDropHealingConsumable(): Bool
  OnBlockHealingConsumableDrop(request: BlockHealingConsumableDrop): void
  OnUnblockHealingConsumableDrop(request: UnblockHealingConsumableDrop): void
  CanDropAmmo(): Bool
  OnBlockAmmoDrop(request: BlockAmmoDrop): void
  OnUnblockAmmoDrop(request: UnblockAmmoDrop): void
  GetHandicapAmmo(): TweakDBID[]
}

declare interface UnblockHealingConsumableDrop extends ScriptableSystemRequest {

}

declare interface UnblockAmmoDrop extends ScriptableSystemRequest {

}

declare interface BlockAmmoDrop extends ScriptableSystemRequest {

}

declare interface BlockHealingConsumableDrop extends ScriptableSystemRequest {

}

declare interface SpatialQueriesHelper extends IScriptable {

  /** @noSelf **/
  HasSpaceInFront(sourceObject: GameObject, groundClearance: number, areaWidth: number, areaLength: number, areaHeight: number): Bool
  /** @noSelf **/
  HasSpaceInFront(sourceObject: GameObject, queryDirection: Vector4, groundClearance: number, areaWidth: number, areaLength: number, areaHeight: number): Bool
  /** @noSelf **/
  GetFloorAngle(sourceObject: GameObject, floorAngle: number): Bool
}

declare interface TraceResult {

  /** @noSelf **/
  IsValid(self: TraceResult): Bool
}

declare interface ScannerChunk extends IScriptable {

  GetType(): ScannerDataType
  IsValid(): Bool
}

declare interface ScannerWeaponBasic extends ScannerChunk {

  GetWeapon(): CName
  Set(displayName: CName): void
  GetType(): ScannerDataType
}

declare interface UI_ScannerModulesDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface ScannerModuleVisibilityPreset_Record extends TweakDBRecord {

  ShoulShowName(): Bool
  ShouldShowLevel(): Bool
  ShouldShowBounty(): Bool
  ShouldShowFaction(): Bool
  ShouldShowWeaponData(): Bool
  ShouldShowSquadInfo(): Bool
  ShouldShowRarity(): Bool
  ShouldShowHealth(): Bool
  ShouldShowAttitude(): Bool
  ShouldShowVulnerabilities(): Bool
  ShouldShowResistances(): Bool
  ShouldShowQuestClues(): Bool
  ShouldShowNetworkStatus(): Bool
}

declare interface ScannerName extends ScannerChunk {

  GetDisplayName(): string
  GetTextParams(): inkTextParams
  Set(_displayName: string): void
  SetTextParams(_params: inkTextParams): void
  SetArchetype(has: Bool): void
  HasArchetype(): Bool
  GetType(): ScannerDataType
}

declare interface ArchetypeType_Record extends TweakDBRecord {

  EnumComment(): string
  LocalizedName(): CName
  EnumName(): CName
  Type(): gamedataArchetypeType
}

declare interface ScannerArchetype extends ScannerChunk {

  GetArchtype(): gamedataArchetypeType
  Set(a: gamedataArchetypeType): void
  GetType(): ScannerDataType
}

declare interface ScannerLevel extends ScannerChunk {

  GetLevel(): number
  GetIndicator(): Bool
  Set(value: number): void
  SetIndicator(value: Bool): void
  GetType(): ScannerDataType
}

declare interface ScannerRarity extends ScannerChunk {

  GetRarity(): gamedataNPCRarity
  IsCivilian(): Bool
  Set(r: gamedataNPCRarity, civilian: Bool): void
  GetType(): ScannerDataType
}

declare interface ScannerFaction extends ScannerChunk {

  GetFaction(): string
  Set(f: string): void
  GetType(): ScannerDataType
}

declare interface ScannerAttitude extends ScannerChunk {

  GetAttitude(): EAIAttitude
  Set(att: EAIAttitude): void
  GetType(): ScannerDataType
}

declare interface ScannerHealth extends ScannerChunk {

  GetCurrentHealth(): number
  GetTotalHealth(): number
  Set(current: number, total: number): void
  GetType(): ScannerDataType
}

declare interface ScannerBountySystem extends ScannerChunk {

  GetBounty(): BountyUI
  Set(b: BountyUI): void
  GetType(): ScannerDataType
}

declare interface BountyUI {

  /** @noSelf **/
  AddTransgression(self: BountyUI, transgression: string): void
}

declare interface ScannerWeaponDetailed extends ScannerWeaponBasic {

  GetDamage(): CName
  GetType(): ScannerDataType
}

declare interface ScannerVulnerabilities extends ScannerChunk {

  GetVulnerabilities(): Vulnerability[]
  IsValid(): Bool
  Set(vuln: Vulnerability[]): void
  PushBack(vuln: Vulnerability): void
  GetType(): ScannerDataType
}

declare interface Vulnerability {

}

declare interface ChoiceCaptionIconPart_Record extends ChoiceCaptionPart_Record {

  Comment(): string
  TexturePartID(): UIIcon_Record
  MappinVariant(): MappinVariant_Record
  EnumName(): CName
}

declare interface ScannerNetworkStatus extends ScannerChunk {

  GetNetworkStatus(): ScannerNetworkState
  Set(status: ScannerNetworkState): void
  GetType(): ScannerDataType
}

declare interface ScannerResistances extends ScannerChunk {

  GetResistances(): ScannerStatDetails[]
  Set(r: ScannerStatDetails[]): void
  GetType(): ScannerDataType
}

declare interface ScannerStatDetails {

}

declare interface ScannerAbilities extends ScannerChunk {

  GetAbilities(): GameplayAbility_Record[]
  Set(a: GameplayAbility_Record[]): void
  GetType(): ScannerDataType
}

declare interface scannerDataStructure {

}

declare interface GameObjectScanStats {

}

declare interface HidePuppetDelayEvent extends Event {

}

declare interface TestNPCOutsideNavmeshEvent extends Event {

}

declare interface DelayedGameEffectEvent extends Event {

}

declare interface gameDeathParamsEvent extends Event {

}

declare interface gameDeathDirectionEvent extends Event {

}

declare interface LookedAtEvent extends Event {

}

declare interface NPCThrowingGrenadeEvent extends Event {

}

declare interface EnteredSplineEvent extends Event {

}

declare interface AIThreatCalculationEvent extends Event {

}

declare interface HomingGDM_Record extends GrenadeDeliveryMethod_Record {

  FlyUpParameters(): AccelerateTowardsParameters_Record
  FlyToTargetParameters(): AccelerateTowardsParameters_Record
  FreezeDelay(): number
  FreezeDuration(): number
  LockOnDelay(): number
  FreezeDelayAfterBounce(): number
  LockOnFailDetonationDelay(): number
  LockOnAltitude(): number
}

declare interface NewMappinID {

}

declare interface CuttingGrenadeSpawnBlinkEffectEvent extends Event {

}

declare interface GrenadeDetonateRequestEvent extends Event {

}

declare interface GrenadeStopDrillingRequestEvent extends Event {

}

declare interface gameprojectileTickEvent extends Event {

}

declare interface GrenadeSetTargetTrackerStateEvent extends Event {

}

declare interface AccelerateTowardsTrajectoryParams extends gameprojectileTrajectoryParams {

}

declare interface AccelerateTowardsParameters_Record extends TweakDBRecord {

  MaxSpeed(): number
  MaxRotationSpeed(): number
  DecelerateTowardsTargetPositionDistance(): number
  DiffForMaxRotation(): number
  AccelerationSpeed(): number
  MinRotationSpeed(): number
  Accuracy(): number
}

declare interface GrenadePotentialHomingTarget {

}

declare interface GrenadeTriggerSmartTrajectoryEvent extends Event {

}

declare interface ParabolicTrajectoryParams extends gameprojectileTrajectoryParams {

  /** @noSelf **/
  GetAccelTargetAngleParabolicParams(accel: Vector4, target: Vector4, angle: number, zVelocityClamp?: number): ParabolicTrajectoryParams
  /** @noSelf **/
  GetAccelVelParabolicParams(accel: Vector4, vel: number, zVelocityClamp?: number): ParabolicTrajectoryParams
  /** @noSelf **/
  GetVelTargetParabolicParams(target: Vector4, vel: number, zVelocityClamp?: number): ParabolicTrajectoryParams
}

declare interface CuttingGrenadeAddAxisRotationEvent extends Event {

}

declare interface CuttingGrenadeStopAttackEvent extends Event {

}

declare interface GrenadeDespawnRequestEvent extends Event {

}

declare interface gameTransformAnimationEvent extends Event {

}

declare interface gameTransformAnimationPlayEvent extends gameTransformAnimationEvent {

}

declare interface SpawnLaserAttackEvent extends Event {

}

declare interface AnimFeature_CombatGadget extends AnimFeature {

}

declare interface GrenadeReleaseRequestEvent extends Event {

}

declare interface CuttingGrenadePotentialTarget {

}

declare interface GrenadeTrackerTargetAcquiredEvent extends Event {

}

declare interface GrenadeTrackerTargetLostEvent extends Event {

}

declare interface StimTargetsEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface StimTargetData {

  /** @noSelf **/
  IsValid(self: StimTargetData): Bool
}

declare interface ActivatorOperationsTrigger extends DeviceOperationsTrigger {

  EvaluateTrigger(owner: GameObject, container: DeviceOperationsContainer): void
}

declare interface FactOperationsTrigger extends DeviceOperationsTrigger {

  Initialize(owner: GameObject): void
  UnInitialize(owner: GameObject): void
  EvaluateTrigger(owner: GameObject, factName: CName, container: DeviceOperationsContainer): void
  RegisterQuestDBCallback(owner: GameObject): void
  UnRegisterQuestDBCallback(owner: GameObject): void
}

declare interface FactOperationTriggerData extends DeviceOperationTriggerData {

}

declare interface FocusModeOperationsTrigger extends DeviceOperationsTrigger {

  EvaluateTrigger(owner: GameObject, operationType: ETriggerOperationType, container: DeviceOperationsContainer): void
  IsLookedAt(object: GameObject): Bool
}

declare interface FocusModeOperationTriggerData extends DeviceOperationTriggerData {

}

declare interface SensesOperationsTrigger extends DeviceOperationsTrigger {

  EvaluateTrigger(owner: GameObject, activator: GameObject, operationType: ETriggerOperationType, container: DeviceOperationsContainer): void
}

declare interface SensesOperationTriggerData extends DeviceOperationTriggerData {

}

declare interface HitOperationsTrigger extends DeviceOperationsTrigger {

  EvaluateTrigger(owner: GameObject, activator: GameObject, attackData: AttackData, container: DeviceOperationsContainer): void
}

declare interface HitOperationTriggerData extends DeviceOperationTriggerData {

}

declare interface InteractionAreaOperationsTrigger extends DeviceOperationsTrigger {

  EvaluateTrigger(areaTag: CName, owner: GameObject, activator: GameObject, operationType: gameinteractionsEInteractionEventType, container: DeviceOperationsContainer): void
}

declare interface InteractionAreaOperationTriggerData extends DeviceOperationTriggerData {

}

declare interface CustomActionOperationsTriggers extends DeviceOperationsTrigger {

  EvaluateTrigger(actionID: CName, owner: GameObject, container: DeviceOperationsContainer): void
  RestoreOperation(actionID: CName, owner: GameObject, container: DeviceOperationsContainer): void
}

declare interface CustomActionOperationTriggerData extends DeviceOperationTriggerData {

}

declare interface DoorStateOperationsTrigger extends DeviceOperationsTrigger {

  EvaluateTrigger(state: EDoorStatus, owner: GameObject, container: DeviceOperationsContainer): void
}

declare interface DoorStateOperationTriggerData extends DeviceOperationTriggerData {

}

declare interface BaseStateOperationsTrigger extends DeviceOperationsTrigger {

  EvaluateTrigger(state: EDeviceStatus, owner: GameObject, container: DeviceOperationsContainer): void
}

declare interface BaseStateOperationTriggerData extends DeviceOperationTriggerData {

}

declare interface QuickHackDurationListener extends ActionUploadListener {

  OnStatPoolAdded(): Bool
  SetRegenBehavior(): void
  OnStatPoolMaxValueReached(value: number): Bool
  SendUploadStartedEvent(action: ScriptableDeviceAction): void
  SendUploadFinishedEvent(): void
}

declare interface SpiderbotEnableAccessPoint extends ActionBool {

  SetProperties(): void
  GetTweakDBChoiceRecord(): string
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
}

declare interface RevealEnemiesProgram extends ProgramAction {

  SetProperties(): void
}

declare interface QuestBreachAccessPoint extends ActionBool {

  SetProperties(): void
}

declare interface ResetNetworkBreachState extends ActionBool {

  SetProperties(): void
}

declare interface MinigameFailEvent extends Event {

}

declare interface BumpNetrunnerMinigameLevel extends PlayerScriptableSystemRequest {

  Set(_owner: GameObject, value: number): void
}

declare interface CommunityProxyPS extends MasterControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  OnCommunityProxyPSPresent(evt: CommunityProxyPSPresentEvent): EntityNotificationType
  InitializeConnectionWithCommunity(): void
  OnGameEntitySpawnerEvent(evt: gameEntitySpawnerEvent): EntityNotificationType
  EstablishLink(targetID: EntityID): void
  GetNPCsConnectedToThisAPCount(): number
  GetPuppetEntity(id: EntityID): ScriptedPuppet
  IsOfficer(id: EntityID): Bool
  DrawNetworkSquad(shouldDraw: Bool, fxResource: FxResource, memberID: PersistentID, isPing: Bool, revealMaster: Bool, revealSlave: Bool, memberOnly: Bool, duration?: number): void
  OnDrawNetworkSquadEvent(evt: DrawNetworkSquadEvent): EntityNotificationType
  OnSecuritySystemOutput(evt: SecuritySystemOutput): EntityNotificationType
  OnSecurityAreaCrossingPerimeter(evt: SecurityAreaCrossingPerimeter): EntityNotificationType
  OnTargetAssessmentRequest(evt: TargetAssessmentRequest): EntityNotificationType
  OnSetExposeQuickHacks(evt: SetExposeQuickHacks): EntityNotificationType
  OnNPCBreachEvent(evt: NPCBreachEvent): EntityNotificationType
  ExtractEntityIDs(): EntityID[]
  ForwardActionToNPCs(action: DeviceAction): void
  ForwardActionToVehicles(action: DeviceAction): void
}

declare interface EntitySpawnerEventsBroadcaster extends IEntitySpawnerEventsBroadcaster {

  RegisterSpawnerEventPSListener(spawnerOrCommunityId: EntityID, communityEntryName: CName, psListenerPersistentId: PersistentID, psListenerClassName: CName): number
  UnregisterSpawnerEventPSListener(registerId: number): void
}

declare interface gameEntitySpawnerEvent extends Event {

}

declare interface DrawNetworkSquadEvent extends Event {

}

declare interface Validate extends Event {

}

declare interface NetworkAreaControllerPS extends MasterControllerPS {

  Initialize(): void
  AreaEntered(): void
  AreaExited(): void
  OnNetworkAreaActivation(evt: NetworkAreaActivationEvent): EntityNotificationType
  Activate(): void
  Deactivate(): void
  HideResourceOnHUD(): void
  UpdateNetrunnerHUD(): void
}

declare interface NetworkAreaActivationEvent extends Event {

}

declare interface UI_PlayerBioMonitorDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface ControlledDeviceData extends WidgetCustomData {

}

declare interface ConnectedClassTypes {

}

declare interface ManageAreaComponent extends Event {

}

declare interface SecurityAreaTypeChangedNotification extends Event {

}

declare interface SecurityAreaCrossingPerimeter extends SecurityAreaEvent {

  SetProperties(whoBreached: GameObject, didEnter: Bool): void
  GetEnteredState(): Bool
}

declare interface EventsFilters {

}

declare interface Transition extends Event {

}

declare interface QuestAddTransition extends Event {

  GetFriendlyDescription(): string
}

declare interface RegisterTimeListeners extends Event {

}

declare interface QuestRemoveTransition extends Event {

  GetFriendlyDescription(): string
}

declare interface QuestExecuteTransition extends Event {

  GetFriendlyDescription(): string
}

declare interface RevealPlayerSettings {

}

declare interface QuestIllegalActionAreaNotification extends Event {

  GetFriendlyDescription(): string
}

declare interface QuestCombatActionAreaNotification extends Event {

  GetFriendlyDescription(): string
}

declare interface QuestModifyFilters extends Event {

}

declare interface OnDisableAreaData {

}

declare interface SecuritySystemOutputData {

}

declare interface SecuritySystemStatus extends BaseDeviceStatus {

  SetProperties(deviceRef: ScriptableDeviceComponentPS): void
  GetCurrentDisplayString(): string
  GetStatusValue(): number
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface MadnessDebuff extends Event {

}

declare interface BlacklistPeriodEnded extends Event {

}

declare interface DelayID {

}

declare interface SuppressSecuritySystemReaction extends Event {

}

declare interface DeescalationEvent extends Event {

}

declare interface ModifyOverlappedSecurityAreas extends Event {

}

declare interface InterestingFacts {

}

declare interface SecuritySystemDisabled extends Event {

}

declare interface SecurityGateControllerPS extends MasterControllerPS {

  GetScannerEntranceType(): ESecurityGateEntranceType
  GetShouldCheckPlayerOnly(): Bool
  ActionQuickHackAuthorization(): QuickHackAuthorization
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(outActions: DeviceAction[], context: GetActionsContext): void
  UpdateTrespassersList(evt: TriggerEvent, isEntering: Bool): void
  IsTrespasserOnTheList(trespasser: ScriptedPuppet, index: number): Bool
  UpdateTrespasserEntry(index: number, isEntering: Bool, areaName: CName): void
  AddTrespasserEntry(trespasser: ScriptedPuppet, areaName: CName): void
  RemoveTrespasserEntry(index: number): void
  IsTrespasserOutside(index: number): Bool
  EvaluateIfActionIsRequired(mostRecentArea: CName, tresspasser: EntityID, isEntering: Bool): void
  PerformScannerSmokeCheck(reason: ESecurityGateScannerIssueType): Bool
  ResolveScannerNotReady(reason: ESecurityGateScannerIssueType): void
  InitiateScan(entryIndex: number): void
  OnInitiateScanner(evt: InitiateScanner): EntityNotificationType
  PerformScan(index: number): void
  GetTrespasserInScannerArea(index: number): Bool
  TriggerScanResponse(isSuccessful: Bool): void
  ManageSlaves(trespasser: EntityID, shouldUnlock: Bool): void
  ProtectEntityFromSecuritySystem(shouldProtect: Bool, whoToProtect: EntityID, entered: Bool, hasEntityWithdrawn: Bool): void
  DetermineIfEnteredFromCorrectSide(trespasserIndex: number, areaName: CName): Bool
  DetermineIfEntityIsWithdrawing(index: number, areaName: CName): Bool
  RevokeAuthorization(user: EntityID): void
  PerformRestart(): void
  WakeUpDevice(): Bool
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface SecurityGateDetectionProperties {

}

declare interface TrespasserEntry {

}

declare interface SecurityGateResponseProperties {

}

declare interface SecurityGateResponse extends Event {

}

declare interface SecurityGateForceUnlock extends Event {

}

declare interface InitiateScanner extends Event {

}

declare interface RevokeAuthorization extends Event {

}

declare interface AgentDistanceToTarget {

}

declare interface NotifiedSecSysAboutCombat extends Event {

}

declare interface AutomaticDeescalationEvent extends Event {

}

declare interface FullSystemRestart extends ActionBool {

  SetProperties(isRestarting: Bool, duration: number): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(requesterClearancer: Clearance): Bool
}

declare interface WakeUpFromRestartEvent extends Event {

}

declare interface SecuritySystemEnabled extends Event {

}

declare interface ActionForceResetDevice extends ActionBool {

}

declare interface QuestSecuritySystemInput extends Event {

}

declare interface NPCReference {

  /** @noSelf **/
  IsValid(self: NPCReference): Bool
  /** @noSelf **/
  GetSpawnerEntityID(self: NPCReference): EntityID
}

declare interface SpawnerData {

  /** @noSelf **/
  Construct(id: EntityID, entry: CName): SpawnerData
}

declare interface SetSecuritySystemState extends Event {

  GetFriendlyDescription(): string
}

declare interface AuthorizePlayerInSecuritySystem extends Event {

  GetFriendlyDescription(): string
}

declare interface BlacklistPlayer extends Event {

  GetFriendlyDescription(): string
}

declare interface SuppressSecuritySystemStateChange extends Event {

  GetFriendlyDescription(): string
}

declare interface QuestChangeSecuritySystemAttitudeGroup extends Event {

  GetFriendlyDescription(): string
}

declare interface AreaEffectVisualisationRequest extends Event {

}

declare interface RefreshSlavesEvent extends Event {

}

declare interface HackingContainer extends BaseSkillCheckContainer {

  Initialize(container: BaseSkillCheckContainer): void
}

declare interface ForceDisableCarAlarm extends ActionBool {

  SetProperties(isAlarmTriggered: Bool): void
  GetTweakDBChoiceRecord(): string
}

declare interface VehicleActionsContext {

}

declare interface TemporaryDoorState {

}

declare interface VehicleDoorInteraction extends ActionBool {

  SetProperties(slotString: string, source?: Bool, locked?: Bool): void
}

declare interface VehicleDoorInteractionStateChange extends ActionBool {

  SetProperties(doorToChange: EVehicleDoor, desiredState: VehicleDoorInteractionState, reason: string): void
}

declare interface VehicleDoorOpen extends ActionBool {

  SetProperties(slotString: string, autoClose?: Bool, autoCloseDelay?: number): void
}

declare interface VehicleDoorClose extends ActionBool {

  SetProperties(slotString: string): void
}

declare interface VehicleQuestDoorLocked extends ActionBool {

  SetProperties(): void
}

declare interface VehicleWindowOpen extends ActionBool {

  SetProperties(slotString: string): void
}

declare interface VehicleWindowClose extends ActionBool {

  SetProperties(slotString: string): void
}

declare interface VehicleBodyDisposalPerformedEvent extends Event {

}

declare interface VehiclePlayerTrunk extends ActionBool {

  SetProperties(): void
}

declare interface WheeledObject extends VehicleObject {

  ToggleBrokenTire(tireID: number, toggle: Bool): Bool
}

declare interface CarObject extends WheeledObject {

}

declare interface VehicleCloseTrunk extends ActionBool {

  SetProperties(): void
}

declare interface VehicleDumpBody extends ActionBool {

  SetProperties(): void
}

declare interface VehicleTakeBody extends ActionBool {

  SetProperties(): void
}

declare interface VehicleOpenTrunk extends ActionBool {

  SetProperties(): void
}

declare interface VehicleOpenHood extends ActionBool {

  SetProperties(): void
}

declare interface VehicleCloseHood extends ActionBool {

  SetProperties(): void
}

declare interface VehicleFinishedMountingEvent extends Event {

}

declare interface VehicleStartedUnmountingEvent extends Event {

}

declare interface ForceCarAlarm extends ActionBool {

  SetProperties(isAlarmTriggered: Bool): void
  /** @noSelf **/
  IsDefaultConditionMet(device: VehicleComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: VehicleComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface ToggleVehicle extends ActionBool {

  SetProperties(toggleOn: Bool): void
  GetTweakDBChoiceRecord(): string
}

declare interface VehicleForceOccupantOut extends ActionBool {

  SetProperties(slotString: string): void
}

declare interface VehicleQuestChangeDoorStateEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface vehicleChangeWindowStateEvent extends Event {

}

declare interface vehicleToggleDoorWrapperEvent extends Event {

}

declare interface VehicleSeatReservationEvent extends Event {

}

declare interface VehicleQuestCrystalDomeEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface VehicleQuestSirenEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface VehicleQuestAVThrusterEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface ForwardVehicleQuestEnableUIEvent extends Event {

}

declare interface VehicleQuestEnableUIEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface ForwardVehicleQuestUIEffectEvent extends Event {

}

declare interface VehicleQuestUIEffectEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface ForwardVehicleRaceUIEvent extends Event {

}

declare interface VehicleRaceQuestEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface VehiclePanzerBootupUIQuestEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface CrowdMemberBaseComponent extends CrowdMemberComponent {

}

declare interface VehicleDeviceLinkPS extends DeviceLinkComponentPS {

  /** @noSelf **/
  CreateAndAcquirVehicleDeviceLinkPS(game: GameInstance, entityID: EntityID): VehicleDeviceLinkPS
  /** @noSelf **/
  AcquireVehicleDeviceLink(game: GameInstance, entityID: EntityID): VehicleDeviceLinkPS
  OnDeviceLinkRequest(evt: DeviceLinkRequest): EntityNotificationType
}

declare interface MountingEvent extends Event {

}

declare interface MountingRequest extends IScriptable {

}

declare interface MountEventOptions extends IScriptable {

}

declare interface UnmountingEvent extends Event {

}

declare interface UnmountingRequest extends IScriptable {

}

declare interface ScannerVehicleName extends ScannerChunk {

  GetDisplayName(): string
  Set(vehName: string): void
  GetType(): ScannerDataType
}

declare interface ScannerVehicleManufacturer extends ScannerChunk {

  GetVehicleManufacturer(): string
  Set(vehManName: string): void
  GetType(): ScannerDataType
}

declare interface VehicleManufacturer_Record extends TweakDBRecord {

  EnumName(): string
  EnumComment(): string
  Type(): gamedataVehicleManufacturer
}

declare interface ScannerVehicleProdYears extends ScannerChunk {

  GetProdYears(): string
  Set(vehProdYears: string): void
  GetType(): ScannerDataType
}

declare interface VehicleUIData_Record extends TweakDBRecord {

  DriveLayout(): string
  ProductionYear(): string
  Info(): string
  Mass(): number
  Horsepower(): number
}

declare interface ScannerVehicleMass extends ScannerChunk {

  GetMass(): number
  IsValid(): Bool
  Set(vehMass: number): void
  GetType(): ScannerDataType
}

declare interface MeasurementUtils {

  /** @noSelf **/
  ValueUnitToUnit(inValue: number, inUnit: EMeasurementUnit, outUnit: EMeasurementUnit): number
  /** @noSelf **/
  ValueToMetric(inValue: number, inUnit: EMeasurementUnit, outUnit: EMeasurementUnit): number
  /** @noSelf **/
  ValueToMetric(inValue: number, inUnit: EMeasurementUnit): number
  /** @noSelf **/
  ValueToImperial(inValue: number, inUnit: EMeasurementUnit, outUnit: EMeasurementUnit): number
  /** @noSelf **/
  ValueToImperial(inValue: number, inUnit: EMeasurementUnit): number
  /** @noSelf **/
  ValueToSystem(inValue: number, inUnit: EMeasurementUnit, outUnitSystem: EMeasurementSystem, outUnit: EMeasurementUnit): number
  /** @noSelf **/
  ValueToSystem(inValue: number, inUnit: EMeasurementUnit, outUnitSystem: EMeasurementSystem): number
  /** @noSelf **/
  ValueToPlayerSettingSystem(inValue: number, inUnit: EMeasurementUnit, outUnit: EMeasurementUnit): number
  /** @noSelf **/
  ValueToPlayerSettingSystem(inValue: number, inUnit: EMeasurementUnit): number
  /** @noSelf **/
  GetPlayerSettingSystem(): EMeasurementSystem
  /** @noSelf **/
  UnitToMetric(inUnit: EMeasurementUnit): EMeasurementUnit
  /** @noSelf **/
  UnitToImperial(inUnit: EMeasurementUnit): EMeasurementUnit
  /** @noSelf **/
  UnitToSystem(inUnit: EMeasurementUnit, outSystem: EMeasurementSystem): EMeasurementUnit
  /** @noSelf **/
  GetSystemForUnit(inUnit: EMeasurementUnit): EMeasurementSystem
  /** @noSelf **/
  GetUnitLocalizationKey(inUnit: EMeasurementUnit): CName
}

declare interface ScannerVehicleInfo extends ScannerChunk {

  GetVehicleInfo(): string
  Set(vehInfo: string): void
  GetType(): ScannerDataType
}

declare interface BikeObject extends WheeledObject {

  IsTiltControlEnabled(): Bool
  EnableTiltControl(enable: Bool): void
  GetCustomTargetTilt(): number
  SetCustomTargetTilt(targetTilt: number): void
}

declare interface ScannerVehicleHorsepower extends ScannerChunk {

  GetHorsepower(): number
  IsValid(): Bool
  Set(hp: number): void
  GetType(): ScannerDataType
}

declare interface ScannerVehicleState extends ScannerChunk {

  GetVehicleState(): string
  Set(vehState: string): void
  GetType(): ScannerDataType
}

declare interface ScannerVehicleDriveLayout extends ScannerChunk {

  GetDriveLayout(): string
  Set(vehDriveLayout: string): void
  GetType(): ScannerDataType
}

declare interface CrowdSettingsEvent extends Event {

}

declare interface HandleReactionEvent extends Event {

}

declare interface DelayedCrowdReactionEvent extends Event {

}

declare interface VehicleFlippedOverEvent extends Event {

}

declare interface VehicleHealthStatPoolListener extends CustomValueStatPoolsListener {

  OnStatPoolValueChanged(oldValue: number, newValue: number, percToPoints: number): void
}

declare interface VehicleDamageStageTurnOffEvent extends Event {

}

declare interface VehicleRadioEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface VehicleDefaultState_Record extends TweakDBRecord {

  Seat_back_right(): SeatState_Record
  Seat_front_left(): SeatState_Record
  Seat_front_right(): SeatState_Record
  Seat_back_left(): SeatState_Record
  Trunk(): SeatState_Record
  Hood(): SeatState_Record
  DisableAllInteractions(): Bool
  QuestLockAll(): Bool
  CloseAll(): Bool
  SirenLight(): Bool
  OpenAll(): Bool
  SirenSounds(): Bool
  Thrusters(): Bool
  LockAll(): Bool
}

declare interface SeatState_Record extends TweakDBRecord {

  ForceOpen(): Bool
  ForceClose(): Bool
  EnableInteraction(): Bool
  ForceUnlock(): Bool
  DisableInteraction(): Bool
  ForceLock(): Bool
  QuestLock(): Bool
}

declare interface VehicleSirenDelayEvent extends Event {

}

declare interface InteractionMultipleSetEnableEvent extends Event {

  PushBack(enable: Bool, layer: CName, linkedLayers?: CName): void
}

declare interface AnimFeature_PartData extends AnimFeatureMarkUnstable {

}

declare interface VehicleParkedEvent extends Event {

}

declare interface VehicleLightSetupEvent extends Event {

}

declare interface AnimFeature_VehicleState extends AnimFeatureMarkUnstable {

}

declare interface VehicleCrystalDomeOnDelayEvent extends Event {

}

declare interface VehicleCameraManager extends IScriptable {

  IsTPPActive(): Bool
  GetActivePerspective(): vehicleCameraPerspective
}

declare interface VehicleCrystalDomeMeshVisibilityDelayEvent extends Event {

}

declare interface VehicleCrystalDomeOffDelayEvent extends Event {

}

declare interface AnimFeature_CamberData extends AnimFeatureMarkUnstable {

}

declare interface VehicleVisualDestruction_Record extends TweakDBRecord {

  Left(): number
  BackRight(): number
  FrontLeft(): number
  BackLeft(): number
  Front(): number
  Right(): number
  Back(): number
  FrontRight(): number
  Roof(): number
  SetVisualDestruction(): Bool
}

declare interface VehicleSummonDataDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface UI_ActiveVehicleDataDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface VehicleType_Record extends TweakDBRecord {

  EnumName(): string
  EnumComment(): string
  Type(): gamedataVehicleType
}

declare interface AnimFeature_VehicleNPCData extends AnimFeature {

}

declare interface PlayerMuntedToMyVehicle extends Event {

  /** @noSelf **/
  Create(player: PlayerPuppet): PlayerMuntedToMyVehicle
}

declare interface GameplaySettingsSystem extends ScriptableSystem {

  OnPlayerAttach(request: PlayerAttachRequest): void
  OnRestored(saveVersion: number, gameVersion: number): void
  OnPlayerDetach(request: PlayerDetachRequest): void
  /** @noSelf **/
  GetGameplaySettingsSystemInstance(owner: GameObject): GameplaySettingsSystem
  /** @noSelf **/
  GetAdditiveCameraMovementsSetting(owner: GameObject): number
  /** @noSelf **/
  GetIsFastForwardByLine(owner: GameObject): Bool
  /** @noSelf **/
  WasEverJohnny(owner: GameObject): Bool
  /** @noSelf **/
  SetWasEverJohnny(owner: GameObject, value: Bool): void
  GetIsFastForwardByLine(): Bool
  SetWasEverJohnny(value: Bool): void
}

declare interface ConfigVarListener extends IScriptable {

  OnVarModified(groupPath: CName, varName: CName, varType: ConfigVarType, reason: ConfigChangeReason): void
  Register(groupPath: CName): Bool
}

declare interface GameplaySettingsListener extends ConfigVarListener {

  Initialize(player: PlayerPuppet): void
  OnVarModified(groupPath: CName, varName: CName, varType: ConfigVarType, reason: ConfigChangeReason): void
  GetAdditiveCameraMovementsSetting(): number
  GetIsFastForwardByLine(): Bool
  RefreshAdditiveCameraMovementsSetting(): void
  RestoreJohnnyRelatedState(): void
  UpdateFFSetting(): void
}

declare interface UserSettings extends IScriptable {

  HasGroup(groupPath: CName): Bool
  HasVar(groupPath: CName, varName: CName): Bool
  GetRootGroup(): ConfigGroup
  GetGroup(groupPath: CName): ConfigGroup
  GetVar(groupPath: CName, varName: CName): ConfigVar
  NeedsConfirmation(): Bool
  ConfirmChanges(): void
  RejectChanges(): void
  NeedsRestartToApply(): Bool
  NeedsLoadLastCheckpoint(): Bool
  WasModifiedSinceLastSave(): Bool
  RequestNeedsRestartDialog(): void
  RequestConfirmationDialog(): void
  RequestLoadLastCheckpointDialog(): void
  RequestRestoreDefaultDialog(isPreGame: Bool, onlyVisible: Bool, groupPath?: CName): void
  RestoreVarToDefault(groupPath: CName, varName: CName): void
  GetUserSettingsLoadStatus(): UserSettingsLoadStatus
  GetMenuIndex(): number
  SetMenuIndex(index: number): void
}

declare interface ConfigVar extends IScriptable {

  GetName(): CName
  GetGroupPath(): CName
  GetGroup(): ConfigGroup
  GetDisplayName(): CName
  GetDescription(): CName
  GetType(): ConfigVarType
  GetUpdatePolicy(): ConfigVarUpdatePolicy
  IsInPreGame(): Bool
  IsInGame(): Bool
  IsVisible(): Bool
  IsDisabled(): Bool
  IsPlatformSpecific(): Bool
  IsDynamic(): Bool
  IsDynamicInitialized(): Bool
  ListHasDisplayValues(): Bool
  GetOrder(): number
  WasModifiedSinceLastSave(): Bool
  HasRequestedValue(): Bool
  RestoreDefault(): Bool
  SetVisible(isVisible: Bool): void
}

declare interface ConfigVarListFloat extends ConfigVar {

  GetValueFor(index: number): number
  GetValue(): number
  GetDefaultValue(): number
  GetValues(): number[]
  GetIndexFor(value: number): number
  GetIndex(): number
  GetDefaultIndex(): number
  SetIndex(index: number): void
  GetDisplayValue(index: number): CName
}

declare interface ConfigGroup extends IScriptable {

  GetParentPath(): CName
  GetPath(): CName
  GetName(): CName
  GetDisplayName(): CName
  GetGroups(isPreGame: Bool): ConfigGroup[]
  GetOrder(): number
  GetVar(varName: CName): ConfigVar
  GetVars(isPreGame: Bool): ConfigVar[]
  HasGroups(): Bool
  HasVars(isPreGame: Bool): Bool
  IsEmpty(isPreGame: Bool): Bool
  HasVar(varName: CName): Bool
}

declare interface ConfigVarListString extends ConfigVar {

  GetValueFor(index: number): string
  GetValue(): string
  GetDefaultValue(): string
  GetValues(): string[]
  GetIndexFor(value: string): number
  GetIndex(): number
  GetDefaultIndex(): number
  SetIndex(index: number): void
  GetDisplayValue(index: number): CName
}

declare interface MinutePassedEvent extends Event {

}

declare interface AnimFeature_VehicleSteeringLimit extends AnimFeatureMarkUnstable {

}

declare interface RagdollDisableEvent extends Event {

}

declare interface vehicleController extends GameComponent {

  SetLightColor(lightType: vehicleELightType, color: Color, inTime?: number): void
  ResetLightColor(lightType: vehicleELightType, inTime?: number): void
  SetLightStrength(lightType: vehicleELightType, strength: number, inTime?: number): void
  ResetLightStrength(lightType: vehicleELightType, inTime?: number): void
  SetLightParameters(lightType: vehicleELightType, strength: number, color: Color, inTime?: number): void
  ResetLightParameters(lightType: vehicleELightType, inTime?: number): void
  ToggleLights(on: Bool, lightType?: vehicleELightType, inTime?: number, lerpCurve?: CName, loop?: Bool): void
}

declare interface VehicleStartedMountingEvent extends Event {

}

declare interface gameinteractionsActiveLayerData {

}

declare interface VehicleQuestVisualDestructionEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface AIEvents extends IScriptable {

  /** @noSelf **/
  ExitVehicleEvent(): AIEvent
}

declare interface PSMAddOnDemandStateMachine extends Event {

}

declare interface KnockOverBikeEvent extends Event {

}

declare interface VehicleWaterEvent extends Event {

}

declare interface VehicleDestruction_Record extends TweakDBRecord {

  DetachableParts(outList: VehicleDetachablePart_Record[]): void
  GetDetachablePartsCount(): number
  GetDetachablePartsItem(index: number): VehicleDetachablePart_Record
  DetachablePartsContains(item: VehicleDetachablePart_Record): Bool
  Glass(outList: VehicleDestructibleGlass_Record[]): void
  GetGlassCount(): number
  GetGlassItem(index: number): VehicleDestructibleGlass_Record
  GlassContains(item: VehicleDestructibleGlass_Record): Bool
  Wheels(outList: VehicleDestructibleWheel_Record[]): void
  GetWheelsCount(): number
  GetWheelsItem(index: number): VehicleDestructibleWheel_Record
  WheelsContains(item: VehicleDestructibleWheel_Record): Bool
  Lights(outList: VehicleDestructibleLight_Record[]): void
  GetLightsCount(): number
  GetLightsItem(index: number): VehicleDestructibleLight_Record
  LightsContains(item: VehicleDestructibleLight_Record): Bool
  DeformableParts(outList: VehicleDeformablePart_Record[]): void
  GetDeformablePartsCount(): number
  GetDeformablePartsItem(index: number): VehicleDeformablePart_Record
  DeformablePartsContains(item: VehicleDeformablePart_Record): Bool
  PointDampers(outList: VehicleDestructionPointDamper_Record[]): void
  GetPointDampersCount(): number
  GetPointDampersItem(index: number): VehicleDestructionPointDamper_Record
  PointDampersContains(item: VehicleDestructionPointDamper_Record): Bool
  DetachedPartExplosionEffect(): ResRef
  GridDimensions(): Vector3
  GridLocalOffset(): Vector3
  VehicleDimensions(): Vector3
  DamageExponent(): number
  VelocityValueMinDamage(): number
  DamageThreshold(): number
  OnHitVelocity(): number
  ForcePropagationFalloff(): number
  VelocityValueMaxDamage(): number
  EnableOnHit(): Bool
}

declare interface VehicleGlassDestructionEvent extends Event {

}

declare interface VehicleDestructibleGlass_Record extends TweakDBRecord {

  GridCells(): number[]
  GetGridCellsCount(): number
  GetGridCellsItem(index: number): number
  GridCellsContains(item: number): Bool
  Component(): CName
  Effect(): CName
  Broken(): CName
  Threshold(): number
  IsWindshield(): Bool
}

declare interface ReevaluateOxygenEvent extends Event {

}

declare interface InteractionLayerData {

}

declare interface InteractionChoiceEvent extends InteractionEvent {

}

declare interface StealVehicleEvent extends Event {

}

declare interface DisableAlarmEvent extends Event {

}

declare interface vehicleChangeStateEvent extends Event {

}

declare interface VehicleExternalDoorRequestEvent extends Event {

}

declare interface ToggleDoorInteractionEvent extends Event {

}

declare interface VehicleDumpBodyDelayEvent extends Event {

}

declare interface StorageUserData extends IScriptable {

}

declare interface StorageBlackboardDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface SummonStartedEvent extends Event {

}

declare interface VehicleLightQuestToggleEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface VehicleQuestHornEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface SummonFinishedEvent extends Event {

}

declare interface VehicleGridDestructionEvent extends Event {

}

declare interface VehicleOnPartDetachedEvent extends Event {

}

declare interface VehicleRadioTierEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface VehicleHornOffDelayEvent extends Event {

}

declare interface VehicleQuestWindowDestructionEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface FactChangedEvent extends Event {

  GetFactName(): CName
}

declare interface VehicleForwardRaceCheckpointFactEvent extends Event {

}

declare interface VehicleRaceClockUpdateEvent extends TickableEvent {

}

declare interface VehicleForwardRaceClockUpdateEvent extends Event {

}

declare interface VehicleQuestToggleEngineEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface SetIgnoreAutoDoorCloseEvent extends Event {

}

declare interface ActionAnimationScriptProxy extends CActionScriptProxy {

  Setup(animFeatureName: CName, animFeature: AnimFeature_AIAction, useRootMotion: Bool, usePoseMatching: Bool, resetRagdollOnStart: Bool, motionDynamicObjectsCheck: Bool, updadeMovePolicy: Bool, slideParams: ActionAnimationSlideParams, targetObject: GameObject, tagetPositionProvider?: IPositionProvider): Bool
  ForceLaunch(animFeatureName: CName, animFeature: AnimFeature_AIAction, useRootMotion: Bool, usePoseMatching: Bool, resetRagdollOnStart: Bool, motionDynamicObjectsCheck: Bool, slideParams: ActionAnimationSlideParams, targetObject: GameObject, tagetPositionProvider?: IPositionProvider): void
  Terminate(): void
  GetPhaseDuration(animFeatureName: CName, animFeature: AnimFeature_AIAction): number
}

declare interface FriendlyFireParams extends IScriptable {

  SetShooter(attitude: AttitudeAgent, slotName: CName, attachmentName: CName): void
  SetGeometry(spread: number, maxRange: number): void
  SetCurrentTargetComponent(currentTarget: TargetingComponent): void
  SetCurrentTargetObject(currentTarget: GameObject): void
  SetFFApplyAttitude(FFApplyAttitude: EAIAttitude): void
}

declare interface ILoSFinderSystem extends IGameSystem {

  StartChecking(params: LoSFinderParams): number
  StopChecking(id: number): Bool
  UpdateParams(id: number, params: LoSFinderParams): Bool
  GetLoSPosition(id: number, position: Vector3): Bool
  GetLoSMode(id: number): gameLoSMode
}

declare interface LoSFinderParams extends IScriptable {

  SetSeeker(seeker: GameObject): void
  SetTarget(target: VisibleObject): void
  SetMode(mode: gameLoSMode): void
  SetOverrideCheckHeight(height: number): void
  SetTracesAmountMultiplier(multiplier: number): void
}

declare interface CombatGadgetDataDef extends BlackboardDefinition {

}

declare interface SetScriptExecutionContextEvent extends Event {

}

declare interface BehaviorDelegate extends BehaviorBlackboard {

  GetParent(): BehaviorDelegate
}

declare interface ScriptBehaviorDelegate extends BehaviorDelegate {

}

declare interface AIScriptActionDelegate extends ScriptBehaviorDelegate {

  /** @noSelf **/
  GetActionPackageType(context: ScriptExecutionContext): AIactionParamsPackageTypes
}

declare interface TweakAIActionRecord extends IScriptable {

  /** @noSelf **/
  GetFriendlyName(record: TweakDBID, nodeName: string): string
  /** @noSelf **/
  GetDebugActionNameFromRecord(record: TweakDBID, debugStringName: string): Bool
  /** @noSelf **/
  GetHeldItemType(context: ScriptExecutionContext, heldItemType: gamedataItemType): Bool
  /** @noSelf **/
  IsArchetypeAction(record: TweakDBID): Bool
  /** @noSelf **/
  GetActionRecord(context: ScriptExecutionContext, actionID: TweakDBID, actionDebugName: string, actionRecord: AIAction_Record): Bool
  /** @noSelf **/
  GetSelectorRecord(context: ScriptExecutionContext, selectorID: TweakDBID, selectorDebugName: string, selectorRecord: AIActionSelector_Record): Bool
  /** @noSelf **/
  GetSequenceRecord(context: ScriptExecutionContext, sequenceID: TweakDBID, sequenceDebugName: string, sequenceRecord: AIActionSequence_Record): Bool
  /** @noSelf **/
  GetSmartCompositeRecord(context: ScriptExecutionContext, smartCompositeID: TweakDBID, smartCompositeDebugName: string, smartCompositeRecord: AIActionSmartComposite_Record): Bool
  /** @noSelf **/
  GetActionRecordFromSelector(context: ScriptExecutionContext, selectorRecord: AIActionSelector_Record, actionDebugName: string, actionRecord: AIAction_Record, nodeIterator: number, shouldCallAgain: Bool): Bool
  /** @noSelf **/
  IsThisLastActionInSelector(selectorRecord: AIActionSelector_Record, nodeIterator: number): Bool
  /** @noSelf **/
  GetActionRecordFromSequence(context: ScriptExecutionContext, sequenceRecord: AIActionSequence_Record, actionDebugName: string, actionRecord: AIAction_Record, sequenceIterator: number, shouldCallAgain: Bool): Bool
  /** @noSelf **/
  IsThisLastActionInSequence(sequenceRecord: AIActionSequence_Record, sequenceIterator: number): Bool
  /** @noSelf **/
  IsThisLastActionInSmartComposite(smartCompositeRecord: AIActionSmartComposite_Record, iterator: number): Bool
  /** @noSelf **/
  IsSmartCompositeASequence(smartCompositeRecord: AIActionSmartComposite_Record): Bool
  /** @noSelf **/
  IsSmartCompositeASelector(smartCompositeRecord: AIActionSmartComposite_Record): Bool
}

declare interface AIActionSelector_Record extends AINode_Record {

  DefaultAction(): AIAction_Record
  Actions(outList: AIAction_Record[]): void
  GetActionsCount(): number
  GetActionsItem(index: number): AIAction_Record
  ActionsContains(item: AIAction_Record): Bool
  DisableActionsLimit(): Bool
  FailOnNodeActivationConditionFailure(): Bool
}

declare interface AIActionSequence_Record extends AINode_Record {

  Actions(outList: AIAction_Record[]): void
  GetActionsCount(): number
  GetActionsItem(index: number): AIAction_Record
  ActionsContains(item: AIAction_Record): Bool
  HasMemory(): Bool
  DisableActionsLimit(): Bool
  FailOnNodeActivationConditionFailure(): Bool
}

declare interface AIActionSmartComposite_Record extends AIRecord_Record {

  Type(): AISmartCompositeType_Record
  GracefulInterruptionCondition(outList: AIActionCondition_Record[]): void
  GetGracefulInterruptionConditionCount(): number
  GetGracefulInterruptionConditionItem(index: number): AIActionCondition_Record
  GracefulInterruptionConditionContains(item: AIActionCondition_Record): Bool
  Nodes(outList: AINode_Record[]): void
  GetNodesCount(): number
  GetNodesItem(index: number): AINode_Record
  NodesContains(item: AINode_Record): Bool
  GracefulInterruptionConditionCheckInterval(): number
  Repeat(): number
  ConditionSuccessDuration(): number
  FailOnNodeActivationConditionFailure(): Bool
  DisableActionsLimit(): Bool
}

declare interface AISmartCompositeType_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  HasMemory(): Bool
  IncrementIteratorOnDeactivation(): Bool
  RandomizeIteratorOnReset(): Bool
  Type(): gamedataAISmartCompositeType
}

declare interface TimeDilationHelper extends IScriptable {

  /** @noSelf **/
  GetTimeDilationParameters(timeDilationParameters: TimeDilationParameters, profileName: string): void
  /** @noSelf **/
  SetTimeDilationWithProfile(requester: GameObject, profileName: string, enable: Bool): Bool
  /** @noSelf **/
  SetTimeDilation(requester: GameObject, reason: CName, timeDilation: number, duration?: number, easeInCurve?: CName, easeOutCurve?: CName, listener?: TimeDilationListener): Bool
  /** @noSelf **/
  SetTimeDilationOnPlayer(requester: GameObject, reason: CName, timeDilation: number, duration?: number, easeInCurve?: CName, easeOutCurve?: CName, listener?: TimeDilationListener): Bool
  /** @noSelf **/
  UnSetTimeDilation(requester: GameObject, reason?: CName, easeOutCurve?: CName): Bool
  /** @noSelf **/
  SetIndividualTimeDilation(target: GameObject, reason: CName, timeDilation: number, duration?: number, easeInCurve?: CName, easeOutCurve?: CName): Bool
  /** @noSelf **/
  UnsetIndividualTimeDilation(target: GameObject, easeOutCurve?: CName): Bool
  /** @noSelf **/
  GetFloatFromTimeSystemTweak(tweakDBPath: string, paramName: string): number
  /** @noSelf **/
  GetCNameFromTimeSystemTweak(tweakDBPath: string, paramName: string): CName
  /** @noSelf **/
  GetSandevistanKey(): CName
  /** @noSelf **/
  GetKerenzikovKey(): CName
  /** @noSelf **/
  GetFocusModeKey(): CName
}

declare interface TimeDilationParameters extends IScriptable {

}

declare interface AIMeleeAttackCommand extends AICombatRelatedCommand {

}

declare interface AIForceShootCommand extends AICombatRelatedCommand {

}

declare interface CommandSignal extends TaggedSignalUserData {

}

declare interface AnimParamsEvent extends Event {

  GetParameterValue(paramName: CName, value: number): Bool
  PushParameterValue(paramName: CName, value: number): void
}

declare interface AnimationsLoaded extends TaggedSignalUserData {

}

declare interface MovementPolicy_Record extends TweakDBRecord {

  Ring(): AIRingType_Record
  StrafingTarget(): AIActionTarget_Record
  Target(): AIActionTarget_Record
  DestinationOrientationPosition(): AIActionTarget_Record
  BlockedTags(outList: MovementPolicyTagList_Record[]): void
  GetBlockedTagsCount(): number
  GetBlockedTagsItem(index: number): MovementPolicyTagList_Record
  BlockedTagsContains(item: MovementPolicyTagList_Record): Bool
  AllowedTags(outList: MovementPolicyTagList_Record[]): void
  GetAllowedTagsCount(): number
  GetAllowedTagsItem(index: number): MovementPolicyTagList_Record
  AllowedTagsContains(item: MovementPolicyTagList_Record): Bool
  KeepLineOfSight(): CName
  MaxPathLengthToDirectDistanceRatioCurve(): CName
  CirclingDirection(): CName
  MovementType(): CName
  DebugName(): CName
  SpatialHintMults(): Vector3
  Tolerance(): number
  StrafingPredictionTime(): number
  Distance(): number
  AvoidThreatRange(): number
  RingToleranceMult(): number
  RingToleranceOffset(): number
  AvoidThreatCost(): number
  RingDistanceOffset(): number
  StrafingRotationOffset(): number
  StrafingPredictionVelocityMax(): number
  RingDistanceMult(): number
  DynamicTargetUpdateTimer(): number
  DynamicTargetUpdateDistance(): number
  MinDistance(): number
  DeadAngle(): number
  MaxPathLength(): number
  DontUseStop(): Bool
  IgnoreNavigation(): Bool
  UseOffMeshBlockedTags(): Bool
  IgnoreCollisionAvoidance(): Bool
  SymmetricAnglesScores(): Bool
  DontUseStart(): Bool
  IgnoreSpotReservation(): Bool
  IgnoreRestrictedMovementArea(): Bool
  UseOffMeshAllowedTags(): Bool
  IgnoreLoSPrecheck(): Bool
  UseFollowSlots(): Bool
  AvoidThreat(): Bool
  CalculateStartTangent(): Bool
  AvoidObstacleWithinTolerance(): Bool
  StopOnObstacle(): Bool
  GetOutOfWay(): Bool
}

declare interface IgnoreListEvent extends Event {

}

declare interface ReprimandEscalationEvent extends Event {

}

declare interface ReactionBehaviorStatus extends Event {

}

declare interface PuppetReactionDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface EndLookatEvent extends Event {

}

declare interface AnimFeature_FacialReaction extends AnimFeature {

}

declare interface LookAtData {

}

declare interface ReactionSystem extends IReactionSystem {

  RegisterTrafficRunner(runner: GameObject): Bool
  UnregisterTrafficRunner(runner: GameObject): Bool
  RegisterCommunityRunner(runner: GameObject): Bool
  UnregisterCommunityRunner(runner: GameObject): Bool
  RegisterReaction(reaction: CName): AIReactionCountOutcome
  UnregisterReaction(reaction: CName): AIReactionCountOutcome
  AddFearSource(runner: GameObject): void
}

declare interface ResetLookatReactionEvent extends Event {

}

declare interface DelayStimEvent extends Event {

}

declare interface StimEventData {

}

declare interface StimParams {

}

declare interface CleanEnvironmentalHazardEvent extends Event {

}

declare interface StimThresholdEvent extends Event {

}

declare interface StealthStimThresholdEvent extends Event {

}

declare interface ResetReactionEvent extends Event {

}

declare interface BodyInvestigatedEvent extends Event {

}

declare interface ResetFacialEvent extends Event {

}

declare interface ExitWorkspotSequenceEvent extends Event {

}

declare interface AnimFeature_CrowdRunningAway extends AnimFeature {

}

declare interface SceneSystem extends ISceneSystem {

  GetScriptInterface(): SceneSystemInterface
  GetPeerIdDialogChoiceFactName(): string
}

declare interface SceneSystemInterface extends IScriptable {

  IsFastForwardingAllowed(ffMode: scnFastForwardMode): Bool
  IsFastForwardingActive(ffMode: scnFastForwardMode): Bool
  FastForwardingActivate(ffMode: scnFastForwardMode): void
  FastForwardingDeactivate(): void
  IsRewindableSectionActive(): Bool
  GetRewindableSectionProgress(): number
  GetRewindableSectionTimeInSec(): number
  GetRewindableSectionDurationInSec(): number
  GetRewindableSectionPlayDirection(): scnPlayDirection
  SetRewindableSectionPlayDirection(direction: scnPlayDirection): void
  GetRewindableSectionPlaySpeed(): scnPlaySpeed
  SetRewindableSectionPlaySpeed(speed: scnPlaySpeed): void
  GetRewindableSectionSpeedModifier(): number
  IsRewindableSectionPaused(): Bool
  ResetRewindableSection(resetSpeed: number, postResetPlayDirection: scnPlayDirection, postResetPlaySpeed: scnPlaySpeed): void
  IsRewindableSectionResetting(): Bool
  JumpRewindableSection(resetSpeed: number, jumpTime: number, postResetPlayDirection: scnPlayDirection, postResetPlaySpeed: scnPlaySpeed): Bool
  SetSceneSystemCameraControlEnabled(enabled: Bool, blendTime?: number): void
  GetSceneSystemCameraControlEnabled(): Bool
  GetSceneSystemCameraLastCameraPosition(): WorldPosition
  GetSceneSystemCameraLastCameraOrientation(): Quaternion
  AreEntitiesInDialogue(firstEntity: EntityID, secondEntity: EntityID): Bool
  IsEntityInDialogue(entity: EntityID): Bool
  IsEntityInScene(entity: EntityID): Bool
}

declare interface TriggerDelayedReactionEvent extends DelayedCrowdReactionEvent {

}

declare interface ScriptedReactionSystem extends ScriptableSystem {

  OnRegisterFleeingNPC(request: RegisterFleeingNPC): void
  OnUnregisterFleeingNPC(request: UnregisterFleeingNPC): void
  GetFleeingNPCsCount(): number
  GetFleeingNPCsCountInDistance(position: Vector4, distance: number): number
  GetRegisterTimeout(): number
  IsRegistered(runner: Entity): Bool
  OnRegisterPoliceCaller(request: RegisterPoliceCaller): void
  OnUnregisterPoliceCaller(request: UnregisterPoliceCaller): void
  IsCallerCloser(newCaller: Entity, crimePosition: Vector4): Bool
  IsCaller(entity: Entity): Bool
}

declare interface RegisterFleeingNPC extends ScriptableSystemRequest {

}

declare interface UnregisterFleeingNPC extends ScriptableSystemRequest {

}

declare interface RegisterPoliceCaller extends ScriptableSystemRequest {

}

declare interface UnregisterPoliceCaller extends ScriptableSystemRequest {

}

declare interface StalkEvent extends Event {

}

declare interface DisturbingComfortZone extends Event {

}

declare interface CheckComfortZoneEvent extends Event {

}

declare interface LookAtPartRequest {

}

declare interface RepeatLookatEvent extends Event {

}

declare interface AddInvestigatorEvent extends Event {

}

declare interface SetBodyPositionEvent extends Event {

}

declare interface PresetMapper_Record extends TweakDBRecord {

  MappingName(): string
  Preset(): ReactionPreset_Record
}

declare interface VisibleObject extends IScriptable {

}

declare interface VisibleObjectDetectionMultEvent extends Event {

}

declare interface SetAggressiveMask extends Event {

}

declare interface ReactionChangeRequestEvent extends Event {

}

declare interface CrosswalkEvent extends Event {

}

declare interface BumpEvent extends Event {

}

declare interface PlayerProximityStartEvent extends Event {

}

declare interface ProximityLookatEvent extends Event {

}

declare interface SwapPresetEvent extends Event {

}

declare interface DistrurbComfortZoneAggressiveEvent extends Event {

}

declare interface ResetNPCFinishedDelayedRequest extends ScriptableSystemRequest {

}

declare interface ResetNPCDefeatedDelayedRequest extends ScriptableSystemRequest {

}

declare interface ResetNPCIncapacitatedDelayedRequest extends ScriptableSystemRequest {

}

declare interface ResetNPCDownedDelayedRequest extends ScriptableSystemRequest {

}

declare interface TakedownActionDataTrackingRequest extends PlayerScriptableSystemRequest {

}

declare interface Trait_Record extends TweakDBRecord {

  Loc_desc_key(): string
  EnumComment(): string
  Loc_name_key(): string
  Requirement(): IPrereq_Record
  BaseTraitData(): TraitData_Record
  InfiniteTraitData(): TraitData_Record
  IconPath(): CName
  EnumName(): CName
  Type(): gamedataTraitType
}

declare interface StatPrereq extends IScriptablePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  Initialize(recordID: TweakDBID): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
  OnApplied(state: PrereqState, game: GameInstance, context: IScriptable): void
}

declare interface StatPrereqState extends PrereqState {

  StatUpdate(diff: number, total: number): void
}

declare interface StatPrereqListener extends ScriptStatsListener {

  OnStatChanged(ownerID: StatsObjectID, statType: gamedataStatType, diff: number, total: number): void
  RegisterState(state: PrereqState): void
}

declare interface TraitData_Record extends TweakDBRecord {

  Loc_name_key(): string
  Loc_desc_key(): string
  StatusEffect(): StatusEffect_Record
  DataPackage(): GameplayLogicPackage_Record
}

declare interface Perk_Record extends TweakDBRecord {

  Loc_desc_key(): string
  DisplayName(): string
  EnumComment(): string
  Loc_name_key(): string
  Utility(): PerkUtility_Record
  Levels(outList: PerkLevelData_Record[]): void
  GetLevelsCount(): number
  GetLevelsItem(index: number): PerkLevelData_Record
  LevelsContains(item: PerkLevelData_Record): Bool
  EnumName(): CName
  IconPath(): CName
  BinkPath(): ResRef
  Type(): gamedataPerkType
}

declare interface SPerk {

}

declare interface PerkLevelData_Record extends TweakDBRecord {

  Loc_name_key(): string
  Loc_desc_key(): string
  DataPackage(): GameplayLogicPackage_Record
  UiData(): PerkLevelUIData_Record
}

declare interface TelemetryLevelGained {

}

declare interface ProficiencyProgressEvent extends Event {

}

declare interface SExperiencePoints {

}

declare interface Curve_Record extends TweakDBRecord {

  CurveSetName(): CName
  CurveName(): CName
}

declare interface AddItemsEffector_Record extends Effector_Record {

  ItemsToAdd(outList: InventoryItem_Record[]): void
  GetItemsToAddCount(): number
  GetItemsToAddItem(index: number): InventoryItem_Record
  ItemsToAddContains(item: InventoryItem_Record): Bool
}

declare interface HideRecipeRequest extends PlayerScriptableSystemRequest {

}

declare interface InventoryItem_Record extends TweakDBRecord {

  EquipSlot_DEPRECATED(): AttachmentSlot_Record
  Item(): Item_Record
  ActiveForSlot(): AttachmentSlot_Record
  Quantity(): number
  ChanceInCrowd(): number
}

declare interface InvestedPerksPrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
  GetRequiredAmount(): number
  GetProficiencyType(): gamedataProficiencyType
}

declare interface StatCheckPrereqState extends PrereqState {

  GetStatToCheck(): gamedataStatType
  UpdateStatCheckPrereqData(obj: GameObject, newValue: number): void
}

declare interface DevelopmentCheckPrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
}

declare interface StatCheckPrereq extends DevelopmentCheckPrereq {

  GetStatToCheck(): gamedataStatType
  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
  Initialize(recordID: TweakDBID): void
}

declare interface ModifyStatCheckPrereq extends PlayerScriptableSystemRequest {

  Set(_owner: GameObject, reg: Bool, statToCheck: StatCheckPrereqState): void
}

declare interface SkillCheckPrereqState extends PrereqState {

  GetSkillToCheck(): gamedataProficiencyType
  UpdateSkillCheckPrereqData(obj: GameObject, newLevel: number): void
}

declare interface SkillCheckPrereq extends DevelopmentCheckPrereq {

  GetSkillToCheck(): gamedataProficiencyType
  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
  Initialize(recordID: TweakDBID): void
}

declare interface ModifySkillCheckPrereq extends PlayerScriptableSystemRequest {

  Set(_owner: GameObject, reg: Bool, checkState: SkillCheckPrereqState): void
}

declare interface ProgressionBuild_Record extends TweakDBRecord {

  EnumComment(): string
  PerkSet(): BuildPerkSet_Record
  ProficiencySet(): BuildProficiencySet_Record
  LifePath(): LifePath_Record
  AttributeSet(): BuildAttributeSet_Record
  CyberwareSet(): BuildCyberwareSet_Record
  EquipmentSet(): BuildEquipmentSet_Record
  InventorySet(): InventoryItemSet_Record
  CraftBook(): Craftable_Record
  StartingAttributes(outList: BuildAttribute_Record[]): void
  GetStartingAttributesCount(): number
  GetStartingAttributesItem(index: number): BuildAttribute_Record
  StartingAttributesContains(item: BuildAttribute_Record): Bool
  StartingCyberware(outList: BuildCyberware_Record[]): void
  GetStartingCyberwareCount(): number
  GetStartingCyberwareItem(index: number): BuildCyberware_Record
  StartingCyberwareContains(item: BuildCyberware_Record): Bool
  StartingProficiencies(outList: BuildProficiency_Record[]): void
  GetStartingProficienciesCount(): number
  GetStartingProficienciesItem(index: number): BuildProficiency_Record
  StartingProficienciesContains(item: BuildProficiency_Record): Bool
  StartingPerks(outList: BuildPerk_Record[]): void
  GetStartingPerksCount(): number
  GetStartingPerksItem(index: number): BuildPerk_Record
  StartingPerksContains(item: BuildPerk_Record): Bool
  InventoryLayout(outList: CPOItemCategoryBase_Record[]): void
  GetInventoryLayoutCount(): number
  GetInventoryLayoutItem(index: number): CPOItemCategoryBase_Record
  InventoryLayoutContains(item: CPOItemCategoryBase_Record): Bool
  StartingItems(outList: InventoryItem_Record[]): void
  GetStartingItemsCount(): number
  GetStartingItemsItem(index: number): InventoryItem_Record
  StartingItemsContains(item: InventoryItem_Record): Bool
  StartingEquipment(outList: BuildEquipment_Record[]): void
  GetStartingEquipmentCount(): number
  GetStartingEquipmentItem(index: number): BuildEquipment_Record
  StartingEquipmentContains(item: BuildEquipment_Record): Bool
  PerkSets(outList: BuildPerkSet_Record[]): void
  GetPerkSetsCount(): number
  GetPerkSetsItem(index: number): BuildPerkSet_Record
  PerkSetsContains(item: BuildPerkSet_Record): Bool
  EnumName(): CName
  RandomizeClothing(): Bool
  Type(): gamedataBuildType
}

declare interface ClearEquipmentRequest extends PlayerScriptableSystemRequest {

}

declare interface BuildAttributeSet_Record extends TweakDBRecord {

  Attributes(outList: BuildAttribute_Record[]): void
  GetAttributesCount(): number
  GetAttributesItem(index: number): BuildAttribute_Record
  AttributesContains(item: BuildAttribute_Record): Bool
}

declare interface BuildProficiencySet_Record extends TweakDBRecord {

  Proficiencies(outList: BuildProficiency_Record[]): void
  GetProficienciesCount(): number
  GetProficienciesItem(index: number): BuildProficiency_Record
  ProficienciesContains(item: BuildProficiency_Record): Bool
}

declare interface BuildPerkSet_Record extends TweakDBRecord {

  Perks(outList: BuildPerk_Record[]): void
  GetPerksCount(): number
  GetPerksItem(index: number): BuildPerk_Record
  PerksContains(item: BuildPerk_Record): Bool
}

declare interface InventoryItemSet_Record extends TweakDBRecord {

  Items(outList: InventoryItem_Record[]): void
  GetItemsCount(): number
  GetItemsItem(index: number): InventoryItem_Record
  ItemsContains(item: InventoryItem_Record): Bool
}

declare interface BuildEquipmentSet_Record extends TweakDBRecord {

  Equipment(outList: BuildEquipment_Record[]): void
  GetEquipmentCount(): number
  GetEquipmentItem(index: number): BuildEquipment_Record
  EquipmentContains(item: BuildEquipment_Record): Bool
}

declare interface BuildCyberwareSet_Record extends TweakDBRecord {

  Cyberware(outList: BuildCyberware_Record[]): void
  GetCyberwareCount(): number
  GetCyberwareItem(index: number): BuildCyberware_Record
  CyberwareContains(item: BuildCyberware_Record): Bool
}

declare interface BuildAttribute_Record extends TweakDBRecord {

  Attribute(): Attribute_Record
  Level(): number
}

declare interface BuildProficiency_Record extends TweakDBRecord {

  Proficiency(): Proficiency_Record
  Level(): number
}

declare interface BuildPerk_Record extends TweakDBRecord {

  Perk(): Perk_Record
  Level(): number
  IsActive(): Bool
}

declare interface BuildEquipment_Record extends TweakDBRecord {

  Equipment(): Item_Record
}

declare interface DrawItemRequest extends PlayerScriptableSystemRequest {

}

declare interface BuildCyberware_Record extends TweakDBRecord {

  Cyberware(): Item_Record
}

declare interface LifePath_Record extends TweakDBRecord {

  EnumComment(): string
  CaptionIcon(): ChoiceCaptionIconPart_Record
  DisplayName(): CName
  NewGameSpawnTag(): CName
  EnumName(): CName
  Type(): gamedataLifePath
}

declare interface CharacterCustomizationAttribute {

}

declare interface UpdatePlayerDevelopment extends PlayerScriptableSystemRequest {

  Set(_owner: GameObject): void
}

declare interface ProcessQueuedCombatExperience extends PlayerScriptableSystemRequest {

  Set(_owner: GameObject, entity: EntityID): void
}

declare interface AddExperience extends PlayerScriptableSystemRequest {

  Set(_owner: GameObject, expAmount: number, type: gamedataProficiencyType, isDebug: Bool): void
}

declare interface SetProficiencyLevel extends PlayerScriptableSystemRequest {

  Set(_owner: GameObject, level: number, type: gamedataProficiencyType, telemetryGainReason: telemetryLevelGainReason): void
}

declare interface BuyPerk extends PlayerScriptableSystemRequest {

  Set(_owner: GameObject, type: gamedataPerkType): void
}

declare interface PerkBoughtEvent extends Event {

}

declare interface IncreaseTraitLevel extends PlayerScriptableSystemRequest {

  Set(_owner: GameObject, traitType: gamedataTraitType): void
}

declare interface TraitBoughtEvent extends Event {

}

declare interface RemovePerk extends PlayerScriptableSystemRequest {

  Set(_owner: GameObject, type: gamedataPerkType): void
}

declare interface UnlockPerkArea extends PlayerScriptableSystemRequest {

  Set(_owner: GameObject, areaType: gamedataPerkArea): void
}

declare interface LockPerkArea extends PlayerScriptableSystemRequest {

  Set(_owner: GameObject, areaType: gamedataPerkArea): void
}

declare interface SetAttribute extends PlayerScriptableSystemRequest {

  Set(_owner: GameObject, level: number, type: gamedataStatType): void
}

declare interface BuyAttribute extends PlayerScriptableSystemRequest {

  Set(_owner: GameObject, type: gamedataStatType, grantAttributePoint?: Bool): void
}

declare interface AttributeBoughtEvent extends Event {

}

declare interface AddDevelopmentPoints extends PlayerScriptableSystemRequest {

  Set(_owner: GameObject, amount: number, type: gamedataDevelopmentPointType): void
}

declare interface SetProgressionBuild extends PlayerScriptableSystemRequest {

  Set(_owner: GameObject, build: gamedataBuildType): void
}

declare interface questSetProgressionBuildRequest extends PlayerScriptableSystemRequest {

}

declare interface gameSetProgressionBuildRequest extends PlayerScriptableSystemRequest {

}

declare interface questSetLifePathRequest extends PlayerScriptableSystemRequest {

}

declare interface VendorProgressionBasedStock_Record extends TweakDBRecord {

  Items(outList: VendorItem_Record[]): void
  GetItemsCount(): number
  GetItemsItem(index: number): VendorItem_Record
  ItemsContains(item: VendorItem_Record): Bool
}

declare interface SItemStackRequirementData {

}

declare interface UIVendorItemsSoldEvent extends Event {

}

declare interface SItemTransaction {

}

declare interface UIMenuNotificationEvent extends Event {

}

declare interface TelemetryInventoryItem {

}

declare interface UI_VendorDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface UIVendorItemsBoughtEvent extends Event {

}

declare interface VendingMachine extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  GetVendorID(): TweakDBID
  DeactivateDevice(): void
  TurnOffDevice(): void
  TurnOnDevice(): void
  OnAreaEnter(evt: AreaEnteredEvent): Bool
  GetProcessingSFX(): CName
  OnDispenceItemFromVendor(evt: DispenceItemFromVendor): Bool
  DelayVendingMachineEvent(time: number, isFree: Bool, isReady: Bool, itemID?: ItemID): void
  OnVendingMachineFinishedEvent(evt: VendingMachineFinishedEvent): Bool
  DispenseItems(request: DispenseRequest): void
  CreateDispenseRequest(shouldPay: Bool, item: ItemID): DispenseRequest
  BuyItems(request: BuyRequest): void
  CreateBuyRequest(itemID?: ItemID): BuyRequest
  PlayItemFall(): void
  RandomizePosition(): Vector4
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
  GetGlitchData(glitchState: EGlitchState): GlitchData
  HackedEffect(): void
  GetJunkItem(): ItemID
  DelayHackedEvent(time: number, itemID: ItemID): void
  OnDelayHackedEvent(evt: DelayHackedEvent): Bool
  AdvertGlitch(start: Bool, data: GlitchData): void
  SimpleGlitch(on: Bool): void
  OnQuestDispenseFreeItem(evt: DispenseFreeItem): Bool
  OnQuestDispenseSpecificItem(evt: DispenseFreeSpecificItem): Bool
  ToggleLights(on: Bool): void
  DeterminGameplayRole(): EGameplayRole
  InitializeScreenDefinition(): void
  GetBlackboardDef(): VendingMachineDeviceBlackboardDef
  CreateBlackboard(): void
  SendDataToUIBlackboard(status: PaymentStatus): void
  SendSoldOutToUIBlackboard(soldOut: Bool): void
  GetController(): VendingMachineController
  GetDevicePS(): VendingMachineControllerPS
  OnHitEvent(hit: gameHitEvent): Bool
  StartShortGlitch(): void
  OnStopShortGlitch(evt: StopShortGlitchEvent): Bool
}

declare interface VendorComponent extends ScriptableComponent {

  GetVendorID(): TweakDBID
  GetJunkItemIDs(): JunkItemRecord[]
  GetJunkCount(): number
  GetProcessingSFX(): CName
  GetItemFallSFX(): CName
}

declare interface VendingMachineController extends ScriptableDC {

  GetPS(): VendingMachineControllerPS
}

declare interface VendingMachineControllerPS extends ScriptableDeviceComponentPS {

  LogicReady(): void
  GetTimeToCompletePurchase(): number
  GetGlitchStartSFX(): CName
  GetGlitchStopSFX(): CName
  GetShopStock(): SItemStack[]
  GetHackedItemCount(): number
  IsSoldOut(): Bool
  ActionDispenceItemFromVendor(item: ItemID, price: number): DispenceItemFromVendor
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  PushShopStockActions(actions: DeviceAction[], context: GetActionsContext): void
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(outActions: DeviceAction[], context: GetActionsContext): void
  GetQuestActions(outActions: DeviceAction[], context: GetActionsContext): void
  OnDispenceItemFromVendor(evt: DispenceItemFromVendor): EntityNotificationType
  OnQuickHackDistraction(evt: QuickHackDistraction): EntityNotificationType
  SetIsReady(value: Bool): void
  GetBlackboardDef(): VendingMachineDeviceBlackboardDef
}

declare interface VendingMachineSetup {

}

declare interface VendingMachineSFX {

}

declare interface DispenceItemFromVendor extends ActionBool {

  SetProperties(iteID: ItemID, price?: number, texture?: CName): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  CanPay(user?: GameObject): Bool
  GetItemID(): ItemID
  GetPrice(): number
  GetAtlasTexture(): CName
  CreateActionWidgetPackage(actions?: DeviceAction[]): void
  GetInkWidgetLibraryID(): CName
  GetInkWidgetTweakDBID(): TweakDBID
}

declare interface VendingMachineFinishedEvent extends Event {

}

declare interface VendingMachineDeviceBlackboardDef extends DeviceBaseBlackboardDef {

}

declare interface DispenseRequest extends MarketSystemRequest {

}

declare interface TransactionRequest extends MarketSystemRequest {

}

declare interface VendorBoughtItemEvent extends Event {

}

declare interface TransactionRequestData {

}

declare interface BuyRequest extends TransactionRequest {

}

declare interface GlitchData {

}

declare interface JunkItemRecord {

}

declare interface DelayHackedEvent extends Event {

}

declare interface DispenseFreeSpecificItem extends Event {

  GetFriendlyDescription(): string
}

declare interface StopShortGlitchEvent extends Event {

}

declare interface DropPoint extends BasicDistractionDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  OnGameAttached(): Bool
  OnDetach(): Bool
  DeactivateDevice(): void
  ActivateDevice(): void
  CutPower(): void
  TurnOffDevice(): void
  TurnOnDevice(): void
  TurnOffScreen(): void
  TurnOnScreen(): void
  RegisterDropPointMappinInSystem(): void
  OnUpdateDropPointEvent(evt: UpdateDropPointEvent): Bool
  GetDropPointSystem(): DropPointSystem
  GetDevicePS(): DropPointControllerPS
  GetController(): DropPointController
  DeterminGameplayRole(): EGameplayRole
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
  OnHitEvent(hit: gameHitEvent): Bool
  StartShortGlitch(): void
  OnStopShortGlitch(evt: StopShortGlitchEvent): Bool
  IsDropPoint(): Bool
  IsMappinRegistered(): Bool
  RegisterMappin(): void
  UnregisterMappin(): void
  GetMappinSystem(): MappinSystem
}

declare interface DropPointController extends ScriptableDC {

  GetPS(): DropPointControllerPS
}

declare interface DropPointControllerPS extends BasicDistractionDeviceControllerPS {

  IsRewardCollected(): Bool
  GetVendorRecordPath(): string
  ActionDepositQuestItems(executor: GameObject): DepositQuestItems
  OnDepositQuestItems(evt: DepositQuestItems): EntityNotificationType
  ActionOpenVendorUI(executor: GameObject): OpenVendorUI
  OnOpenVendorUI(evt: OpenVendorUI): EntityNotificationType
  ActionCollectDropPointRewards(executor: GameObject): CollectDropPointRewards
  OnCollectDropPointRewards(evt: CollectDropPointRewards): EntityNotificationType
  OnReserveItemToThisDropPoint(evt: ReserveItemToThisDropPoint): EntityNotificationType
  OnAddItemForPlayerToPickUp(evt: AddItemForPlayerToPickUp): EntityNotificationType
  GetActions(outActions: DeviceAction[], context: GetActionsContext): Bool
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface DepositQuestItems extends ActionBool {

  SetProperties(): void
}

declare interface DropPointSystem extends ScriptableSystem {

  OnAttach(): void
  OnRestored(saveVersion: number, gameVersion: number): void
  CanDeposit(record: TweakDBID, dropPoint: PersistentID): Bool
  IsCollected(record: TweakDBID): Bool
  IsActive(record: TweakDBID): Bool
  HasItemsThatCanBeDeposited(user: GameObject, dropPoint: PersistentID): Bool
  HasMeaningfulItems(items: gameItemData[], dropPoint: PersistentID): Bool
  Is(record: TweakDBID, status: DropPointPackageStatus): Bool
  UpdateRecord(package: DropPointPackage, status: DropPointPackageStatus, holder: PersistentID): void
  CreatePackage(request: DropPointRequest): void
  OnDropPointRequest(dropPointRequest: DropPointRequest): void
  UpdatePackage(dropPointRequest: DropPointRequest): void
  OnToggleDropPointSystemRequest(request: ToggleDropPointSystemRequest): void
  OnRegisterDropPointMappinRequest(request: RegisterDropPointMappinRequest): void
  OnUnregisterDropPointMappinRequest(request: UnregisterDropPointMappinRequest): void
  RestoreDropPointMappins(informDevice?: Bool): void
  HideDropPointMappins(informDevice?: Bool): void
  RegisterDropPointMappin(data: DropPointMappinRegistrationData): void
  UnregisterDropPointMappin(data: DropPointMappinRegistrationData): void
  HasMappin(ownerID: EntityID): Bool
  GetMappinData(ownerID: EntityID): DropPointMappinRegistrationData
  GetMappinSystem(): MappinSystem
  IsEnabled(): Bool
}

declare interface DropPointMappinRegistrationData extends IScriptable {

  Initalize(ownerID: EntityID, position: Vector4): void
  SetMappinID(id: NewMappinID): void
  SetTrackingAlternativeMappinID(id: NewMappinID): void
  GetOwnerID(): EntityID
  GetPosition(): Vector4
  GetMappinID(): NewMappinID
  GetTrackingAlternativeMappinID(): NewMappinID
}

declare interface UpdateDropPointEvent extends Event {

}

declare interface DropPointPackage extends IScriptable {

  SetStatus(newStatus: DropPointPackageStatus): void
  SetRecord(record: TweakDBID): void
  SetHolder(_holder: PersistentID): void
  Status(): DropPointPackageStatus
  Record(): TweakDBID
  Holder(): PersistentID
}

declare interface DropPointRequest extends ScriptableSystemRequest {

  CreateRequest(_record: TweakDBID, _status: DropPointPackageStatus, _holder?: PersistentID): void
  Record(): TweakDBID
  Status(): DropPointPackageStatus
  Holder(): PersistentID
  GetFriendlyDescription(): string
}

declare interface ToggleDropPointSystemRequest extends ScriptableSystemRequest {

  GetFriendlyDescription(): string
}

declare interface RegisterDropPointMappinRequest extends ScriptableSystemRequest {

}

declare interface UnregisterDropPointMappinRequest extends ScriptableSystemRequest {

}

declare interface OpenVendorUI extends ActionBool {

  SetProperties(): void
}

declare interface VendorPanelData extends IScriptable {

}

declare interface VendorData {

}

declare interface CollectDropPointRewards extends ActionBool {

  SetProperties(): void
}

declare interface ReserveItemToThisDropPoint extends ScriptableDeviceAction {

  GetFriendlyDescription(): string
}

declare interface AddItemForPlayerToPickUp extends ScriptableDeviceAction {

  GetFriendlyDescription(): string
}

declare interface AddItemToVendorRequest extends ScriptableSystemRequest {

  GetFriendlyDescription(): string
}

declare interface SetVendorPriceMultiplierRequest extends ScriptableSystemRequest {

  GetFriendlyDescription(): string
}

declare interface AttachmentSlot_Record extends TweakDBRecord {

  EntitySlotName(): string
  LocalizedName(): string
  TagsForActiveItemCycling(): CName[]
  GetTagsForActiveItemCyclingCount(): number
  GetTagsForActiveItemCyclingItem(index: number): CName
  TagsForActiveItemCyclingContains(item: CName): Bool
  CustomOffset(): Vector3
}

declare interface SlotItemPartListElement_Record extends TweakDBRecord {

  OptionalProbabilityCurveName(): string
  Slot(): AttachmentSlot_Record
  ItemPartList(outList: ItemPartListElement_Record[]): void
  GetItemPartListCount(): number
  GetItemPartListItem(index: number): ItemPartListElement_Record
  ItemPartListContains(item: ItemPartListElement_Record): Bool
}

declare interface ItemPartListElement_Record extends TweakDBRecord {

  Item(): Item_Record
  Weight(): number
}

declare interface InventoryTooltipData_QuickhackData {

}

declare interface TriggerAttackEffector_Record extends Effector_Record {

  AttackRecord(): Attack_Record
}

declare interface DamageEffectUIEntry extends IScriptable {

}

declare interface InventoryTooltiData_GrenadeData extends IScriptable {

}

declare interface InventoryTooltiData_GrenadeDamageData extends IScriptable {

}

declare interface MessageTooltipData extends ATooltipData {

}

declare interface MinimalItemTooltipModData extends IScriptable {

}

declare interface AttachmentSlotCacheData {

}

declare interface MinimalItemTooltipModAttachmentData extends MinimalItemTooltipModData {

}

declare interface IdentifiedWrappedTooltipData extends ATooltipData {

}

declare interface AbilityData {

}

declare interface ClearItemAppearanceEvent extends Event {

}

declare interface HotkeyAssignmentRequest extends PlayerScriptableSystemRequest {

  ItemID(): ItemID
  GetHotkey(): EHotkey
  Owner(): GameObject
  GetRequestType(): EHotkeyRequestType
  /** @noSelf **/
  Construct(itemID: ItemID, hotkey: EHotkey, owner: GameObject, requestType: EHotkeyRequestType): HotkeyAssignmentRequest
  IsValid(): Bool
}

declare interface AssignHotkeyIfEmptySlot extends PlayerScriptableSystemRequest {

  /** @noSelf **/
  Construct(itemID: ItemID, owner: GameObject): AssignHotkeyIfEmptySlot
  ItemID(): ItemID
  Owner(): GameObject
  IsValid(): Bool
}

declare interface SEquipmentSet {

}

declare interface SItemInfo {

}

declare interface AssignToCyberwareWheelRequest extends PlayerScriptableSystemRequest {

}

declare interface UnequipItemsRequest extends PlayerScriptableSystemRequest {

}

declare interface UnequipByTDBIDRequest extends PlayerScriptableSystemRequest {

}

declare interface ThrowEquipmentRequest extends PlayerScriptableSystemRequest {

}

declare interface SaveEquipmentSetRequest extends PlayerScriptableSystemRequest {

}

declare interface LoadEquipmentSetRequest extends PlayerScriptableSystemRequest {

}

declare interface DeleteEquipmentSetRequest extends PlayerScriptableSystemRequest {

}

declare interface CheckRemovedItemWithSlotActiveItem extends PlayerScriptableSystemRequest {

}

declare interface SynchronizeAttachmentSlotRequest extends PlayerScriptableSystemRequest {

}

declare interface SetActiveItemInEquipmentArea extends PlayerScriptableSystemRequest {

}

declare interface DrawItemByContextRequest extends PlayerScriptableSystemRequest {

}

declare interface UnequipByContextRequest extends PlayerScriptableSystemRequest {

}

declare interface gameCombinedStatModifierData extends gameStatModifierData {

}

declare interface CraftItemRequest extends PlayerScriptableSystemRequest {

}

declare interface UI_CraftingDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface DisassemblingResult_Record extends TweakDBRecord {

  Ingredients(outList: RecipeElement_Record[]): void
  GetIngredientsCount(): number
  GetIngredientsItem(index: number): RecipeElement_Record
  IngredientsContains(item: RecipeElement_Record): Bool
}

declare interface ItemAttachments {

  /** @noSelf **/
  Create(itemID: ItemID, attachmentSlotID: TweakDBID): ItemAttachments
}

declare interface UpgradeItemRequest extends PlayerScriptableSystemRequest {

}

declare interface ShowRecipeRequest extends PlayerScriptableSystemRequest {

}

declare interface NCPDJobDoneEvent extends Event {

}

declare interface Cooldown_Record extends TweakDBRecord {

  Type(): CooldownType_Record
  Tags(): CName[]
  GetTagsCount(): number
  GetTagsItem(index: number): CName
  TagsContains(item: CName): Bool
  Duration(): number
  Modifiable(): Bool
}

declare interface CooldownStorageID {

}

declare interface ActionCooldownEvent extends Event {

}

declare interface CooldownPackageDelayIDs {

}

declare interface PlayerPuppetPS extends ScriptedPuppetPS {

  HasAutoReveal(): Bool
  SetAutoReveal(value: Bool): void
  OnStoreMinigameProgram(evt: StoreMiniGameProgramEvent): EntityNotificationType
  AddMinigameProgram(program: MinigameProgramData): void
  RemoveMinigameProgram(program: MinigameProgramData): void
  RemoveProgram(id: TweakDBID): void
  HasProgram(id: TweakDBID): Bool
  UpgradePrograms(id: TweakDBID): void
  DecideProgramToAdd(id: TweakDBID): MinigameProgramData
  GetMinigameBlackboard(): IBlackboard
  GetMinigamePrograms(): MinigameProgramData[]
  HasProgram(id: TweakDBID, programs: MinigameProgramData[]): Bool
}

declare interface StoreMiniGameProgramEvent extends Event {

}

declare interface MinigameProgramData {

}

declare interface VehicleCameraManagerComponent extends GameComponent {

  GetManagerHandle(): VehicleCameraManager
}

declare interface QuickSlotsManager extends ScriptableComponent {

  OnGameAttach(): void
  OnVehPlayerStateDataChanged(vehPlayerStateData: Variant): void
  GetPS(): QuickSlotsManagerPS
  OnQuickSlotButtonTap(evt: QuickSlotButtonTap): Bool
  OnCallAction(evt: CallAction): Bool
  OnQuickSlotKeyboardTap(evt: QuickSlotKeyboardTap): Bool
  OnQuickSlotButtonHoldStartEvent(evt: QuickSlotButtonHoldStartEvent): Bool
  SetWheelItem(currentWheelItem: QuickSlotCommand): void
  GetWheelItem(currentWheelItem: QuickSlotCommand): QuickSlotCommand
  GetQuickSlotCommandByDpadSlot(wheelType: EDPadSlot): QuickSlotCommand
  IsSelectingCombatItemPrevented(): Bool
  IsSelectingCombatGadgetPrevented(): Bool
  GetDPadIndex(direction: EDPadSlot): number
  TryExecuteCommand(currentCommand: QuickSlotCommand): Bool
  IsDPadActionAvaliable(direction: EDPadSlot): Bool
  IsDPadActionAvaliable(actionIndex: number): Bool
  GetDPadCommandAtSlot(argIndex: number): QuickSlotCommand
  /** @noSelf **/
  GetMaxKeyboardItems(): number
  GetNumberOfItemsPerWheel(): number
  IsKeyboardActionAvaliable(actionIndex: number): Bool
  GetKeyboardCommandAtSlot(argIndex: number): QuickSlotCommand
  CreateQuickSlotCommand(actionType: QuickSlotActionType, imageAtlasPath: CName, actionName: CName, maxTier: number, vehicleState: number, isLocked: Bool, isSlotUnlocked: Bool, intData?: number, argTitle?: string, argType?: string): QuickSlotCommand
  CreateQuickSlotItemCommand(itemID: ItemID, argActionType: QuickSlotActionType, argIcon: CName, argTitle: string, argType: string, argDesc: string): QuickSlotCommand
  GetActionData(): QuickSlotCommand
  InitializeCommandsData(): void
  GetWheelCommands(direction: EDPadSlot): QuickSlotCommand[]
  GetVehicleWheelCommands(direction: EDPadSlot): QuickSlotCommand[]
  GetVehicleObject(): VehicleObject
  GetVehicleInsideWheel(wheel: QuickSlotCommand[]): void
  GetRPGWheel(rpgWheel: QuickSlotCommand[]): void
  GetConsumablesWheel(wheel: QuickSlotCommand[]): void
  GetCyberwareWheel(wheel: QuickSlotCommand[]): void
  GetGadgetsWheel(wheel: QuickSlotCommand[]): void
  GetQuickWheel(wheel: QuickSlotCommand[]): void
  GetLauncher(wheel: QuickSlotCommand[]): void
  ChooseWeaponsWheel(weaponsWheel: QuickSlotCommand[]): void
  GetRegularWeaponsWheel(weaponsWheel: QuickSlotCommand[]): void
  GetEmptyWheel(weaponsWheel: QuickSlotCommand[]): void
  GetFistFightOnlyWeaponsWheel(weaponsWheel: QuickSlotCommand[]): void
  GetMeleeOnlyWeaponsWheel(weaponsWheel: QuickSlotCommand[]): void
  GetOneHandedOnlyOnlyWeaponsWheel(weaponsWheel: QuickSlotCommand[]): void
  GetFirearmsOnlyWeaponsWheel(weaponsWheel: QuickSlotCommand[]): void
  GetWeaponsWheel(weaponsWheel: QuickSlotCommand[], allowedItemTypes?: gamedataItemType[], allowedTag?: CName): void
  GetVehicleWheel(vehicleWheel: QuickSlotCommand[]): void
  FindTempVehicleIcon(vehicle: PlayerVehicle): CName
  PushBackCommands(area: gamedataEquipmentArea, commandList: QuickSlotCommand[], allowedItemTypes?: gamedataItemType[], allowedTag?: CName): void
  GetEquipAreaCommands(equipArea: gamedataEquipmentArea, allowedItemTypes?: gamedataItemType[], allowedTag?: CName): QuickSlotCommand[]
  GetQuickSlotItemTypeByEquipArea(eqArea: gamedataEquipmentArea): QuickSlotItemType
  ChooseWheelItem(direction: EDPadSlot, wheelItem: QuickSlotCommand): Bool
  /** @noSelf **/
  CreateBlankWheelCommand(): QuickSlotCommand
  ExecuteCommand(command: QuickSlotCommand): void
  SelectItem(command: QuickSlotCommand): void
  ToggleFireMode(): void
  HideWeapon(): void
  UsePhone(): void
  SetActiveVehicle(vehicleData: PlayerVehicle): void
  SummonVehicle(): void
  ApplyQuickHack(command: QuickSlotCommand): void
  ToggleSummonMode(): void
  SendRadioEvent(toggle: Bool, setStation: Bool, stationNumer: number): void
  RequestWeaponEquip(itemId: ItemID): void
  RequestEquipFists(): void
  AssignItem(itemId: ItemID): void
  AssignItemToCyberwareSlot(itemId: ItemID, slotIndex: number): void
  IsPhoneAvailable(): Bool
  GetAssignedQuickSlotCommand(itemType: QuickSlotItemType): QuickSlotCommand
  GetAssignedItemIDByType(itemType: QuickSlotItemType): ItemID
  GetGamedataEquipmentAreaFromItemType(itemType: QuickSlotItemType): gamedataEquipmentArea
  CreateEmptyQuickSlotCommand(): QuickSlotCommand
}

declare interface QuickSlotCommand {

  /** @noSelf **/
  IsEmpty(self: QuickSlotCommand): Bool
}

declare interface VehEntityPlayerStateData {

}

declare interface QuickSlotsManagerPS extends GameComponentPS {

  SetActiveType(type: gamedataVehicleType): void
  GetActiveType(): gamedataVehicleType
}

declare interface QuickSlotButtonTap extends Event {

}

declare interface UsePhoneRequest extends ScriptableSystemRequest {

}

declare interface PlayerVehicle {

}

declare interface VehicleSystem extends IVehicleSystem {

  SpawnPlayerVehicle(vehicleType?: gamedataVehicleType): void
  ToggleSummonMode(): void
  DespawnPlayerVehicle(vehicleID: GarageVehicleID): void
  EnablePlayerVehicle(vehicle: string, enable: Bool, despawnIfDisabling?: Bool): Bool
  EnableAllPlayerVehicles(): void
  GetPlayerVehicles(vehicles: PlayerVehicle[]): void
  GetPlayerUnlockedVehicles(unlockedVehicles: PlayerVehicle[]): void
  TogglePlayerActiveVehicle(vehicleID: GarageVehicleID, vehicleType: gamedataVehicleType, enable: Bool): void
  EnablePlayerVehicleCollision(enable: Bool): void
  GetVehicleRestrictions(): CName[]
  OnVehicleSystemAttach(): void
  /** @noSelf **/
  IsSummoningVehiclesRestricted(game: GameInstance): Bool
}

declare interface DPADActionPerformed extends Event {

}

declare interface QuickSlotCommandUsed extends Event {

}

declare interface QuickSlotUIStructure {

}

declare interface CallAction extends Event {

}

declare interface QuickSlotKeyboardTap extends Event {

}

declare interface QuickSlotButtonHoldStartEvent extends Event {

}

declare interface VehicleModel_Record extends TweakDBRecord {

  EnumName(): string
  EnumComment(): string
  Type(): gamedataVehicleModel
}

declare interface GameplaySettingsDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface QuickWheelStartUIStructure {

}

declare interface PhoneSystem extends ScriptableSystem {

  IsShowingMessage(): Bool
  OnSetPhoneStatus(request: questSetPhoneStatusRequest): void
  OnTriggerCall(request: questTriggerCallRequest): void
  TriggerCall(callMode: questPhoneCallMode, isAudio: Bool, contactName: CName, isPlayerCalling: Bool, callPhase: questPhoneCallPhase): void
  OnPickupPhone(request: PickupPhoneRequest): void
  OnPhoneTimeoutRequest(request: PhoneTimeoutRequest): void
  OnUsePhone(request: UsePhoneRequest): void
  ToggleContacts(open: Bool): void
  OnContactsStateChanged(newState: Bool): void
  OnTalkingTriggerRequest(request: TalkingTriggerRequest): void
  OnMinimizeCallRequest(request: questMinimizeCallRequest): void
  SetPhoneFact(isPlayerCalling: Bool, contactName: CName, state: questPhoneTalkingState): void
  OnAttach(): void
  OnDetach(): void
  IsPhoneAvailable(): Bool
  GetPhoneCallFactName(contactName1: CName, contactName2: CName): string
}

declare interface UI_ComDeviceDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface questSetPhoneStatusRequest extends ScriptableSystemRequest {

}

declare interface questTriggerCallRequest extends ScriptableSystemRequest {

}

declare interface PhoneCallInformation {

}

declare interface PickupPhoneRequest extends ScriptableSystemRequest {

}

declare interface UIInGameNotificationRemoveEvent extends Event {

}

declare interface TalkingTriggerRequest extends ScriptableSystemRequest {

}

declare interface questMinimizeCallRequest extends ScriptableSystemRequest {

}

declare interface InspectionComponent extends ScriptableComponent {

  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnInspectionEvent(evt: InspectionEvent): Bool
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
  RotateInInspection(deltaX: number, deltaY: number): void
  RotateInInspectionByMouse(deltaX: number, deltaY: number): void
  ProcessZoom(val: number): void
  ToggleInspection(enabled: Bool): void
  OnInspectTrigger(evt: InspectionTriggerEvent): Bool
  OnPreScanEvent(evt: ScanEvent): Bool
  DisplayScanningUI(show: Bool): void
  ScanInspectableItem(): void
  OnUpdate(deltaTime: number): void
  SetObjectOffsets(offset: number, adsOffset: number): void
  SetTimeToScan(timeVal: number): void
  SetInputListening(enabled: Bool): void
  ResetScanningState(): void
  ExitInspect(): void
  ToggleExitInspect(): void
  LootInspectItem(): void
  ToggleInspectObject(show: Bool): void
  PlaceItemInInspectSlot(itemTDBIDString: string, offset: number): void
  CleanupInspectSlot(wasLooted: Bool): void
  EmptyInspectSlot(): void
  RemoveInspectedItem(): void
  ResetAnimFeature(): void
  SetInspectionStage(stage: number): void
  GetIsPlayerInspecting(): Bool
  SetIsPlayerInspecting(enabled: Bool): void
  GetLastInspectedObjectID(): EntityID
  SetLastInspectedObjectID(newID: EntityID): void
  RememberInspectedObjID(id: EntityID): void
}

declare interface AnimFeature_Inspection extends AnimFeature {

}

declare interface InspectionEvent extends Event {

}

declare interface ObjectInspectEvent extends Event {

}

declare interface SetInspectStateEvent extends Event {

}

declare interface TEMP_ScanningEvent extends Event {

}

declare interface InspectionTriggerEvent extends Event {

}

declare interface ScanEvent extends Event {

}

declare interface PlayerPhone extends ScriptableComponent {

  OnGameAttach(): void
  OnGameDetach(): void
}

declare interface PlayerVisionModeController extends IScriptable {

  OnEnablePhotoMode(enable: Bool): void
  RegisterOwner(owner: GameObject): void
  UnregisterOwner(): void
  OnInvalidateActiveState(evt: PlayerVisionModeControllerInvalidateEvent): void
  InitInputActionsNames(): void
  RegisterInputListeners(): void
  InitPlayerVisionModeControllerRefreshPolicy(): void
  InitBlackboardIds(): void
  InitBlackboardValuesIds(): void
  InitBlackboardFunctions(): void
  RegisterBlackboardListeners(): void
  UnregisterInputListeners(): void
  UnregisterBlackboardListeners(): void
  VerifyActivation(): void
  ActivateVisionMode(): void
  DeactivateVisionMode(): void
  ProcessFlagsRefreshPolicy(): void
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
  OnKerenzikovChanged(value: number): Bool
  OnRestrictedSceneChanged(value: number): Bool
  OnDeadChanged(value: number): Bool
  OnTakedownChanged(value: number): Bool
  OnDeviceTakeoverChanged(value: EntityID): Bool
  OnBraindanceFPPChanged(value: Bool): Bool
  OnBraindanceActiveChanged(value: Bool): Bool
  OnVeryHardLandingChanged(value: number): Bool
  OnNoScanningRestrictionChanged(value: Variant): Bool
  InvalidateActivationState(active: Bool): void
  ApplyFocusModeLocomotionRestriction(): void
  SetBlackboardIntVariable(definition: BlackboardDefinition, id: BlackboardID_Int, value: number): void
  SetFocusModeAnimFeature(newState: Bool): void
  SetupLockToggleInput(): void
  SetupLockHoldInput(): void
  SendPSMBoolParameter(id: CName, value: Bool, aspect: gamestateMachineParameterAspect): void
  GetVisionAimSnapParams(): AimRequest
  RemoveFocusModeLocomotionRestriction(): void
  UpdateAimAssist(): void
  HasMeleeWeaponEquipped(): Bool
}

declare interface PlayerVisionModeControllerActiveFlags {

}

declare interface PlayerVisionModeControllerBBIds {

}

declare interface PlayerVisionModeControllerBBValuesIds {

}

declare interface PlayerVisionModeControllerBBListeners {

}

declare interface PlayerVisionModeControllerInputActionsNames {

}

declare interface PlayerVisionModeControllerRefreshPolicy {

}

declare interface PlayerVisionModeControllerBlackboardListenersFunctions {

}

declare interface PlayerVisionModeControllerOtherVars {

}

declare interface PlayerVisionModeControllerInvalidateEvent extends Event {

}

declare interface AimRequest {

}

declare interface AnimFeature_FocusMode extends AnimFeature {

}

declare interface PlayerVisionModeControllerInputActiveFlags {

}

declare interface AimAssistSettingsListener extends ConfigVarListener {

  Initialize(ctrl: PlayerPuppet): void
  OnVarModified(groupPath: CName, varName: CName, varType: ConfigVarType, reason: ConfigChangeReason): void
  GetAimAssistLevel(): EAimAssistLevel
  GetAimAssistMeleeLevel(): EAimAssistLevel
}

declare interface ConfigVarListInt extends ConfigVar {

  GetValueFor(index: number): number
  GetValue(): number
  GetDefaultValue(): number
  GetValues(): number[]
  GetIndexFor(value: number): number
  GetIndex(): number
  GetDefaultIndex(): number
  SetIndex(index: number): void
  GetDisplayValue(index: number): CName
}

declare interface AimAssistSettings_Record extends TweakDBRecord {

  Off(): AimAssistConfigPreset_Record
  Light(): AimAssistConfigPreset_Record
  Standard(): AimAssistConfigPreset_Record
}

declare interface PlayerAttachRequest extends PlayerScriptableSystemRequest {

}

declare interface DEBUG_DamageInputReceiver extends IScriptable {

  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
}

declare interface CPOMissionDataState extends IScriptable {

  OnDamage(puppet: PlayerPuppet, healthDamage: Bool): void
  UpdateSounds(puppet: PlayerPuppet): void
}

declare interface CPOMissionDataUpdateEvent extends Event {

}

declare interface MemoryListener extends CustomValueStatPoolsListener {

  OnStatPoolValueChanged(oldValue: number, newValue: number, percToPoints: number): void
}

declare interface UIGameDataDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface VisibilityStatListener extends ScriptStatsListener {

  OnStatChanged(ownerID: StatsObjectID, statType: gamedataStatType, diff: number, total: number): void
}

declare interface UpdateVisibilityModifierEvent extends Event {

}

declare interface SecondHeartStatListener extends ScriptStatsListener {

  OnStatChanged(ownerID: StatsObjectID, statType: gamedataStatType, diff: number, total: number): void
}

declare interface HealthStatListener extends ScriptStatPoolsListener {

  OnStatPoolValueChanged(oldValue: number, newValue: number, percToPoints: number): void
}

declare interface HealthUpdateEvent extends Event {

}

declare interface OxygenStatListener extends CustomValueStatPoolsListener {

  OnStatPoolValueReached(oldValue: number, newValue: number, percToPoints: number): Bool
  OnStatPoolMinValueReached(value: number): Bool
  OnStatPoolValueChanged(oldValue: number, newValue: number, percToPoints: number): void
  IsOutOfOxygen(b: Bool): void
  TestOxygenLevel(oldValue: number, newValue: number, percToPoints: number): void
  CriticalOxygenLevel(b: Bool): void
}

declare interface AutoRevealStatListener extends ScriptStatsListener {

  OnStatChanged(ownerID: StatsObjectID, statType: gamedataStatType, diff: number, total: number): void
}

declare interface UpdateAutoRevealStatEvent extends Event {

}

declare interface ArmorStatListener extends ScriptStatPoolsListener {

  OnStatPoolValueChanged(oldValue: number, newValue: number, percToPoints: number): void
}

declare interface AnimInputSetterBool extends AnimInputSetter {

}

declare interface AnimFeature_CameraGameplay extends AnimFeature {

}

declare interface AnimFeature_CameraBodyOffset extends AnimFeature {

}

declare interface VisibleObjectSecondaryPositionEvent extends Event {

}

declare interface VisibleObjectDistanceEvent extends Event {

}

declare interface VisibleObjectetSecondaryDistanceEvent extends Event {

}

declare interface EndGracePeriodAfterSpawn extends Event {

}

declare interface WeaponEquipEvent extends Event {

}

declare interface InventoryManager extends IInventoryManager {

  AddToSlot(slotIdx: number, itemID: ItemID): void
  ClearSlot(slotIdx: number): void
  AddEquipmentStateFlag(equipmentFlag: gameEEquipmentManagerState): void
  RemoveEquipmentStateFlag(equipmentFlag: gameEEquipmentManagerState): void
  HasEquipmentStateFlag(equipmentFlag: gameEEquipmentManagerState): Bool
  CreateItemData(itemID: ItemID, owner: GameObject): gameItemData
}

declare interface UI_StealthDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface InterestingFactsListenersFunctions {

}

declare interface InterestingFactsListenersIds {

}

declare interface PlayerDetachRequest extends PlayerScriptableSystemRequest {

}

declare interface MultiplayerGiveChoiceTokenEvent extends Event {

  RandomizePlayer(player: GameObject): GameObject
  GiveChoiceToken(player: PlayerPuppet): void
  /** @noSelf **/
  CreateEvent(compatibleDeviceName: CName, timeout: number): MultiplayerGiveChoiceTokenEvent
  /** @noSelf **/
  CreateDelayedEvent(player: GameObject, compatibleDeviceName: CName, timeout: number): DelayID
}

declare interface CPOMissionDataTransferred extends Event {

}

declare interface PlayerPerkDataDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface ClearBeingNoticedBB extends Event {

}

declare interface PingSystem extends gameIPingSystem {

  TriggerPing(instigator: GameObject): void
  /** @noSelf **/
  IsPingSystemEnabled(): Bool
}

declare interface LootData {

}

declare interface BeingTargetByLaserSightUpdateEvent extends Event {

}

declare interface bbUIInteractionData {

  /** @noSelf **/
  HasAnyInteraction(self: bbUIInteractionData): Bool
}

declare interface RequestStatsBB extends PlayerScriptableSystemRequest {

  Set(_owner: GameObject): void
}

declare interface RequestBuyAttribute extends Event {

}

declare interface PartAddedToSlotEvent extends Event {

}

declare interface PartRemovedFromSlotEvent extends Event {

}

declare interface ItemChangedEvent extends Event {

}

declare interface HotkeyRefreshRequest extends PlayerScriptableSystemRequest {

}

declare interface PartRemovedEvent extends Event {

}

declare interface ItemAddedEvent extends Event {

}

declare interface UI_ItemLogDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface AuthorisationNotificationEvent extends Event {

}

declare interface ItemBeingRemovedEvent extends Event {

}

declare interface AIFollowerCommand extends AICommand {

  IsCombatCommand(): Bool
}

declare interface AIFollowerTakedownCommand extends AIFollowerCommand {

}

declare interface OrderTakedownEvent extends Event {

}

declare interface AIFollowerDeviceCommand extends AIFollowerCommand {

}

declare interface SpiderbotOrderDeviceEvent extends Event {

}

declare interface AnimFeature_PlayerHitReactionData extends AnimFeature {

}

declare interface TogglePlayerFlashlightEvent extends Event {

}

declare interface KatanaMagFieldHitDelayEvent extends Event {

}

declare interface ResetMagFieldHitsEvent extends Event {

}

declare interface AnimFeature_BulletBend extends AnimFeature {

}

declare interface ResetTickEvent extends TickableEvent {

}

declare interface CleanUpTimeDilationEvent extends Event {

}

declare interface PhotoModeDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface RewardEvent extends Event {

}

declare interface entAppearanceEvent extends Event {

}

declare interface gameuiPersonalLinkSwitcherEvent extends Event {

}

declare interface HeavyFootstepEvent extends Event {

}

declare interface PlayerCoverStatusChangedEvent extends Event {

}

declare interface PlayerCoverHelper extends IScriptable {

  /** @noSelf **/
  GetBlockCoverStatusEffectID(): TweakDBID
  /** @noSelf **/
  BlockCoverVisibilityReduction(owner: GameObject): void
}

declare interface inkMenuInstance_SpawnEvent extends Event {

  Init(eventName: CName, userData?: inkUserData): void
}

declare interface inkMenuInstance_SpawnAddressedEvent extends inkMenuInstance_SpawnEvent {

  Init(scenarioName: CName, eventName: CName, userData?: inkUserData): void
}

declare interface GameplayRestrictionStatusEffect_Record extends StatusEffect_Record {

  ActionRestriction(): ActionRestrictionGroup_Record
}

declare interface SPlayerCooldown {

}

declare interface AdHocAnimationDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface SceneGameplayOverridesDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface AnimFeature_SceneGameplayOverrides extends AnimFeature {

}

declare interface SceneForceWeaponSafe extends Event {

  GetFriendlyDescription(): string
}

declare interface EnableFields extends ScriptableSystemRequest {

}

declare interface EnableBraindanceActions extends Event {

  GetFriendlyDescription(): string
}

declare interface BraindanceSystem extends ScriptableSystem {

  IsSavingLocked(): Bool
  OnPlayerAttach(request: PlayerAttachRequest): void
  OnRestored(saveVersion: number, gameVersion: number): void
  GetInputMask(): SBraindanceInputMask
  GetRequstCameraToggle(): Bool
  GetRequestEditorState(): Bool
  GetDebugFFSceneThreshold(): number
  GetIsInBraindance(): Bool
  GetPauseBraindanceRequest(): Bool
  SetInputMask(newMask: SBraindanceInputMask): void
  SetDebugFFSceneThreshold(newThreshold: number): void
  SetIsInBraindance(newState: Bool): void
  ApplyORMask(mask: SBraindanceInputMask): void
  ApplyInvertedANDMask(mask: SBraindanceInputMask): void
  SetEditorStateRequest(newState: Bool): void
  ClearEditorStateRequest(): void
  SetPauseRequest(): void
  ClearPauseRequest(): void
  OnEnableFields(request: EnableFields): void
  OnDisableFields(request: DisableFields): void
  OnSetBraindanceState(request: SetBraindanceState): void
  OnClearBraindanceStateRequest(request: ClearBraindanceStateRequest): void
  OnSendPauseBraindanceRequest(request: SendPauseBraindanceRequest): void
  OnClearBraindancePauseRequest(request: ClearBraindancePauseRequest): void
  OnSetDebugSceneThrehsold(request: SetDebugSceneThrehsold): void
  OnSetIsInBraindance(request: SetIsInBraindance): void
}

declare interface SBraindanceInputMask {

}

declare interface DisableFields extends ScriptableSystemRequest {

}

declare interface SetBraindanceState extends ScriptableSystemRequest {

}

declare interface SetDebugSceneThrehsold extends ScriptableSystemRequest {

}

declare interface SetIsInBraindance extends ScriptableSystemRequest {

}

declare interface BraindanceInputChangeEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface DisableBraindanceActions extends Event {

  GetFriendlyDescription(): string
}

declare interface ForceBraindanceCameraToggle extends Event {

  GetFriendlyDescription(): string
}

declare interface SendPauseBraindanceRequest extends ScriptableSystemRequest {

}

declare interface WorkspotStartedEvent extends Event {

}

declare interface WorkspotFinishedEvent extends Event {

}

declare interface RequestEquipHeavyWeapon extends Event {

}

declare interface FillAnimWrapperInfoBasedOnEquippedItem extends Event {

}

declare interface FinishedVendettaTimeEvent extends Event {

}

declare interface PlayerDamageFromDataEvent extends TickableEvent {

}

declare interface CPOChoiceTokenDrawTextEvent extends Event {

}

declare interface CPOMissionPlayerVotedEvent extends Event {

}

declare interface ForceRadialWheelShutdown extends Event {

}

declare interface UI_CrosshairDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface TargetNeutraliziedEvent extends Event {

}

declare interface scnRewindableSectionEvent extends Event {

}

declare interface PSMRemoveOnDemandStateMachine extends Event {

}

declare interface StateMachineIdentifier {

}

declare interface RegisterFastTravelPointsEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface MeleeHitSlowMoEvent extends Event {

}

declare interface AIQuickHackAction extends PuppetAction {

  SetRegenBehavior(gameInstance: GameInstance): void
  StartUpload(gameInstance: GameInstance): void
  ProcessStatusEffects(actionEffects: ObjectActionEffect_Record[], gameInstance: GameInstance): void
}

declare interface UploadFromNPCToPlayerListener extends QuickHackUploadListener {

  OnStatPoolAdded(): Bool
  SendUploadStartedEvent(action: ScriptableDeviceAction): void
  OnStatPoolMaxValueReached(value: number): Bool
  OnStatPoolValueChanged(oldValue: number, newValue: number, percToPoints: number): void
}

declare interface HUDProgressBarData {

}

declare interface UI_HUDProgressBarDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface UploadFromNPCToNPCListener extends QuickHackUploadListener {

  OnStatPoolValueChanged(oldValue: number, newValue: number, percToPoints: number): void
}

declare interface OnCarHitPlayer extends Event {

}

declare interface UpdateMiniGameProgramsEvent extends Event {

}

declare interface AreaEffectVisualizationComponent extends ScriptableComponent {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnHUDInstruction(evt: HUDInstruction): Bool
  GetFxMapper(): FxResourceMapperComponent
  ResolveAreaEffectVisualisations(activated: Bool): void
  OnAreaEffectVisualisationRequest(evt: AreaEffectVisualisationRequest): Bool
  ResolveAreaEffectsVisibility(show: Bool): void
  ResolveAreaEffectsInFocusModeVisibility(show: Bool): void
  ResolveAreaQuickHacksVisibility(show: Bool): void
  ResolveAreaQuickHacksVisibility(show: Bool, action: BaseScriptableAction): void
  ResolveAreaSpiderbotVisibility(show: Bool): void
  ToggleAreaEffectVisibility(effectDataIDX: number, show: Bool, responseData?: IScriptable): void
  StartDrawingAreaEffectRange(effectData: AreaEffectData): void
  StopDrawingAreaEffectRange(effectData: AreaEffectData): void
  StartHighlightingTargets(effectDataIDX: number, responseData?: IScriptable): void
  StopHighlightingTargets(effectDataIDX: number, responseData?: IScriptable): void
  ForceVisionAppearance(data: FocusForcedHighlightData): void
  CancelForcedVisionAppearance(data: FocusForcedHighlightData): void
  OnAddForceHighlightTarget(evt: AddForceHighlightTargetEvent): Bool
  OnQHackWheelItemChanged(evt: QHackWheelItemChangedEvent): Bool
  OnResponse(evt: ResponseEvent): Bool
  AddTargetToBucket(bucketName: CName, entityID: EntityID): void
  SendEventToBucket(bucketName: CName, evt: Event): void
  RemoveBucket(bucketName: CName): void
}

declare interface PuppetForceVisionAppearanceData extends IScriptable {

}

declare interface GameEffectTargetVisualizationData extends IScriptable {

  GetBucketName(): CName
  SetBucketName(_bucketName: CName): void
  AddTargetToBucket(entityID: EntityID): void
  ClearBucket(): void
  SendEventToAll(instance: GameInstance, evt: Event): void
}

declare interface AddForceHighlightTargetEvent extends Event {

}

declare interface QHackWheelItemChangedEvent extends Event {

}

declare interface QuickhackData extends IScriptable {

}

declare interface Door extends InteractiveDevice {

  GetDeviceStateClass(): CName
  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnMaraudersMapDeviceDebug(sink: MaraudersMapDevicesSink): void
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  ResolveGameplayState(): void
  ResolveIllegalAction(executor: GameObject, duration: number): void
  OnDetach(): Bool
  GetDevicePS(): DoorControllerPS
  GetController(): DoorController
  OnPersitentStateInitialized(evt: GameAttachedEvent): Bool
  SetAppearance(): void
  UpdateLight(): void
  RedLightCondition(): Bool
  TurnLightsOff(): void
  SetColor(lightSettings: ScriptLightSettings): void
  OnChangeHalfLights(evt: ChangeHalfLights): Bool
  ChangeHalfLights(): void
  UpdateDeviceState(isDelayed?: Bool): Bool
  RestoreDeviceState(): void
  ApplyReplicatedState(state: DeviceReplicatedState): void
  AccessGrantedNotification(): void
  OnPay(evt: Pay): Bool
  DeactivateDevice(): void
  ActivateDevice(): void
  OnAreaEnter(evt: AreaEnteredEvent): Bool
  OnAreaExit(evt: AreaExitedEvent): Bool
  IsPlayerInsideLift(): Bool
  OnApproachingAreaResponseEvent(evt: AIApproachingAreaResponseEvent): Bool
  GenerateInternalContext(activator?: GameObject): GetActionsContext
  HasValidOpeningToken(id: EntityID): Bool
  OnDoorTriggerDelayedEvent(evt: DoorTriggerDelayedEvent): Bool
  AuthorizeUsers(usersToAuthorize: Entity[]): Bool
  AuthorizeUsers(usersToAuthorize: Entity[], firstAuthorized: GameObject): Bool
  IsSomeoneAuthorizedNearby(): Bool
  IsSomeoneAuthorizedNearby(firstAuthorized: GameObject): Bool
  OnAuthorizeUser(evt: AuthorizeUser): Bool
  IsSomeoneInTrigger(): Bool
  OnForceUnlockAndOpenElevator(evt: ForceUnlockAndOpenElevator): Bool
  OnToggleOpen(evt: ToggleOpen): Bool
  OnActionDemolition(evt: ActionDemolition): Bool
  OnActionEngineering(evt: ActionEngineering): Bool
  OnToggleLock(evt: ToggleLock): Bool
  OnQuestForceUnlock(evt: QuestForceUnlock): Bool
  OnQuestForceUnseal(evt: QuestForceUnseal): Bool
  OnSealDoor(evt: ToggleSeal): Bool
  OnDoorOpeningToken(evt: DoorOpeningToken): Bool
  OnSetAuthorizationModuleOFF(evt: SetAuthorizationModuleOFF): Bool
  OnActivateDevice(evt: ActivateDevice): Bool
  OnForceOpen(evt: ForceOpen): Bool
  OnQuestForceCloseImmediate(evt: QuestForceCloseImmediate): Bool
  OnQuestForceOpenScene(evt: QuestForceOpenScene): Bool
  OnQuestForceCloseScene(evt: QuestForceCloseScene): Bool
  ToggleDoorOpeningState(forWhom?: EntityID): void
  ToggleDoorOpeningState(activator: GameObject): void
  OpenDoor(): void
  CloseDoor(): void
  ToggleDoorLockState(activator: GameObject, shouldOpen: Bool): void
  OnCollision(evt: HitCharacterControllerEvent): Bool
  MoveDoor(shouldBeOpened: Bool, immediate: Bool): Bool
  OnSetBusyEvent(evt: SetBusyEvent): Bool
  DisableOccluder(): void
  EnableOccluder(): void
  OnOccluderEnable(evt: OccluderEnableEvent): Bool
  UpdatePortalLights(on: Bool): void
  EnterWorkspot(activator: GameObject, freeCamera?: Bool, componentName?: CName, deviceData?: CName): void
  OnWorkspotFinished(componentName: CName): Bool
  SetIsDoorInteractionActiveBB(evt: InteractionEvent, isActive: Bool): void
  PlayLockSound(toLock: Bool): void
  PlayDoorSealSound(toSeal: Bool): void
  PlayDoorMovementSound(shouldBeOpened: Bool): void
  ExecuteDeviceStateOperation(): void
  RefreshAnimOpenDoor(shouldBeOpened: Bool, immediate: Bool): void
  RefreshTransformAnimOpenDoor(shouldBeOpened: Bool, immediate: Bool): void
  GetProperTransformAnimName(): CName
  SetNewDoorType(type: EDoorType): void
  OnSetDoorType(evt: SetDoorType): Bool
  OnSetCloseItself(evt: SetCloseItself): Bool
  OnResetDoorState(evt: ResetDoorState): Bool
  GetDoorTriggerSide(forEntity: Entity): EDoorTriggerSide
  GetPlayerEntity(): Entity
  CreateLightSettings(): void
  SetSoloAppearance(): void
  SetTechieAppearance(): void
  SetNetrunnerAppearance(): void
  InitializeLight(): void
  GetAllActiveLights(): void
  DeterminGameplayRole(): EGameplayRole
  DeterminGameplayRoleMappinVisuaState(data: SDeviceMappinData): EMappinVisualState
  IsActive(): Bool
  EvaluateOffMeshLinks(): void
  EnableOffMeshConnections(player: Bool, npc: Bool): void
  DisableOffMeshConnections(player: Bool, npc: Bool): void
  CanPassAnySkillCheckOnParentTerminal(): Bool
  GetClosingAnimationLength(): number
  GetAnimFeature(): AnimFeatureDoor
  IsNetrunner(): Bool
  HasAnyDirectInteractionActive(): Bool
}

declare interface ColliderComponent extends IPlacedComponent {

  CreatePhysicalBodyInterface(bodyIndex?: number): PhysicalBodyInterface
}

declare interface DoorController extends ScriptableDC {

  GetPS(): DoorControllerPS
}

declare interface LedColors {

}

declare interface AnimFeatureDoor extends AnimFeature {

}

declare interface ChangeHalfLights extends Event {

}

declare interface SetBusyEvent extends Event {

}

declare interface gameTransformAnimationSkipEvent extends gameTransformAnimationEvent {

}

declare interface gameTransformAnimationResetEvent extends gameTransformAnimationPlayEvent {

}

declare interface OccluderEnableEvent extends Event {

}

declare interface DoorReplicatedState extends DeviceReplicatedState {

}

declare interface AIApproachingAreaEvent extends AIEvent {

}

declare interface DoorTriggerDelayedEvent extends Event {

}

declare interface AIApproachingAreaResponseEvent extends Event {

}

declare interface SetCloseItself extends Event {

  GetFriendlyDescription(): string
}

declare interface RegisterDebuggerCanditateEvent extends Event {

}

declare interface ResolveQuickHackRadialRequest extends HUDManagerRequest {

}

declare interface DelayedUIRefreshEvent extends Event {

}

declare interface InteractionResetChoicesEvent extends Event {

}

declare interface ToggleUIInteractivity extends Event {

  GetFriendlyDescription(): string
}

declare interface EMPEnded extends Event {

}

declare interface EMPHitEvent extends Event {

}

declare interface SetUICameraZoomEvent extends Event {

}

declare interface DisposalDevice extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnMaraudersMapDeviceDebug(sink: MaraudersMapDevicesSink): void
  ResolveGameplayState(): void
  OnGameAttached(): Bool
  OnTakedownChanged(value: number): Bool
  OnCarryingChanged(value: Bool): Bool
  OnDistraction(evt: Distraction): Bool
  OnSpiderbotDistractionPerformed(evt: SpiderbotDistractionPerformed): Bool
  OnDisposeBody(evt: DisposeBody): Bool
  OnTakedownAndDisposeBody(evt: TakedownAndDisposeBody): Bool
  OnNonlethalTakedownAndDisposeBody(evt: NonlethalTakedownAndDisposeBody): Bool
  TakedownAndDispose(isNonlethal: Bool): void
  HideNPCPermanently(): void
  OnWorkspotFinished(componentName: CName): Bool
  OnNPCKillDelayEvent(evt: NPCKillDelayEvent): Bool
  EnableLethalTakedownComponents(): void
  SetTakedownCameraAnimFeature(value: number): void
  PlayTransformAnim(animationName: CName): void
  InitializeAlreadyUsedDevice(): void
  SendRefreshInteractionEvent(): void
  OnTimerEvent(evt: TimerEvent): Bool
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
  OnToggleActivation(evt: ToggleActivation): Bool
  ActivatePhysicalMeshes(): void
  OnHit(evt: gameHitEvent): Bool
  DeterminGameplayRole(): EGameplayRole
  DeterminGameplayRoleMappinRange(data: SDeviceMappinData): number
  IsBodyDisposalPossible(): Bool
  OnSpiderbotExplodeExplosiveDevicePerformed(evt: SpiderbotExplodeExplosiveDevicePerformed): Bool
  StartExplosionPipeline(instigator: GameObject, additionalDelays?: number): void
  OnExplosiveDeviceDelayedEvent(evt: ExplosiveDeviceDelayedEvent): Bool
  Explode(index: number, instigator: GameObject): void
  OnOverChargeDevice(evt: OverchargeDevice): Bool
  GetAttackRange(attackTDBID: TweakDBID): number
  Distract(index: number): void
  DoAttack(damageType: TweakDBID): void
  SpawnVFXs(fx: FxResource): void
  CreateFxInstance(resource: FxResource, transform: WorldTransform): FxInstance
  CheckCurrentSide(): void
  HasImportantInteraction(): Bool
  HasAnyDirectInteractionActive(): Bool
  UpdateLightAppearance(): void
  DeterminGameplayRoleMappinVisuaState(data: SDeviceMappinData): EMappinVisualState
}

declare interface DisposalDeviceControllerPS extends ScriptableDeviceComponentPS {

  GetInteractionName(): TweakDBID
  WasActivated(): Bool
  SetIsPlayerCurrentlyPerformingDisposal(value: Bool): void
  WasLethalTakedownPerformed(): Bool
  SetWasLethalTakedownPerformed(value: Bool): void
  GetQuickHackName(): TweakDBID
  GetActionName(): TweakDBID
  GetTakedownActionName(): TweakDBID
  GetNonlethalTakedownActionName(): TweakDBID
  GetStimuliRange(): number
  HasQuickHackDistraction(): Bool
  HasSpiderbotInteraction(): Bool
  HasSpiderbotExplosionInteraction(): Bool
  HasComputerInteraction(): Bool
  GetExplosionDeinitionArray(): ExplosiveDeviceResourceDefinition[]
  GetNumberOfUses(): number
  GameAttached(): void
  ActionDisposeBody(interactionTweak: TweakDBID): DisposeBody
  ActionTakedownAndDisposeBody(interactionTweak: TweakDBID): TakedownAndDisposeBody
  ActionNonlethalTakedownAndDisposeBody(interactionTweak: TweakDBID): NonlethalTakedownAndDisposeBody
  ActionSpiderbotExplosion(interactionName: string): SpiderbotExplodeExplosiveDevice
  ActionSpiderbotExplodeExplosiveDevicePerformed(): SpiderbotExplodeExplosiveDevicePerformed
  ActionSpiderbotDistractionPerformed(): SpiderbotDistractionPerformed
  ActionOverchargeDevice(): OverchargeDevice
  GetPlayerSMBlackboard(): IBlackboard
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  IsNPCDisposalBlockedStatusEffect(): Bool
  IsPlayerCarrying(): Bool
  IsEnemyGrappled(): Bool
  IsPlayerDroppingBody(): Bool
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  CanCreateAnySpiderbotActions(): Bool
  GetSpiderbotActions(actions: DeviceAction[], context: GetActionsContext): void
  OnDistraction(evt: Distraction): EntityNotificationType
  OnToggleActivation(evt: ToggleActivation): EntityNotificationType
  OnSpiderbotDistraction(evt: SpiderbotDistraction): EntityNotificationType
  OnSpiderbotExplosion(evt: SpiderbotExplodeExplosiveDevice): EntityNotificationType
  OnSpiderbotExplosionPerformed(evt: SpiderbotExplodeExplosiveDevicePerformed): EntityNotificationType
  OnSpiderbotDistractionPerformed(evt: SpiderbotDistractionPerformed): EntityNotificationType
  OnDisposeBody(evt: DisposeBody): EntityNotificationType
  OnTakedownAndDisposeBody(evt: TakedownAndDisposeBody): EntityNotificationType
  OnNonlethalTakedownAndDisposeBody(evt: NonlethalTakedownAndDisposeBody): EntityNotificationType
  OnOverchargeDevice(evt: OverchargeDevice): EntityNotificationType
}

declare interface DistractionSetup {

}

declare interface DisposalDeviceSetup {

}

declare interface ActionDisposal extends ActionBool {

  CompleteAction(gameInstance: GameInstance): void
}

declare interface DisposeBody extends ActionDisposal {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
}

declare interface TakedownAndDisposeBody extends ActionDisposal {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
}

declare interface NonlethalTakedownAndDisposeBody extends ActionDisposal {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
}

declare interface SpiderbotDistraction extends ActionBool {

  SetProperties(): void
  GetTweakDBChoiceRecord(): string
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
}

declare interface SpiderbotDistractionPerformed extends ActionBool {

  SetProperties(action_name: CName): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
}

declare interface OverchargeDevice extends ActionBool {

  SetProperties(action_name: CName): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface PhysicalMeshComponent extends MeshComponent {

  CreatePhysicalBodyInterface(bodyIndex?: number): PhysicalBodyInterface
  ToggleCollision(enabled: Bool): void
}

declare interface DisposalDeviceController extends ScriptableDC {

}

declare interface TimerEvent extends Event {

}

declare interface Record1DamageInHistoryEvent extends Event {

}

declare interface AnimFeature_AerialTakedown extends AnimFeature {

}

declare interface ChangeRewardSettingsEvent extends Event {

}

declare interface PhysicalBodyInterface extends IScriptable {

  GetBodyIndex(): number
  IsSimulated(): Bool
  IsKinematic(): Bool
  IsQueryable(): Bool
  ToggleKinematic(flag: Bool): void
  SetTransform(pos: Transform): void
  GetTransform(): Transform
  AddLinearImpulse(impulse: Vector4, originInCOM: Bool, offset?: Vector4): void
  SetIsQueryable(enable: Bool): void
  SetIsKinematic(enable: Bool): void
}

declare interface SetGameplayRoleEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface GameplayRoleChangeNotification extends Event {

}

declare interface GameplayRoleMappinData extends MappinScriptData {

}

declare interface ShowSingleMappinEvent extends Event {

}

declare interface HideSingleMappinEvent extends Event {

}

declare interface gameDeviceVisibilityChangedEvent extends Event {

}

declare interface BaseResaveData {

}

declare interface CancelDeviceUpdateEvent extends Event {

}

declare interface DeviceUpdateEvent extends TickableEvent {

}

declare interface DeviceInkGameControllerBase extends inkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  SetupWidgets(): void
  GetOwner(): Device
  GetDeviceState(): EDeviceStatus
  GetBlackboard(): IBlackboard
  GetScreenDefinition(): ScreenDefinitionPackage
  CreateActionWidget(parentWidget: inkWidget, widgetData: SActionWidgetPackage): inkWidget
  CreateActionWidgetAsync(parentWidget: inkWidget, widgetData: SActionWidgetPackage): void
  OnActionWidgetSpawned(widget: inkWidget, userData: IScriptable): Bool
  GetActionWidget(widgetData: SActionWidgetPackage): inkWidget
  UpdateActionWidgetData(widgetData: SActionWidgetPackage, index: number): void
  GetActionWidgetDataIndex(widgetData: SActionWidgetPackage): number
  HasActionWidgetData(widgetData: SActionWidgetPackage): Bool
  HasActionWidget(widgetData: SActionWidgetPackage): Bool
  AddActionWidgetData(widgetData: SActionWidgetPackage): void
  AddActionWidget(widget: inkWidget, widgetData: SActionWidgetPackage): inkWidget
  HideActionWidgets(): void
  InitializeActionWidget(widget: inkWidget, widgetData: SActionWidgetPackage): void
  CreateDeviceWidgetAsync(parentWidget: inkWidget, widgetData: SDeviceWidgetPackage): void
  OnDeviceWidgetSpawned(widget: inkWidget, userData: IScriptable): Bool
  CreateDeviceWidget(parentWidget: inkWidget, widgetData: SDeviceWidgetPackage): inkWidget
  UpdateDeviceWidgetData(widgetData: SDeviceWidgetPackage, index: number): void
  GetDeviceWidgetDataIndex(widgetData: SDeviceWidgetPackage): number
  GetDeviceWidget(widgetData: SDeviceWidgetPackage): inkWidget
  HasDeviceWidgetData(widgetData: SDeviceWidgetPackage): Bool
  HasDeviceWidget(widgetData: SDeviceWidgetPackage): Bool
  AddDeviceWidgetData(widgetData: SDeviceWidgetPackage): void
  AddDeviceWidget(widget: inkWidget, widgetData: SDeviceWidgetPackage): inkWidget
  InitializeDeviceWidget(widget: inkWidget, widgetData: SDeviceWidgetPackage): void
  HideDeviceWidgets(): void
  GetCurrentFullLibraryID(widgetRecord: WidgetDefinition_Record, screenTypeRecord?: DeviceScreenType_Record, styleRecord?: WidgetStyle_Record): CName
  UpdateActionWidgets(widgetsData: SActionWidgetPackage[]): void
  UpdateDeviceWidgets(widgetsData: SDeviceWidgetPackage[]): void
  UpdateBreadCrumbBar(data: SBreadCrumbUpdateData): void
  Refresh(state: EDeviceStatus): void
  RegisterBlackboardCallbacks(blackboard: IBlackboard): void
  UnRegisterBlackboardCallbacks(blackboard: IBlackboard): void
  OnRefresh(value: Bool): Bool
  OnBreadcrumbBarUpdate(value: Variant): Bool
  OnActionWidgetsUpdate(value: Variant): Bool
  OnDeviceWidgetsUpdate(value: Variant): Bool
  OnGlitchingStateChanged(value: Variant): Bool
  StartGlitchingScreen(glitchData: GlitchData): void
  StopGlitchingScreen(): void
  ExecuteAction(action: DeviceAction, executor: GameObject): void
  OnDeviceActionCallback(e: inkPointerEvent): Bool
  OnExecuteButtonAction(widget: inkWidget): Bool
  ExecuteDeviceActions(controller: DeviceActionWidgetControllerBase): void
  IsInteractivityBlocked(): Bool
  GoUp(): void
  ClearBreadcrumbStack(): void
  GoDown(element: SBreadcrumbElementData): void
  ResolveBreadcrumbLevel(): void
  GetCurrentBreadcrumbElement(): SBreadcrumbElementData
  GetCurrentBreadcrumbElementName(): string
  GetActiveBreadcrumbElement(): SBreadcrumbElementData
  GetActiveBreadcrumbElementName(): string
  SetActiveBreadcrumbElement(element: SBreadcrumbElementData): void
  SetUICameraZoomState(hasUICameraZoom: Bool): void
  RequestActionWidgetsUpdate(): void
  RequestDeviceWidgetsUpdate(): void
  RequestUIRefresh(context?: CName): void
  RequestBeadcrumbBarUpdate(data: SBreadCrumbUpdateData): void
  OnButtonHoverOver(e: inkPointerEvent): Bool
  OnButtonHoverOut(e: inkPointerEvent): Bool
  OnButtonPress(e: inkPointerEvent): Bool
  OnButtonRelease(e: inkPointerEvent): Bool
  TriggerAnimationByName(animName: CName, playbackOption: EInkAnimationPlaybackOption, targetWidget?: inkWidget, playbackOptionsOverrideData?: PlaybackOptionsUpdateData): void
  UpdateUnstreamedUI(): void
}

declare interface inkCanvas extends inkCompoundWidget {

}

declare interface UIUnstreamedEvent extends Event {

}

declare interface DeviceUIDefinition_Record extends TweakDBRecord {

  ComputerScreenType(): ComputerScreenType_Record
  TerminalScreenType(): TerminalScreenType_Record
}

declare interface inkButtonController extends inkLogicController {

  GetState(): inkEButtonState
  GetEnabled(): Bool
  SetEnabled(enabled: Bool): void
  GetHoldProgress(): number
  CanHold(): Bool
  SetCanHold(canHold: Bool): void
  GetSelected(): Bool
  SetSelected(selected: Bool): void
  SetSelectable(selectable: Bool): void
}

declare interface DeviceButtonLogicControllerBase extends inkButtonController {

  OnInitialize(): Bool
  IsInitialized(): Bool
  ResolveWidgetState(state: EWidgetState): void
  SetButtonSize(x: number, y: number): void
  ToggleSelection(isSelected: Bool): void
  ResolveSelection(): void
  RegisterBaseInputCallbacks(): void
  OnHoverOver(e: inkPointerEvent): Bool
  OnHoverOut(e: inkPointerEvent): Bool
  OnPress(e: inkPointerEvent): Bool
  OnRelease(e: inkPointerEvent): Bool
  TriggerOnHoverOutAnimations(): void
  TriggerOnHoverOverAnimations(): void
  TriggerOnPressAnimations(): void
  TriggerOnReleaseAnimations(): void
  RegisterAudioCallbacks(gameController: inkGameController): void
  GetWidgetAudioName(): CName
  GetOnPressKey(): CName
  GetOnReleaseKey(): CName
  GetOnHoverOverKey(): CName
  GetOnHoverOutKey(): CName
}

declare interface inkEvent extends Event {

  IsCanceled(): Bool
  Cancel(): void
  IsHandled(): Bool
  Handle(): void
  GetCurrentTarget(): inkWidget
  GetTarget(): inkWidget
  GetDebugString(): string
}

declare interface inkInputEvent extends inkEvent {

  IsAction(actionName: CName): Bool
  GetActionName(): inkActionName
  GetHoldProgress(): number
  IsShiftDown(): Bool
  IsLeftShiftDown(): Bool
  IsRightShiftDown(): Bool
  IsControlDown(): Bool
  IsLeftControlDown(): Bool
  IsRightControlDown(): Bool
  IsAltDown(): Bool
  IsLeftAltDown(): Bool
  IsRightAltDown(): Bool
  IsCommandDown(): Bool
  IsLeftCommandDown(): Bool
  IsRightCommandDown(): Bool
  IsCapsLocked(): Bool
}

declare interface WidgetAnimationManager extends IScriptable {

  Initialize(animations: SWidgetAnimationData[]): void
  GetAnimations(): SWidgetAnimationData[]
  UpdateAnimationsList(animName: CName, updateData: PlaybackOptionsUpdateData): void
  HasAnimation(animName: CName): Bool
  CleanAllAnimationsChachedData(): void
  TriggerAnimations(owner: inkLogicController): void
  TriggerAnimations(owner: inkGameController): void
  TriggerAnimationByName(owner: inkLogicController, animName: CName, playbackOption: EInkAnimationPlaybackOption, targetWidget?: inkWidget, playbackOptionsOverrideData?: PlaybackOptionsUpdateData): void
  TriggerAnimationByName(owner: inkGameController, animName: CName, playbackOption: EInkAnimationPlaybackOption, targetWidget?: inkWidget, playbackOptionsOverrideData?: PlaybackOptionsUpdateData): void
  ResolveActiveAnimDataPlaybackState(animData: SWidgetAnimationData, requestedState: EInkAnimationPlaybackOption): void
  UnregisterAllCallbacks(animData: SWidgetAnimationData): void
  RegisterAllCallbacks(owner: IScriptable, animData: SWidgetAnimationData): void
  ResolveCallback(owner: IScriptable, animProxy: inkAnimProxy, eventType: inkanimEventType): void
  GetAnimationCallbackName(animData: SWidgetAnimationData, eventType: inkanimEventType): CName
  CleanProxyData(animData: SWidgetAnimationData): void
}

declare interface SWidgetAnimationData {

}

declare interface PlaybackOptionsUpdateData extends IScriptable {

}

declare interface SSoundData {

}

declare interface DeviceActionWidgetControllerBase extends DeviceButtonLogicControllerBase {

  Initialize(gameController: DeviceInkGameControllerBase, widgetData: SActionWidgetPackage): void
  ClearButtonActions(): void
  RegisterDeviceActionCallback(gameController: DeviceInkGameControllerBase): void
  SetActions(actions: DeviceAction[]): void
  AddAction(action: DeviceAction): void
  RemoveAction(action: DeviceAction): void
  GetActions(): DeviceAction[]
  ResolveAction(widgetData: SActionWidgetPackage): void
  FinalizeActionExecution(executor: GameObject, action: DeviceAction): void
  CanExecuteAction(): Bool
  ResolveWidgetState(state: EWidgetState): void
}

declare interface DeviceInkLogicControllerBase extends inkLogicController {

  OnInitialize(): Bool
  IsInitialized(): Bool
}

declare interface DeviceWidgetControllerBase extends DeviceInkLogicControllerBase {

  Initialize(gameController: DeviceInkGameControllerBase, widgetData: SDeviceWidgetPackage): void
  GetParentForActionWidgets(): inkWidget
  CreateActionWidgetAsync(gameController: DeviceInkGameControllerBase, parentWidget: inkWidget, widgetData: SActionWidgetPackage): void
  OnActionWidgetSpawned(widget: inkWidget, userData: IScriptable): Bool
  CreateActionWidget(gameController: DeviceInkGameControllerBase, parentWidget: inkWidget, widgetData: SActionWidgetPackage): inkWidget
  GetActionWidget(widgetData: SActionWidgetPackage, gameController: DeviceInkGameControllerBase): inkWidget
  UpdateActionWidgetData(widgetData: SActionWidgetPackage, index: number): void
  GetActionWidgetDataIndex(widgetData: SActionWidgetPackage, gameController: DeviceInkGameControllerBase): number
  HasActionWidgetData(widgetData: SActionWidgetPackage, gameController: DeviceInkGameControllerBase): Bool
  HasActionWidget(widgetData: SActionWidgetPackage, gameController: DeviceInkGameControllerBase): Bool
  AddActionWidget(widget: inkWidget, widgetData: SActionWidgetPackage, gameController: DeviceInkGameControllerBase): inkWidget
  AddActionWidgetData(widgetData: SActionWidgetPackage, gameController: DeviceInkGameControllerBase): void
  InitializeActionWidget(gameController: DeviceInkGameControllerBase, widget: inkWidget, widgetData: SActionWidgetPackage): void
  HideActionWidgets(): void
  ResolveAction(widgetData: SActionWidgetPackage): void
}

declare interface UIRefreshedEvent extends Event {

}

declare interface UIActionEvent extends Event {

}

declare interface SBreadcrumbElementData {

}

declare interface RequestActionWidgetsUpdateEvent extends RequestWidgetUpdateEvent {

}

declare interface RequestDeviceWidgetUpdateEvent extends RequestWidgetUpdateEvent {

}

declare interface RequestUIRefreshEvent extends Event {

}

declare interface RequestBreadCrumbBarUpdateEvent extends Event {

}

declare interface ChangeJuryrigTrapState extends Event {

}

declare interface animAnimFeature_IK extends AnimFeature {

}

declare interface AnimFeature_WorkspotIK extends AnimFeature {

}

declare interface RepeatPersonalLinkAnimFeaturesHACK extends Event {

}

declare interface UnregisterFromZoomBlackboardEvent extends Event {

}

declare interface MissingWorkspotComponentFailsafeEvent extends Event {

}

declare interface ScannerAuthorization extends ScannerChunk {

  ProtectedByKeycard(): Bool
  ProtectedByPassword(): Bool
  Set(key: Bool, pass: Bool): void
}

declare interface ScannerNetworkLevel extends ScannerChunk {

  GetNetworkLevel(): number
  Set(level: number): void
  GetType(): ScannerDataType
}

declare interface ScannerDeviceStatus extends ScannerChunk {

  GetDeviceStatus(): string
  GetDeviceStatusFriendlyName(): string
  Set(status: string): void
  SetFriendlyName(status: string): void
  GetType(): ScannerDataType
}

declare interface ScannerConnections extends ScannerChunk {

  GetConnections(): DeviceConnectionScannerData[]
  IsValid(): Bool
  Set(connections: DeviceConnectionScannerData[]): void
  GetType(): ScannerDataType
}

declare interface ComputerControllerPS extends TerminalControllerPS {

  GetInitialMenuType(): EComputerMenuType
  GetActivatorType(): EToggleActivationTypeComputer
  IsInSleepMode(): Bool
  SetIsInSleepMode(value: Bool): void
  GetAnimationState(): EComputerAnimationState
  SetAnimationState(state: EComputerAnimationState): void
  ShouldShowExamineIntaraction(): Bool
  DataInitialized(): Bool
  OnInstantiated(): Bool
  GameAttached(): void
  PushResaveData(data: ComputerPersistentData): void
  GenerateContext(requestType: gamedeviceRequestType, providedClearance: Clearance, providedProcessInitiator?: GameObject, providedRequestor?: EntityID): GetActionsContext
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(outActions: DeviceAction[], context: GetActionsContext): void
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  GetQuestActions(actions: DeviceAction[], context: GetActionsContext): void
  ActionToggleOpen(): ToggleOpenComputer
  OnToggleOpen(evt: ToggleOpenComputer): EntityNotificationType
  ActionCreateFactQuickHack(): FactQuickHack
  OnCreateFactQuickHack(evt: FactQuickHack): EntityNotificationType
  GetBlackboardDef(): ComputerDeviceBlackboardDef
  DisableMenu(menuType: EComputerMenuType): void
  EnableMenu(menuType: EComputerMenuType): void
  IsMenuEnabled(menuType: EComputerMenuType): Bool
  GetNewsfeedInterval(): number
  HasNewsfeed(): Bool
  UpdateBanners(): void
  OnRequestDocumentWidgetUpdate(evt: RequestDocumentWidgetUpdateEvent): void
  OnRequestDocumentThumbnailWidgetsUpdate(evt: RequestDocumentThumbnailWidgetsUpdateEvent): void
  OnRequestMenuWidgetsUpdate(evt: RequestComputerMenuWidgetsUpdateEvent): void
  RequestBannerWidgetsUpdate(blackboard: IBlackboard): void
  RequestFileWidgetUpdate(blackboard: IBlackboard, documentAdress: SDocumentAdress): void
  RequestMailWidgetUpdate(blackboard: IBlackboard, documentAdress: SDocumentAdress): void
  RequestMailThumbnailWidgetsUpdate(blackboard: IBlackboard): void
  RequestFileThumbnailWidgetsUpdate(blackboard: IBlackboard): void
  RequestMenuButtonWidgetsUpdate(blackboard: IBlackboard): void
  RequestMainMenuButtonWidgetsUpdate(blackboard: IBlackboard): void
  GetBannerWidgetTweakDBID(): TweakDBID
  GetBannerWidgets(): SBannerWidgetPackage[]
  GetFileWidgetTweakDBID(): TweakDBID
  GetFileWidget(documentAdress: SDocumentAdress): SDocumentWidgetPackage
  GetMailWidgetTweakDBID(): TweakDBID
  GetMailWidget(documentAdress: SDocumentAdress): SDocumentWidgetPackage
  GetMailThumbnailWidgetTweakDBID(): TweakDBID
  GetMailThumbnailWidgets(): SDocumentThumbnailWidgetPackage[]
  GetFileThumbnailWidgetTweakDBID(): TweakDBID
  GetFileThumbnailWidgets(): SDocumentThumbnailWidgetPackage[]
  GetMenuButtonWidgetTweakDBID(): TweakDBID
  GetMenuButtonWidgets(): SComputerMenuButtonWidgetPackage[]
  GetMainMenuButtonWidgetTweakDBID(): TweakDBID
  GetMainMenuButtonWidgets(): SComputerMenuButtonWidgetPackage[]
  IsDataElementValid(data: DataElement): Bool
  GetEnabledDocumentsCount(documents: DataElement[], unredOnly?: Bool): number
  GetEnabledDevicesCount(devices: DeviceComponentPS[]): number
  GetFileStructure(data: ComputerUIData): void
  GetOpenedMailAdress(): SDocumentAdress
  GetOpenedFileAdress(): SDocumentAdress
  GetInternetData(): SInternetData
  SetOpenedMailAdress(documentAdress: SDocumentAdress): void
  SetOpenedFileAdress(documentAdress: SDocumentAdress): void
  ClearOpenedMailAdress(): void
  ClearOpenedFileAdress(): void
  EnableDocument(documentType: EDocumentType, documentAdress: SDocumentAdress, isEnabled: Bool): void
  EnableDocumentsInFolder(documentType: EDocumentType, folderID: number, isEnabled: Bool): void
  GetDocumentAdressByName(documentType: EDocumentType, documentName: CName): SDocumentAdress
  EnableDocumentsByName(documentType: EDocumentType, documentName: CName, isEnabled: Bool): void
  EncryptFile(documentAdress: SDocumentAdress): void
  DecryptFile(documentAdress: SDocumentAdress): void
  EncryptMail(documentAdress: SDocumentAdress): void
  DecryptMail(documentAdress: SDocumentAdress): void
  PushData(data: ComputerPersistentData): void
  OnAuthorizeUser(evt: AuthorizeUser): EntityNotificationType
  OnFillTakeOverChainBBoardEvent(evt: FillTakeOverChainBBoardEvent): EntityNotificationType
  TurnAuthorizationModuleOFF(): void
  GetJournalMailEntry(dataElement: DataElement): JournalEmail
  GetJournalFileEntry(dataElement: DataElement): JournalFile
  OnToggleZoomInteraction(evt: ToggleZoomInteraction): EntityNotificationType
  OnQuestForceCameraZoom(evt: QuestForceCameraZoom): EntityNotificationType
}

declare interface ComputerSetup extends TerminalSetup {

}

declare interface ComputerQuickHackData {

}

declare interface FactQuickHack extends ActionBool {

  GetTweakDBChoiceRecord(): string
  GetTweakDBChoiceID(): TweakDBID
  SetProperties(properties: ComputerQuickHackData): void
}

declare interface ToggleOpenComputer extends ActionBool {

  SetProperties(isOpen: Bool): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ComputerControllerPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ComputerControllerPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetTweakDBChoiceRecord(): string
  GetInkWidgetTweakDBID(): TweakDBID
}

declare interface SNewsFeedElementData {

}

declare interface RequestDocumentWidgetUpdateEvent extends RequestWidgetUpdateEvent {

}

declare interface RequestDocumentThumbnailWidgetsUpdateEvent extends RequestWidgetUpdateEvent {

}

declare interface SBannerWidgetPackage extends SWidgetPackage {

}

declare interface SsimpleBanerData {

}

declare interface ComputerDeviceBlackboardDef extends MasterDeviceBaseBlackboardDef {

}

declare interface GenericDataContent {

}

declare interface SDocumentAdress {

}

declare interface DataElement {

}

declare interface gameJournalPath extends IScriptable {

  GetHash(): number
  IsValid(): Bool
}

declare interface JournalFile extends JournalEntry {

  GetTitle(): string
  GetContent(): string
  GetVideoResourcePath(): ResRef
  GetImageTweak(): TweakDBID
}

declare interface SDocumentWidgetPackage extends SWidgetPackage {

}

declare interface JournalEmail extends JournalEntry {

  GetSender(): string
  GetAddressee(): string
  GetTitle(): string
  GetContent(): string
  GetVideoResourcePath(): ResRef
  GetImageTweak(): TweakDBID
}

declare interface SDocumentThumbnailWidgetPackage extends SWidgetPackage {

}

declare interface SComputerMenuButtonWidgetPackage extends SWidgetPackage {

}

declare interface ComputerUIData {

}

declare interface DeviceConnectionScannerData {

}

declare interface ScannerSkillchecks extends ScannerChunk {

  GetSkillchecks(): UIInteractionSkillCheck[]
  GetAuthorization(): Bool
  GetPlayerAuthorization(): Bool
  Set(sklchs: UIInteractionSkillCheck[]): void
  SetAuthorization(auth: Bool): void
  SetPlayerAuthorization(auth: Bool): void
  IsValid(): Bool
  GetType(): ScannerDataType
}

declare interface RevealInteractionWheel extends Event {

}

declare interface GenericDevice extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  PushGenericActionsToNewData(): void
  PushCustomActionsToNewData(): void
  ResolveGameplayState(): void
  OnDetach(): Bool
  OnCustomAction(evt: CustomDeviceAction): Bool
  OnQuestToggleCustomAction(evt: QuestToggleCustomAction): Bool
  OnToggleCustomActionEvent(evt: ToggleCustomActionEvent): Bool
  OnQuestCustomAction(evt: QuestCustomAction): Bool
  OnActivateDevice(evt: ActivateDevice): Bool
  InitializeQuestDBCallbacks(): void
  UnInitializeQuestDBCallbacks(): void
  OnFactChanged(evt: FactChangedEvent): Bool
  ResolveCustomAction(actionID: CName): void
  RestoreCustomActionOperations(): void
  SendSpiderbotOrderEvent(player: GameObject, locationOverride?: GameObject): void
  SaveCurrentSpiderbotAction(evt: CustomDeviceAction): void
  OnSpiderbotOrderCompletedEvent(evt: SpiderbotOrderCompletedEvent): Bool
  DeterminGameplayRole(): EGameplayRole
  EnableOffMeshConnections(player: Bool, npc: Bool): void
  DisableOffMeshConnections(player: Bool, npc: Bool): void
}

declare interface GenericDeviceController extends ScriptableDC {
}

declare interface GenericDeviceControllerPS extends ScriptableDeviceComponentPS {

  OnInstantiated(): Bool
  GameAttached(): void
  ActionQuestCustomAction(): QuestCustomAction
  ActionQuestToggleCustomAction(enable: Bool): QuestToggleCustomAction
  ActionCustom(actionData: SDeviceActionCustomData): CustomDeviceAction
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  GetRecordName(inputAction: DeviceAction): string
  GetQuestActions(actions: DeviceAction[], context: GetActionsContext): void
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  CanCreateAnySpiderbotActions(): Bool
  GetSpiderbotActions(actions: DeviceAction[], context: GetActionsContext): void
  StorePerformedCustomActionID(ID: CName): void
  ResetPerformedCustomActionsStorage(): void
  HasCustomActionStored(ID: CName): Bool
  ResolveCustomAction(actionID: CName): void
  ResolveFactOnCustomAction(factName: CName): void
  InitializeQuestDBCallbacksForCustomActions(): void
  UnInitializeQuestDBCallbacksForCustomActions(): void
  GetPerformedCustomActionsStorage(): CName[]
  ResolveBaseActionOperation(action: ScriptableDeviceAction): void
  ResolveCustomActionOperation(action: CustomDeviceAction): void
  OnCustomAction(evt: CustomDeviceAction): EntityNotificationType
  OnQuestCustomAction(evt: QuestCustomAction): EntityNotificationType
  OnQuestToggleCustomAction(evt: QuestToggleCustomAction): EntityNotificationType
  OnToggleCustomActionEvent(evt: ToggleCustomActionEvent): EntityNotificationType
  ToggleCustomAction(actionID: CName, enable: Bool): Bool
  ActionHacking(context: GetActionsContext): ActionHacking
  ResolveActionHackingCompleted(evt: ActionHacking): void
  ActionEngineering(context: GetActionsContext): ActionEngineering
  OnActionEngineering(evt: ActionEngineering): EntityNotificationType
  ActionDemolition(context: GetActionsContext): ActionDemolition
  OnActionDemolition(evt: ActionDemolition): EntityNotificationType
  OnActivateDevice(evt: ActivateDevice): EntityNotificationType
  GetSkillCheckActionDisplayName(skillAction: ActionSkillCheck): string
  ResolveSkillCheckAction(skillAction: ActionSkillCheck): void
  GetInkWidgetTweakDBID(context: GetActionsContext): TweakDBID
  GetThumbnailWidget(): SThumbnailWidgetPackage
  WasCustomActionPerformed(actionID: CName): Bool
}

declare interface QuestCustomAction extends ActionName {

  SetProperties(actionID: CName): void
}

declare interface QuestToggleCustomAction extends ActionName {

  SetProperties(actionID: CName, enable: Bool): void
}

declare interface SDeviceActionData {

  /** @noSelf **/
  GetCurrentDisplayName(self: SDeviceActionData): string
}

declare interface SDeviceActionCustomData extends SDeviceActionData {

  /** @noSelf **/
  GetCurrentDisplayName(self: SDeviceActionCustomData): string
}

declare interface CustomDeviceAction extends ActionBool {

  SetProperties(customActionName: CName, displayName: CName): void
  SetObjectActionID(id: TweakDBID): void
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  IsCustomClearanceValid(clearance: Clearance): Bool
  GetActivationTime(): number
}

declare interface SDeviceActionBoolData extends SDeviceActionData {

  /** @noSelf **/
  GetCurrentDisplayName(self: SDeviceActionBoolData): string
}

declare interface SGenericDeviceActionsData {

}

declare interface GenericDeviceActionsData {

}

declare interface SCustomDeviceActionsData {

}

declare interface ToggleCustomActionEvent extends Event {

}

declare interface ActionHacking extends ActionSkillCheck {

  GetDefaultActionName(): CName
  GetInteractionIcon(): ChoiceCaptionIconPart_Record
}

declare interface GenericContainer extends BaseSkillCheckContainer {

  Initialize(container: BaseSkillCheckContainer): void
}

declare interface SetIsSpiderbotInteractionOrderedEvent extends Event {

}

declare interface QuickHackSetDescriptionVisibilityRequest extends ScriptableSystemRequest {

}

declare interface SBaseDeviceOperationData {

}

declare interface DelayedOperationEvent extends Event {

}

declare interface DeviceOperations extends IScriptable {

  RequestComponents(ri: EntityRequestComponentsInterface): void
  TakeControl(ri: EntityResolveComponentsInterface): void
  ToggleOperation(enable: Bool, index: number): void
  IsOperationEnabled(index: number): Bool
  SetDelayIdOnOperation(delayId: DelayID, operationID: number): void
  ClearDelayIdOnOperation(operationID: number): void
  SendToggleOperataionEvent(enable: Bool, index: number, type: EOperationClassType, owner: GameObject): void
  DelayOperation(operation: SBaseDeviceOperationData, owner: GameObject): void
  Execute(operation: SBaseDeviceOperationData, owner: GameObject): void
  Restore(operation: SBaseDeviceOperationData, owner: GameObject): void
  ResolveDisable(disable: Bool, owner: GameObject): void
  ResolveOperations(operations: SToggleOperationData[], owner: GameObject): void
  ResolveTeleport(teleport: STeleportOperationData, owner: GameObject): void
  ResolveItems(items: SInventoryOperationData[], owner: GameObject): void
  ResolveVFXs(VFXs: SVFXOperationData[], owner: GameObject): void
  ResolveSFXs(SFXs: SSFXOperationData[], owner: GameObject): void
  ResolveFacts(facts: SFactOperationData[], owner: GameObject): void
  ResolveComponents(componentsData: SComponentOperationData[]): void
  ResolveMeshesAppearence(appearanceName: CName, owner: GameObject): void
  ResolveTransformAnimations(animations: STransformAnimationData[], owner: GameObject): void
  ResolveWorkspots(workspot: SWorkspotData, owner: GameObject): void
  ResolveStims(stims: SStimOperationData[], owner: GameObject): void
  ResolveStatusEffects(statusEffects: SStatusEffectOperationData[], owner: GameObject): void
  ResolveDamages(damages: SDamageOperationData[], owner: GameObject): void
  EnterWorkspot(target: Device, activator: GameObject, freeCamera?: Bool, componentName?: CName): void
  LeaveWorkspot(activator: GameObject): void
  GetFxInstance(id: CName): FxInstance
  RemoveFxInstance(id: CName): void
  CreateFxInstance(owner: GameObject, id: CName, resource: FxResource, transform: WorldTransform): FxInstance
  StoreFxInstance(id: CName, fx: FxInstance): void
}

declare interface ToggleOperationEvent extends Event {

}

declare interface SVFXOperationData {

}

declare interface SVfxInstanceData {

}

declare interface SSFXOperationData {

}

declare interface SFactOperationData {

}

declare interface SComponentOperationData {

}

declare interface STransformAnimationData {

}

declare interface STransformAnimationPlayEventData {

}

declare interface gameTransformAnimationPauseEvent extends gameTransformAnimationEvent {

}

declare interface STransformAnimationSkipEventData {

}

declare interface SWorkspotData {

}

declare interface SStimOperationData {

}

declare interface SStatusEffectOperationData {

}

declare interface StatusEffectTDBPicker {

}

declare interface SDamageOperationData {

}

declare interface SInventoryOperationData {

}

declare interface STeleportOperationData {

}

declare interface SToggleOperationData {

}

declare interface UpdateWillingInvestigators extends Event {

}

declare interface AccessPointMiniGameStatus extends Event {

}

declare interface UnregisterNetworkLinksByIdAndTypeRequest extends ScriptableSystemRequest {

}

declare interface PingNetworkGridEvent extends Event {

}

declare interface RevealDevicesGridOnEntityEvent extends Event {

}

declare interface StartPingingNetworkRequest extends ScriptableSystemRequest {

}

declare interface StopPingingNetworkRequest extends ScriptableSystemRequest {

}

declare interface ForwardPingToSquadEvent extends Event {

}

declare interface DeviceTimetableEvent extends Event {

}

declare interface ToggleComponentsEvent extends Event {

}

declare interface BinkComponent extends IVisualComponent {

  SetVideoPlayerName(videoPlayerName: CName): void
  SetVideoPath(videoPath: ResRef): void
  SetIsLooped(loopVideo: Bool): void
  ForceVideoFrameRate(forceVideoFrameRate: Bool): void
  Play(): void
  Stop(): void
  Pause(pauseVideo: Bool): void
  IsPaused(): void
  SkipFrames(numberOfFrames: number): void
  SkipFramePercentage(percentage: number): void
  GetVideoSummary(): BinkVideoSummary
}

declare interface SBinkperationData {

}

declare interface PlayBinkEvent extends Event {

}

declare interface CommunicationEvent extends Event {

}

declare interface SetSkillcheckEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface ChangeLoopCurveEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface DisableRPGRequirementsForDeviceActions extends Event {

  GetFriendlyDescription(): string
}

declare interface OverloadDevice extends ActionBool {

  SetProperties(): void
  GetKillDelay(): number
  SetKillDelay(delay: number): void
  GetTweakDBChoiceRecord(): string
}

declare interface AddActiveContextEvent extends Event {

}

declare interface RemoveActiveContextEvent extends Event {

}

declare interface RestoreRevealStateEvent extends Event {

}

declare interface UnregisterAllMappinsEvent extends Event {

}

declare interface AnimInputSetterInt extends AnimInputSetter {

}

declare interface AnimFeature_StatusEffect extends AnimFeature {

  Clear(): void
}

declare interface StatusEffectPlayerData_Record extends TweakDBRecord {

  StatusEffectVariation(): StatusEffectVariation_Record
  AirRecoveryAnimDuration(): number
  ImpulseDistance(): number
  Priority(): number
  RecoveryAnimDuration(): number
  StartupAnimDuration(): number
  CameraShakeStrength(): number
  StartupAnimInterruptPoint(): number
  LandAnimDuration(): number
  RotateToSource(): Bool
  DisableJump(): Bool
  BlockMovement(): Bool
  ForceUnequipWeapon(): Bool
  DisableCrouch(): Bool
  ForceSafeWeapon(): Bool
  DisableSprint(): Bool
  JamWeapon(): Bool
  CameraInputInterference(): Bool
  DisableDodge(): Bool
  ScaleImpulseDistance(): Bool
}

declare interface StatusEffectVariation_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataStatusEffectVariation
}

declare interface SendInstructionRequest extends ScriptableSystemRequest {

}

declare interface LockQHackInput extends ScriptableSystemRequest {

}

declare interface QuickHackScreenOpen extends Event {

  GetFriendlyDescription(): string
}

declare interface PlayerTargetChangedRequest extends ScriptableSystemRequest {

}

declare interface QuickHackPanelStateEvent extends Event {

}

declare interface SNameplateRangesData {

  /** @noSelf **/
  GetDisplayRange(): number
  /** @noSelf **/
  GetMaxDisplayRange(): number
  /** @noSelf **/
  GetMaxDisplayRangeNotAggressive(): number
  /** @noSelf **/
  GetDisplayRangeNotAggressive(): number
}

declare interface TS_TargetPartInfo {

  /** @noSelf **/
  GetComponent(self: TS_TargetPartInfo): TargetingComponent
  /** @noSelf **/
  GetPlayerAngleDistance(self: TS_TargetPartInfo): EulerAngles
}

declare interface PulseFinishedRequest extends ScriptableSystemRequest {

}

declare interface NemaplateChangedRequest extends ScriptableSystemRequest {

}

declare interface ScannerTargetChangedRequest extends ScriptableSystemRequest {

}

declare interface DEBUG_actorsClassNamesCount extends IScriptable {

}

declare interface IterateModulesRequest extends ScriptableSystemRequest {

}

declare interface EvaluateVisionModeRequest extends ScriptableSystemRequest {

}

declare interface HUDManagerDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface enteventsSetVisibility extends Event {

}

declare interface ScanningEvent extends Event {

}

declare interface ClueLockNotification extends HUDManagerRequest {

}

declare interface SetExclusiveFocusClueEntityEvent extends Event {

}

declare interface WorkspotMapperComponent extends ScriptableComponent {

  OnGameAttach(): void
  OnGameDetach(): void
  GetFreeWorkspotsCountForAIAction(aiAction: gamedataWorkspotActionType): number
  GetFreeWorkspotRefForAIAction(aiAction: gamedataWorkspotActionType): NodeRef
  GetFreeWorkspotDataForAIAction(aiAction: gamedataWorkspotActionType): WorkspotEntryData
  GetNumberOfWorkpotsForAIAction(aiAction: gamedataWorkspotActionType): number
  GetWorkspotMapEntryIdexForAIaction(aiAction: gamedataWorkspotActionType): number
  GetFreeWorkspotsCount(mapEntryIndex: number): number
  FindFreeWorkspotRef(mapEntryIndex: number): NodeRef
  FindFreeWorkspotData(mapEntryIndex: number): WorkspotEntryData
  ReleaseWorkspot(workspotRef: NodeRef): void
  ReserveWorkspot(workspotRef: NodeRef): void
  OnReserveWorkspot(evt: OnReserveWorkspotEvent): Bool
  OnReleaseWorkspot(evt: OnReleaseWorkspotEvent): Bool
}

declare interface WorkspotMapData extends IScriptable {

  FindFreeWorkspotRef(): NodeRef
  FindFreeWorkspotData(): WorkspotEntryData
  GetFreeWorkspotsCount(): number
  ReleaseWorkspot(workspotRef: NodeRef): void
  ReserveWorkspot(workspotRef: NodeRef): void
}

declare interface OnWorkspotAvailabilityEvent extends Event {

}

declare interface StatusEffectComponent extends GameComponent {

}

declare interface ObjectSelectionComponent extends IComponent {

  SetRadius(radius: number): void
  SetCurrentCoverDebugPresetNumber(presetNumber: number): void
  GetCurrentCoverDebugPresetNumber(): number
  IsCoverPositiveScored(coverId: number, ring?: gamedataAIRingType): Bool
  PauseCoversProcessing(setPause: Bool): void
  IsCoversProcessingPaused(): Bool
}

declare interface CombatHUDManager extends ScriptableComponent {

  OnAddTargetToHighlightEvent(evt: AddTargetToHighlightEvent): void
  OnRemoveTargetFromHighlightEvent(evt: RemoveTargetFromHighlightEvent): void
  TargetExists(puppet: ScriptedPuppet): Bool
  OnToggleChargeHighlightEvent(evt: ToggleChargeHighlightEvent): void
  RemoveTarget(target: ScriptedPuppet): void
  ClearHUD(): void
  DetermineProperHandlingMode(activeWeapon: WeaponObject): void
  HandleChargeMode(): void
}

declare interface CombatTarget {

}

declare interface AddTargetToHighlightEvent extends Event {

  Create(puppet: ScriptedPuppet): void
  Create(puppet: ScriptedPuppet, highlightTime: number): void
}

declare interface RemoveTargetFromHighlightEvent extends Event {

}

declare interface ToggleChargeHighlightEvent extends Event {

}

declare interface HudEnhancer_Record extends TweakDBRecord {

  Distance(): number
}

declare interface EvaluateMinigame extends Event {

}

declare interface StartHubMenuEvent extends Event {

  SetStartMenu(menuName: CName, submenuName?: CName, userData?: IScriptable): void
}

declare interface HubMenuInitData extends IScriptable {

}

declare interface ShardForceSelectionEvent extends Event {

}

declare interface FollowNPCDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface CreateCustomBlackboardEvent extends Event {

}

declare interface ResetSignal extends Event {

}

declare interface KillRewardEvent extends Event {

}

declare interface TelemetryDamageDealt {

}

declare interface TelemetryDamage {

}

declare interface TelemetryEnemy {

}

declare interface TelemetryEnemyDown {

}

declare interface TakedownGameEffectHelper extends IScriptable {

  /** @noSelf **/
  FillTakedownData(executionOwner: GameObject, activator: GameObject, target: GameObject, effectName: CName, effectTag: CName, statusEffect?: string): Bool
}

declare interface BlackBoardRequestEvent extends Event {

  PassBlackBoardReference(newBlackbord: IBlackboard, blackBoardName: CName): void
  GetBlackboardReference(): IBlackboard
  SetStorageType(storageType: gameScriptedBlackboardStorage): void
  GetStorageType(): gameScriptedBlackboardStorage
  GetEntryTag(): CName
}

declare interface RegisterPostionEvent extends BlackBoardRequestEvent {

}

declare interface RevealRequestsStorage extends IScriptable {

  IsRequesterLegal(requester: EntityID, addsRequest: Bool): Bool
  RegisterLegalRequest(requester: EntityID, shouldAdd: Bool): void
  ShouldReveal(): Bool
  ClearAllRequests(): void
  IsRequesterOnTheList(requester: EntityID): Bool
  LegalRequestAdd(requester: EntityID): void
  LegalRequestRemove(requester: EntityID): void
}

declare interface ClearOutlinesRequestEvent extends Event {

}

declare interface ToggleTargetingComponentsEvent extends Event {

}

declare interface SetBloodPuddleSettingsEvent extends Event {

}

declare interface BloodPuddleEvent extends Event {

}

declare interface DismemberedLimbCount {

}

declare interface InteractionChoiceCaptionStringPart extends InteractionChoiceCaptionPart {

}

declare interface ObjectActionPrereq_Record extends TweakDBRecord {

  FailureExplanation(): string
  FailureConditionPrereq(outList: IPrereq_Record[]): void
  GetFailureConditionPrereqCount(): number
  GetFailureConditionPrereqItem(index: number): IPrereq_Record
  FailureConditionPrereqContains(item: IPrereq_Record): Bool
}

declare interface StartEndPhoneCallEvent extends Event {

}

declare interface PhoneCallUploadDurationListener extends CustomValueStatPoolsListener {

  OnStatPoolAdded(): Bool
  SetRegenBehavior(): void
  OnStatPoolRemoved(): Bool
  OnStatPoolMaxValueReached(value: number): Bool
  UnregisterListener(): void
  SendUploadStartedEvent(): void
  SendUploadFinishedEvent(): void
}

declare interface PauseResumePhoneCallEvent extends Event {

}

declare interface PlayerBuild_Record extends TweakDBRecord {

  EnumComment(): string
  CaptionIcon(): ChoiceCaptionIconPart_Record
  Proficiencies(outList: Proficiency_Record[]): void
  GetProficienciesCount(): number
  GetProficienciesItem(index: number): Proficiency_Record
  ProficienciesContains(item: Proficiency_Record): Bool
  DisplayName(): CName
  EnumName(): CName
  Type(): gamedataPlayerBuild
}

declare interface gameStatTotalValue {

}

declare interface SpiderbotScavengeOptions {

}

declare interface SecurityAlarmControllerPS extends MasterControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  GetAlarmState(): ESecuritySystemState
  UsesSound(): Bool
  AlarmSound(): CName
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(outActions: DeviceAction[], context: GetActionsContext): void
  GetQuestActions(outActions: DeviceAction[], context: GetActionsContext): void
  OnTargetAssessmentRequest(evt: TargetAssessmentRequest): EntityNotificationType
  OnSecuritySystemOutput(evt: SecuritySystemOutput): EntityNotificationType
  OnSecurityAlarmBreachResponse(evt: SecurityAlarmBreachResponse): EntityNotificationType
  OnQuestForceSecuritySystemSafe(evt: QuestForceSecuritySystemSafe): EntityNotificationType
  OnQuestForceSecuritySystemArmed(evt: QuestForceSecuritySystemArmed): EntityNotificationType
  QuestForceState(state: ESecuritySystemState): void
  ActionToggleAlarm(): ToggleAlarm
  OnToggleAlarm(evt: ToggleAlarm): EntityNotificationType
  ActionSecurityAlarmEscalate(): SecurityAlarmEscalate
  OnSecurityAlarmEscalate(evt: SecurityAlarmEscalate): EntityNotificationType
  CreateAlarmResponse(alarmState: ESecuritySystemState): SecurityAlarmBreachResponse
  OnRefreshSlavesEvent(evt: RefreshSlavesEvent): EntityNotificationType
  RefreshSlaves(): void
  IsAlarmStateCombat(): Bool
  IsAlarmStateNotCombat(): Bool
  IsAlarmStateSafe(): Bool
  IsAlarmStateNotSafe(): Bool
  IsAlarmStateAlerted(): Bool
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface SecurityAlarmSetup {

}

declare interface ToggleAlarm extends ActionBool {

  SetProperties(status: ESecuritySystemState): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface QuestForceSecuritySystemSafe extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceSecuritySystemArmed extends ActionBool {

  SetProperties(): void
}

declare interface SecurityAlarmBreachResponse extends ActionBool {

  SetProperties(currentSecuritySystemState: ESecuritySystemState): void
  GetSecurityState(): ESecuritySystemState
}

declare interface SecurityAlarmEscalate extends ActionBool {

  SetProperties(): void
  GetTweakDBChoiceRecord(): string
}

declare interface CityLightSystem extends ScriptableSystem {

  OnAttach(): void
  OnDetach(): void
  OnRestored(saveVersion: number, gameVersion: number): void
  OnTimeTableCallbackRequest(request: TimeTableCallbackRequest): void
  OnRegisterTimetableRequest(request: RegisterTimetableRequest): void
  OnForceCLSStateRequest(request: ForceCLSStateRequest): void
  UpdateCLSForcedState(): void
  AddForcedStateRequest(state: ECLSForcedState, sourceName: CName, priority: EPriority, savable: Bool): Bool
  RemoveForcedStateRequestForSource(sourceName: CName): Bool
  ResolveForcedStatesStackOnLoad(): void
  EvaluateForcedStatesStack(): void
  IsForcedRequestSavable(data: ForcedStateData): Bool
  RegisterTimetableCallback(callbackData: TimetableCallbackData): void
  NotifyRecipientsOnRegistration(callbackData: TimetableCallbackData): void
  NotifyRecipients(callbackData: TimetableCallbackData): void
  SendNotificationToRecipients(recipients: RecipientData[], time: GameTime): void
  SendNotificationByRequest(recipients: RecipientData[], time: GameTime): void
  OnNotifyRecipientsrequest(request: NotifyRecipientsRequest): void
  GetMaxNotificationsPerFrame(): number
  SendDeviceTimetableEvent(data: RecipientData): void
  SendForceStateDeviceTimetableEvent(fuse: FuseData, state: ECLSForcedState): void
  AddTimeTableCallbacks(requesterData: PSOwnerData, timeTable: SDeviceTimetableEntry[], lights?: number): void
  GetTimeTableCallback(time: SSimpleGameTime): TimetableCallbackData
  AddFuse(requesterData: PSOwnerData, timeTable: SDeviceTimetableEntry[], lights?: number): number
  HasFuse(requesterData: PSOwnerData, id: number): Bool
  GetFuseID(requesterData: PSOwnerData): number
  GetFuseID(id: PersistentID): number
  GetFuse(fuseID: number, fuseData: FuseData): Bool
  IsTimeTheSame(time1: SSimpleGameTime, time2: SSimpleGameTime): Bool
  GetCurrentTime(): GameTime
  ShouldNotifyRecipient(recipient: RecipientData, callbackTime: GameTime): Bool
  GetActiveTimeTableEntry(fuse: FuseData, entry: SDeviceTimetableEntry): Bool
  GetActiveTimeTableEntryID(fuse: FuseData): number
  GetFuseStateByID(id: PersistentID): EDeviceStatus
  GetState(): ECLSForcedState
  GetFusesCount(): number
  GetLightsCount(): number
  GetCallbacks(): TimetableCallbackData[]
  OnDebugButtonClicked(request: SDOClickedRequest): void
  UninitializeDebugButtons(): void
  InitializeDebugButtons(): void
  ShowDebug_state(): void
  ShowDebug_fuses(fuses: FuseData[]): void
}

declare interface WeatherScriptListener extends IScriptable {

  OnRainIntensityChanged(rainIntensity: number): void
  OnRainIntensityTypeChanged(rainIntensityType: worldRainIntensity): void
}

declare interface CLSWeatherListener extends WeatherScriptListener {

  Initialize(owner: CityLightSystem): void
  OnRainIntensityChanged(rainIntensity: number): void
  OnRainIntensityTypeChanged(rainIntensityType: worldRainIntensity): void
  TurnOnLights(reason: CName): void
  TurnOffLights(reason: CName): void
}

declare interface ForceCLSStateRequest extends ScriptableSystemRequest {

  GetFriendlyDescription(): string
}

declare interface WeatherSystem extends IScriptable {

  RegisterWeatherListener(callback: WeatherScriptListener): number
  UnregisterWeatherListener(callbackId: number): void
  GetRainMoisture(): number
  GetRainPuddles(): number
  GetRainIntensity(): number
  GetRainIntensityType(): worldRainIntensity
}

declare interface ForcedStateData {

}

declare interface FuseData {

}

declare interface SSimpleGameTime {

}

declare interface SDeviceTimetableEntry {

}

declare interface TimeTableCallbackRequest extends ScriptableSystemRequest {

}

declare interface TimetableCallbackData extends IScriptable {

  Initialize(timetableEntry: SSimpleGameTime, recipient: RecipientData): void
  GetTime(): SSimpleGameTime
  GetGameTime(): GameTime
  GetRecipients(): RecipientData[]
  GetCallbackID(): number
  AddRecipient(recipient: RecipientData): void
  SetCallbackID(id: number): void
  HasReciepient(recipient: RecipientData): Bool
}

declare interface RecipientData {

}

declare interface NotifyRecipientsRequest extends ScriptableSystemRequest {

}

declare interface RegisterTimetableRequest extends ScriptableSystemRequest {

}

declare interface SDOClickedRequest extends ScriptableSystemRequest {

}

declare interface BasicInteractionInterpreter extends IScriptable {

  /** @noSelf **/
  Evaluate(isSecured: Bool, actions: DeviceAction[], allApplicableChoices: InteractionChoice[], onlyInteractableChoices: InteractionChoice[]): void
}

declare interface ToggleActivate extends ActionBool {

  SetProperties(activationStatus: EActivationState): void
  SetProperties(isActive: Bool, nameOnTrue: TweakDBID, nameOnFalse: TweakDBID): void
  GetTweakDBChoiceRecord(): string
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
}

declare interface ActivateDevice extends ActionBool {

  SetProperties(action_name?: CName): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface DeactivateDevice extends ActionBool {

  SetProperties(action_name?: CName): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
}

declare interface SetDeviceOFF extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
}

declare interface SetDevicePowered extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
}

declare interface SetCustomPersonalLinkReason extends ScriptableDeviceAction {

  GetFriendlyDescription(): string
}

declare interface FixDevice extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface QuestResetDeviceToInitialState extends ActionBool {

  SetProperties(): void
  GetTweakDBChoiceRecord(): string
}

declare interface QuestForceSecuritySystemAlarmed extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceActivate extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceDeactivate extends ActionBool {

  SetProperties(): void
}

declare interface SetDeviceAttitude extends ActionBool {

  GetBaseCost(): number
  SetProperties(): void
  GetTweakDBChoiceRecord(): string
  GetInteractionIcon(): ChoiceCaptionIconPart_Record
}

declare interface FailedActionEvent extends Event {

}

declare interface SetRevealedInNetwork extends Event {

}

declare interface MarkBackdoorAsRevealedRequest extends ScriptableSystemRequest {

}

declare interface UnregisterAllNetworkLinksRequest extends ScriptableSystemRequest {

}

declare interface RegisterPingNetworkLinkRequest extends ScriptableSystemRequest {

}

declare interface VirtualNetwork_Record extends TweakDBRecord {

  Paths(outList: VirtualNetworkPath_Record[]): void
  GetPathsCount(): number
  GetPathsItem(index: number): VirtualNetworkPath_Record
  PathsContains(item: VirtualNetworkPath_Record): Bool
  SegmentMarker(): Vector3
  Scale(): number
  OffsetMultiplier(): number
  MinDistanceToOther(): number
}

declare interface VirtualNetworkPath_Record extends TweakDBRecord {

  Points(): Vector3[]
  GetPointsCount(): number
  GetPointsItem(index: number): Vector3
  PointsContains(item: Vector3): Bool
}

declare interface RevealNetworkGridNetworkRequest extends Event {

}

declare interface AddOrRemoveListenerForGOEvent extends Event {

}

declare interface PuppetBlackboardUpdater extends IScriptable {

  AddDamageInfo(damageInfo: DamageInfo): void
  AddKillInfo(killInfo: KillInfo): void
}

declare interface HighlightOpacityEvent extends Event {

}

declare interface DebugOutlineEvent extends Event {

}

declare interface TagObjectEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface EvaluateMappinsVisualStateEvent extends Event {

}

declare interface DelayPrereqEvent extends Event {

}

declare interface TriggerAttackEffectorWithDelay extends Event {

}

declare interface ToggleOffMeshConnections extends Event {

}

declare interface MenuEventBlackboardDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface SetGlitchOnUIEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface CustomUIAnimationEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface SmartGunLockEvent extends Event {

}

declare interface AIMoveCommand extends AICommand {

}

declare interface DelayEvent extends ActionBool {

  SetProperties(): void
}

declare interface IInspectListener extends IScriptable {

}

declare interface IStatusEffectListener extends IScriptable {

}

declare interface ScriptStatusEffectListener extends IStatusEffectListener {

}

declare interface gameinteractionsNodeDefinition extends IScriptable {

}

declare interface CPOMissionDevice extends GameObject {

  OnGameAttached(): Bool
  OnDetach(): Bool
  RegisterFactsListener(): void
  UnregisterFactsListener(): void
  OnEnabledFactChangeTrigerred(evt: FactChangedEvent): Bool
  IsBlocked(): Bool
  GetCompatibleDeviceName(): CName
  SetFacts(facts: SFactToChange[]): void
  SetFact(factName: CName, factValue: number, factOperationType: EMathOperationType): void
}

declare interface SFactToChange {

}

declare interface ScriptedDamageSystemListener extends IDamageSystemListener {

  OnHitTriggered(hitEvent: gameHitEvent): void
  OnHitReceived(hitEvent: gameHitEvent): void
  OnPipelineProcessed(hitEvent: gameHitEvent): void
}

declare interface GenericHitPrereq extends IScriptablePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  Initialize(recordID: TweakDBID): void
  CreateHitCondition(record: HitPrereqCondition_Record): BaseHitPrereqCondition
}

declare interface GenericHitPrereqState extends PrereqState {

  SetHitEvent(hitEvent: gameHitEvent): void
  GetHitEvent(): gameHitEvent
  Evaluate(hitEvent: gameHitEvent): Bool
  GetObjectToCheck(obj: string, hitEvent: gameHitEvent): GameObject
}

declare interface HitCallback extends ScriptedDamageSystemListener {

  RegisterState(state: PrereqState): void
  UpdateState(hitEvent: gameHitEvent): void
}

declare interface HitTriggeredCallback extends HitCallback {

  OnHitTriggered(hitEvent: gameHitEvent): void
  OnHitReceived(hitEvent: gameHitEvent): void
}

declare interface HitReceivedCallback extends HitCallback {

  OnHitTriggered(hitEvent: gameHitEvent): void
  OnHitReceived(hitEvent: gameHitEvent): void
}

declare interface PipelineProcessedCallback extends HitCallback {

  OnHitTriggered(hitEvent: gameHitEvent): void
  OnHitReceived(hitEvent: gameHitEvent): void
  OnPipelineProcessed(hitEvent: gameHitEvent): void
}

declare interface HitPrereq_Record extends IPrereq_Record {

  CallbackType(): string
  PipelineStage(): string
  Conditions(outList: HitPrereqCondition_Record[]): void
  GetConditionsCount(): number
  GetConditionsItem(index: number): HitPrereqCondition_Record
  ConditionsContains(item: HitPrereqCondition_Record): Bool
  IsSynchronous(): Bool
}

declare interface HitPrereqCondition_Record extends TweakDBRecord {

  Type(): HitPrereqConditionType_Record
  Invert(): Bool
}

declare interface HitPrereqConditionType_Record extends TweakDBRecord {

  EnumName(): CName
  EnumComment(): CName
  Type(): gamedataHitPrereqConditionType
}

declare interface BaseHitPrereqCondition extends IScriptable {

  SetData(recordID: TweakDBID): void
  Evaluate(hitEvent: gameHitEvent): Bool
  GetObjectToCheck(obj: CName, hitEvent: gameHitEvent): GameObject
}

declare interface AttackSubtypeHitPrereqCondition extends BaseHitPrereqCondition {

  SetData(recordID: TweakDBID): void
  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface AttackTypeHitPrereqCondition extends BaseHitPrereqCondition {

  SetData(recordID: TweakDBID): void
  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface BodyPartHitPrereqCondition extends BaseHitPrereqCondition {

  SetData(recordID: TweakDBID): void
  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface DamageOverTimeTypeHitPrereqCondition extends BaseHitPrereqCondition {

  SetData(recordID: TweakDBID): void
  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface DamageTypeHitPrereqCondition extends BaseHitPrereqCondition {

  SetData(recordID: TweakDBID): void
  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface DistanceCoveredHitPrereqCondition extends BaseHitPrereqCondition {

  SetData(recordID: TweakDBID): void
  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface HitFlagHitPrereqCondition extends BaseHitPrereqCondition {

  SetData(recordID: TweakDBID): void
  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface InstigatorTypeHitPrereqCondition extends BaseHitPrereqCondition {

  SetData(recordID: TweakDBID): void
  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface SameTargetHitPrereqCondition extends BaseHitPrereqCondition {

  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface SourceTypeHitPrereqCondition extends BaseHitPrereqCondition {

  SetData(recordID: TweakDBID): void
  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface StatPoolHitPrereqCondition extends BaseHitPrereqCondition {

  SetData(recordID: TweakDBID): void
  Evaluate(hitEvent: gameHitEvent): Bool
  ComparePoolValues(hitEvent: gameHitEvent): Bool
}

declare interface StatPoolComparisonHitPrereqCondition extends BaseHitPrereqCondition {

  SetData(recordID: TweakDBID): void
  Evaluate(hitEvent: gameHitEvent): Bool
  ComparePoolValues(hitEvent: gameHitEvent): Bool
}

declare interface StatusEffectPresentHitPrereqCondition extends BaseHitPrereqCondition {

  SetData(recordID: TweakDBID): void
  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface TargetKilledHitPrereqCondition extends BaseHitPrereqCondition {

  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface TargetNPCRarityHitPrereqCondition extends BaseHitPrereqCondition {

  SetData(recordID: TweakDBID): void
  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface TargetNPCTypeHitPrereqCondition extends BaseHitPrereqCondition {

  SetData(recordID: TweakDBID): void
  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface AgentMovingHitPrereqCondition extends BaseHitPrereqCondition {

  SetData(recordID: TweakDBID): void
  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface AmmoStateHitPrereqCondition extends BaseHitPrereqCondition {

  SetData(recordID: TweakDBID): void
  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface WeaponTypeHitPrereqCondition extends BaseHitPrereqCondition {

  SetData(recordID: TweakDBID): void
  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface TargetTypeHitPrereqCondition extends BaseHitPrereqCondition {

  SetData(recordID: TweakDBID): void
  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface PlayerStateMachinePrereqState extends PrereqState {

  OnStateUpdate(value: number): Bool
}

declare interface PlayerStateMachinePrereq extends IScriptablePrereq {

  Evaluate(owner: GameObject, newValue: number, prevValue: number): Bool
  Initialize(recordID: TweakDBID): void
  GetStateMachineEnum(): string
  GetCurrentPSMStateIndex(bb: IBlackboard): number
  OnApplied(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface NPCStatePrereqState extends PrereqState {

  OnStateUpdate(value: number): Bool
}

declare interface NPCStatePrereq extends IScriptablePrereq {

  Evaluate(owner: GameObject, newValue: number, prevValue: number): Bool
  Initialize(recordID: TweakDBID): void
  OnApplied(state: PrereqState, game: GameInstance, context: IScriptable): void
  GetStateName(recordID: TweakDBID): string
  GetStateToCheck(): number
}

declare interface StatusEffectPrereq extends IScriptablePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  Initialize(recordID: TweakDBID): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
  Evaluate(statusEffect: StatusEffect_Record): Bool
  OnApplied(state: PrereqState, game: GameInstance, context: IScriptable): void
}

declare interface StatusEffectPrereqState extends PrereqState {

  StatusEffectUpdate(statusEffect: StatusEffect_Record, isApplied: Bool): void
}

declare interface StatusEffectPrereqListener extends ScriptStatusEffectListener {

  OnStatusEffectApplied(statusEffect: StatusEffect_Record): void
  OnStatusEffectRemoved(statusEffect: StatusEffect_Record): void
  RegisterState(state: PrereqState): void
}

declare interface StatusEffectPrereq_Record extends IPrereq_Record {

  StatusEffect(): StatusEffect_Record
  Invert(): Bool
}

declare interface HitTriggeredPrereq extends GenericHitPrereq {

}

declare interface ScriptConditionTypeBase extends IScriptable {

  Evaluate(playerObject: GameObject): Bool
  ToString(): string
}

declare interface Ref_1_3_2_2_BaseStruct {

  /** @noSelf **/
  Foo(self: Ref_1_3_2_2_BaseStruct): void
}

declare interface JournalInternetBase extends IScriptable {

  GetName(): CName
  GetLinkAddress(): string
  GetColor(): Color
  GetHoverColor(): Color
}

declare interface inkToggleController extends inkButtonController {

  Toggle(): void
  IsToggled(): Bool
  SetToggled(toggled: Bool): void
  GetToggleState(): inkEToggleState
  IsAutoToggle(): Bool
  SetAutoToggle(auto: Bool): void
}

declare interface inkBasePanel extends inkCompoundWidget {

}

declare interface inkButtonAnimatedController extends inkButtonController {

  OnInitialize(): Bool
  OnUnitialize(): Bool
  SetButtonText(argValue: string): void
  GetButtonText(): string
  GetButton(): inkText
  OnButtonStateChanged(controller: inkButtonController, oldState: inkEButtonState, newState: inkEButtonState): Bool
}

declare interface inkText extends inkLeafWidget {

  GetText(): string
  SetText(displayText: string, textParams?: inkTextParams): void
  SetTextDirect(displayText: string): void
  SetLocalizedText(locKey: CName, textParams?: inkTextParams): void
  SetLocalizedTextString(locKey: string, textParams?: inkTextParams): void
  SetLocalizedTextScript(locKey: string, textParams?: inkTextParams): void
  SetLocalizedTextScript(locKey: CName, textParams?: inkTextParams): void
  GetTextParameters(): inkTextParams
  SetTextParameters(textParams: inkTextParams): void
  GetLocalizationKey(): CName
  SetLocalizationKey(displayText: CName): void
  SetLocalizationKeyString(displayText: string): void
  SetTextFromParts(textpart1: string, textpart2?: string, textpart3?: string): void
  GetVerticalAlignment(): textVerticalAlignment
  SetVerticalAlignment(verticalAlignment: textVerticalAlignment): void
  GetVerticalAlignmentEnumValue(nameValue: CName): textVerticalAlignment
  GetHorizontalAlignment(): textHorizontalAlignment
  SetHorizontalAlignment(horizontalAlignment: textHorizontalAlignment): void
  GetHorizontalAlignmentEnumValue(nameValue: CName): textHorizontalAlignment
  SetFontFamily(fontFamilyPath: string, fontStyle?: CName): void
  GetFontStyle(): CName
  SetFontStyle(fontStyle: CName): void
  GetFontSize(): number
  SetFontSize(textSize: number): void
  GetTracking(): number
  SetTracking(tracking: number): void
  GetLetterCase(): textLetterCase
  SetLetterCase(letterCase: textLetterCase): void
  EnableAutoScroll(enableState: Bool): void
  SetDateTimeByTimestamp(timestamp: number): void
  GetScrollTextSpeed(): number
  SetScrollTextSpeed(scrollTextSpeed: number): void
}

declare interface AbstractDataSource extends IScriptable {

  Size(): number
  GetItemAsVariant(index: number): Variant
  HasItemAsVariant(data: Variant): Bool
}

declare interface inkAnimTextInterpolator extends inkAnimInterpolator {

  SetStartProgress(complexityValue: number): void
  GetStartProgress(): number
  SetEndProgress(complexityValue: number): void
  GetEndProgress(): number
}

declare interface ListItemData extends IScriptable {

}

declare interface inkCompoundRef extends inkWidgetRef {

  /** @noSelf **/
  GetNumChildren(self: inkCompoundRef): number
  /** @noSelf **/
  AddChild(self: inkCompoundRef, widgetTypeName: CName): inkWidget
  /** @noSelf **/
  AddChildWidget(self: inkCompoundRef, widget: inkWidget): void
  /** @noSelf **/
  GetWidgetByPath(self: inkCompoundRef, path: inkWidgetPath): inkWidget
  /** @noSelf **/
  GetWidgetByIndex(self: inkCompoundRef, index: number): inkWidget
  /** @noSelf **/
  GetWidget(self: inkCompoundRef, path: inkWidgetPath): inkWidget
  /** @noSelf **/
  GetWidget(self: inkCompoundRef, index: number): inkWidget
  /** @noSelf **/
  GetWidgetByPathName(self: inkCompoundRef, widgetNamePath: CName): inkWidget
  /** @noSelf **/
  GetWidget(self: inkCompoundRef, path: CName): inkWidget
  /** @noSelf **/
  RemoveChild(self: inkCompoundRef, childWidget: inkWidget): void
  /** @noSelf **/
  RemoveChildByIndex(self: inkCompoundRef, index: number): void
  /** @noSelf **/
  RemoveChildByName(self: inkCompoundRef, widgetName: CName): void
  /** @noSelf **/
  RemoveAllChildren(self: inkCompoundRef): void
  /** @noSelf **/
  ReorderChild(self: inkCompoundRef, childWidget: inkWidget, newIndex: number): void
  /** @noSelf **/
  GetChildOrder(self: inkBasePanelRef): inkEChildOrder
  /** @noSelf **/
  SetChildOrder(self: inkBasePanelRef, newOrder: inkEChildOrder): void
  /** @noSelf **/
  GetChildPosition(self: inkCompoundRef, childWidget: inkWidget): Vector2
  /** @noSelf **/
  GetChildSize(self: inkCompoundRef, childWidget: inkWidget): Vector2
}

declare interface inkBasePanelRef extends inkCompoundRef {

}

declare interface AIBehaviorScriptBase extends IScriptable {

  ToString(): string
  GetDescription(context: ScriptExecutionContext): string
  /** @noSelf **/
  GetPuppet(context: ScriptExecutionContext): ScriptedPuppet
  /** @noSelf **/
  GetNPCPuppet(context: ScriptExecutionContext): NPCPuppet
  /** @noSelf **/
  GetGame(context: ScriptExecutionContext): GameInstance
  /** @noSelf **/
  GetAITime(context: ScriptExecutionContext): number
  /** @noSelf **/
  GetHitReactionComponent(context: ScriptExecutionContext): HitReactionComponent
  /** @noSelf **/
  GetAIComponent(context: ScriptExecutionContext): AIHumanComponent
  /** @noSelf **/
  GetStatPoolValue(context: ScriptExecutionContext, statPoolType: gamedataStatPoolType): number
  /** @noSelf **/
  GetStatPoolPercentage(context: ScriptExecutionContext, statPoolType: gamedataStatPoolType): number
  /** @noSelf **/
  GetCombatTarget(context: ScriptExecutionContext): GameObject
  /** @noSelf **/
  GetCompanion(context: ScriptExecutionContext): GameObject
  /** @noSelf **/
  GetUpperBodyState(context: ScriptExecutionContext): gamedataNPCUpperBodyState
}

declare interface AIbehaviortaskScript extends AIBehaviorScriptBase {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  ChildCompleted(context: ScriptExecutionContext, status: AIbehaviorCompletionStatus): void
  /** @noSelf **/
  CutSelector(context: ScriptExecutionContext): void
}

declare interface AnimFeatureCustom extends AnimFeature {

}

declare interface inkBaseShapeWidget extends inkLeafWidget {

}

declare interface inkGameNotificationData extends inkUserData {

}

declare interface inkInputDisplayController extends inkLogicController {

  SetInputKey(inputKeyData: inkInputKeyData): void
  SetFixedIconHeight(fixedIconHeight: number): void
  GetInputAction(): CName
  SetInputAction(actionName: CName): void
  SetVisible(visible: Bool): void
  SetHoldIndicatorType(type: inkInputHintHoldIndicationType): void
}

declare interface IDisplayData extends IScriptable {

  CreateTooltipData(manager: PlayerDevelopmentDataManager): BasePerksMenuTooltipData
}

declare interface BaseScriptableDataSource extends AbstractDataSource {

  GetItem(index: number): IScriptable
  HasItem(data: IScriptable): Bool
}

declare interface ScriptableDataView extends BaseScriptableDataSource {

  SetSource(source: BaseScriptableDataSource): void
  Filter(): void
  EnableSorting(): void
  DisableSorting(): void
  IsSortingEnabled(): Bool
  Sort(): void
  FilterItem(data: IScriptable): Bool
  SortItem(left: IScriptable, right: IScriptable): Bool
}

declare interface inkVirtualItemTemplateClassifier extends IScriptable {

}

declare interface BaseButtonView extends inkLogicController {

  OnInitialize(): Bool
  OnButtonStateChanged(controller: inkButtonController, oldState: inkEButtonState, newState: inkEButtonState): Bool
  OnButtonHoldProgressChanged(controller: inkButtonController, progress: number): Bool
  ButtonStateChanged(oldState: inkEButtonState, newState: inkEButtonState): void
  ButtonHoldProgressChanged(progress: number): void
  GetParentButton(): inkButtonController
}

declare interface inkProjectedHUDGameController extends inkHUDGameController {

  RegisterScreenProjection(projectionData: inkScreenProjectionData): inkScreenProjection
  UnregisterScreenProjection(projection: inkScreenProjection): void
  SetShouldNotifyProjections(shouldNotify: Bool): void
  EnableSleeping(enabled: Bool): void
  WakeUp(): void
  ApplyProjectionMarginOnWidget(widget: inkWidget, margin: inkMargin): void
}

declare interface JournalBriefingBaseSection extends JournalEntry {

  GetType(): gameJournalBriefingContentType
}

declare interface inkDiscreteNavigationController extends inkLogicController {

  Navigate(direction: inkDiscreteNavigationDirection): void
  OverrideNavigation(direction: inkDiscreteNavigationDirection, target: inkWidget): void
}

declare interface inkVirtualCompoundController extends inkDiscreteNavigationController {

  SetSource(source: AbstractDataSource): void
  GetSelectedItem(): inkVirtualCompoundItemController
  GetToggledItem(): inkVirtualCompoundItemController
  SetClassifier(classifier: inkVirtualItemTemplateClassifier): void
  SelectItem(index: number): void
  ToggleItem(index: number): void
  ScrollToIndex(index: number): void
  GetSelectedIndex(): number
  GetToggledIndex(): number
}

declare interface inkItemPositionProvider extends IScriptable {

}

declare interface inkVirtualListController extends inkVirtualCompoundController {

}

declare interface VirtualNestedListController extends inkVirtualListController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  GetDataView(): VirtualNestedListDataView
  SetData(data: VirutalNestedListData[], keepToggledLevels?: Bool, sortOnce?: Bool): void
  ToggleLevel(targetLevel: number): void
  IsLevelToggled(targetLevel: number): Bool
  GetItem(index: number): Variant
  GetDataSize(): number
  EnableSorting(): void
  DisableSorting(): void
  IsSortingEnabled(): Bool
}

declare interface ScriptableDataSource extends BaseScriptableDataSource {

  AppendItem(data: IScriptable): void
  InsertItemAt(index: number, data: IScriptable): void
  RemoveItem(data: IScriptable): void
  RemoveItemAt(index: number): void
  Clear(): void
  GetArray(): IScriptable[]
  GetArraySize(): number
  Reset(scriptables: IScriptable[]): void
}

declare interface VirutalNestedListClassifier extends inkVirtualItemTemplateClassifier {

  ClassifyItem(data: Variant): number
}

declare interface VirutalNestedListData extends IScriptable {

}

declare interface VirtualNestedListDataView extends ScriptableDataView {

  Setup(): void
  SetToggledLevels(toggledLevels: number[], defaultCollapsed: Bool): void
  FilterItem(data: IScriptable): Bool
  FilterItems(data: VirutalNestedListData): Bool
  SortItem(left: IScriptable, right: IScriptable): Bool
  PreSortItems(compareBuilder: CompareBuilder, left: VirutalNestedListData, right: VirutalNestedListData): void
  SortItems(compareBuilder: CompareBuilder, left: VirutalNestedListData, right: VirutalNestedListData): void
}

declare interface CompareBuilder extends IScriptable {

  /** @noSelf **/
  Make(): CompareBuilder
  Reset(): void
  Get(): number
  GetBool(): Bool
  StringAsc(a: string, b: string): CompareBuilder
  StringDesc(a: string, b: string): CompareBuilder
  UnicodeStringAsc(a: string, b: string): CompareBuilder
  UnicodeStringDesc(a: string, b: string): CompareBuilder
  IntAsc(a: number, b: number): CompareBuilder
  IntDesc(a: number, b: number): CompareBuilder
  FloatAsc(a: number, b: number): CompareBuilder
  FloatDesc(a: number, b: number): CompareBuilder
  BoolTrue(a: Bool, b: Bool): CompareBuilder
  BoolFalse(a: Bool, b: Bool): CompareBuilder
  GameTimeAsc(a: GameTime, b: GameTime): CompareBuilder
  GameTimeDesc(a: GameTime, b: GameTime): CompareBuilder
}

declare interface GenericCodexEntryData extends IScriptable {

}

declare interface gameuiMenuGameController extends inkGameController {

  SetNextLoadingTypeInitial(): void
  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
  OnBack(userData: IScriptable): Bool
}

declare interface inkMenuEventDispatcher extends IScriptable {

  SpawnEvent(name: CName, userData?: IScriptable): void
  SpawnAddressedEvent(scenario: CName, name: CName, userData?: IScriptable): void
  RegisterToEvent(eventName: CName, object: IScriptable, functionName: CName): void
  UnregisterFromEvent(eventName: CName, object: IScriptable, functionName: CName): void
}

declare interface BackActionCallback extends Event {

}

declare interface BuffInfo {

}

declare interface AGenericTooltipController extends inkLogicController {

  OnInitialize(): Bool
  SetStyle(styleResPath: ResRef): void
  Show(): void
  Hide(): void
  SetData(tooltipData: ATooltipData): void
  Refresh(): void
}

declare interface inkButtonDpadSupportedController extends inkButtonAnimatedController {

  OnInitialize(): Bool
  SetDpadTargets(argLeft: inkWidget, argUp: inkWidget, argRight: inkWidget, argDown: inkWidget): void
  SetDpadLeftTarget(argNew: inkWidget): void
  SetDpadUpTarget(argNew: inkWidget): void
  SetDpadRightTarget(argNew: inkWidget): void
  SetDpadDownTarget(argNew: inkWidget): void
}

declare interface inkVirtualCompoundItemController extends inkButtonController {

  GetIndex(): number
  GetData(): Variant
  IsSelected(): Bool
  IsToggled(): Bool
  OnSetCursorOver(): Bool
}

declare interface inkRadioGroupController extends inkLogicController {

  AddToggle(toAdd: inkToggleController): void
  AddToggles(toAdd: inkToggleController[]): void
  RemoveToggleController(toRemove: inkToggleController): void
  RemoveToggle(index: number): void
  GetIndexForToggle(controller: inkToggleController): number
  Toggle(toToggle: number): void
  GetCurrentIndex(): number
}

declare interface SelectorController extends inkLogicController {

  AddValues(values: string[]): void
  AddValue(value: string): void
  Clear(): void
  GetValues(): string[]
  GetValuesCount(): number
  IsCyclical(): Bool
  GetCurrIndex(): number
  SetCurrIndex(index: number): void
  SetCurrIndexWithDirection(index: number, changeDirection: inkSelectorChangeDirection): void
  Next(): number
  Prior(): void
  SetLabel(label: string): void
  OnInitialize(): Bool
  OnUpdateValue(value: string, index: number, changeDirection: inkSelectorChangeDirection): Bool
  OnLeft(e: inkPointerEvent): Bool
  OnRight(e: inkPointerEvent): Bool
}

declare interface IVisualObject extends IScriptable {

}

declare interface BaseMappinBaseController extends inkLogicController {

  GetMappin(): IMappin
  GetProfile(): MappinUIRuntimeProfile_Record
  GetDistanceToPlayer(): number
  GetVerticalRelationToPlayer(): gamemappinsVerticalPositioning
  ShouldShowDistance(): Bool
  ShouldShowDisplayName(): Bool
  SetProjectToScreenSpace(projectToScreenSpace: Bool): void
  IsClamped(): Bool
  ShouldClamp(): Bool
  OverrideClamp(shouldClamp: Bool): void
  OverrideClampX(shouldClamp: Bool): void
  OverrideClampY(shouldClamp: Bool): void
  OverrideScaleByDistance(shouldScale: Bool): void
  SetRootVisible(visible: Bool): void
  SetIgnorePriority(ignore: Bool): void
  IsCustomPositionTracked(): Bool
  IsPlayerTracked(): Bool
  IsTracked(): Bool
  IsGPSPortal(): Bool
  UpdateRootState(): void
  UpdateTrackedState(): void
  ComputeRootState(): CName
  GetWidgetForNameplateSlot(): inkWidget
  GetVisualData(): GameplayRoleMappinData
  GetAnimPlayer_Tracked(): animationPlayer
  GetAnimPlayer_AboveBelow(): animationPlayer
}

declare interface animationPlayer extends inkLogicController {

  OnInitialize(): Bool
  PlayOrPause(flag: Bool): void
  PlayOrStop(flag: Bool): void
  Play(): void
  Pause(): void
  Stop(): void
  CreateAndPlayAnimation(): inkAnimProxy
}

declare interface inkWidgetsSet extends IScriptable {

  Select(widget: inkWidget, selectionRule?: inkSelectionRule, param?: string): inkWidgetsSet
  FromSet(other: inkWidgetsSet): inkWidgetsSet
  Get(): inkWidget[]
}

declare interface BaseMinimapMappinController extends BaseMappinBaseController {

  SetForceShow(value: Bool): void
  SetForceHide(value: Bool): void
  OnInitialize(): Bool
  OnIntro(): Bool
  OnUpdate(): Bool
  Initialize(): void
  Intro(): void
  Update(): void
  KeepIconOnClamping(): Bool
  UpdateClamping(): void
  UpdateAboveBelowVerticalRelation(): void
}

declare interface IMappin extends IVisualObject {

  IsStatic(): Bool
  IsVisible(): Bool
  IsActive(): Bool
  IsVisited(): Bool
  IsQuestMappin(): Bool
  IsQuestNPCMappin(): Bool
  IsQuestEntityMappin(): Bool
  IsQuestAreaMappin(): Bool
  IsPlayerTracked(): Bool
  GetWorldPosition(): Vector4
  GetDisplayName(): string
  GetDistanceToPlayer(): number
  GetVerticalRelationToPlayer(): gamemappinsVerticalPositioning
  GetEntityID(): EntityID
  GetPhase(): gamedataMappinPhase
  GetVariant(): gamedataMappinVariant
  GetScriptData(): MappinScriptData
  IsQuestImportant(): Bool
}

declare interface BaseInteractionMappinController extends BaseMappinBaseController {

}

declare interface MappinsContainerController extends inkProjectedHUDGameController {

  GetSpawnContainer(): inkCompoundWidget
  CreateMappinUIProfile(mappin: IMappin, mappinVariant: gamedataMappinVariant, customData: MappinControllerCustomData): MappinUIProfile
}

declare interface MappinUIProfile {

  /** @noSelf **/
  CreateDefault(_widgetResource: ResRef): MappinUIProfile
  /** @noSelf **/
  Create(_widgetResource: ResRef, spawnProfile: TweakDBID): MappinUIProfile
  /** @noSelf **/
  Create(_widgetResource: ResRef, spawnProfile: TweakDBID, runtimeProfile: TweakDBID): MappinUIProfile
  /** @noSelf **/
  None(): MappinUIProfile
}

declare interface RuntimeMappin extends IMappin {

  EnableVisibilityThroughWalls(visible: Bool): void
  GetOwnerObjectMarkerPossibility(): Bool
}

declare interface inkTextAnimationController extends inkLogicController {

  PlaySetAnimation(): inkAnimProxy
  SetDuration(duration: number): void
  GetDuration(): number
  SetDelay(delay: number): void
  GetDelay(): number
  SetStart(delay: number): void
  GetStart(): number
  SetEnd(delay: number): void
  GetEnd(): number
}

declare interface gameuiGenericNotificationGameController extends inkGameController {

  AddNewNotificationData(notification: gameuiGenericNotificationData): void
  RemoveNotification(notification: IScriptable): void
  SetNotificationPause(value: Bool): void
  SetNotificationPauseWhenHidden(value: Bool): void
  GetShouldSaveState(): Bool
  GetID(): number
}

declare interface GenericNotificationBaseAction extends IScriptable {

  Execute(data: IScriptable): Bool
  GetLabel(): string
}

declare interface QuestUpdateNotificationViewData extends GenericNotificationViewData {

  CanMerge(data: GenericNotificationViewData): Bool
  OnRemoveNotification(data: IScriptable): Bool
  GetPriority(): number
}

declare interface JournalEntryNotificationRemoveRequestData extends IScriptable {

}

declare interface BasePerkDisplayData extends IDisplayData {

}

declare interface PerksMenuAttributeItemClicked extends Event {

}

declare interface BasePerksMenuTooltipData extends ATooltipData {

  RefreshRuntimeData(): void
}

declare interface ListController extends inkLogicController {

  PushData(value: IScriptable, refreshImmediately?: Bool): void
  PushDataList(value: IScriptable[], refreshImmediately?: Bool): void
  Clear(refreshImmediately?: Bool): void
  Refresh(): void
  Next(): void
  Prior(): void
  FindIndex(value: IScriptable): number
  HasValidSelection(): Bool
  GetSelectedIndex(): number
  SetSelectedIndex(index: number, force?: Bool): void
  GetToggledIndex(): number
  SetToggledIndex(index: number): void
  SetLibraryID(id: CName): void
  GetItemAt(index: number): inkWidget
  Size(): number
  HandleInput(e: inkPointerEvent, gameCtrl?: gameuiMenuGameController): void
  MoveCursorToSelection(gameCtrl: gameuiMenuGameController): void
}

declare interface inkHorizontalPanel extends inkBasePanel {

}

declare interface ListItemController extends inkButtonController {

  GetIndex(): number
  GetData(): IScriptable
  IsSelected(): Bool
  IsToggled(): Bool
  OnInitialize(): Bool
  OnDataChanged(value: IScriptable): Bool
  OnSetCursorOver(): Bool
}

declare interface gameuiCharacterCustomizationInfo extends IScriptable {

}

declare interface BaseGOGRegisterController extends inkLogicController {

  SetupQRCodeWidget(widget: inkImage, qrCodePNGBlob: number[]): void
}

declare interface AnimatedListItemController extends ListItemController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnButtonStateChanged(controller: inkButtonController, oldState: inkEButtonState, newState: inkEButtonState): Bool
  OnAddedToList(target: ListItemController): Bool
}

declare interface inkAnimTextOffset extends inkAnimTextInterpolator {

}

declare interface ABaseWrapper extends IScriptable {

  ToString(): string
}

declare interface AJournalEntryWrapper extends ABaseWrapper {

  SetUniqueId(uniqueId: number): void
  GetUniqueId(): number
}

declare interface ABaseQuestObjectiveWrapper extends AJournalEntryWrapper {

  Init(questObjective: JournalQuestObjectiveBase, objectiveStatus: gameJournalEntryState, isTracked: Bool, uniqueId: number, currentCounter: number, totalCounter: number): void
  GetDescription(): string
  GetIsOptional(): Bool
  GetStatus(): gameJournalEntryState
  IsActive(): Bool
  GetQuestObjective(): JournalQuestObjectiveBase
  IsTracked(): Bool
  IsTrackedInHierarchy(): Bool
  GetCounterText(): string
}

declare interface ConfigNotificationListener extends IScriptable {

  OnNotify(status: ConfigNotificationType): void
  Register(): Bool
  Unregister(): Bool
}

declare interface SettingsSelectorController extends inkLogicController {

  BindSettings(entry: ConfigVar): void
  GetDisplayName(): CName
  GetDescription(): CName
  GetVar(): ConfigVar
  GetGroupPath(): CName
  GetVarName(): CName
  GetVarUpdatePolicy(): ConfigVarUpdatePolicy
  IsDynamic(): Bool
  SetAdditionalText(text: CName): void
  ResetAdditionalText(): void
  Setup(entry: ConfigVar, isPreGame: Bool): void
  OnInitialize(): Bool
  OnHoverOver(e: inkPointerEvent): Bool
  OnHoverOut(e: inkPointerEvent): Bool
  OnElementHovered(e: inkPointerEvent): Bool
  OnUpdateValue(): Bool
  Refresh(): void
  OnLeft(e: inkPointerEvent): Bool
  OnRight(e: inkPointerEvent): Bool
  OnShortcutRepeat(e: inkPointerEvent): Bool
  OnShortcutPress(e: inkPointerEvent): Bool
  AcceptValue(forward: Bool): void
  ChangeValue(forward: Bool): void
}

declare interface inkLanguageOverrideProvider extends inkUserData {

  SetLanguage(lang: scnDialogLineLanguage): void
}

declare interface SettingsSelectorControllerRange extends SettingsSelectorController {

  OnInitialize(): Bool
  Refresh(): void
  RegisterShortcutCallbacks(): void
  UpdateValueTextLanguageResources(): void
}

declare interface SettingsSelectorControllerList extends SettingsSelectorControllerRange {

  PopulateDots(size: number): void
  SelectDot(index: number): void
}

declare interface SettingsSelectorControllerListName extends SettingsSelectorControllerList {

  Setup(entry: ConfigVar, isPreGame: Bool): void
  ChangeValue(forward: Bool): void
  Refresh(): void
}

declare interface ConfigVarListName extends ConfigVar {

  GetValueFor(index: number): CName
  GetValue(): CName
  GetDefaultValue(): CName
  GetValues(): CName[]
  GetIndexFor(value: CName): number
  GetIndex(): number
  GetDefaultIndex(): number
  SetIndex(index: number): void
  GetDisplayValue(index: number): CName
}

declare interface BaseCodexLinkController extends inkLogicController {

  OnInitialize(): Bool
  OnHoverOver(evt: inkPointerEvent): Bool
  OnHoverOut(evt: inkPointerEvent): Bool
  OnRelease(e: inkPointerEvent): Bool
  Activate(): void
  ActivateSecondary(): void
  ForcePlayAnimation(animationName: CName): void
}

declare interface hubSelectorSingleCarouselController extends SelectorController {

  OnInitialize(): Bool
  OnMenuLabelClick(e: inkPointerEvent): Bool
  OnMenuLabelHover(e: inkPointerEvent): Bool
  OnMenuLabelHoverOut(e: inkPointerEvent): Bool
  SetupMenu(data: MenuData[], startIdentifier: number): void
  ScrollTo(data: MenuData): void
  UpdateArrowsVisibility(): void
  OnUpdateValue(value: string, index: number, changeDirection: inkSelectorChangeDirection): Bool
  GetLoopedValue(value: number, limit: number): number
  SetFinishedValues(selectedIndex: number): void
  OnArrangeChildrenComplete(): Bool
  GetTranslations(targetIndex: number): number[]
  GetMaskTargetWidth(targetIndex: number): number
  ResetAnimatedStates(): void
  Animate(targetIndex: number, direction: inkSelectorChangeDirection): void
  AddActiveProxy(proxy: inkAnimProxy): void
  AddActiveProxy(proxies: inkAnimProxy[]): void
  ScaleAnimation(targetWidget: inkWidget, startScale: number, endScale: number): inkAnimProxy
  TranslationAnimation(targetWidget: inkWidget, startTranslation: number, endTranslation: number): inkAnimProxy
  SizeAnimation(targetWidget: inkWidget, startSize: Vector2, endSize: Vector2): inkAnimProxy
  OpacityAnimation(targetWidget: inkWidget, startOpacity: number, endOpacity: number): inkAnimProxy
  ColorAnimation(targetWidgets: inkWidget[], startColor: HDRColor, endColor: HDRColor): inkAnimProxy[]
  OnTranslationCompleted(anim: inkAnimProxy): Bool
}

declare interface HubMenuLabelContentContainer extends inkLogicController {

  OnInitialize(): Bool
  SetData(data: MenuData): void
  SetCarouselPosition(carouselPosition: number): void
  SetInteractive(value: Bool): void
  GetCarouselPosition(): number
  GetIdentifier(): number
  GetSize(): number
  GetRealDesiredSize(): Vector2
  GetRealDesiredWidth(): number
  GetTintedWidgets(): inkWidget[]
  SetTintColor(color: HDRColor): void
}

declare interface MenuData {

}

declare interface inkAnimScale extends inkAnimInterpolator {

  GetStartScale(): Vector2
  GetEndScale(): Vector2
  SetStartScale(startScale: Vector2): void
  SetEndScale(endScale: Vector2): void
}

declare interface inkAnimTranslation extends inkAnimInterpolator {

  GetStartTranslation(): Vector2
  GetEndTranslation(): Vector2
  SetStartTranslation(startTranslation: Vector2): void
  SetEndTranslation(endTranslation: Vector2): void
}

declare interface inkAnimColor extends inkAnimInterpolator {

  GetStartColor(): Color
  GetEndColor(): Color
  SetStartColor(startColor: HDRColor): void
  SetStartColor(startColor: Color): void
  SetEndColor(endColor: HDRColor): void
  SetEndColor(endColor: Color): void
}

declare interface BackpackDataView extends ScriptableDataView {

  BindUIScriptableSystem(uiScriptableSystem: UIScriptableSystem): void
  SetFilterType(type: ItemFilterCategory): void
  GetFilterType(): ItemFilterCategory
  SetSortMode(mode: ItemSortMode): void
  GetSortMode(): ItemSortMode
  PreSortingInjection(builder: ItemCompareBuilder): ItemCompareBuilder
  PreFilterInjection(itemData: InventoryItemData): Bool
  SortItem(left: IScriptable, right: IScriptable): Bool
  FilterItem(data: IScriptable): Bool
  DerivedFilterItem(data: IScriptable): DerivedFilterResult
  FilterWeapons(itemData: InventoryItemData): Bool
  FilterClothes(itemData: InventoryItemData): Bool
  FilterConsumable(itemData: InventoryItemData): Bool
  FilterCyberwareByItemType(itemType: gamedataItemType): Bool
  FilterCyberwareByEquipmentArea(equipmentArea: gamedataEquipmentArea): Bool
  FilterCyberware(itemData: InventoryItemData): Bool
  FilterAttachments(itemData: InventoryItemData): Bool
  FilterQuestItems(itemData: InventoryItemData): Bool
}

declare interface WrappedInventoryItemData extends IScriptable {

}

declare interface ItemCompareBuilder extends IScriptable {

  /** @noSelf **/
  Make(item1: InventoryItemData, item2: InventoryItemData): ItemCompareBuilder
  Get(): number
  GetBool(): Bool
  NameAsc(): ItemCompareBuilder
  NameDesc(): ItemCompareBuilder
  QualityAsc(): ItemCompareBuilder
  QualityDesc(): ItemCompareBuilder
  PriceAsc(): ItemCompareBuilder
  PriceDesc(): ItemCompareBuilder
  WeightAsc(): ItemCompareBuilder
  WeightDesc(): ItemCompareBuilder
  DPSAsc(): ItemCompareBuilder
  DPSDesc(): ItemCompareBuilder
  ItemType(): ItemCompareBuilder
  QuestItem(): ItemCompareBuilder
  NewItem(uiScriptableSystem: UIScriptableSystem): ItemCompareBuilder
  /** @noSelf **/
  GetDPS(item: InventoryItemData): number
  /** @noSelf **/
  GetTypeSortValue(item: InventoryItemData): number
  /** @noSelf **/
  GetEquipmentAreaIndex(equipmentArea: gamedataEquipmentArea): number
  /** @noSelf **/
  GetItemTypeIndex(itemType: gamedataItemType): number
  /** @noSelf **/
  HasItemTypeInnerIndex(itemType: gamedataItemType): Bool
  /** @noSelf **/
  GetItemTypeInnerIndex(itemType: gamedataItemType, itemData: gameItemData): number
  /** @noSelf **/
  GetItemTypeOrder(item: InventoryItemData): number
}

declare interface UIScriptableSystem extends ScriptableSystem {

  OnAttach(): void
  OnRestored(saveVersion: number, gameVersion: number): void
  OnDetach(): void
  SetupInstance(): void
  OnPlayerAttach(request: PlayerAttachRequest): void
  /** @noSelf **/
  GetInstance(gameInstance: GameInstance): UIScriptableSystem
  OnSetBackpackSorting(request: UIScriptableSystemSetBackpackSorting): void
  OnSetBackpackFilter(request: UIScriptableSystemSetBackpackFilter): void
  OnSetVendorPanelVendorSorting(request: UIScriptableSystemSetVendorPanelVendorSorting): void
  OnSetVendorPanelPlayerSorting(request: UIScriptableSystemSetVendorPanelPlayerSorting): void
  OnInventoryItemAdded(request: UIScriptableSystemInventoryAddItem): void
  OnInventoryItemRemoved(request: UIScriptableSystemInventoryRemoveItem): void
  OnInventoryItemInspected(request: UIScriptableSystemInventoryInspectItem): void
  GetBackpackActiveSorting(defaultValue?: number): number
  GetBackpackActiveFilter(defaultValue?: number): number
  GetVendorPanelVendorActiveSorting(defaultValue?: number): number
  GetVendorPanelPlayerActiveSorting(defaultValue?: number): number
  IsInventoryItemNew(itemID: ItemID): Bool
}

declare interface UIScriptableInventoryListenerCallback extends InventoryScriptCallback {

  AttachScriptableSystem(gameInstance: GameInstance): void
  OnItemAdded(itemID: ItemID, itemData: gameItemData, flaggedAsSilent: Bool): void
  OnItemRemoved(itemID: ItemID, difference: number, currentQuantity: number): void
  OnItemQuantityChanged(itemID: ItemID, diff: number, total: number, flaggedAsSilent: Bool): void
}

declare interface UIScriptableSystemInventoryAddItem extends ScriptableSystemRequest {

}

declare interface UIScriptableSystemInventoryRemoveItem extends ScriptableSystemRequest {

}

declare interface UIScriptableSystemSetBackpackSorting extends ScriptableSystemRequest {

}

declare interface UIScriptableSystemSetBackpackFilter extends ScriptableSystemRequest {

}

declare interface UIScriptableSystemSetVendorPanelVendorSorting extends ScriptableSystemRequest {

}

declare interface UIScriptableSystemSetVendorPanelPlayerSorting extends ScriptableSystemRequest {

}

declare interface UIScriptableSystemInventoryInspectItem extends ScriptableSystemRequest {

}

declare interface ItemCategoryFliter extends IScriptable {

  /** @noSelf **/
  FilterItem(filter: ItemFilterCategory, wrappedData: WrappedInventoryItemData): Bool
  /** @noSelf **/
  IsOfCategoryType(filter: ItemFilterCategory, data: gameItemData): Bool
  /** @noSelf **/
  GetItemCategoryType(data: gameItemData): ItemFilterCategory
}

declare interface HUDPhoneElement extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnStateChanged(widget: inkWidget, oldState: CName, newState: CName): Bool
  SetState(visibility: EHudPhoneVisibility): void
  GetStateFromName(stateName: CName): EHudPhoneVisibility
  GetState(): EHudPhoneVisibility
  Show(): void
  Hide(): void
}

declare interface BluelinePart extends IScriptable {

}

declare interface InventoryItemDisplayController extends BaseButtonView {

  DEBUG_GetIconErrorInfo(): DEBUG_IconErrorInfo
  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnDisplayHoverOver(evt: inkPointerEvent): Bool
  OnDisplayHoverOut(evt: inkPointerEvent): Bool
  OnDisplayClicked(evt: inkPointerEvent): Bool
  HandleLocalClick(evt: inkPointerEvent): void
  OnDisplayHold(evt: inkPointerEvent): Bool
  Setup(itemData: InventoryItemData, slotID: TweakDBID, displayContext?: ItemDisplayContext): void
  Setup(inventoryDataManager: InventoryDataManagerV2, itemData: InventoryItemData, slotID: TweakDBID, displayContext?: ItemDisplayContext, forceUpdateCounter?: Bool): void
  Setup(tooltipData: InventoryTooltipData): void
  Setup(itemData: InventoryItemData, slotIndex?: number): void
  Setup(recipeData: RecipeData, displayContext?: ItemDisplayContext): void
  Setup(itemData: InventoryItemData, displayContext: ItemDisplayContext, enoughMoney?: Bool, owned?: Bool): void
  Setup(itemData: InventoryItemData, equipmentArea: gamedataEquipmentArea, slotName?: string, slotIndex?: number, displayContext?: ItemDisplayContext): void
  Bind(inventoryDataManager: InventoryDataManagerV2, equipmentArea: gamedataEquipmentArea, slotIndex?: number, displayContext?: ItemDisplayContext): void
  SetParentItem(parentItemData: gameItemData): void
  BindComparisonAndScriptableSystem(uiScriptableSystem: UIScriptableSystem, comparisonResolver: ItemPreferredComparisonResolver): void
  SetLocked(value: Bool): void
  IsLocked(): Bool
  SetHUDMode(inHUD: Bool): void
  GetDisplayContext(): ItemDisplayContext
  InvalidateContent(): void
  OnItemUpdate(itemID: ItemID): void
  UpdateThisSlotItems(item?: InventoryItemData, slotID?: TweakDBID, itemType?: gamedataItemType, equipmentArea?: gamedataEquipmentArea, force?: Bool): void
  UpdateItemsCounter(item?: InventoryItemData, slotID?: TweakDBID, itemType?: gamedataItemType, equipmentArea?: gamedataEquipmentArea, force?: Bool): Bool
  IsInRestrictedNewArea(equipmentArea: gamedataEquipmentArea): Bool
  UpdateNewItemsIndicator(item?: InventoryItemData, slotID?: TweakDBID, itemType?: gamedataItemType, equipmentArea?: gamedataEquipmentArea, force?: Bool): Bool
  SetDefaultShadowIcon(textureAtlasPart: CName, textureAtlas?: string): void
  RefreshUI(): void
  UpdateEmptyWidgets(): void
  UpdateLocked(): void
  UpdateLoot(): void
  UpdateBlueprint(): void
  UpdateRequirements(): void
  UpdateIndicators(): void
  UpdateIsNewIndicator(): void
  IsEquippedContext(context: ItemDisplayContext): Bool
  ShouldShowEquipped(): Bool
  UpdateEquipped(): void
  UpdateQuantity(): void
  UpdateItemName(): void
  GetPriceText(): string
  UpdatePrice(): void
  UpdateIcon(): void
  UpdateRecipeIcon(): void
  OnIconCallback(e: iconAtlasCallbackData): Bool
  UpdateRarity(): void
  SetComparisonState(comparisonState: ItemComparisonState): void
  SetBuybackStack(value: Bool): void
  SetIsNew(value: Bool, parrentWrappedDataObject?: WrappedInventoryItemData): void
  GetShadowIconFromEquipmentArea(equipmentArea: gamedataEquipmentArea): CName
  GetShadowIconAtlas(equipmentArea: gamedataEquipmentArea): string
  GetMods(onlyGeneric: Bool): InventoryItemAttachments[]
  UpdateMods(): void
  Unselect(): void
  Select(): void
  GetItemData(): InventoryItemData
  GetItemID(): ItemID
  GetItemCategory(): string
  GetItemType(): gamedataItemType
  GetEquipmentArea(): gamedataEquipmentArea
  GetSlotName(): string
  GetSlotIndex(): number
  SelectItem(): void
  UnselectItem(): void
  SetHighlighted(value: Bool): void
  ShowSelectionArrow(): void
  HideSelectionArrow(): void
  GetSlotID(): TweakDBID
  SetInteractive(value: Bool): void
  GetDisplayType(): ItemDisplayType
  GetAttachmentsSize(): number
  GetParentItemData(): gameItemData
}

declare interface ItemLabelContainerController extends inkLogicController {

  Add(type: ItemLabelType, params?: string): void
  Remove(type: ItemLabelType): void
  Has(type: ItemLabelType): Bool
  Clear(): void
  Reorder(): void
}

declare interface ItemLabelController extends inkLogicController {

  Setup(type: ItemLabelType, params?: string): void
  GetType(): ItemLabelType
  /** @noSelf **/
  GetLabelKey(type: ItemLabelType): string
  /** @noSelf **/
  GetState(type: ItemLabelType): CName
}

declare interface ItemDisplayHoverOverEvent extends Event {

}

declare interface ItemDisplayHoverOutEvent extends Event {

}

declare interface ItemDisplayClickEvent extends Event {

}

declare interface ItemDisplayHoldEvent extends Event {

}

declare interface iconAtlasCallbackData extends IScriptable {

}

declare interface DEBUG_IconErrorInfo extends IScriptable {

}

declare interface InventoryItemModSlotDisplay extends inkLogicController {

  Setup(itemData: InventoryItemData): void
}

declare interface BaseQuestMappinController extends BaseInteractionMappinController {

  UpdateDisplayName(): Bool
}

declare interface MinigameState extends IScriptable {

}

declare interface MinigameGenerationRule extends IScriptable {

  OnProcessRule(size: number, grid: GridCell[][]): Bool
  SetBlackboard(b: BlackboardSystem): void
  SetEntity(entity: Entity): void
  SetPlayer(player: PlayerPuppet): void
  SetRecord(rec: Minigame_Def_Record): void
  SetBufferSize(buffer: number): void
  SetIsItemBreach(itemBreach: Bool): void
  IntToTrap(i: number): MiniGame_Trap_Record
}

declare interface BaseSubtitleLineLogicController extends inkLogicController {

  SetupSettings(textSize: number, backgroundOpacity: number): void
  SetupAnimation(duration: number, animCtrl: inkTextKiroshiAnimController): void
  SetupAnimation(duration: number, animCtrl: inkTextReplaceController): void
  SetLineData(lineData: scnDialogLineData): void
  SetKiroshiStatus(kiroshiStatus: Bool): void
  IsKiroshiEnabled(): Bool
  ShowBackground(value: Bool): void
}

declare interface scnDialogLineData {

  /** @noSelf **/
  GetDisplayText(self: scnDialogLineData): scnDialogDisplayString
  /** @noSelf **/
  HasKiroshiTag(self: scnDialogLineData): Bool
  /** @noSelf **/
  HasMothertongueTag(self: scnDialogLineData): Bool
}

declare interface RadialSlot extends IScriptable {

  Construct(w: inkWidget): void
  GetWidget(): inkWidget
  IsCyclable(): Bool
  CanCycle(): Bool
  GetAngle(): number
  GetDebugInfo(info: string[]): void
  Activate(): void
  Deactivate(): void
  SetTargetAngle(precalculatedAngle: number): void
  Activate(shouldActivate: Bool): void
}

declare interface RadialAnimData {

}

declare interface WeaponRadialSlot extends RadialSlot {

  GetController(): InventoryItemDisplayController
  GetEquipmentArea(): gamedataEquipmentArea
  GetIndex(): number
  SetIndex(i: number): void
  GetDebugInfo(info: string[]): void
}

declare interface BaseSubtitlesGameController extends inkProjectedHUDGameController {

  OnInitialize(): Bool
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnUninitialize(): Bool
  OnCreoleFactChanged(value: number): Bool
  RegisterToDialogBlackboard(value: Bool): void
  DisableBySettings(value: Bool): void
  IsKiroshiEnabled(lineData: scnDialogLineData): Bool
  ShouldDisplayLine(lineData: scnDialogLineData): Bool
  CreateLine(lineSpawnData: LineSpawnData): void
  SetupLine(lineWidget: inkWidget, lineSpawnData: LineSpawnData): void
  OnHideLine(lineData: subtitleLineMapEntry): void
  OnHideLineByData(lineData: subtitleLineMapEntry): void
  OnShowDialogLine(value: Variant): Bool
  ShowDialogLines(linesToShow: scnDialogLineData[]): void
  OnHideDialogLineByData(value: Variant): Bool
  HideDialogLinesByData(linesToHide: scnDialogLineData[]): void
  OnHideDialogLine(value: Variant): Bool
  HideDialogLine(linesToHide: CRUID[]): void
  OnShowBackground(value: Bool): Bool
  OnVarModified(groupPath: CName, varName: CName, varType: ConfigVarType, reason: ConfigChangeReason): void
  ForceSettingsUpdate(): void
  UpdateSubsVisibilitySetting(): void
  UpdateChattersVisibilitySetting(): void
  UpdateSizeSettings(): void
  UpdateBackgroundOpacitySettings(): void
  ShowPendingSubtitles(): void
  SetSubsVisibilitySetting(value: Bool): void
  SetChattersVisibilitySetting(value: Bool): void
  SetSizeSettings(value: number): void
  SetBackgroundOpacitySettings(value: number): void
  FindLineWidget(lineID: CRUID): inkWidget
  FindLineController(lineID: CRUID): BaseSubtitleLineLogicController
  SpawnDialogLine(lineData: scnDialogLineData): void
  OnLineSpawned(widget: inkWidget, userData: IScriptable): Bool
  OnSubCreated(controller: BaseSubtitleLineLogicController): void
  OnRemovalFailure(lineId: CRUID): void
  RemoveLineByData(line: scnDialogLineData): Bool
  TryRemovePendingHideLines(): void
  RemoveLine(lineID: CRUID): Bool
  Cleanup(): void
  ResolveShowHidePendingLines(currLine: CRUID): void
  CalculateVisibility(): void
  IsMainDialogLine(lineData: scnDialogLineData): Bool
  GetGame(): GameInstance
}

declare interface inkISystemRequestsHandler extends IScriptable {

  RegisterToCallback(eventName: CName, object: IScriptable, functionName: CName): void
  UnregisterFromCallback(eventName: CName, object: IScriptable, functionName: CName): void
  ExitGame(): void
  GetUserSettings(): UserSettings
  RequestLoadUserSettings(): void
  RequestSaveUserSettings(): void
  UpdateLaunchCounter(): void
  RequestTelemetryConsent(fromSettings: Bool): void
  RequestLocalStorageSave(): void
  ShouldDisplayGog(): Bool
  GetGameDefCategories(): string[]
  GetGameDefinitions(categoryId: number): string[]
  GetWorlds(): string[]
  GetGenders(): string[]
  IsOnline(): Bool
  RunUiFunctionalTestWorld(): void
  StartGameDefinition(categoryId: number, gamedefId: number, genderId: number): void
  StartWorld(worldId: number, genderId: number): void
  StartNewGame(state: IScriptable): void
  RequestSavesCountSync(): number
  RequestSavesForLoad(): void
  RequestSavesForSave(): void
  LoadSavedGame(saveId: number): void
  LoadLastCheckpoint(): void
  DeleteSavedGame(saveId: number): void
  QuickSave(): void
  ManualSave(saveName: string): void
  HasFreeSaveSlot(saveName: string): Bool
  OverrideSave(saveId: number): void
  RequestSavedGameScreenshot(saveId: number, imageWidget: inkImage): void
  CancelSavedGameScreenshotRequests(): void
  GetLatestSaveMetadata(): LatestSaveMetadataInfo
  RequestLANServers(): void
  RequestInternetServers(): void
  CloudQuickmatch(groupToken: string): void
  JoinServer(serverId: number): void
  GetMultiplayerWorlds(): string[]
  GetPlayerRecordIds(): string[]
  GetSessionTypes(): string[]
  GetSessionTimeLimits(): string[]
  GetSessionPlayersLimits(): string[]
  GetRecords(): string[]
  PlayRecord(filename: string): void
  GotoMainMenu(): void
  PauseGame(): void
  UnpauseGame(): void
  IsGamePaused(): Bool
  IsPreGame(): Bool
}

declare interface SubtitlesSettingsListener extends ConfigVarListener {

  RegisterController(ctrl: BaseSubtitlesGameController): void
  OnVarModified(groupPath: CName, varName: CName, varType: ConfigVarType, reason: ConfigChangeReason): void
}

declare interface ConfigVarBool extends ConfigVar {

  SetValue(value: Bool): void
  GetValue(): Bool
  GetDefaultValue(): Bool
  Toggle(): void
}

declare interface subtitleLineMapEntry {

}

declare interface ConfigVarFloat extends ConfigVar {

  SetValue(value: number): void
  GetValue(): number
  GetDefaultValue(): number
  GetMinValue(): number
  GetMaxValue(): number
  GetStepValue(): number
}

declare interface SubtitleHandlerSystem extends ISubtitleHandlerSystem {

  RegisterSubtitleController(gameController: inkGameController): gamePendingSubtitles
  UnregisterSubtitleController(gameController: inkGameController): void
}

declare interface LineSpawnData extends IScriptable {

  Initialize(lineData: scnDialogLineData): void
}

declare interface scnDialogDisplayString {

}

declare interface gamePendingSubtitles {

}

declare interface ItemTooltipModuleController extends inkLogicController {

  Update(data: MinimalItemTooltipData): void
  UseCraftingLayout(data: MinimalItemTooltipData): Bool
  GetArrowWrapperState(diffValue: number): CName
}

declare interface MinimalItemTooltipData extends ATooltipData {

  /** @noSelf **/
  FromInventoryItemData(itemData: InventoryItemData): MinimalItemTooltipData
  /** @noSelf **/
  FromInventoryTooltipData(tooltipData: InventoryTooltipData): MinimalItemTooltipData
  /** @noSelf **/
  ShouldFilterOutGrenadeStat(stat: gamedataStatType): Bool
  /** @noSelf **/
  GetSecondaryStatsFromTooltipData(data: InventoryTooltipData, itemCategory: gamedataItemCategory, filterZero?: Bool): MinimalItemTooltipStatData[]
  /** @noSelf **/
  FillModsFromTooltipData(data: InventoryTooltipData, mods: MinimalItemTooltipModData[], dedicatedMods: MinimalItemTooltipModAttachmentData[]): void
  /** @noSelf **/
  GetModsDataPackages(itemData: gameItemData, itemRecord: Item_Record, displayContext: InventoryTooltipDisplayContext, parentItemData?: gameItemData, slotID?: TweakDBID, mods?: MinimalItemTooltipModData[]): void
  /** @noSelf **/
  GetDefaultModAttachmentData(isEmpty: Bool, qualityName: CName, slotID: TweakDBID, itemName: string, abilities: InventoryItemAbility[], type: InventoryItemAttachmentType): MinimalItemTooltipModAttachmentData
  /** @noSelf **/
  GetDefaultModAttachmentData(data: InventoryTooltipData, index: number, type: InventoryItemAttachmentType): MinimalItemTooltipModAttachmentData
  /** @noSelf **/
  GetMinimalTooltipDataRequirements(itemData: gameItemData, m_dataManager: InventoryDataManagerV2): MinimalItemTooltipDataRequirements
  /** @noSelf **/
  GetMinimalTooltipDataRequirements(itemData: gameItemData, hasSmartlink: Bool, playerStrength: number, playerReflex: number, playerLevel: number): MinimalItemTooltipDataRequirements
  /** @noSelf **/
  GetMinimalTooltipDataRequirements(itemData: gameItemData, tooltipData: InventoryTooltipData): MinimalItemTooltipDataRequirements
  /** @noSelf **/
  GetSecondaryStatsForStatMap(itemData: gameItemData, itemType: gamedataItemType, itemCategory: gamedataItemCategory): MinimalItemTooltipStatData[]
}

declare interface MinimalItemTooltipDataRequirements extends IScriptable {

}

declare interface UILocalizationHelper extends IScriptable {

  /** @noSelf **/
  GetStatNameLockey(statRecord: Stat_Record): string
  /** @noSelf **/
  IsStatProficiency(statType: gamedataStatType): Bool
  /** @noSelf **/
  GetSystemBaseUnit(): EMeasurementUnit
}

declare interface MinimalItemTooltipRecipeData extends IScriptable {

}

declare interface MinimalItemTooltipStatData extends IScriptable {

}

declare interface MinimalItemTooltipModRecordData extends MinimalItemTooltipModData {

}

declare interface gameuiCrosshairBaseGameController extends inkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  IsActive(): Bool
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  OnPreIntro(): Bool
  OnPreOutro(): Bool
  GetWeaponRecordID(): ItemID
  GetWeaponLocalBlackboard(): IBlackboard
  GetWeaponItemObject(): ItemObject
  GetUIActiveWeaponBlackboard(): IBlackboard
  IsTargetWithinWeaponEffectiveRange(distanceToTarget: number): Bool
  GetIntroAnimation(firstEquip: Bool): inkAnimDef
  GetOutroAnimation(): inkAnimDef
  GetCrosshairState(): gamePSMCrosshairStates
  GetVisionState(): gamePSMVision
  OnNPCStatsChanged(value: Variant): Bool
  OnPSMCrosshairStateChanged(value: number): Bool
  OnCrosshairStateChange(oldState: gamePSMCrosshairStates, newState: gamePSMCrosshairStates): void
  UpdateCrosshairState(): void
  OnBulletSpreadChanged(spread: Vector2): Bool
  OnState_Aim(): void
  OnState_HipFire(): void
  OnState_GrenadeCharging(): void
  OnState_Reload(): void
  OnState_Safe(): void
  OnState_Sprint(): void
  OnState_Scanning(): void
  OnState_LeftHandCyberware(): void
  ApplyCrosshairGUIState(state: CName, aimedAtEntity: Entity): void
  GetGame(): GameInstance
  UpdateCrosshairGUIState(force: Bool): void
  GetCurrentCrosshairGUIState(): CName
  RegisterTargetCallbacks(register: Bool): void
  OnCurrentAimTarget(entId: EntityID): Bool
  OnTargetDistanceChanged(distance: number): Bool
  OnTargetAttitudeChanged(attitude: number): Bool
  OnRefreshCrosshairEvent(evt: RefreshCrosshairEvent): Bool
  QueueCrosshairRefresh(): void
  GetDistanceToTarget(): number
}

declare interface CrosshairHealthChangeListener extends CustomValueStatPoolsListener {

  /** @noSelf **/
  Create(parentCrosshair: gameuiCrosshairBaseGameController): CrosshairHealthChangeListener
  OnStatPoolValueChanged(oldValue: number, newValue: number, percToPoints: number): void
}

declare interface RefreshCrosshairEvent extends Event {

}

declare interface UI_ActiveWeaponDataDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface NPCNextToTheCrosshair {

}

declare interface gameuiCrosshairBaseMelee extends gameuiCrosshairBaseGameController {

  OnPreIntro(): Bool
  OnPreOutro(): Bool
  OnGamePSMMeleeWeapon(value: number): Bool
  OnMeleeState_Update(value: gamePSMMeleeWeapon): void
}

declare interface gameuiIronsightGameController extends inkGameController {

}

declare interface BasicAnimationController extends inkLogicController {

  OnInitialize(): Bool
  PlayShow(immediately?: Bool): void
  PlayHide(immediately?: Bool): void
}

declare interface AnimationChainPlayer extends IScriptable {

  Play(animationChain: AnimationChain): void
  PlayNow(animationChain: AnimationChain): void
  BeginAnimation(animationChain: AnimationChain): void
  PlayAnimationStage(stage: number): void
  OnNextAnimation(anim?: inkAnimProxy): Bool
  HandleInteruption(): void
  Clean(): void
  GetEndEvent(animOptions: inkAnimOptions): inkanimEventType
}

declare interface AnimationChain extends IScriptable {

  AddAnimation(name: CName, options: inkAnimOptions): void
}

declare interface AnimationElement {

}

declare interface IronsightDetail extends IScriptable {

  /** @noSelf **/
  PlaybackCycleInfinite(): inkAnimOptions
  /** @noSelf **/
  PlaybackCycleOnce(): inkAnimOptions
  /** @noSelf **/
  Fmodf(a: number, b: number): number
  /** @noSelf **/
  SetSlide(widget: inkWidgetRef, startPosition: Vector2, horizontal: number, vertical: number): void
  /** @noSelf **/
  Pitch(forward: Vector4): number
}

declare interface gameIPlayerManager extends IGameSystem {

}

declare interface AHintItemController extends inkLogicController {

  OnInitialize(): Bool
  SetIcon(atlasPath: CName, iconName: CName): void
  CacheAnimations(): void
  Animate(isEnabled: Bool): void
  OnAnimFinished(anim: inkAnimProxy): void
}

declare interface ActionInternalEvent extends IScriptable {

}

declare interface AIVehicleCommand extends AICommand {

}

declare interface NetworkMinigameProgramController extends inkLogicController {

  OnInitialize(): Bool
  Spawn(data: ProgramData): void
  UpdatePartialCompletionState(progress: ProgramProgressData): void
  SetHighlightedUpUntil(lastHighlighted: number[]): void
  ShowCompleted(revealLocalizedName: Bool): void
  GetData(): ProgramData
  RefreshImage(): void
  PlayAnim(anim: CName): void
}

declare interface ProgramData {

}

declare interface NetworkMinigameElementController extends inkLogicController {

  OnInitialize(): Bool
  SetContent(toSet: ElementData): void
  SetHighlightStatus(doHighlight: Bool): void
  GetContentWidget(): inkWidgetRef
  GetContent(): ElementData
  Consume(): void
  RefreshColorAccent(): void
  SetElementActive(isDimmed: Bool): void
  SetAsBufferSlot(): void
}

declare interface ElementData {

}

declare interface ProgramProgressData {

}

declare interface TweakDBIDSelector extends IScriptable {

  GetRecordID(): TweakDBID
  SetRecordID(recordID: TweakDBID): void
}

declare interface LcdScreen extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  ResavePersistentData(ps: PersistentState): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  CreateBlackboard(): void
  GetBlackboardDef(): LcdScreenBlackBoardDef
  GetController(): LcdScreenController
  GetDevicePS(): LcdScreenControllerPS
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
  OnHitEvent(hit: gameHitEvent): Bool
  StartShortGlitch(): void
  OnStopShortGlitch(evt: StopShortGlitchEvent): Bool
  TurnOnDevice(): void
  TurnOffDevice(): void
  CutPower(): void
  TurnOffScreen(): void
  TurnOnScreen(): void
  DeterminGameplayRole(): EGameplayRole
  ApplyActiveStatusEffect(target: EntityID, statusEffect: TweakDBID): void
  UploadActiveProgramOnNPC(targetID: EntityID): void
  GetMessageRecord(): ScreenMessageData_Record
  HasCustomNumber(): Bool
  GetCustomNumber(): number
  UpdateMessageRecordUI(messageData: ScreenMessageData): void
  OnSetMessageRecord(evt: SetMessageRecordEvent): Bool
}

declare interface LcdScreenController extends ScriptableDC {

  GetPS(): LcdScreenControllerPS
}

declare interface LcdScreenControllerPS extends ScriptableDeviceComponentPS {

  OnInstantiated(): Bool
  OnSetMessageRecord(evt: SetMessageRecordEvent): EntityNotificationType
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(outActions: DeviceAction[], context: GetActionsContext): void
  GetQuestActions(outActions: DeviceAction[], context: GetActionsContext): void
  GetBlackboardDef(): LcdScreenBlackBoardDef
  HasCustomNumber(): Bool
  GetCustomNumber(): number
  GetMessageRecordID(): TweakDBID
  SetMessageRecordID(id: TweakDBID): void
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface SetMessageRecordEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface ScreenMessageSelector extends TweakDBIDSelector {

  HasCustomNumber(): Bool
  GetCustomNumber(): number
  SetCustomNumber(value: number): void
  SetReplaceTextWithCustomNumber(value: Bool): void
}

declare interface ScreenMessageData extends IScriptable {

}

declare interface LcdScreenBlackBoardDef extends DeviceBaseBlackboardDef {

}

declare interface Terminal extends InteractiveMasterDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  OnLogicReady(evt: SetLogicReadyEvent): Bool
  OnDetach(): Bool
  OnPersitentStateInitialized(evt: GameAttachedEvent): Bool
  UpdateDeviceState(isDelayed?: Bool): Bool
  GetController(): TerminalController
  GetDevicePS(): TerminalControllerPS
  CreateBlackboard(): void
  GetBlackboardDef(): MasterDeviceBaseBlackboardDef
  RestoreDeviceState(): void
  DeactivateDevice(): void
  ActivateDevice(): void
  CutPower(): void
  TurnOffDevice(): void
  TurnOnDevice(): void
  OnActionEngineering(evt: ActionEngineering): Bool
  OnDisassembleDevice(evt: DisassembleDevice): Bool
  OnWorkspotFinished(componentName: CName): Bool
  IsAuthorizationModuleOn(): Bool
  UnsecureTerminal(): void
  StartHacking(executor: GameObject): void
  ResetScreenToDefault(): void
  ShowScreenSaver(): void
  TurnOffScreen(): void
  TurnOnScreen(): void
  SetState(state: gameinteractionsReactionState): void
  InitializeScreenDefinition(): void
  ShouldShowTerminalTitle(): Bool
  BreakDevice(): void
  DeterminGameplayRole(): EGameplayRole
  GetDefaultGlitchVideoPath(): ResRef
  GetBroadcastGlitchVideoPath(): ResRef
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
  OnHitEvent(hit: gameHitEvent): Bool
  StartShortGlitch(): void
  OnStopShortGlitch(evt: StopShortGlitchEvent): Bool
}

declare interface TerminalController extends MasterController {

  GetPS(): TerminalControllerPS
}

declare interface GlobalTvSystem extends IGlobalTvSystem {

  RegisterTVChannelOnController(gameController: inkGameController, previousChannelID: number, activeChannelID: number): void
  UnregisterTVChannelFromEntity(entity: Entity): void
}

declare interface VirtualCameraViewComponent extends IVisualComponent {

  GetVirtualCameraName(): CName
  SetVirtualCameraName(newName: CName): void
}

declare interface ComputerBannerWidgetController extends DeviceInkLogicControllerBase {

  Initialize(gameController: ComputerInkGameController, widgetData: SBannerWidgetPackage): void
  ResolveContent(content: ResRef): void
  StopVideo(): void
  RegisterBannerCallback(gameController: DeviceInkGameControllerBase): void
  GetBannerData(): SBannerWidgetPackage
}

declare interface inkVideoRef extends inkLeafRef {

  /** @noSelf **/
  SetVideoPath(self: inkVideoRef, videoPath: ResRef): void
  /** @noSelf **/
  ForceVideoFrameRate(self: inkVideoRef, forceVideoFrameRate: Bool): void
  /** @noSelf **/
  Play(self: inkVideoRef): void
  /** @noSelf **/
  Stop(self: inkVideoRef): void
  /** @noSelf **/
  Pause(self: inkVideoRef): void
  /** @noSelf **/
  Resume(self: inkVideoRef): void
  /** @noSelf **/
  SkipFrames(self: inkVideoRef, numberOfFrames: number): void
  /** @noSelf **/
  FastForwardTo(self: inkVideoRef, numberOfFrames: number): void
  /** @noSelf **/
  RewindTo(self: inkVideoRef, numberOfFrames: number): void
  /** @noSelf **/
  JumpToFrame(self: inkVideoRef, frameNumber: number): void
  /** @noSelf **/
  JumpToTime(self: inkVideoRef, timeInSeconds: number): void
  /** @noSelf **/
  SetLoop(self: inkVideoRef, isLooped: Bool): void
  /** @noSelf **/
  GetVideoWidgetSummary(self: inkVideoRef): VideoWidgetSummary
  /** @noSelf **/
  PreloadNextVideo(self: inkVideoRef, videoPath: string): void
  /** @noSelf **/
  IsPlayingVideo(self: inkVideoRef): Bool
  /** @noSelf **/
  IsPaused(self: inkVideoRef): Bool
  /** @noSelf **/
  IsParallaxEnabled(self: inkVideoRef): Bool
}

declare interface NextPreviousActionWidgetController extends DeviceActionWidgetControllerBase {

  Initialize(gameController: DeviceInkGameControllerBase, widgetData: SActionWidgetPackage): void
  FinalizeActionExecution(executor: GameObject, action: DeviceAction): void
  Decline(): void
  Reset(): void
  OnNoMoneyShowed(e: inkAnimProxy): Bool
  Deactivate(): void
  CanExecuteAction(): Bool
}

declare interface Computer extends Terminal {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  RestoreDeviceState(): void
  ResavePersistentData(ps: PersistentState): Bool
  GetController(): ComputerController
  GetDevicePS(): ComputerControllerPS
  IsInSleepMode(): Bool
  InitializeBanners(): void
  ReadFile(fileAdress: SDocumentAdress): void
  ReadMail(fileAdress: SDocumentAdress): void
  ClearOpenedFileAdress(): void
  ClearOpenedMailAdress(): void
  DecryptFile(fileAdress: SDocumentAdress): void
  DecryptMail(fileAdress: SDocumentAdress): void
  OnSetDocumentState(evt: SetDocumentStateEvent): Bool
  TurnOffDevice(): void
  TurnOnDevice(): void
  CreateBlackboard(): void
  GetBlackboardDef(): ComputerDeviceBlackboardDef
  StopBannerWidgetsUpdate(): void
  RequestBannerWidgetsUpdate(blackboard: IBlackboard): void
  OnToggleOpen(evt: ToggleOpenComputer): Bool
  OnCreateFactQuickHack(evt: FactQuickHack): Bool
  OnRequestBannerWidgetUpdate(evt: RequestBannerWidgetUpdateEvent): Bool
  OnRequestDocumentWidgetUpdate(evt: RequestDocumentWidgetUpdateEvent): Bool
  OnRequestDocumentThumbnailWidgetsUpdate(evt: RequestDocumentThumbnailWidgetsUpdateEvent): Bool
  OnRequestMenuWidgetsUpdate(evt: RequestComputerMenuWidgetsUpdateEvent): Bool
  OnRequestMainMenuWidgetsUpdate(evt: RequestComputerMainMenuWidgetsUpdateEvent): Bool
  GetInitialMenuType(): EComputerMenuType
  DeterminGameplayRole(): EGameplayRole
  DetermineActivationState(): void
  OnActivateDevice(evt: ActivateDevice): Bool
  OnDeactivateDevice(evt: DeactivateDevice): Bool
  TransformAnimActivate(activate: Bool): void
  ResolveAnimationState(state: EComputerAnimationState): void
  InitializeScreenDefinition(): void
  OnGoToMenuEvent(evt: GoToMenuEvent): Bool
  OnOpenDocumentEvent(evt: OpenDocumentEvent): Bool
  OnEnableDocumentEvent(evt: EnableDocumentEvent): Bool
  OnTCSInputXAxisEvent(evt: TCSInputXAxisEvent): Bool
  OnTCSInputYAxisEvent(evt: TCSInputYAxisEvent): Bool
}

declare interface ComputerController extends TerminalController {

  GetPS(): ComputerControllerPS
}

declare interface RequestBannerWidgetUpdateEvent extends RequestWidgetUpdateEvent {

}

declare interface SetDocumentStateEvent extends Event {

}

declare interface GoToMenuEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface OpenDocumentEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface EnableDocumentEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface ComputerMainLayoutWidgetController extends inkLogicController {

  Initialize(gameController: ComputerInkGameController): void
  InitializeMenuButtons(gameController: ComputerInkGameController, widgetsData: SComputerMenuButtonWidgetPackage[]): void
  SetScreenSaver(gameController: ComputerInkGameController, parentWidget: inkWidget): void
  OnScreenSaverSpawned(widget: inkWidget, userData: IScriptable): Bool
  SetWallpaper(gameController: ComputerInkGameController, parentWidget: inkWidget): void
  OnWallpaperSpawned(widget: inkWidget, userData: IScriptable): Bool
  SetMailsMenu(gameController: ComputerInkGameController, parentWidget: inkWidget): void
  SetFilesMenu(gameController: ComputerInkGameController, parentWidget: inkWidget): void
  SetDevicesMenu(widget: inkWidget): void
  SetNewsFeedMenu(gameController: ComputerInkGameController, parentWidget: inkWidget): void
  SetMainMenu(gameController: ComputerInkGameController): void
  SetInternetMenu(gameController: ComputerInkGameController): void
  ShowScreenSaver(): void
  HideScreenSaver(): void
  ShowWallpaper(): void
  HideWallpaper(): void
  ShowNewsfeed(): void
  ShowMails(): void
  ShowFiles(): void
  ShowDevices(): void
  ShowMainMenu(): void
  ShowInternet(startingPage: string): void
  ShowWindow(header: string, menuType: EComputerMenuType): void
  OnWindowOpened(e: inkAnimProxy): Bool
  HideWindow(): void
  OnWindowClosed(e: inkAnimProxy): Bool
  ResolveWindowClose(): void
  MarkManuButtonAsSelected(controller: ComputerMenuButtonController): void
  MarkManuButtonAsSelected(menuID: string): void
  DeselectAllManuButtons(): void
  GetWindowContainer(): inkWidget
  GetWindowHeader(): inkText
  GetOffButton(): inkWidget
  GetWindowCloseButton(): inkWidget
  GetMenuContainer(): inkWidget
  GetDevicesMenuContainer(): inkWidget
  GetNewsfeedMenuContainer(): inkWidget
  GetMailsMenuContainer(): inkWidget
  GetFilesMenuContainer(): inkWidget
  GetFileMenuController(): ComputerMenuWidgetController
  GetFileThumbnailController(adress: SDocumentAdress): ComputerDocumentThumbnailWidgetController
  GetMailMenuController(): ComputerMenuWidgetController
  GetMailThumbnailController(adress: SDocumentAdress): ComputerDocumentThumbnailWidgetController
  GetNewsFeedController(): NewsFeedMenuWidgetController
  GetMainMenuController(): ComputerMainMenuWidgetController
  GetInternetController(): BrowserController
  InitializeMails(gameController: ComputerInkGameController, widgetsData: SDocumentWidgetPackage[]): void
  InitializeFiles(gameController: ComputerInkGameController, widgetsData: SDocumentWidgetPackage[]): void
  InitializeMailsThumbnails(gameController: ComputerInkGameController, widgetsData: SDocumentThumbnailWidgetPackage[]): void
  InitializeFilesThumbnails(gameController: ComputerInkGameController, widgetsData: SDocumentThumbnailWidgetPackage[]): void
  InitializeBanners(gameController: ComputerInkGameController, widgetsData: SBannerWidgetPackage[]): void
  InitializeMainMenuButtons(gameController: ComputerInkGameController, widgetsData: SComputerMenuButtonWidgetPackage[]): void
  ShowFullBanner(gameController: ComputerInkGameController, widgetData: SBannerWidgetPackage): void
  HideNewsFeed(): void
  HideFullBanner(): void
  HideBanners(): void
  HideMails(): void
  MarkMailThumbnailAsSelected(controller: ComputerDocumentThumbnailWidgetController): void
  MarkMailThumbnailAsSelected(adress: SDocumentAdress): void
  HideFiles(): void
  MarkFileThumbnailAsSelected(controller: ComputerDocumentThumbnailWidgetController): void
  HideDevices(): void
  HideMainMenu(): void
  HideInternet(): void
  CreateMenuButtonWidget(gameController: ComputerInkGameController, parentWidget: inkWidget, widgetData: SComputerMenuButtonWidgetPackage): inkWidget
  InitializeMenuButtonWidget(gameController: ComputerInkGameController, widget: inkWidget, widgetData: SComputerMenuButtonWidgetPackage): void
  GetMenuButtonWidget(widgetData: SComputerMenuButtonWidgetPackage, gameController: ComputerInkGameController): inkWidget
  AddMenuButtonWidget(widget: inkWidget, widgetData: SComputerMenuButtonWidgetPackage, gameController: ComputerInkGameController): inkWidget
  HideMenuButtonWidgets(): void
}

declare interface ComputerMenuButtonController extends DeviceButtonLogicControllerBase {

  OnInitialize(): Bool
  Initialize(gameController: ComputerInkGameController, widgetData: SComputerMenuButtonWidgetPackage): void
  RegisterMenuCallback(gameController: ComputerInkGameController): void
  GetMenuID(): string
}

declare interface inkVerticalPanel extends inkBasePanel {

}

declare interface ComputerMenuWidgetController extends inkLogicController {

  InitializeFiles(gameController: ComputerInkGameController, widgetsData: SDocumentWidgetPackage[]): void
  InitializeFilesThumbnails(gameController: ComputerInkGameController, widgetsData: SDocumentThumbnailWidgetPackage[]): void
  CreateDocumentWidget(gameController: ComputerInkGameController, parentWidget: inkWidget, widgetData: SDocumentWidgetPackage): inkWidget
  CreateDocumentWidgetAsync(gameController: ComputerInkGameController, parentWidget: inkWidget, widgetData: SDocumentWidgetPackage): void
  OnDocumentWidgetSpawned(widget: inkWidget, userData: IScriptable): Bool
  AddFileWidgetData(widgetData: SDocumentWidgetPackage, gameController: DeviceInkGameControllerBase): void
  UpdateFileWidgetData(widgetData: SDocumentWidgetPackage, index: number): void
  InitializeDocumentWidget(gameController: ComputerInkGameController, widget: inkWidget, widgetData: SDocumentWidgetPackage): void
  GetFileWidgetDataIndex(widgetData: SDocumentWidgetPackage, gameController: DeviceInkGameControllerBase): number
  HasFileWidgetData(widgetData: SDocumentWidgetPackage, gameController: DeviceInkGameControllerBase): Bool
  GetFileWidget(widgetData: SDocumentWidgetPackage, gameController: ComputerInkGameController): inkWidget
  AddFileWidget(widget: inkWidget, widgetData: SDocumentWidgetPackage, gameController: ComputerInkGameController): inkWidget
  HideFileWidgets(): void
  CreateDocumentThumbnailWidget(gameController: ComputerInkGameController, parentWidget: inkWidget, widgetData: SDocumentThumbnailWidgetPackage): inkWidget
  CreateDocumentThumbnailWidgetAsync(gameController: ComputerInkGameController, parentWidget: inkWidget, widgetData: SDocumentThumbnailWidgetPackage): void
  OnDocumentThumbnailWidgetSpawned(widget: inkWidget, userData: IScriptable): Bool
  AddFileThumbnailWidgetData(widgetData: SDocumentThumbnailWidgetPackage, gameController: DeviceInkGameControllerBase): void
  UpdateFileThumbnailWidgetData(widgetData: SDocumentThumbnailWidgetPackage, index: number): void
  InitializeDocumentThumbnailWidget(gameController: ComputerInkGameController, widget: inkWidget, widgetData: SDocumentThumbnailWidgetPackage): void
  HasFileThumbnailWidgetData(widgetData: SDocumentThumbnailWidgetPackage, gameController: DeviceInkGameControllerBase): Bool
  GetFileThumbnailWidgetDataIndex(widgetData: SDocumentThumbnailWidgetPackage, gameController: DeviceInkGameControllerBase): number
  GetFileThumbnailWidget(widgetData: SDocumentThumbnailWidgetPackage, gameController: ComputerInkGameController): inkWidget
  AddFileThumbnailWidget(widget: inkWidget, widgetData: SDocumentThumbnailWidgetPackage, gameController: ComputerInkGameController): inkWidget
  HideFileThumbnailWidgets(): void
  GetThumbnailController(adress: SDocumentAdress): ComputerDocumentThumbnailWidgetController
  MarkThumbnailAsSelected(adress: SDocumentAdress): void
  MarkThumbnailAsSelected(controller: ComputerDocumentThumbnailWidgetController): void
}

declare interface ComputerDocumentWidgetController extends DeviceInkLogicControllerBase {

  Initialize(gameController: ComputerInkGameController, widgetData: SDocumentWidgetPackage): void
  ResolveContent(widgetData: SDocumentWidgetPackage): void
  StopVideo(): void
  RegisterCloseButtonCallback(gameController: DeviceInkGameControllerBase): void
  GetDocumentType(): EDocumentType
}

declare interface ComputerDocumentThumbnailWidgetController extends DeviceButtonLogicControllerBase {

  OnInitialize(): Bool
  Initialize(gameController: ComputerInkGameController, widgetData: SDocumentThumbnailWidgetPackage): void
  RegisterThumbnailCallback(gameController: ComputerInkGameController): void
  ResolveSelection(): void
  OpenDocument(): void
  CloseDocument(): void
  GetDocumentAdress(): SDocumentAdress
  GetDocumentType(): EDocumentType
  GetQuestInfo(): QuestInfo
}

declare interface ComputerInkGameController extends DeviceInkGameControllerBase {

  OnUninitialize(): Bool
  SetupWidgets(): void
  InitializeMainLayout(): void
  IsMainLayoutInitialized(): Bool
  OnMainLayoutSpawned(widget: inkWidget, userData: IScriptable): Bool
  SetDevicesMenu(gameController: ComputerInkGameController, parentWidget: inkWidget): void
  OnDevicesMenuSpawned(widget: inkWidget, userData: IScriptable): Bool
  IsDevicesManuSpawned(): Bool
  IsDevicesManuSpawnRequested(): Bool
  GetComputerInkLibraryPath(screenDefinition: ScreenDefinitionPackage): string
  GetTerminalInkLibraryPath(screenDefinition: ScreenDefinitionPackage): ResRef
  Refresh(state: EDeviceStatus): void
  RegisterBlackboardCallbacks(blackboard: IBlackboard): void
  UnRegisterBlackboardCallbacks(blackboard: IBlackboard): void
  ResolveInitialMenuType(): void
  OnBannerWidgetsUpdate(value: Variant): Bool
  OnMailThumbnailWidgetsUpdate(value: Variant): Bool
  OnFileThumbnailWidgetsUpdate(value: Variant): Bool
  OnMailWidgetsUpdate(value: Variant): Bool
  OnFileWidgetsUpdate(value: Variant): Bool
  OnMenuButtonWidgetsUpdate(value: Variant): Bool
  OnMainMenuButtonWidgetsUpdate(value: Variant): Bool
  UpdateActionWidgets(widgetsData: SActionWidgetPackage[]): void
  UpdateMenuButtonsWidgets(widgetsData: SComputerMenuButtonWidgetPackage[]): void
  UpdateMainMenuButtonsWidgets(widgetsData: SComputerMenuButtonWidgetPackage[]): void
  UpdateBannersWidgets(widgetsData: SBannerWidgetPackage[]): void
  UpdateMailsWidgets(widgetsData: SDocumentWidgetPackage[]): void
  UpdateFilesWidgets(widgetsData: SDocumentWidgetPackage[]): void
  UpdateMailsThumbnailsWidgets(widgetsData: SDocumentThumbnailWidgetPackage[]): void
  UpdateFilesThumbnailsWidgets(widgetsData: SDocumentThumbnailWidgetPackage[]): void
  GetOwner(): Computer
  ShowNewsfeed(): void
  ShowMails(): void
  ShowFiles(): void
  ShowDevices(): void
  ShowMainMenu(): void
  ShowInternet(): void
  TurnOn(): void
  TurnOff(): void
  ResolveBreadcrumbLevel(): void
  ShowMenuByName(elementName: string): void
  HideMenuByName(elementName: string): void
  GoToMenu(menuID: string): void
  GetMenuName(menuType: EComputerMenuType): string
  OpenDocument(documentType: EDocumentType, adress: SDocumentAdress): void
  OpenDocument(controller: ComputerDocumentThumbnailWidgetController): void
  GetForceOpenDocumentType(): EDocumentType
  GetForceOpenDocumentAdress(): SDocumentAdress
  ResetForceOpenDocumentData(): void
  OnGoToMenuEvent(evt: GoToMenuEvent): Bool
  OnOpenDocumentEvent(evt: OpenDocumentEvent): Bool
  RegisterCloseWindowButtonCallback(): void
  OnWindowCloseCallback(e: inkPointerEvent): Bool
  OnMenuButtonCallback(e: inkPointerEvent): Bool
  OnDocumentThumbnailCallback(e: inkPointerEvent): Bool
  OnHideFullBannerCallback(e: inkPointerEvent): Bool
  OnHideMailCallback(e: inkPointerEvent): Bool
  OnHideFileCallback(e: inkPointerEvent): Bool
  OnShowFullBannerCallback(e: inkPointerEvent): Bool
  ResolveQuestInfo(questInfo: QuestInfo): void
  GetMainLayoutController(): ComputerMainLayoutWidgetController
  InitializeMails(widgetsData: SDocumentWidgetPackage[]): void
  InitializeFiles(widgetsData: SDocumentWidgetPackage[]): void
  InitializeMailsThumbnails(widgetsData: SDocumentThumbnailWidgetPackage[]): void
  InitializeFilesThumbnails(widgetsData: SDocumentThumbnailWidgetPackage[]): void
  InitializeBanners(widgetsData: SBannerWidgetPackage[]): void
  InitializeMainMenuButtons(widgetsData: SComputerMenuButtonWidgetPackage[]): void
  InitializeMenuButtons(widgetsData: SComputerMenuButtonWidgetPackage[]): void
  RequestMenuButtonWidgetsUpdate(): void
  RequestMainMenuButtonWidgetsUpdate(): void
  RequestFileThumbnailWidgetsUpdate(): void
  RequestMailThumbnailWidgetsUpdate(): void
  RequestMailWidgetUpdate(documentAdress: SDocumentAdress): void
  RequestFileWidgetUpdate(documentAdress: SDocumentAdress): void
  RequestBannerWidgetsUpdate(): void
  StartGlitchingScreen(glitchData: GlitchData): void
  StopGlitchingScreen(): void
  PlayVideo(videoPath: ResRef, looped: Bool, audioEvent: CName): void
  StopVideo(): void
}

declare interface inkVideo extends inkLeafWidget {

  SetVideoPath(videoPath: ResRef): void
  ForceVideoFrameRate(forceVideoFrameRate: Bool): void
  Play(): void
  Stop(): void
  Pause(): void
  Resume(): void
  SkipFrames(numberOfFrames: number): void
  FastForwardTo(numberOfFrames: number): void
  RewindTo(numberOfFrames: number): void
  JumpToFrame(frameNumber: number): void
  JumpToTime(timeInSeconds: number): void
  SetLoop(isLooped: Bool): void
  SetAudioEvent(audioEvent: CName): void
  SetSyncToAudio(syncToAudio: Bool): void
  GetVideoWidgetSummary(): VideoWidgetSummary
  PreloadNextVideo(videoPath: ResRef): void
  IsPlayingVideo(): Bool
  IsPaused(): Bool
  IsParallaxEnabled(): Bool
}

declare interface ComputerMainMenuWidgetController extends inkLogicController {

  InitializeMenuButtons(gameController: ComputerInkGameController, widgetsData: SComputerMenuButtonWidgetPackage[]): void
  CreateMenuButtonWidget(gameController: ComputerInkGameController, parentWidget: inkWidget, widgetData: SComputerMenuButtonWidgetPackage): inkWidget
  InitializeMenuButtonWidget(gameController: ComputerInkGameController, widget: inkWidget, widgetData: SComputerMenuButtonWidgetPackage): void
  GetMenuButtonWidget(widgetData: SComputerMenuButtonWidgetPackage, gameController: ComputerInkGameController): inkWidget
  AddMenuButtonWidget(widget: inkWidget, widgetData: SComputerMenuButtonWidgetPackage, gameController: ComputerInkGameController): inkWidget
  HideMenuButtonWidgets(): void
}

declare interface NewsFeedMenuWidgetController extends inkLogicController {

  OnInitialize(): Bool
  InitializeBanners(gameController: ComputerInkGameController, widgetsData: SBannerWidgetPackage[]): void
  CreateBannerWidget(gameController: ComputerInkGameController, parentWidget: inkWidget, widgetData: SBannerWidgetPackage): inkWidget
  InitializeBannerWidget(gameController: ComputerInkGameController, widget: inkWidget, widgetData: SBannerWidgetPackage): void
  GetBannerWidget(widgetData: SBannerWidgetPackage, gameController: ComputerInkGameController): inkWidget
  AddBannerWidget(widget: inkWidget, widgetData: SBannerWidgetPackage, gameController: ComputerInkGameController): inkWidget
  HideBannerWidgets(): void
  ShowFullBanner(gameController: ComputerInkGameController, widgetData: SBannerWidgetPackage): void
  HideFullBanner(): void
}

declare interface ComputerFullBannerWidgetController extends ComputerBannerWidgetController {

  Initialize(gameController: ComputerInkGameController, widgetData: SBannerWidgetPackage): void
  RegisterCloseButtonCallback(gameController: DeviceInkGameControllerBase): void
}

declare interface RequestComputerMenuWidgetsUpdateEvent extends RequestWidgetUpdateEvent {

}

declare interface SInternetData {

}

declare interface RequestComputerMainMenuWidgetsUpdateEvent extends RequestWidgetUpdateEvent {

}

declare interface SBreadCrumbUpdateData {

}

declare interface QuestInfo {

}

declare interface BrowserController extends inkLogicController {

  Init(gameController: BrowserGameController): void
  SetWebsiteData(pageEntries: JournalEntry[]): void
  SetDefaultPage(startingPage: string): void
  GetDefaultpage(): string
  SetDefaultContent(): void
  TryGetWebsiteData(address: string): JournalInternetPage
  OnProcessLinkPressed(e: inkWidget): Bool
  OnHomeButtonPressed(e: inkPointerEvent): void
  LoadWebPage(address: string, journalManager: JournalManager): void
  SetFacts(page: JournalInternetPage): void
  UnloadCurrentWebsite(): void
  GetOwnerGameObject(): Computer
}

declare interface LinkController extends inkButtonController {

  OnInitialize(): Bool
  OnButtonStateChanged(controller: inkButtonController, oldState: inkEButtonState, newState: inkEButtonState): Bool
  GetLinkAddress(): string
  SetLinkAddress(link: string): void
  SetColors(color: Color, hoverColor: Color): void
}

declare interface WebPage extends inkLogicController {

  FillPage(page: JournalInternetPage, journalManager: JournalManager): void
  FillPageFromScripts(address: string, journalManager: JournalManager): void
  SetSlot(number: number, shortName: string, pageAddress: string, iconAtlasPath: ResRef, iconTexturePart: CName): void
  ClearSlot(number: number): Bool
  GetRefName(prefix: string, number: number): CName
  GetTextRef(instanceName: CName): inkTextRef
  GetImageRef(instanceName: CName): inkImageRef
  FillPageFromJournal(page: JournalInternetPage): void
  AddLink(widget: inkWidgetRef, address: string): void
  AddLink(widget: inkWidgetRef, baseElement: JournalInternetBase): void
  OnLinkCallback(e: inkPointerEvent): void
  GetLastLinkClicked(): string
}

declare interface JournalInternetPage extends JournalEntry {

  GetAddress(): string
  GetFactsToSet(): JournalFactNameValue[]
  GetWidgetPath(): ResRef
  GetScale(): number
  IsAdditionallyFilledFromScripts(): Bool
  GetTexts(): JournalInternetText[]
  GetRectangles(): JournalInternetRectangle[]
  GetImages(): JournalInternetImage[]
  GetVideos(): JournalInternetVideo[]
}

declare interface JournalInternetText extends JournalInternetBase {

  GetText(): string
}

declare interface JournalInternetImage extends JournalInternetBase {

  GetAtlasPath(): ResRef
  GetTexturePart(): CName
}

declare interface JournalInternetVideo extends JournalInternetBase {

  GetVideoPath(): ResRef
}

declare interface JournalInternetSite extends JournalFileEntry {

  GetShortName(): string
  IsIgnoredAtDesktop(): Bool
  GetAtlasPath(): ResRef
  GetTexturePart(): CName
}

declare interface JournalFactNameValue {

}

declare interface BrowserGameController extends inkGameController {

  OnInitialize(): Bool
  OnJournalEntryStateChanged(entryHash: number, className: CName, notifyOption: JournalNotifyOption, changeType: JournalChangeType): Bool
  PushWebsiteData(): void
  OnUninitialize(): Bool
  GetJournalManager(): JournalManager
}

declare interface LocationManager extends ILocationManager {

  GetLocationTags(entityID: EntityID, tags: CName[]): void
}

declare interface MasterDeviceInkGameControllerBase extends DeviceInkGameControllerBase {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  CreateThumbnailWidgetAsync(parentWidget: inkWidget, widgetData: SThumbnailWidgetPackage): void
  OnThumbnailWidgetSpawned(widget: inkWidget, userData: IScriptable): Bool
  CreateThumbnailWidget(parentWidget: inkWidget, widgetData: SThumbnailWidgetPackage): inkWidget
  UpdateThumbnailWidgetData(widgetData: SThumbnailWidgetPackage, index: number): void
  GetThumbnailWidgetDataIndex(widgetData: SThumbnailWidgetPackage): number
  GetThumbnailWidget(widgetData: SThumbnailWidgetPackage): inkWidget
  HasThumbnailWidgetData(widgetData: SThumbnailWidgetPackage): Bool
  HasThumbnailWidget(widgetData: SThumbnailWidgetPackage): Bool
  AddThumbnailWidgetData(widgetData: SThumbnailWidgetPackage): void
  AddThumbnailWidget(widget: inkWidget, widgetData: SThumbnailWidgetPackage): inkWidget
  InitializeThumbnailWidget(widget: inkWidget, widgetData: SThumbnailWidgetPackage): void
  HideThumbnailWidgets(): void
  UpdateActionWidgets(widgetsData: SActionWidgetPackage[]): void
  UpdateThumbnailWidgets(widgetsData: SThumbnailWidgetPackage[]): void
  UpdateDeviceWidgets(widgetsData: SDeviceWidgetPackage[]): void
  Refresh(state: EDeviceStatus): void
  GetOwner(): InteractiveMasterDevice
  RegisterBlackboardCallbacks(blackboard: IBlackboard): void
  UnRegisterBlackboardCallbacks(blackboard: IBlackboard): void
  OnThumbnailWidgetsUpdate(value: Variant): Bool
  OnThumbnailActionCallback(e: inkPointerEvent): Bool
  RequestThumbnailWidgetsUpdate(): void
  IsOwner(deviceID: PersistentID): Bool
}

declare interface DeviceThumbnailWidgetControllerBase extends DeviceButtonLogicControllerBase {

  Initialize(gameController: DeviceInkGameControllerBase, widgetData: SThumbnailWidgetPackage): void
  SetAction(action: ThumbnailUI): void
  GetAction(): ThumbnailUI
  RegisterThumbnailActionCallback(gameController: DeviceInkGameControllerBase): void
}

declare interface RequestThumbnailWidgetsUpdateEvent extends RequestWidgetUpdateEvent {

}

declare interface ActivatedDeviceControllerPS extends ScriptableDeviceComponentPS {

  GetActionName(): CName
  GetInteractionName(): TweakDBID
  GetQuickHackName(): TweakDBID
  ShouldGlitchOnActivation(): Bool
  GetSpidebotInteractionName(): TweakDBID
  GetVFX(): FxResource
  GetActivationVFXname(): CName
  GetAttackType(): TweakDBID
  GetAnimationTime(): number
  GetIndustrialArmAnimationOverride(): number
  GetSpiderbotInteractionLocationOverride(): NodeRef
  HasQuickHack(): Bool
  HasQuickHackDistraction(): Bool
  HasSpiderbotInteraction(): Bool
  ShouldActivateTrapOnAreaEnter(): Bool
  GameAttached(): void
  ActionSpiderbotActivateActivator(interactionTDBID: TweakDBID): SpiderbotActivateActivator
  ActionQuestToggleAutomaticAttack(toggle: Bool): QuestToggleAutomaticAttack
  ActionQuestSetIndustrialArmAnimationOverride(): QuestSetIndustrialArmAnimationOverride
  ActionQuickHackActivateDevice(interactionTDBID: TweakDBID): ActivateDevice
  ActionEngineering(context: GetActionsContext): ActionEngineering
  OnSpiderbotActivateActivator(evt: SpiderbotActivateActivator): EntityNotificationType
  GetNearestViableParent(): GameObject
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  CanCreateAnySpiderbotActions(): Bool
  GetSpiderbotActions(outActions: DeviceAction[], context: GetActionsContext): void
  GetQuestActions(actions: DeviceAction[], context: GetActionsContext): void
  OnActivateDevice(evt: ActivateDevice): EntityNotificationType
  OnQuestToggleAutomaticAttack(evt: QuestToggleAutomaticAttack): EntityNotificationType
  OnQuestSetIndustrialArmAnimationOverride(evt: QuestSetIndustrialArmAnimationOverride): EntityNotificationType
  OnActionEngineering(evt: ActionEngineering): EntityNotificationType
  ActivateThisDevice(): void
  GetInkWidgetTweakDBID(context: GetActionsContext): TweakDBID
  GetDeviceIconTweakDBID(): TweakDBID
}

declare interface ActivatedDeviceSetup {

}

declare interface ActivatedDeviceAnimSetup {

}

declare interface SpiderbotActivateActivator extends ActionBool {

  SetProperties(): void
  GetTweakDBChoiceRecord(): string
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
}

declare interface QuestToggleAutomaticAttack extends ActionBool {

  SetProperties(toggle: Bool): void
}

declare interface QuestSetIndustrialArmAnimationOverride extends ActionInt {

  SetProperties(animation: number): void
}

declare interface ArcadeMachineController extends ScriptableDC {

  GetPS(): ArcadeMachineControllerPS
}

declare interface ArcadeMachineControllerPS extends ScriptableDeviceComponentPS {

  OnInstantiated(): Bool
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(outActions: DeviceAction[], context: GetActionsContext): void
  GetQuestActions(outActions: DeviceAction[], context: GetActionsContext): void
  GetGameVideoPath(): ResRef
  GetBlackboardDef(): ArcadeMachineBlackboardDef
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface worldITriggerAreaNotifer extends IScriptable {

}

declare interface BlindingLightControllerPS extends BasicDistractionDeviceControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  GetDistractionSound(): CName
  GetTurnOnSound(): CName
  GetTurnOffSound(): CName
  ActionOverloadDevice(): OverloadDevice
  OnOverloadDevice(evt: OverloadDevice): EntityNotificationType
  GetBackgroundTextureTweakDBID(): TweakDBID
  GetDeviceIconTweakDBID(): TweakDBID
}

declare interface ReflectorSFX extends VendingMachineSFX {

}

declare interface BlindingLightController extends BasicDistractionDeviceController {

  GetPS(): BlindingLightControllerPS
}

declare interface DestructibleMasterDeviceController extends MasterController {

  GetPS(): DestructibleMasterDeviceControllerPS
}

declare interface DestructibleMasterDeviceControllerPS extends MasterControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  GameAttached(): void
  IsDestroyed(): Bool
  OnRefreshSlavesEvent(evt: RefreshSlavesEvent): EntityNotificationType
  RefreshSlaves(): void
  ActionMasterDeviceDestroyed(): MasterDeviceDestroyed
}

declare interface MasterDeviceDestroyed extends ActionBool {

  SetProperties(): void
}

declare interface MediaDeviceControllerPS extends ScriptableDeviceComponentPS {

  ActionMediaDeviceStatus(): MediaDeviceStatus
  ActionNextStation(): NextStation
  ActionPreviousStation(): PreviousStation
  ActionQuestSetChannel(): QuestSetChannel
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  GetQuestActions(outActions: DeviceAction[], context: GetActionsContext): void
  OnNextStation(evt: NextStation): EntityNotificationType
  OnPreviousStation(evt: PreviousStation): EntityNotificationType
  OnQuestSetChannel(evt: QuestSetChannel): EntityNotificationType
  ActionQuestEnableInteraction(): QuestEnableInteraction
  OnQuestEnableInteraction(evt: QuestEnableInteraction): EntityNotificationType
  ActionQuestDisableInteraction(): QuestDisableInteraction
  OnQuestDisableInteraction(evt: QuestDisableInteraction): EntityNotificationType
  GetQuickHackDistractionActions(): void
  GetDeviceStatusTextData(): inkTextParams
  ActionThumbnailUI(): ThumbnailUI
  GetDeviceStatusAction(): MediaDeviceStatus
  GetPreviousStationIndex(): number
  GetActiveStationIndex(): number
  GetActiveStationName(): string
  SetActiveStationIndex(stationIDX: number): void
  PassChannelName(channelName: string): void
  PushPersistentData(data: MediaDeviceData): void
}

declare interface MediaDeviceStatus extends BaseDeviceStatus {

  SetProperties(deviceRef: ScriptableDeviceComponentPS): void
  GetCurrentDisplayString(): string
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface NextStation extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface PreviousStation extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface QuestSetChannel extends ActionInt {

  SetProperties(channel: number): void
}

declare interface QuestEnableInteraction extends ActionBool {

  SetProperties(): void
}

declare interface QuestDisableInteraction extends ActionBool {

  SetProperties(): void
}

declare interface MediaDeviceData {

}

declare interface MediaDeviceController extends ScriptableDC {

  GetPS(): MediaDeviceControllerPS
}

declare interface ToggleGlassTint extends ActionBool {

  SetProperties(isActive: Bool): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface TVController extends MediaDeviceController {

  GetPS(): TVControllerPS
}

declare interface TVControllerPS extends MediaDeviceControllerPS {

  OnInstantiated(): Bool
  GameAttached(): void
  InitializeTv(): void
  IsInterfaceMuted(): Bool
  SetInterfaceMuted(mute: Bool): void
  SetIsInteractive(isInteractive: Bool): void
  GetDefaultGlitchVideoPath(): ResRef
  GetBroadcastGlitchVideoPath(): ResRef
  HasCustomChannels(): Bool
  SetIsGlobalTvOnly(isGlobalTv: Bool): void
  IsGlobalTvOnly(): Bool
  GetGlobalTVChannels(): ChannelData_Record[]
  GetAmmountOfGlobalTVChannels(): number
  InitializeGlobalTV(): number
  BackupCustomChannels(): void
  HasBackupedCustomChannels(): Bool
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(outActions: DeviceAction[], context: GetActionsContext): void
  GetQuestActions(outActions: DeviceAction[], context: GetActionsContext): void
  GetActiveStationIndex(): number
  EstablishInitialActiveChannelIndex(): number
  GetGlobalTVChannelIDX(id: TweakDBID): number
  GetActiveChannelVideoPath(): ResRef
  GetActiveChannelTweakDBID(): TweakDBID
  GlobalTVChannelIDToEnum(id: TweakDBID): ETVChannel
  GlobalTVChannelIDToInt(id: TweakDBID): number
  GetChannelName(index: number): string
  GetChannelID(channelName: string): number
  GetChannelData(channelIndex: number): STvChannel
  DetermineGameplayViability(context: GetActionsContext, hasActiveActions: Bool): Bool
  GetDeviceIconPath(): string
  GetInkWidgetTweakDBID(context: GetActionsContext): TweakDBID
  GetDeviceWidget(context: GetActionsContext): SDeviceWidgetPackage
  GetBlackboardDef(): TVDeviceBlackboardDef
  IsInteractive(): Bool
  PushResaveData(data: TVResaveData): void
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
  ActionQuestMuteSounds(mute: Bool): QuestMuteSounds
  OnQuestMuteSounds(evt: QuestMuteSounds): EntityNotificationType
  ActionQuestToggleInteractivity(enable: Bool): QuestToggleInteractivity
  OnQuestToggleInteractivity(evt: QuestToggleInteractivity): EntityNotificationType
  IsGlobalTVChannelActive(channel: number): Bool
}

declare interface TVSetup {

}

declare interface STvChannel {

}

declare interface TVBase_Record extends Device_Record {

  Channels(outList: ChannelData_Record[]): void
  GetChannelsCount(): number
  GetChannelsItem(index: number): ChannelData_Record
  ChannelsContains(item: ChannelData_Record): Bool
}

declare interface ChannelData_Record extends TweakDBRecord {

  LocalizedName(): string
  DynamicTexturePath(): string
  OverlayWidgetPath(): string
  ChannelWidget(): CName
  AudioEvent(): CName
  OrderID(): number
}

declare interface QuestMuteSounds extends ActionBool {

  SetProperties(mute: Bool): void
}

declare interface QuestToggleInteractivity extends ActionBool {

  SetProperties(enable: Bool): void
}

declare interface TVViabilityInterpreter extends IScriptable {

  /** @noSelf **/
  Evaluate(device: MediaDeviceControllerPS, hasActiveActions: Bool): Bool
}

declare interface TvDeviceWidgetCustomData extends WidgetCustomData {

}

declare interface BaseAnimatedDeviceController extends ScriptableDC {

  GetPS(): BaseAnimatedDeviceControllerPS
}

declare interface BaseAnimatedDeviceControllerPS extends ScriptableDeviceComponentPS {

  IsActive(): Bool
  IsNotActive(): Bool
  Randomize(): Bool
  GameAttached(): void
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  GetQuestActions(actions: DeviceAction[], context: GetActionsContext): void
  ActionToggleActivate(): ToggleActivate
  ActionQuickHackToggleActivate(): QuickHackToggleActivate
  OnToggleActivate(evt: ToggleActivate): EntityNotificationType
  OnQuickHackToggleActivate(evt: QuickHackToggleActivate): EntityNotificationType
  OnActivateDevice(evt: ActivateDevice): EntityNotificationType
  OnDeactivateDevice(evt: DeactivateDevice): EntityNotificationType
}

declare interface QuickHackToggleActivate extends ToggleActivate {

}

declare interface TimeDilationListener extends tickITimeDilationListener {

}

declare interface DeviceSystemBaseController extends MasterController {

  GetPS(): DeviceSystemBaseControllerPS
}

declare interface MorphData extends IScriptable {

}

declare interface ToggleBlockade extends ActionBool {

  SetProperties(isActive: Bool, nameOnTrue: TweakDBID, nameOnFalse: TweakDBID): void
  /** @noSelf **/
  IsDefaultConditionMet(device: RoadBlockControllerPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: RoadBlockControllerPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface MusicSettings extends IScriptable {

  GetSoundName(): CName
  GetStatusEffect(): ESoundStatusEffects
  SetStatusEffect(effect: ESoundStatusEffects): void
}

declare interface TrafficLightControllerPS extends ScriptableDeviceComponentPS {

  OnInstantiated(): Bool
  Initialize(): void
  GameAttached(): void
  IsMasterDestroyed(): Bool
  OnMasterDeviceDestroyed(evt: MasterDeviceDestroyed): EntityNotificationType
}

declare interface TrafficLightController extends ScriptableDC {

  GetPS(): TrafficLightControllerPS
}

declare interface ElectricLightController extends ScriptableDC {

  GetPS(): ElectricLightControllerPS
}

declare interface ElectricLightControllerPS extends ScriptableDeviceComponentPS {

  OnInstantiated(): Bool
  GameAttached(): void
  LogicReady(): void
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  EvaluateDeviceState(): void
  IsConnectedToCLS(): Bool
  InitializeCLS(setStateInstant?: Bool): Bool
  GetCLSFuse(): FuseControllerPS
  UpdateStateOnCLS(state: EDeviceStatus): void
}

declare interface FuseControllerPS extends MasterControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  GetExpectedSlaveState(): EDeviceStatus
  GetTimetableSetup(): DeviceTimeTableManager
  GetClearance(): Clearance
  ActionToggleON(): ToggleON
  GetActions(outActions: DeviceAction[], context: GetActionsContext): Bool
  OnQuestForceON(evt: QuestForceON): EntityNotificationType
  OnQuestForceOFF(evt: QuestForceOFF): EntityNotificationType
  OnSetDeviceON(evt: SetDeviceON): EntityNotificationType
  OnSetDeviceOFF(evt: SetDeviceOFF): EntityNotificationType
  OnSetDeviceUnpowered(evt: SetDeviceUnpowered): EntityNotificationType
  OnSetDevicePowered(evt: SetDevicePowered): EntityNotificationType
  OnToggleON(evt: ToggleON): EntityNotificationType
  PowerDevice(): void
  UnpowerDevice(): void
  RefreshSlaves(): void
  RefreshPowerOnSlaves(): void
  RestorePowerOnSlaveDevices(): void
  CutPowerOnSlaveDevices(): void
  OnRefreshSlavesEvent(evt: RefreshSlavesEvent): EntityNotificationType
  OnRefreshPowerOnSlavesEvent(evt: RefreshPowerOnSlavesEvent): EntityNotificationType
  RefreshPowerOnSlaves_Event(): void
  IsCLSInitialized(): Bool
  OnInitializeCLSEvent(evt: InitializeCLSEvent): EntityNotificationType
  OnDeviceTimetableEvent(evt: DeviceTimetableEvent): EntityNotificationType
  OnRefreshCLSoNslaves(evt: RefreshCLSOnSlavesEvent): EntityNotificationType
  RefreshCLSoNslaves(state: EDeviceStatus, restorePower: Bool, devices: DeviceComponentPS[]): void
  GetLightSwitchDelayValue(): number
  SendCLSRefreshByEvent(devices: DeviceComponentPS[], state: EDeviceStatus, restorePower: Bool, delay: number): void
  SendDeviceTimeTableEvent(targetID: EntityID, state: EDeviceStatus, restorePower: Bool): void
  SendDeviceTimeTableEventWithDelay(targetID: EntityID, state: EDeviceStatus, restorePower: Bool, delay: number): void
  OnDealyedTimetableEvent(evt: DelayedTimetableEvent): EntityNotificationType
  GetDeviceStateByCLS(): EDeviceStatus
  InitializeCLS(): void
  IsConnectedToCLS(): Bool
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface DeviceTimeTableManager extends IScriptable {

  InitializeTimetable(owner: GameObject): void
  IsValid(): Bool
  UninitializeTimetable(game: GameInstance): void
  GetTimeTable(): SDeviceTimetableEntry[]
  GetDeviceStateForActiveEntry(game: GameInstance): EDeviceStatus
  GetACtiveEntryID(game: GameInstance): number
  IsEntryActive(game: GameInstance, entryID: number): Bool
  GetCurrentTime(game: GameInstance): GameTime
}

declare interface RefreshPowerOnSlavesEvent extends Event {

}

declare interface RefreshCLSOnSlavesEvent extends Event {

}

declare interface DelayedTimetableEvent extends Event {

}

declare interface InitializeCLSEvent extends Event {

}

declare interface BaseNetworkSystemController extends MasterController {

  GetPS(): BaseNetworkSystemControllerPS
}

declare interface BaseNetworkSystemControllerPS extends MasterControllerPS {

}

declare interface AttachmentSlotEvent extends Event {

  GetSlotID(): TweakDBID
  SetSlotID(slotId: TweakDBID): void
}

declare interface StateScriptInterface extends IScriptable {

  GetNow(): number
}

declare interface AdjustTransform extends IScriptable {

}

declare interface AnimFeature_BasicAim extends AnimFeature {

  SetAimState(aimState: animAimState): void
  SetZoomState(zoomState: animAimState): void
}

declare interface SceneTierData extends IScriptable {

}

declare interface SceneTierDataMotionConstrained extends SceneTierData {

}

declare interface gameprojectileSpawnerPreviewEvent extends Event {

}

declare interface LocomotionParameters extends IScriptable {

  SetUpwardsGravity(value: number): void
  SetDownwardsGravity(value: number): void
  SetImperfectTurn(value: Bool): void
  SetSpeedBoostInputRequired(value: Bool): void
  SetSpeedBoostMultiplyByDot(value: Bool): void
  SetUseCameraHeadingForMovement(value: Bool): void
  SetCapsuleHeight(value: number): void
  SetCapsuleRadius(value: number): void
  SetDoJump(value: Bool): void
  SetIgnoreSlope(value: Bool): void
  GetUpwardsGravity(defaultValue: number): number
  GetDownwardsGravity(defaultValue: number): number
  GetImperfectTurn(defaultValue: Bool): Bool
  GetSpeedBoostInputRequired(defaultValue: Bool): Bool
  GetSpeedBoostMultiplyByDot(defaultValue: Bool): Bool
  GetUseCameraHeadingForMovement(defaultValue: Bool): Bool
  GetCapsuleHeight(defaultValue: number): number
  GetCapsuleRadius(defaultValue: number): number
  GetDoJump(defaultValue: Bool): Bool
  GetIgnoreSlope(defaultValue: Bool): Bool
}

declare interface ClimbParametersBase extends IScriptable {

  SetObstacleFrontEdgePosition(val: Vector4): void
  SetObstacleFrontEdgeNormal(val: Vector4): void
  SetObstacleVerticalDestination(val: Vector4): void
  SetObstacleHorizontalDestination(val: Vector4): void
  SetObstacleSurfaceNormal(val: Vector4): void
  SetAnimationNameApproach(val: CName): void
}

declare interface StateFunctor extends IScriptable {

  GetStaticBoolParameter(parameterName: string): StateResultBool
  GetStaticIntParameter(parameterName: string): StateResultInt
  GetStaticFloatParameter(parameterName: string): StateResultFloat
  GetStaticCNameParameter(parameterName: string): StateResultCName
  GetStaticStringParameter(parameterName: string): StateResultString
  GetStaticBoolArrayParameter(parameterName: string): Bool[]
  GetStaticIntArrayParameter(parameterName: string): number[]
  GetStaticFloatArrayParameter(parameterName: string): number[]
  GetStaticStringArrayParameter(parameterName: string): string[]
  GetStaticCNameArrayParameter(parameterName: string): CName[]
  GetStateMachineName(): CName
  GetStateName(): CName
  GetInStateTime(): number
  SetFlavour(flavourName: CName): void
}

declare interface gameprojectileLinearMovementEvent extends Event {

}

declare interface inkAnimEvent extends IScriptable {

  GetStartTime(): number
  SetStartTime(startTime: number): void
}

declare interface Ref_1_3_2_NonTrivialStruct {

  /** @noSelf **/
  StaticFunction(obj: Ref_1_3_2_NonTrivialStruct): void
}

declare interface Ref_1_3_2_1_BaseStruct {

}

declare interface Ref_1_3_2_1_DerivedStruct extends Ref_1_3_2_1_BaseStruct {

}

declare interface Ref_2_3_2_Base extends IScriptable {

}

declare interface Ref_4_2_2_Base extends IScriptable {

}

declare interface EffectNode extends IScriptable {

}

declare interface EffectExecutor extends EffectNode {

}

declare interface EffectExecutor_Scripted extends EffectExecutor {

}

declare interface Ref_3_4_BaseClass extends IScriptable {

  VirtualFunction(): void
  FinalByDefaultFunction(): void
  FinalFunction(): void
  OnSomething(): Bool
}

declare interface Ref_3_4_DerivedClass extends Ref_3_4_BaseClass {

  VirtualFunction(): void
  OnSomething(): Bool
}

declare interface AIbehaviorexpressionScript extends AIBehaviorScriptBase {

  MarkDirty(context: ScriptExecutionContext): void
  OnBehaviorCallback(cbName: CName, context: ScriptExecutionContext): Bool
}

declare interface gameLootContainerBase extends GameObject {

  OnGameAttached(): Bool
  GetPS(): gameLootContainerBasePS
  GetDefaultHighlight(): FocusForcedHighlightData
  GetCurrentOutline(): EFocusOutlineType
  ShouldRegisterToHUD(): Bool
  IsContainer(): Bool
  IsLogicReady(): Bool
  HasValidLootQuality(): Bool
  IsInIconForcedVisibilityRange(): Bool
  OnInventoryEmptyEvent(evt: OnInventoryEmptyEvent): Bool
  OnInventoryChangedEvent(evt: InventoryChangedEvent): Bool
  OnItemRemoveddEvent(evt: ItemBeingRemovedEvent): Bool
  OnItemAddedEvent(evt: ItemAddedEvent): Bool
  OnInventoryFilledEvent(evt: ContainerFilledEvent): Bool
  OnInteraction(choiceEvent: InteractionChoiceEvent): Bool
  DeterminGameplayRoleMappinVisuaState(data: SDeviceMappinData): EMappinVisualState
  DeterminGameplayRole(): EGameplayRole
  IsQuest(): Bool
  MarkAsQuest(isQuest: Bool): void
  IsDisabled(): Bool
  IsEmpty(): Bool
  IsIllegal(): Bool
  GetContentAssignment(): TweakDBID
  EvaluateLootQualityEvent(): void
  OnEvaluateLootQuality(evt: EvaluateLootQualityEvent): Bool
  EvaluateLootQuality(): Bool
  GetLootQuality(): gamedataQuality
  GetIsIconic(): Bool
  ToggleLootHighlight(enable: Bool): void
  OnSetContainerStateEventEvent(evt: SetContainerStateEvent): Bool
  ResolveQualityRangeInteractionLayer(): void
}

declare interface SetScanningBlockedEvent extends Event {

}

declare interface gameLootContainerBasePS extends GameObjectPS {

  SetIsMarkedAsQuest(isQuest: Bool): void
  IsMarkedAsQuest(): Bool
  IsDisabled(): Bool
  IsLocked(): Bool
  OnSetContainerStateEventEvent(evt: SetContainerStateEvent): EntityNotificationType
  OnToggleContainerLockEvent(evt: ToggleContainerLockEvent): EntityNotificationType
}

declare interface SetContainerStateEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface ToggleContainerLockEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface Effector extends IScriptable {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  Uninitialize(game: GameInstance): void
  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
  RepeatedAction(owner: GameObject): void
  GetPrereqState(): PrereqState
  GetRecord(): TweakDBID
  GetParentRecord(): TweakDBID
  GetApplicationTargetAsStatsObjectID(effectorOwner: GameObject, applicationTarget: string, targetID: StatsObjectID): Bool
  GetApplicationTarget(effectorOwner: GameObject, applicationTarget: string, targetID: EntityID): Bool
  GetApplicationTarget(effectorOwner: GameObject, applicationTarget: string, target: GameObject): Bool
}

declare interface ModifyAttackEffector extends Effector {

  GetHitEvent(): gameHitEvent
}

declare interface MultiPrereqState extends PrereqState {

}

declare interface InteractionScriptedCondition extends IScriptable {

}

declare interface AmmoStateHitCallback extends HitCallback {

  RegisterState(state: PrereqState): void
  UpdateState(hitEvent: gameHitEvent): void
}

declare interface AmmoStateHitTriggeredPrereqState extends GenericHitPrereqState {

  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface AmmoStateHitTriggeredPrereq extends HitTriggeredPrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  Initialize(recordID: TweakDBID): void
}

declare interface AmmoStateHitTriggeredCallback extends AmmoStateHitCallback {

  OnHitTriggered(hitEvent: gameHitEvent): void
  OnHitReceived(hitEvent: gameHitEvent): void
}

declare interface inkPreviewGameController extends gameuiMenuGameController {

  Rotate(yaw: number): void
  RotateVector(value: Vector3): void
  OnInitialize(): Bool
  OnUninitialize(): Bool
  HandleAxisInput(e: inkPointerEvent): void
  OnAxisInput(e: inkPointerEvent): Bool
}

declare interface inkPointerEvent extends inkInputEvent {

  GetScreenSpacePosition(): Vector2
  GetWindowSpacePosition(): Vector2
  GetAxisData(): number
}

declare interface CodexListItemController extends ListItemController {

  OnInitialize(): Bool
  OnDataChanged(value: IScriptable): Bool
  OnToggledOn(target: ListItemController): Bool
  RemoveNew(): void
}

declare interface ListItemStateMapper extends inkLogicController {

  OnInitialize(): Bool
  OnToggledOn(target: ListItemController): Bool
  OnToggledOff(target: ListItemController): Bool
  OnSelected(target: ListItemController): Bool
  OnDeselected(target: ListItemController): Bool
  SetNew(isNew: Bool): void
  UpdateState(): void
}

declare interface JournalRepresentationData extends ListItemData {

}

declare interface inkItemPreviewGameController extends inkPreviewGameController {

  PreviewItem(itemID: ItemID): void
}

declare interface inkPuppetPreviewGameController extends inkPreviewGameController {

  GetGamePuppet(): gamePuppet
  OnPuppetAttached(): Bool
  SendAnimData(): void
  GetAnimFeature(animFeature: AnimFeature_Paperdoll): void
}

declare interface AnimFeature_Paperdoll extends AnimFeature {

}

declare interface inkInventoryPuppetPreviewGameController extends inkPuppetPreviewGameController {

  OnInitialize(): Bool
  GetAnimFeature(animFeature: AnimFeature_Paperdoll): void
  OnSetCameraSetupEvent(index: number, slotName: CName): Bool
  HandleAxisInput(e: inkPointerEvent): void
}

declare interface ArmorEquipGameController extends gameuiMenuGameController {

  OnInitialize(): Bool
  CreateTooltip(tooltipController: InventorySlotTooltip): void
  HelperAddPaperdollButton(argTitle: string, containerSlot: inkCanvas, equipArea: gamedataEquipmentArea, slotIndex: number, areaTags: CName[]): void
  HelperAddInventoryButton(itemData: gameItemData, slotId: number): void
  HelperClearButton(slotId: number): void
  OnInventoryChange(value: Variant): void
  OnEquipmentChange(value: Variant): void
  RefreshEquipment(): void
  RefreshFlatheadEquipment(): void
  RefreshPlayerEquipment(): void
  RemovedCyberware(items: gameItemData[]): gameItemData[]
  RefreshInventoryList(): void
  SetCraftList(): void
  OnPaperDollCursor(e: inkPointerEvent): void
  OnInventoryItemPush(e: inkPointerEvent): void
  OnInventoryItemEnter(e: inkPointerEvent): void
  OnInventoryItemExit(e: inkPointerEvent): void
  OnPaperdollItemEnter(e: inkPointerEvent): void
  OnPaperdollItemExit(e: inkPointerEvent): void
  OnScrollUp(e: inkPointerEvent): void
  OnScrollDn(e: inkPointerEvent): void
  ProcessPaperDollPlayerClick(e: inkPointerEvent): void
  ProcessPaperDollFlatheadClick(e: inkPointerEvent): void
  ProcessPlayerClick(e: inkPointerEvent): void
  ProcessFlatheadClick(e: inkPointerEvent): void
  RefreshTooltipsInventory(tooltipItemData: gameItemData, equippedItemId: ItemID): void
  RefreshTooltipsPaperdoll(tooltipItemData: ItemViewData): void
  HideTooltips(): void
  ProcessToolboxClick(e: inkPointerEvent): void
  DisassembleItem(itemID: ItemID, quantity: number): void
  OnSelectPlayer(e: inkPointerEvent): void
  OnSelectFlathead(e: inkPointerEvent): void
  OnSelectToolbox(e: inkPointerEvent): void
}

declare interface InventoryDataManager extends IScriptable {

  Initialize(player: PlayerPuppet): void
  GetPlayer(): PlayerPuppet
  GetLastLootedItems(count: number, itemsList: gameItemData[]): void
  GetItemsList(itemsList: gameItemData[]): void
  GetItemsListByTag(tag: CName, itemsList: gameItemData[]): void
  GetEquippedItemIdInArea(equipArea: gamedataEquipmentArea, slot?: number): ItemID
  GetItemEquipArea(itemId: ItemID): gamedataEquipmentArea
  GetExternalItemData(ownerId: EntityID, externalItemId: ItemID): gameItemData
  GetPlayerItemData(externalItemId: ItemID): gameItemData
  GetExternalItemStats(ownerId: EntityID, externalItemId: ItemID, compareItemId?: ItemID): ItemViewData
  GetPlayerItemStats(itemId: ItemID, compareItemId?: ItemID): ItemViewData
  QualityEnumToName(qualityStatValue: gamedataQuality): string
  CanCompareItems(itemId: ItemID, compareItemId: ItemID): Bool
  GetItemStatsByData(itemData: gameItemData, compareWithData?: gameItemData): ItemViewData
  GetStatsUIMapName(itemData: gameItemData): string
  GetStatsUIMapName(itemId: ItemID): string
  GetStatsList(mapPath: TweakDBID, itemData: gameItemData, primeStatsList: StatViewData[], secondStatsList: StatViewData[], compareWithData?: gameItemData): void
  FillStatsList(itemData: gameItemData, statRecords: Stat_Record[], statList: StatViewData[], canCompare: Bool, compareStatRecords: Stat_Record[], compareWithData?: gameItemData): void
  GetPlayerStats(statsList: StatViewData[]): void
}

declare interface PaperDollSlotController extends inkButtonDpadSupportedController {

  OnInitialize(): Bool
  SetButtonDetails(argText: string, equipArea: gamedataEquipmentArea, slotIndex: number, areaTags: CName[]): void
  SetItemInSlot(itemID: ItemID): void
  SetSlotLocked(slotTweak: TweakDBID): void
  IsLocked(): Bool
  GetItem(): ItemID
  GetItemData(): gameItemData
  GetAreaTags(): CName[]
  GetEquipArea(): gamedataEquipmentArea
  GetSlotIndex(): number
  GetSlotName(): string
}

declare interface inkRectangle extends inkBaseShapeWidget {

}

declare interface fullscreenDpadSupported extends inkLogicController {

  OnInitialize(): Bool
  SetDpadTargets(argLeft: inkWidget, argUp: inkWidget, argRight: inkWidget, argDown: inkWidget): void
  SetDpadTargetsInList(mainList: inkVerticalPanel): void
  OnRelease(e: inkPointerEvent): Bool
}

declare interface InventorySlotTooltip extends AGenericTooltipController {

  OnInitialize(): Bool
  SetStyle(styleResPath: ResRef): void
  SetData(data: ItemViewData): void
  SetData(tooltipData: ATooltipData): void
  SetData(data: InventoryTooltipData): void
  UpdateLayout(): void
  UpdateCyclingDots(): void
  UpdateRarityBar(): void
  SetStats(statList: InventoryItemStatList, data: InventoryTooltipData_StatData[]): void
  SetAdditionalStatsText(): void
  UpdateDescription(): void
}

declare interface InventoryItemStatList extends inkLogicController {

  OnInitialize(): Bool
  SetData(data: InventoryTooltipData_StatData[]): void
  ClearData(toLeave: number): void
  UpdateLayout(): void
  UpdateVisibility(force: Bool): void
  UpdateVisibility(): void
}

declare interface InventoryItemStatItem extends inkLogicController {

  OnInitialize(): Bool
  SetData(data: InventoryTooltipData_StatData): void
}

declare interface StatisticDifferenceBarController extends inkLogicController {

  Setup(dataObject: InventoryTooltipData_StatData): void
}

declare interface InventoryItemAttachmentsList extends inkLogicController {

  SetData(data: CName[]): void
  ClearData(toLeave: number): void
  UpdateLayout(): void
  UpdateVisibility(force: Bool): void
  UpdateVisibility(): void
}

declare interface InventoryItemAttachmentDisplay extends inkLogicController {

  Setup(itemData: InventoryItemData): void
  Setup(visible: Bool, quality: CName): void
  Mark(marked: Bool): void
}

declare interface DamageTypeIndicator extends inkLogicController {

  Setup(damageType: gamedataDamageType): void
}

declare interface TooltipSpecialAbilityList extends inkLogicController {

  SetData(qualityState: CName, data: InventoryItemAbility[]): void
  ClearData(toLeave: number): void
  UpdateLayout(): void
  UpdateVisibility(force: Bool): void
  UpdateVisibility(): void
}

declare interface TooltipSpecialAbilityDisplay extends inkLogicController {

  Setup(qualityName: CName, data: InventoryItemAbility): void
}

declare interface TooltipCycleDotController extends inkLogicController {

  Toggle(active: Bool): void
}

declare interface ArmorEquipInventoryItemController extends inkButtonDpadSupportedController {

  OnInitialize(): Bool
  ClearButton(): void
  SetButtonDetails(itemData: gameItemData, itemQuantity: number, disassemblable: Bool): void
  GetItemData(): gameItemData
  GetItemID(): ItemID
  GetIsEmpty(): Bool
}

declare interface inkMenuScenario extends IScriptable {

  SwitchToScenario(name: CName, userData?: IScriptable): void
  GetMenusState(): inkMenusState
  GetSystemRequestsHandler(): inkISystemRequestsHandler
  QueueEvent(evt: Event): void
  QueueBroadcastEvent(evt: Event): void
}

declare interface gameuiSaveHandlingController extends gameuiMenuGameController {

  DeleteSavedGame(saveId: number): void
  RequestSaveFailedNotification(): void
  RequestGameSavedNotification(): void
  IsSaveFailedNotificationActive(): Bool
  IsGameSavedNotificationActive(): Bool
  LoadSaveInGame(saveId: number): void
  OverrideSavedGame(saveId: number): void
  ShowSavingLockedNotification(locks: gameSaveLock[]): void
}

declare interface gameuiMenuItemListGameController extends gameuiSaveHandlingController {

  CanExitGame(): Bool
  ExitGame(): void
  GotoMainMenu(): void
  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
  PopulateMenuItemList(): void
  HandleMenuItemActivate(data: PauseMenuListItemData): Bool
  ShouldAllowExitGameMenuItem(): Bool
  AddMenuItem(label: string, spawnEvent: CName): void
  AddMenuItem(label: string, action: PauseMenuAction): void
  Clear(): void
  ShowActionsList(): void
  OnMenuItemActivated(index: number, target: ListItemController): Bool
}

declare interface PauseMenuListItemData extends ListItemData {

}

declare interface gameuiBaseMenuGameController extends inkGameController {

  GetPuppet(sceneName: CName): gamePuppet
  SpawnMenuInstanceEvent(eventName: CName): void
  SpawnMenuInstanceDataEvent(eventName: CName, userData: IScriptable): void
}

declare interface MappinControllerCustomData extends IScriptable {

}

declare interface gameuiGenericNotificationReceiverGameController extends inkGameController {

  SetNotificationData(notificationData: GenericNotificationViewData): void
}

declare interface BaseWorldMapMappinController extends BaseInteractionMappinController {

  IsGrouped(): Bool
  IsCollection(): Bool
  IsInCollection(): Bool
  OnInitialize(): Bool
  OnIntro(): Bool
  OnUpdate(): Bool
  Update(): void
  UpdateVisibility(): void
  UpdateIcon(): void
  UpdateIsNew(): void
  CanSelectMappin(): Bool
  GetDesiredOpacityAndInteractivity(opacity: number, interactive: Bool): void
  OnFiltersChanged(): Bool
  OnGroupStateChanged(oldState: gameuiMappinGroupState, newState: gameuiMappinGroupState): Bool
  ComputeRootState(): CName
  PlayFadeAnimation(opacity: number): void
  StopFadeAnimation(): void
  SelectMappin(): void
  UnselectMappin(): void
  GetMappinVariant(): gamedataMappinVariant
}

declare interface QuestMappin extends IMappin {

  GetJournalPathHash(): number
  IsInsideTrigger(): Bool
  IsUIAnimation(): Bool
  GetUIAnimationRecordID(): TweakDBID
  GetOwnerObjectMarkerVisibility(): Bool
}

declare interface MappinUIUtils {

  /** @noSelf **/
  GetEngineTime(): EngineTime
  /** @noSelf **/
  GetGlobalProfile(): MappinUIGlobalProfile_Record
  /** @noSelf **/
  GetDistrictRecord(districtType: gamedataDistrict): District_Record
  /** @noSelf **/
  GetFilterGroupFromFilter(filter: gamedataWorldMapFilter): MappinUIFilterGroup_Record
  /** @noSelf **/
  GetFilterGroupFromVariant(mappinVariant: gamedataMappinVariant): MappinUIFilterGroup_Record
  /** @noSelf **/
  GetFilterGroup(filter: gamedataWorldMapFilter): MappinUIFilterGroup_Record
  /** @noSelf **/
  GetFilterGroup(mappinVariant: gamedataMappinVariant): MappinUIFilterGroup_Record
  /** @noSelf **/
  IsPlayerInArea(mappin: IMappin): Bool
  /** @noSelf **/
  IsMappinServicePoint(mappinVariant: gamedataMappinVariant): Bool
  /** @noSelf **/
  MappinToTexturePart(mappin: IMappin): CName
  /** @noSelf **/
  MappinToTexturePart(mappinVariant: gamedataMappinVariant, mappinPhase: gamedataMappinPhase): CName
  /** @noSelf **/
  MappinToTexturePart(mappinVariant: gamedataMappinVariant): CName
  /** @noSelf **/
  MappinToString(mappinVariant: gamedataMappinVariant, mappinPhase: gamedataMappinPhase): CName
  /** @noSelf **/
  MappinToString(mappinVariant: gamedataMappinVariant): CName
  /** @noSelf **/
  MappinToDescriptionString(mappinVariant: gamedataMappinVariant): CName
  /** @noSelf **/
  MappinToObjectiveString(mappinVariant: gamedataMappinVariant): CName
  /** @noSelf **/
  PlayPreventionBlinkAnimation(widget: inkWidget, initialState: CName): inkAnimProxy
  /** @noSelf **/
  CyclePreventionState(state: CName): void
}

declare interface inkAnimPadding extends inkAnimInterpolator {

  GetStartPadding(): inkMargin
  GetEndPadding(): inkMargin
  SetStartPadding(startPadding: inkMargin): void
  SetEndPadding(endPadding: inkMargin): void
}

declare interface MappinUIFilterGroup_Record extends TweakDBRecord {

  FilterType(): WorldMapFilter_Record
  Mappins(outList: MappinVariant_Record[]): void
  GetMappinsCount(): number
  GetMappinsItem(index: number): MappinVariant_Record
  MappinsContains(item: MappinVariant_Record): Bool
  WidgetState(): CName
  ShouldCollectMappins(): Bool
}

declare interface GenericNotificationController extends gameuiGenericNotificationReceiverGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  SetNotificationData(notificationData: GenericNotificationViewData): void
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
  OnActionTriggered(): void
}

declare interface inkTextReplaceController extends inkTextAnimationController {

  GetBaseText(): string
  SetBaseText(text: string): void
  GetTargetText(): string
  SetTargetText(text: string): void
  GetTimeSkip(): number
  SetTimeSkip(timeSkipValue: number): void
}

declare interface ListenerActionConsumer {

  /** @noSelf **/
  Consume(me: ListenerActionConsumer): void
  /** @noSelf **/
  ConsumeSingleAction(me: ListenerActionConsumer): void
  /** @noSelf **/
  DontSendReleaseEvent(me: ListenerActionConsumer): void
  /** @noSelf **/
  AxisWaitForZero(me: ListenerActionConsumer): void
}

declare interface TabButtonController extends inkToggleController {

  OnInitialize(): Bool
  SetToggleData(data: number, label?: string, icon?: string): void
  GetData(): number
  GetLabelKey(): string
  GetIcon(): string
  OnTabSelected(e: inkPointerEvent): Bool
  OnTabHoverOver(e: inkPointerEvent): Bool
  OnTabHoverOut(e: inkPointerEvent): Bool
}

declare interface JournalEntryListItemController extends ListItemController {

  OnDataChanged(value: IScriptable): Bool
  OnJournalEntryUpdated(entry: JournalEntry, extraData: IScriptable): void
}

declare interface JournalEntryListItemData extends IScriptable {

}

declare interface BaseCharacterCreationController extends gameuiMenuGameController {

  GetCharacterCustomizationSystem(): gameuiICharacterCustomizationSystem
  GetTelemetrySystem(): ITelemetrySystem
  WaitForRunningInstalations(): Bool
  RequestCameraChange(slotName: CName, delayed?: Bool): void
  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnSetMenuEventDispatcher(d: inkMenuEventDispatcher): Bool
  OnShowEngagementScreen(evt: ShowEngagementScreen): Bool
  OnRelease(e: inkPointerEvent): Bool
  OnButtonRelease(evt: inkPointerEvent): Bool
  PriorMenu(): void
  NextMenu(): void
}

declare interface PreGameSubMenuGameController extends inkGameController {

  OnInitialize(): Bool
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
  InitializeMenuName(menuName: inkText): void
  InitializeButtons(buttonsList: inkVerticalPanel): void
  AddButton(buttonsList: inkVerticalPanel, text: string, callBackName: CName): void
  AddBigButton(buttonsList: inkCompoundWidget, text: string, callBackName: CName): void
  AddSelector(selectorsList: inkVerticalPanel, label: string, values?: string[]): SelectorController
}

declare interface BaseGOGProfileController extends inkGameController {

  RequestStop(): void
  OpenProfileUrl(url: string): void
}

declare interface MainMenuGameController extends gameuiMenuItemListGameController {

}

declare interface CodexImageButton extends CodexListItemController {

  OnInitialize(): Bool
  OnToggledOn(target: ListItemController): Bool
  OnToggledOff(target: ListItemController): Bool
  OnDataChanged(value: IScriptable): Bool
  ExtractImage(data: JournalRepresentationData): CName
}

declare interface JournalCodexCategory extends JournalFileEntry {

  GetCategoryName(): string
}

declare interface JournalOnscreensStructuredGroup extends IScriptable {

  GetTag(): CName
  GetEntries(): JournalOnscreen[]
}

declare interface BaseModalListPopupGameController extends inkGameController {

  SetupData(): void
  SetupVirtualList(): void
  CleanVirtualList(): void
  Activate(): void
  Select(previous: inkVirtualCompoundItemController, next: inkVirtualCompoundItemController): void
  OnClose(): void
  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
  OnDelayInitPopupGameController(evt: DelayInitPopupGameController): Bool
  OnItemSelected(previous: inkVirtualCompoundItemController, next: inkVirtualCompoundItemController): Bool
  BaseSetupVirtualList(): void
  HandleScroll(axisData: number): void
  ScrollNext(): void
  ScrollPrior(): void
  Close(): void
  SendPSMRadialCloseRequest(): void
  OnHideAnimFinished(proxy: inkAnimProxy): Bool
  SetTimeDilatation(enable: Bool): void
}

declare interface PopupStateUtils extends IScriptable {

  /** @noSelf **/
  SetBackgroundBlurBlendTime(gameCtrl: inkGameController, blendTime: number): void
  /** @noSelf **/
  SetBackgroundBlur(gameCtrl: inkGameController, enable: Bool): void
}

declare interface UI_SystemDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface BaseModalListPopupTemplateClassifier extends inkVirtualItemTemplateClassifier {

  ClassifyItem(data: Variant): number
}

declare interface DelayInitPopupGameController extends Event {

}

declare interface inkGameNotificationToken extends IScriptable {

  RegisterListener(object: IScriptable, functionName: CName): void
  TriggerCallback(data: inkGameNotificationData): void
}

declare interface BaseChunkGameController extends inkGameController {

  OnInitialize(): Bool
}

declare interface InteractionUIBase extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnDialogsData(value: Variant): Bool
  OnLootingData(value: Variant): Bool
  UpdateDialogsData(data: DialogChoiceHubs): void
  OnDialogsActivateHub(activeHubId: number): Bool
  OnDialogsSelectIndex(index: number): Bool
  OnInteractionData(value: Variant): Bool
  UpdateInteractionData(data: InteractionChoiceHubData): void
  OnInteractionsChanged(): void
  UpdateListBlackboard(): void
}

declare interface InteractionChoiceHubData {

}

declare interface InventoryGenericItemChooser extends inkLogicController {

  Bind(player: PlayerPuppet, inventoryDataManager: InventoryDataManagerV2, equipmentArea: gamedataEquipmentArea, slotIndex?: number, tooltipsManager?: gameuiTooltipsManager): void
  GetDisplayToSpawn(): CName
  GetSlotDisplayToSpawn(): CName
  GetIntroAnimation(): CName
  RequestClose(): Bool
  RefreshItems(): void
  RefreshSelectedItem(): void
  RefreshMainItem(): void
  GetSlots(): InventoryItemAttachments[]
  ForceDisplayLabel(): Bool
  RebuildSlots(): void
  OnItemInventoryClick(e: inkPointerEvent): Bool
  ChangeSelectedItem(controller: InventoryItemDisplayController): void
  UnequipItem(controller: InventoryItemDisplayController): void
  UnequipItemMods(controller: InventoryItemDisplayController): void
  GetSlotIndex(): number
  GetSelectedItem(): InventoryItemDisplayController
  GetModifiedItem(): InventoryItemDisplayController
  GetModifiedItemData(): InventoryItemData
  GetModifiedItemID(): ItemID
  GetSelectedSlotID(): TweakDBID
  OnInventoryItemHoverOver(evt: inkPointerEvent): Bool
  OnInventoryItemHoverOut(evt: inkPointerEvent): Bool
  SetInventoryItemTooltipHoverOver(itemData: InventoryItemData, controller?: InventoryItemDisplayController): void
  ShowTooltipForItemData(inspectedItemData: InventoryItemData, controller?: InventoryItemDisplayController): void
  GetInventoryItemDisplayControllerFromTarget(evt: inkPointerEvent): InventoryItemDisplayController
  HideTooltips(): void
  GetEquipmentArea(): gamedataEquipmentArea
  IsAttachmentItem(itemData: InventoryItemData): Bool
  ShowNotification(gameInstance: GameInstance, type: UIMenuNotificationType): void
  DetermineUIMenuNotificationType(): UIMenuNotificationType
}

declare interface ItemChooserItemChanged extends Event {

}

declare interface ItemDisplayUtils extends IScriptable {

  /** @noSelf **/
  SpawnCommonSlot(logicController: inkLogicController, parent: inkWidget, slotName: CName): inkWidget
  /** @noSelf **/
  SpawnCommonSlot(logicController: inkLogicController, parent: inkWidgetRef, slotName: CName): inkWidget
  /** @noSelf **/
  SpawnCommonSlotController(logicController: inkLogicController, parent: inkWidget, slotName: CName): inkLogicController
  /** @noSelf **/
  AsyncSpawnCommonSlotController(logicController: inkLogicController, parent: inkWidget, slotName: CName, callbackName: CName, userData?: IScriptable): void
  /** @noSelf **/
  SpawnCommonSlotController(logicController: inkLogicController, parent: inkWidgetRef, slotName: CName): inkLogicController
  /** @noSelf **/
  SpawnCommonSlotAsync(logicController: inkLogicController, parent: inkWidgetRef, slotName: CName, callBack?: CName, userData?: IScriptable): void
  /** @noSelf **/
  SpawnCommonSlot(gameController: inkIGameController, parent: inkWidget, slotName: CName): inkWidget
  /** @noSelf **/
  SpawnCommonSlot(gameController: inkIGameController, parent: inkWidgetRef, slotName: CName): inkWidget
  /** @noSelf **/
  SpawnCommonSlotController(gameController: inkIGameController, parent: inkWidget, slotName: CName): inkLogicController
  /** @noSelf **/
  SpawnCommonSlotController(gameController: inkIGameController, parent: inkWidgetRef, slotName: CName): inkLogicController
}

declare interface InventoryGPRestrictionHelper extends IScriptable {

  /** @noSelf **/
  CanUse(itemData: InventoryItemData, playerPuppet: PlayerPuppet): Bool
  /** @noSelf **/
  CanEquip(itemData: InventoryItemData, playerPuppet: PlayerPuppet): Bool
  /** @noSelf **/
  CanInteractByEquipmentArea(itemData: InventoryItemData, playerPuppet: PlayerPuppet): Bool
  /** @noSelf **/
  BlockedBySceneTier(playerPuppet: PlayerPuppet): Bool
}

declare interface ItemChooserUnequipItem extends Event {

}

declare interface ItemChooserUnequipMod extends Event {

}

declare interface gameuiTooltipsManager extends inkLogicController {

  SetCustomMargin(margin: inkMargin): void
  SetFollowsCursor(followsCursor: Bool): void
  AttachToWidget(widget: inkWidget, placement?: gameuiETooltipPlacement): void
  UnAttachFromWidget(): void
  GetTooltipsContainerRef(): inkWidgetRef
  RefreshTooltipsPosition(): void
  ResetTooltipsPosition(): void
  MarkToShow(): void
  /** @noSelf **/
  FindAttachmentSlot(widget: inkWidget): gameuiTooltipAttachmentSlot
  OnInitialize(): Bool
  Setup(): void
  Setup(tooltipStyle: ETooltipsStyle): void
  Setup(tooltipStyle: ETooltipsStyle, followCursor: Bool): void
  SetupNamedWidgets(tooltipStyle: ETooltipsStyle, tooltipsContainer: inkWidget): void
  SetupStyledNamedWidgets(tooltipStyle: ETooltipsStyle, tooltipsContainer: inkWidget): void
  OnUninitialize(): Bool
  GetNamedWidget(identifier: CName): AGenericTooltipController
  ShowTooltips(tooltipsData: ATooltipData[]): void
  ShowTooltipsAtWidget(tooltipData: ATooltipData[], widget: inkWidget): void
  ShowTooltipsAtWidget(tooltipData: ATooltipData[], widget: inkWidget, placement: gameuiETooltipPlacement): void
  ShowTooltips(tooltipData: ATooltipData[], margin: inkMargin, playAnim?: Bool): void
  ShowTooltip(tooltipData: ATooltipData): void
  ShowTooltip(identifier: CName, tooltipData: ATooltipData): void
  ShowTooltip(index: number, tooltipData: ATooltipData): void
  ShowTooltip(tooltipController: AGenericTooltipController, tooltipData: ATooltipData): void
  ShowTooltipAtPosition(index: number, position: Vector2, tooltipData: ATooltipData): void
  ShowTooltipAtPosition(identifier: CName, position: Vector2, tooltipData: ATooltipData): void
  ShowTooltipAtPosition(tooltipController: AGenericTooltipController, position: Vector2, tooltipData: ATooltipData): void
  ShowTooltipAtWidget(index: number, widget: inkWidget, tooltipData: ATooltipData, placement?: gameuiETooltipPlacement, playAnim?: Bool, margin?: inkMargin): void
  ShowTooltipAtWidget(identifier: CName, widget: inkWidget, tooltipData: ATooltipData, placement?: gameuiETooltipPlacement, playAnim?: Bool, margin?: inkMargin): void
  ShowTooltipAtWidget(tooltipController: AGenericTooltipController, widget: inkWidget, tooltipData: ATooltipData, placement?: gameuiETooltipPlacement, playAnim?: Bool, margin?: inkMargin): void
  ShowTooltipInSlot(index: number, tooltipData: ATooltipData, widget: inkWidget): void
  ShowTooltipInSlot(identifier: CName, tooltipData: ATooltipData, widget: inkWidget): void
  ShowTooltipInSlot(tooltipController: AGenericTooltipController, tooltipData: ATooltipData, widget: inkWidget): void
  AttachToCursor(): void
  ShowTooltip(index: number, tooltipData: ATooltipData, margin: inkMargin): void
  ShowTooltip(identifier: CName, tooltipData: ATooltipData, margin: inkMargin): void
  ShowTooltip(tooltipController: AGenericTooltipController, tooltipData: ATooltipData, margin: inkMargin): void
  HideTooltips(): void
  RefreshTooltip(index: number): void
  RefreshTooltip(identifier: CName): void
  OnRequestTooltip(widget: inkWidget): void
}

declare interface TooltipWidgetReference {

}

declare interface inkWidgetLibraryResource {

  /** @noSelf **/
  IsValid(self: inkWidgetLibraryResource): Bool
  /** @noSelf **/
  GetPath(self: inkWidgetLibraryResource): ResRef
  /** @noSelf **/
  GetHash(self: inkWidgetLibraryResource): number
}

declare interface inkWidgetLibraryReference {

}

declare interface NamedTooltipController extends IScriptable {

}

declare interface TooltipWidgetStyledReference {

}

declare interface WidgetUtils {

  /** @noSelf **/
  LocalToGlobal(widget: inkWidget, localOffset?: Vector2): Vector2
  /** @noSelf **/
  GlobalToLocal(widget: inkWidget, globalPosition: Vector2): Vector2
  /** @noSelf **/
  WidgetToWidget(sourceWidget: inkWidget, destinationWidget: inkWidget): Vector2
  /** @noSelf **/
  WidgetToWidgetGlobal(sourceWidget: inkWidget, destinationWidget: inkWidget): Vector2
}

declare interface ItemChooserItemHoverOver extends Event {

}

declare interface ItemChooserItemHoverOut extends Event {

}

declare interface MinigameController extends inkGameController {

  StartGame(): void
  OnGameFinishLogic(gameFinishEvent: GameFinishEvent): void
  OnGameFinish(gameFinishEvent: GameFinishEvent): Bool
}

declare interface GameFinishEvent extends Event {

}

declare interface BaseVehicleHUDGameController extends inkHUDGameController {

  OnVehicleMounted(): Bool
  OnVehicleUnmounted(): Bool
}

declare interface IVehicleModuleController extends inkLogicController {

  RegisterCallbacks(vehicle: VehicleObject, vehBB: IBlackboard, gameController: vehicleUIGameController): void
  UnregisterCallbacks(): void
}

declare interface BaseTechCrosshairController extends gameuiCrosshairBaseGameController {

  OnInitialize(): Bool
  OnUnitialize(): Bool
  OnCrosshairWeaponStatChanged(ownerID: StatsObjectID, statType: gamedataStatType, diff: number, total: number): void
  IsFullChargeAvailable(): Bool
  IsOverChargeAvailable(): Bool
  GetCurrentChargeLimit(): number
  OnWeaponChargingStatChanged(): void
}

declare interface CrosshairWeaponStatsListener extends ScriptStatsListener {

  Init(controller: BaseTechCrosshairController, stat: gamedataStatType): void
  OnStatChanged(ownerID: StatsObjectID, statType: gamedataStatType, diff: number, total: number): void
}

declare interface BaseDirectionalIndicatorPartLogicController extends inkLogicController {

  GetPlayerPosition(): Vector4
  GetSourcePosition(): Vector4
  GetSourceEntity(): Entity
  GetSourceEntityID(): EntityID
  GetAngleDegrees(): number
}

declare interface GenericHotkeyController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  Initialize(): Bool
  Uninitialize(): void
  InitializeButtonHint(): void
  GetPlayer(): PlayerPuppet
  ResolveState(): void
  IsInDefaultState(): Bool
  IsActivatedByQuest(): Bool
  IsAllowedByGameplay(): Bool
  OnRestrictionUpdate(statusEffect: StatusEffect_Record): void
  OnDpadActionPerformed(evt: DPADActionPerformed): Bool
  DBGPlayAnim(animName: CName): void
  OnActivation(value: number): void
}

declare interface HotkeyWidgetStatsListener extends ScriptStatusEffectListener {

  Init(controller: GenericHotkeyController): void
  OnStatusEffectApplied(statusEffect: StatusEffect_Record): void
  OnStatusEffectRemoved(statusEffect: StatusEffect_Record): void
}

declare interface AIbehaviorconditionScript extends AIBehaviorScriptBase {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
  CheckOnEvent(context: ScriptExecutionContext, behaviorEvent: AIEvent): AIbehaviorConditionOutcomes
  ListenToSignal(context: ScriptExecutionContext, signalName: CName): number
  StopListeningToSignal(context: ScriptExecutionContext, signalName: CName, callbackId: number): void
}

declare interface PassiveAutonomousCondition extends AIbehaviorexpressionScript {

}

declare interface AILookatTask extends AIbehaviortaskScript {

}

declare interface gameContainerObjectBase extends gameLootContainerBase {

  OnToggleContainerLockEvent(evt: ToggleContainerLockEvent): Bool
  IsLocked(activator: GameObject): Bool
  OnInteractionActivated(evt: InteractionEvent): Bool
  ResolveQualityRangeInteractionLayer(): void
  RefereshInteraction(activator: GameObject, force?: Bool): void
  IsQualityRangeInteractionLayer(layerTag: CName): Bool
  OpenContainerWithTransformAnimation(): void
  ShouldShowScanner(): Bool
}

declare interface LootVisualiserControlWrapper {

  /** @noSelf **/
  AddOperation(wrapper: LootVisualiserControlWrapper, controlOperation: gameinteractionsELootVisualiserControlOperation, value: Bool): void
  /** @noSelf **/
  Wrap(wrapper: LootVisualiserControlWrapper): InteractionSetChoicesEvent
}

declare interface ContainerObjectSingleItem extends gameContainerObjectBase {

}

declare interface ActivatedDeviceTransfromAnim extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  UpdateDeviceState(isDelayed?: Bool): Bool
  OnActivateDevice(evt: ActivateDevice): Bool
  OnSpiderbotOrderCompletedEvent(evt: SpiderbotOrderCompletedEvent): Bool
  RefreshAnimation(): void
  SendSimpleAnimFeature(bool1: Bool, bool2: Bool, bool3: Bool): void
  SpawnVFXs(fx: FxResource): void
  EnterWorkspot(activator: GameObject, freeCamera?: Bool, componentName?: CName, deviceData?: CName): void
  OnActionEngineering(evt: ActionEngineering): Bool
  OnWorkspotFinished(componentName: CName): Bool
  DeterminGameplayRoleMappinRange(data: SDeviceMappinData): number
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
}

declare interface ActivatedDeviceController extends ScriptableDC {
}

declare interface ActivatedDeviceTrap extends ActivatedDeviceTransfromAnim {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  RefreshAnimation(): void
  OnActivateDevice(evt: ActivateDevice): Bool
  OnTimerEvent(evt: TimerEvent): Bool
  DoAttack(attackRecord: TweakDBID): void
  Distract(): void
  GetEntitiesInArea(): Entity[]
  OnAreaEnter(evt: AreaEnteredEvent): Bool
  ResolveGameplayState(): void
}

declare interface ArcadeMachine extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  ResavePersistentData(ps: PersistentState): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  CreateBlackboard(): void
  GetBlackboardDef(): ArcadeMachineBlackboardDef
  GetController(): ArcadeMachineController
  GetDevicePS(): ArcadeMachineControllerPS
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
  OnHitEvent(hit: gameHitEvent): Bool
  StartShortGlitch(): void
  OnStopShortGlitch(evt: StopShortGlitchEvent): Bool
  TurnOnDevice(): void
  TurnOffDevice(): void
  CutPower(): void
  TurnOffScreen(): void
  TurnOnScreen(): void
  DeterminGameplayRole(): EGameplayRole
  ApplyActiveStatusEffect(target: EntityID, statusEffect: TweakDBID): void
  UploadActiveProgramOnNPC(targetID: EntityID): void
  InitializeGame(): void
  InitializeGameAudio(path: ResRef): void
  GetArcadeGame(): ResRef
  GetArcadeGameAudio(): CName
  GetArcadeGameAudioStop(): CName
}

declare interface TriggerNotifier_Script extends worldITriggerAreaNotifer {

}

declare interface BaseAnimatedDevice extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  GetController(): BaseAnimatedDeviceController
  GetDevicePS(): BaseAnimatedDeviceControllerPS
  OnQuickHackToggleActivate(evt: QuickHackToggleActivate): Bool
  OnActivateDevice(evt: ActivateDevice): Bool
  OnDeactivateDevice(evt: DeactivateDevice): Bool
  DeactivateDevice(): void
  ActivateDevice(): void
  ToggleState(): void
  Animate(): void
  TransformAnimate(): void
  DeterminGameplayRole(): EGameplayRole
}

declare interface AnimFeature_RoadBlock extends AnimFeature {

}

declare interface DestructibleMasterDevice extends InteractiveMasterDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnDetach(): Bool
  OnPhysicalDestructionEvent(evt: PhysicalDestructionEvent): Bool
  GetController(): DestructibleMasterDeviceController
  GetDevicePS(): DestructibleMasterDeviceControllerPS
}

declare interface TV extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  PushPersistentData(): void
  ResavePersistentData(ps: PersistentState): Bool
  IsDeviceMovableScript(): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  IsReadyForUI(): Bool
  OnDetach(): Bool
  CreateBlackboard(): void
  GetBlackboardDef(): TVDeviceBlackboardDef
  GetController(): TVController
  GetDevicePS(): TVControllerPS
  IsInteractive(): Bool
  OnToggleON(evt: ToggleON): Bool
  OnTogglePower(evt: TogglePower): Bool
  OnNextChannel(evt: NextStation): Bool
  OnPreviousChannel(evt: PreviousStation): Bool
  OnQuestSetChannel(evt: QuestSetChannel): Bool
  OnQuestSetGlobalChannel(evt: SetGlobalTvChannel): Bool
  OnQuestSetGlobalTvOnly(evt: SetGlobalTvOnly): Bool
  GetDefaultGlitchVideoPath(): ResRef
  GetBroadcastGlitchVideoPath(): ResRef
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
  OnHitEvent(hit: gameHitEvent): Bool
  OnStopShortGlitch(evt: StopShortGlitchEvent): Bool
  StartShortGlitch(): void
  TurnOnDevice(): void
  TurnOffDevice(): void
  ToggleSoundEmmiter(mute: Bool): void
  SelectChannel(currentChannelIDX: number): void
  GetChannelName(index: number): string
  SelectChannel(channelName: string): void
  GetChannelId(channelName: string): number
  GetChannelData(channelIDX: number): STvChannel
  TurnOffScreen(): void
  TurnOnScreen(): void
  DeterminGameplayRole(): EGameplayRole
  ApplyActiveStatusEffect(target: EntityID, statusEffect: TweakDBID): void
  UploadActiveProgramOnNPC(targetID: EntityID): void
  OnQuestMuteSounds(evt: QuestMuteSounds): Bool
  OnQuestToggleInteractivity(evt: QuestToggleInteractivity): Bool
  GetGlobalTVChannels(): ChannelData_Record[]
}

declare interface MediaResaveData {

}

declare interface TVResaveData {

}

declare interface TVDeviceBlackboardDef extends DeviceBaseBlackboardDef {

}

declare interface SetGlobalTvChannel extends Event {

  GetFriendlyDescription(): string
}

declare interface SetGlobalTvOnly extends Event {

  GetFriendlyDescription(): string
}

declare interface ProximityDetector extends Device {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  GetDevicePS(): ProximityDetectorControllerPS
  GetController(): ProximityDetectorController
  OnAreaEnter(evt: AreaEnteredEvent): Bool
  OnAreaExit(evt: AreaExitedEvent): Bool
  OnTargetAssessmentRequest(evt: TargetAssessmentRequest): Bool
  TurnOffDevice(): void
  TurnOnDevice(): void
  ToggleComponents(on: Bool): void
  LockDevice(enableLock: Bool): void
  OnFullSystemRestart(evt: FullSystemRestart): Bool
  OnWakeUpFromRestartEvent(evt: WakeUpFromRestartEvent): Bool
}

declare interface ProximityDetectorController extends ScriptableDC {

  GetPS(): ProximityDetectorControllerPS
}

declare interface ProximityDetectorControllerPS extends ScriptableDeviceComponentPS {

  PerformRestart(): void
  OnTargetAssessmentRequest(evt: TargetAssessmentRequest): EntityNotificationType
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface TrafficLight extends Device {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  GetController(): TrafficLightController
  GetDevicePS(): TrafficLightControllerPS
  OnTrafficLightChangeEvent(evt: TrafficLightChangeEvent): Bool
  CommenceLightChangeSequence(color: worldTrafficLightColor): void
  CommenceChangeToRed(): void
  CommenceChangeToGreen(): void
  CompleteLightChangeSequence(): void
  OnMasterDeviceDestroyed(evt: MasterDeviceDestroyed): Bool
  OnDelayEvent(evt: DelayEvent): Bool
  TurnOnDevice(): void
  TurnOffDevice(): void
  DeactivateDevice(): void
  DeactivateDeviceSilent(): void
  ActivateDevice(): void
  HandleRedLight(enable: Bool): void
  HandleYellowLight(enable: Bool): void
  HandleGreenLight(enable: Bool): void
  TurnOffLights(): void
  DetermineLightsFixedState(): void
  DeterminGameplayRole(): EGameplayRole
}

declare interface TrafficLightChangeEvent extends Event {

}

declare interface Attack_Continuous extends Attack_GameEffect {

  GetRunningContinuousEffect(): EffectInstance
  OnTick(weapon: WeaponObject): void
  OnStop(weapon: WeaponObject): void
}

declare interface BaseProjectile extends ItemObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnInitialize(eventData: gameprojectileSetUpEvent): Bool
  OnShoot(eventData: gameprojectileShootEvent): Bool
  CurvedLaunchToTarget(eventData: gameprojectileShootEvent, targetObject?: GameObject, targetComponent?: IPlacedComponent): void
  OnShootTarget(eventData: gameprojectileShootTargetEvent): Bool
  GeneralLaunchSetup(eventData: gameprojectileShootEvent): void
  SetProjectileLifetime(): void
  ProjectileBreachDevice(hitInstance: gameprojectileHitInstance, value: number): void
  OnCollision(eventData: gameprojectileHitEvent): Bool
  CreateCustomTickEventWithDuration(value: number): void
  CreateDelayEvent(value: number): void
  CreateProjectileDeviceBreachEvent(hitInstance: gameprojectileHitInstance, value: number): void
  OnMaxLifetimeReached(evt: ProjectileDelayEvent): Bool
  OnUpdate(evt: ProjectileTickEvent): Bool
  SetMeshVisible(value: Bool): void
  Release(): void
  HasTrajectory(): Bool
  StopProjectile(): void
  CanBounceAfterCollision(value: Bool): void
  SpawnVisualEffect(effectName: CName, eventTag?: CName): void
  BreakVisualEffectLoop(effectName: CName): void
  KillVisualEffect(effectName: CName): void
  GetObject(hitInstance: gameprojectileHitInstance): GameObject
  GetObjectWorldPosition(object: GameObject): Vector4
  GetLeftHandCyberwareAction(user: GameObject): EActionType
  GetProjectileTweakDBFloatParameter(param: string): number
  SetInitialVelocityBasedOnActionType(user: GameObject): void
  TriggerSingleStimuli(hitInstance: gameprojectileHitInstance, stimToSend: gamedataStimType): void
  TriggerActiveStimuliWithLifetime(hitInstance: gameprojectileHitInstance, stimToSend: gamedataStimType, lifetime: number, radius: number): void
  ProjectileHitAoE(hitInstance: gameprojectileHitInstance, attackRadius: number, attackRecord?: Attack_Record): void
  ProjectileHit(eventData: gameprojectileHitEvent): void
  LinearLaunch(eventData: gameprojectileShootEvent, startVelocity: number): void
  ParabolicLaunch(eventData: gameprojectileShootEvent, gravitySimulation: number, startVelocity: number, energyLossFactorAfterCollision: number): void
  CurvedLaunch(eventData: gameprojectileShootEvent, targetObject?: GameObject, targetComponent?: IPlacedComponent, startVelocity?: number, linearTimeRatio?: number, interpolationTimeRatio?: number, returnTimeMargin?: number, bendTimeRatio?: number, bendFactor?: number, halfLeanAngle?: number, endLeanAngle?: number, angleInterpolationDuration?: number): void
}

declare interface ProjectileDelayEvent extends Event {

}

declare interface ProjectileHelper extends IScriptable {

  /** @noSelf **/
  SpawnTrailVFX(projectileComponent: ProjectileComponent): void
  /** @noSelf **/
  GetPSMBlackboardIntVariable(user: GameObject, id: BlackboardID_Int): number
  /** @noSelf **/
  SpawnExplosionAttack(attackRecord: Attack_Record, weapon: WeaponObject, instigator: GameObject, source: GameObject, pos?: Vector4, duration?: number): EffectInstance
}

declare interface IDebugDrawHistorySystem extends IGameSystem {

  DrawWireSphere(position: Vector4, radius: number, color?: Color, tag?: string): void
  DrawArrow(position: Vector4, direction: Vector4, color?: Color, tag?: string): void
}

declare interface ProjectileLaunchHelper extends IScriptable {

  /** @noSelf **/
  SpawnProjectileFromScreenCenter(ownerObject: GameObject, projectileTemplateName: CName, itemObj: ItemObject): Bool
  /** @noSelf **/
  SetLinearLaunchTrajectory(projectileComponent: ProjectileComponent, velocity: number): Bool
  /** @noSelf **/
  SetParabolicLaunchTrajectory(projectileComponent: ProjectileComponent, gravitySimulation: number, velocity: number, energyLossFactorAfterCollision: number): Bool
  /** @noSelf **/
  SetCurvedLaunchTrajectory(projectileComponent: ProjectileComponent, targetObject?: GameObject, targetComponent?: IPlacedComponent, startVelocity?: number, linearTimeRatio?: number, interpolationTimeRatio?: number, returnTimeMargin?: number, bendTimeRatio?: number, bendFactor?: number, halfLeanAngle?: number, endLeanAngle?: number, angleInterpolationDuration?: number): Bool
  /** @noSelf **/
  SetCustomTargetPositionToFollow(projectileComponent: ProjectileComponent, localToWorld: Matrix, startVelocity: number, distance: number, sideOffset: number, height: number, linearTimeRatio: number, interpolationTimeRatio: number, returnTimeMargin: number, bendTimeRatio: number, bendFactor: number, accuracy: number, halfLeanAngle: number, endLeanAngle: number, angleInterpolationDuration: number): Bool
}

declare interface gameprojectileSpawnerLaunchEvent extends Event {

}

declare interface gameprojectileLaunchParams {

}

declare interface ProjectileTargetingHelper extends IScriptable {

  /** @noSelf **/
  GetTargetingComponent(ownerObject: GameObject, filterBy: TargetSearchQuery): IPlacedComponent
  /** @noSelf **/
  GetTargetingComponentsWorldPosition(targetComponent: IPlacedComponent): Vector4
  /** @noSelf **/
  GetObjectCurrentPosition(obj: GameObject): Vector4
}

declare interface LinearTrajectoryParams extends gameprojectileTrajectoryParams {

}

declare interface FollowCurveTrajectoryParams extends gameprojectileTrajectoryParams {

}

declare interface ProjectileBreachEvent extends Event {

}

declare interface ProjectileHitHelper extends IScriptable {

  /** @noSelf **/
  GetHitObject(hitInstance: gameprojectileHitInstance): GameObject
}

declare interface ProjectileTickEvent extends TickableEvent {

}

declare interface ObjectPoolSystem extends IObjectPoolSystem {

  Release(object: GameObject): Bool
}

declare interface gameCpoPickableItem extends GameObject {

  EquipItem(puppet: GameObject): void
  GetItemIDToEquip(): ItemID
}

declare interface DefaultTransition extends StateFunctor {

  ForceFreeze(stateContext: StateContext): void
  ForceIdle(stateContext: StateContext): void
  ForceIdleVehicle(stateContext: StateContext): void
  ResetForceFlags(stateContext: StateContext): void
  GetBlackboard(scriptInterface: StateGameScriptInterface): IBlackboard
  GetMutableBlackboard(scriptInterface: StateGameScriptInterface): IBlackboard
  GetBlackboardFloatVariable(scriptInterface: StateGameScriptInterface, id: BlackboardID_Float): number
  SetBlackboardFloatVariable(scriptInterface: StateGameScriptInterface, id: BlackboardID_Float, value: number): void
  /** @noSelf **/
  GetBlackboardIntVariable(scriptInterface: StateGameScriptInterface, id: BlackboardID_Int): number
  /** @noSelf **/
  GetBlackboardIntVariable(executionOwner: GameObject, id: BlackboardID_Int): number
  SetBlackboardIntVariable(scriptInterface: StateGameScriptInterface, id: BlackboardID_Int, value: number): void
  GetBlackboardBoolVariable(scriptInterface: StateGameScriptInterface, id: BlackboardID_Bool): Bool
  SetBlackboardBoolVariable(scriptInterface: StateGameScriptInterface, id: BlackboardID_Bool, value: Bool): void
  GetBoolFromQuestDB(scriptInterface: StateGameScriptInterface, varName: CName): Bool
  HoldAimingForTime(stateContext: StateContext, scriptInterface: StateGameScriptInterface, blockAimingFor: number): void
  BlockAimingForTime(stateContext: StateContext, scriptInterface: StateGameScriptInterface, blockAimingFor: number): void
  SoftBlockAimingForTime(stateContext: StateContext, scriptInterface: StateGameScriptInterface, blockAimingFor: number): void
  ResetSoftBlockAiming(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  HasTimeStampElapsed(stateContext: StateContext, scriptInterface: StateGameScriptInterface, timeStampName: CName): Bool
  IsAimingSoftBlocked(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsAimingHeldForTime(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsAimingBlockedForTime(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  GetStatFloatValue(scriptInterface: StateGameScriptInterface, statType: gamedataStatType, statSystem: StatsSystem, object?: GameObject): number
  /** @noSelf **/
  GetParameterBool(parameterName: CName, stateContext: StateContext, permanent?: Bool): Bool
  /** @noSelf **/
  GetParameterInt(parameterName: CName, stateContext: StateContext, permanent?: Bool): number
  /** @noSelf **/
  GetParameterFloat(parameterName: CName, stateContext: StateContext, permanent?: Bool): number
  /** @noSelf **/
  GetParameterVector(parameterName: CName, stateContext: StateContext, global?: Bool): Vector4
  /** @noSelf **/
  GetConditionParameterBool(parameterName: CName, stateContext: StateContext): Bool
  /** @noSelf **/
  GetConditionParameterFloat(parameterName: CName, stateContext: StateContext): number
  /** @noSelf **/
  GetConditionParameterInt(parameterName: CName, stateContext: StateContext): number
  ShouldEnterSafe(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ShouldIgnoreWeaponSafe(scriptInterface: StateGameScriptInterface): Bool
  IsAimingAtFriendlyTarget(scriptInterface: StateGameScriptInterface): Bool
  IsAimingAtChildTarget(scriptInterface: StateGameScriptInterface): Bool
  IsEnemyVisible(scriptInterface: StateGameScriptInterface, distance?: number): Bool
  IsEnemyOrSensoryDeviceVisible(scriptInterface: StateGameScriptInterface, distance?: number): Bool
  /** @noSelf **/
  GetDistanceToTarget(scriptInterface: StateGameScriptInterface): number
  /** @noSelf **/
  GetTargetObject(scriptInterface: StateGameScriptInterface, withinDistance?: number): GameObject
  RequestPlayerPositionAdjustment(stateContext: StateContext, scriptInterface: StateGameScriptInterface, target: GameObject, slideTime: number, distanceRadius: number, rotationDuration: number, adjustPosition: Vector4, useParabolicMotion?: Bool): Bool
  RequestPlayerPositionAdjustmentWithCurve(stateContext: StateContext, scriptInterface: StateGameScriptInterface, slideTime: number, distanceRadius: number, adjustPosition: Vector4, adjustCurveName: CName): Bool
  /** @noSelf **/
  IsInteractingWithTerminal(scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  HasActiveInteraction(scriptInterface: StateGameScriptInterface): Bool
  IsDoorInteractionActive(scriptInterface: StateGameScriptInterface): Bool
  GetStatusEffectRecord(stateContext: StateContext, scriptInterface: StateGameScriptInterface): StatusEffect_Record
  GetStatusEffectPlayerData(scriptInterface: StateGameScriptInterface, stateContext: StateContext): StatusEffectPlayerData_Record
  GetStatusEffectRecordData(stateContext: StateContext): StatusEffectPlayerData_Record
  IsPlayerTired(scriptInterface: StateGameScriptInterface): Bool
  IsPlayerExhausted(scriptInterface: StateGameScriptInterface): Bool
  ChangeStatPoolValue(scriptInterface: StateGameScriptInterface, entityID: EntityID, statPoolType: gamedataStatPoolType, val: number): void
  GetStatPoolValue(scriptInterface: StateGameScriptInterface, entityID: EntityID, statPool: gamedataStatPoolType, asPrecentage?: Bool): number
  HasStatPoolValueReachedMax(scriptInterface: StateGameScriptInterface, entityID: EntityID, statPool: gamedataStatPoolType): Bool
  StartStatPoolDecay(scriptInterface: StateGameScriptInterface, statPoolType: gamedataStatPoolType): void
  StopStatPoolDecayAndRegenerate(scriptInterface: StateGameScriptInterface, statPoolType: gamedataStatPoolType): void
  /** @noSelf **/
  UppercaseFirstChar(stringToChange: string): void
  /** @noSelf **/
  GetOwnerGameObject(scriptInterface: StateGameScriptInterface): GameObject
  /** @noSelf **/
  GetPlayerPuppet(scriptInterface: StateGameScriptInterface): PlayerPuppet
  /** @noSelf **/
  PlayRumble(scriptInterface: StateGameScriptInterface, presetName: string): void
  /** @noSelf **/
  PlayRumbleLoop(scriptInterface: StateGameScriptInterface, intensity: string): void
  /** @noSelf **/
  StopRumbleLoop(scriptInterface: StateGameScriptInterface, intensity: string): void
  /** @noSelf **/
  RemoveAllBreathingEffects(scriptInterface: StateGameScriptInterface): void
  /** @noSelf **/
  GetPlayerPosition(scriptInterface: StateGameScriptInterface): Vector4
  /** @noSelf **/
  GetPlayerDistanceToGround(scriptInterface: StateGameScriptInterface, downwardRaycastLength: number): number
  /** @noSelf **/
  GetDistanceToGround(scriptInterface: StateGameScriptInterface): number
  /** @noSelf **/
  GetGroundPosition(scriptInterface: StateGameScriptInterface, inLenght: number): Vector4
  IsDeepEnoughToSwim(scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  GetLinearVelocity(scriptInterface: StateGameScriptInterface): Vector4
  /** @noSelf **/
  GetUpVector(): Vector4
  /** @noSelf **/
  Get2DLinearSpeed(scriptInterface: StateGameScriptInterface): number
  GetVerticalSpeed(scriptInterface: StateGameScriptInterface): number
  /** @noSelf **/
  GetMovementDirection(stateContext: StateContext, scriptInterface: StateGameScriptInterface): EPlayerMovementDirection
  /** @noSelf **/
  GetYawMovementDirection(stateContext: StateContext, scriptInterface: StateGameScriptInterface): number
  /** @noSelf **/
  GetMovementInputActionValue(stateContext: StateContext, scriptInterface: StateGameScriptInterface): number
  IsMovementInput(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsPlayerMoving(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsPlayerMovingHorizontally(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsPlayerMovingVertically(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsPlayerMovingBackwards(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  GetHorizontalMovementDirection(stateContext: StateContext, scriptInterface: StateGameScriptInterface): number
  /** @noSelf **/
  GetActiveLeftHandItem(scriptInterface: StateGameScriptInterface): ItemObject
  /** @noSelf **/
  IsHeavyWeaponEquipped(scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  GetActiveWeapon(scriptInterface: StateGameScriptInterface): WeaponObject
  /** @noSelf **/
  IsXYActionInputGreaterEqual(scriptInterface: StateGameScriptInterface, threshold: number): Bool
  /** @noSelf **/
  IsAxisButtonHeldGreaterEqual(scriptInterface: StateGameScriptInterface, threshold: number): Bool
  IsSafeStateForced(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  GetActionHoldTime(stateContext: StateContext, scriptInterface: StateGameScriptInterface, actionName: CName): number
  ToggleAudioAimDownSights(weapon: WeaponObject, toggleOn: Bool): void
  DisableCameraBobbing(stateContext: StateContext, scriptInterface: StateGameScriptInterface, b: Bool): void
  StartEffect(scriptInterface: StateGameScriptInterface, effectName: CName, blackboard?: worldEffectBlackboard): void
  StopEffect(scriptInterface: StateGameScriptInterface, effectName: CName): void
  BreakEffectLoop(scriptInterface: StateGameScriptInterface, effectName: CName): void
  PlaySound(soundName: CName, scriptInterface: StateGameScriptInterface): void
  SetAudioParameter(paramName: CName, paramValue: number, scriptInterface: StateGameScriptInterface): void
  PlaySoundMetadataEvent(evtName: CName, scriptInterface: StateGameScriptInterface, evtParam: number): void
  SetSurfaceMaterialProbingDirection(direction: gameaudioeventsSurfaceDirection, scriptInterface: StateGameScriptInterface): void
  AdjustPlayerPosition(stateContext: StateContext, scriptInterface: StateGameScriptInterface, target: GameObject, duration: number, distanceRadius: number, curveName: CName): Bool
  /** @noSelf **/
  HasMeleeWeaponEquipped(scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  IsRangedWeaponEquipped(scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  IsChargeRangedWeapon(scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  IsChargingWeapon(scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  HasRightWeaponEquipped(scriptInterface: StateGameScriptInterface, checkForTag?: Bool): Bool
  /** @noSelf **/
  HasStatFlag(scriptInterface: StateGameScriptInterface, flag: gamedataStatType, owner?: GameObject): Bool
  StartPool(statPoolsSystem: StatPoolsSystem, weaponEntityID: EntityID, poolType: gamedataStatPoolType, rangeEnd?: number, valuePerSec?: number): void
  StopPool(statPoolsSystem: StatPoolsSystem, weaponEntityID: EntityID, poolType: gamedataStatPoolType, startDecay: Bool): void
  GetWeaponItemTag(stateContext: StateContext, scriptInterface: StateGameScriptInterface, tag: CName, itemID?: ItemID): Bool
  /** @noSelf **/
  GetWeaponItemType(scriptInterface: StateGameScriptInterface, weapon: WeaponObject, itemType: gamedataItemType): Bool
  /** @noSelf **/
  IsInWorkspot(scriptInterface: StateGameScriptInterface): Bool
  GetCurrentTier(stateContext: StateContext): GameplayTier
  GetCurrentSceneTierData(stateContext: StateContext): SceneTierData
  IsInMinigame(scriptInterface: StateGameScriptInterface): Bool
  IsUploadingQuickHack(scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  IsInRpgContext(scriptInterface: StateGameScriptInterface): Bool
  IsCameraPitchAcceptable(stateContext: StateContext, scriptInterface: StateGameScriptInterface, cameraPitchThreshold: number): Bool
  GetCameraYaw(stateContext: StateContext, scriptInterface: StateGameScriptInterface): number
  IsPlayerInCombat(scriptInterface: StateGameScriptInterface): Bool
  IsInSafeSceneTier(scriptInterface: StateGameScriptInterface): Bool
  GetSceneTier(scriptInterface: StateGameScriptInterface): number
  GetSceneGameplayOverridesBlackboard(scriptInterface: StateGameScriptInterface): IBlackboard
  /** @noSelf **/
  IsMountedToVehicle(scriptInterface: StateGameScriptInterface): Bool
  SetSceneGameplayOverrideBool(scriptInterface: StateGameScriptInterface, id: BlackboardID_Bool, value: Bool): void
  GetSceneGameplayOverrideBool(scriptInterface: StateGameScriptInterface, id: BlackboardID_Bool): Bool
  ForceDisableVisionMode(stateContext: StateContext): void
  CheckItemCategoryInQuickWheel(scriptInterface: StateGameScriptInterface, compareToType: gamedataItemCategory): Bool
  IsQuickWheelItemACyberdeck(scriptInterface: StateGameScriptInterface): Bool
  IsInFocusMode(scriptInterface: StateGameScriptInterface): Bool
  SetZoomStateAnimFeature(scriptInterface: StateGameScriptInterface, shouldAim: Bool): void
  GetSceneSystemInterface(scriptInterface: StateGameScriptInterface): SceneSystemInterface
  PrepareGameEffectAoEAttack(stateContext: StateContext, scriptInterface: StateGameScriptInterface, attackRecord: Attack_Record): Bool
  IsPlayerInBraindance(scriptInterface: StateGameScriptInterface): Bool
  GetBraindanceSystem(scriptInterface: StateGameScriptInterface): BraindanceSystem
  IsInPhotoMode(scriptInterface: StateGameScriptInterface): Bool
  SendEquipmentSystemWeaponManipulationRequest(scriptInterface: StateGameScriptInterface, requestType: EquipmentManipulationAction, equipAnimType?: gameEquipAnimationType): void
  SendDrawItemRequest(scriptInterface: StateGameScriptInterface, item: ItemID, equipAnimType?: gameEquipAnimationType): void
  IsItemMeleeWeapon(item: ItemID): Bool
  GetLeftHandItemFromParam(stateContext: StateContext): ItemID
  GetRightHandItemFromParam(stateContext: StateContext): ItemID
  IsLookingAtEnemyNPC(scriptInterface: StateGameScriptInterface): Bool
  GetHudManager(scriptInterface: StateGameScriptInterface): HUDManager
  SetGameplayCameraParameters(scriptInterface: StateGameScriptInterface, tweakDBPath: string): void
  GetGameplayCameraParameters(cameraParameters: GameplayCameraData, tweakDBPath: string): void
  /** @noSelf **/
  DEBUG_IsSwimmingForced(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  DEBUG_IsSurfaceSwimmingForced(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  DEBUG_IsDivingForced(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsInTier2Locomotion(scriptInterface: StateGameScriptInterface): Bool
  IsAimForced(scriptInterface: StateGameScriptInterface): Bool
  IsCrouchForced(scriptInterface: StateGameScriptInterface): Bool
  IsVaultingClimbingRestricted(scriptInterface: StateGameScriptInterface): Bool
  IsUsingMeleeForced(scriptInterface: StateGameScriptInterface): Bool
  IsUsingFistsForced(scriptInterface: StateGameScriptInterface): Bool
  IsUsingFirearmsForced(scriptInterface: StateGameScriptInterface): Bool
  IsNoCombatActionsForced(scriptInterface: StateGameScriptInterface): Bool
  IsVehicleCameraChangeBlocked(scriptInterface: StateGameScriptInterface): Bool
  IsVehicleExitCombatModeBlocked(scriptInterface: StateGameScriptInterface): Bool
  HasAnyValidWeaponAvailable(scriptInterface: StateGameScriptInterface): Bool
  IsUsingLeftHandAllowed(scriptInterface: StateGameScriptInterface): Bool
  IsUsingConsumableRestricted(scriptInterface: StateGameScriptInterface): Bool
  GetTakedownAction(stateContext: StateContext): ETakedownActionType
  IsEmptyHandsForced(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  CheckGenericEquipItemConditions(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsCarryingBody(scriptInterface: StateGameScriptInterface): Bool
  IsExaminingDevice(scriptInterface: StateGameScriptInterface): Bool
  HasActiveConsumable(scriptInterface: StateGameScriptInterface): Bool
  IsInItemWheelState(stateContext: StateContext): Bool
  IsInEmptyHandsState(stateContext: StateContext): Bool
  IsInUpperBodyState(stateContext: StateContext, upperBodyStateName: CName): Bool
  IsInHighLevelState(stateContext: StateContext, highLevelStateName: CName): Bool
  IsInWeaponReloadState(scriptInterface: StateGameScriptInterface): Bool
  IsWeaponBlockingAiming(scriptInterface: StateGameScriptInterface): Bool
  IsWeaponStateBlockingAiming(scriptInterface: StateGameScriptInterface): Bool
  IsInVisionModeActiveState(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsInTakedownState(stateContext: StateContext): Bool
  IsInLocomotionState(stateContext: StateContext, locomotionStateName: CName): Bool
  GetLocomotionState(stateContext: StateContext): CName
  IsInVehicleState(stateContext: StateContext, vehicleStateName: CName): Bool
  IsInInputContextState(stateContext: StateContext, inputContextStateName: CName): Bool
  IsInLadderState(stateContext: StateContext): Bool
  IsInMeleeState(stateContext: StateContext, meleeStateName: CName): Bool
  IsInSlidingState(stateContext: StateContext): Bool
  CompareSMState(smName: CName, smState: CName, stateContext: StateContext): Bool
  CompareSMStateWithIden(definitionName: CName, referenceName: CName, smState: CName, stateContext: StateContext): Bool
  CompareSMState(smName: CName, smState: CName[], stateContext: StateContext): Bool
  CheckActiveConsumable(scriptInterface: StateGameScriptInterface): Bool
  GetItemInRightHandSlot(scriptInterface: StateGameScriptInterface): ItemObject
  GetItemInLeftHandSlot(scriptInterface: StateGameScriptInterface): ItemObject
  IsRightHandInEquippedState(stateContext: StateContext): Bool
  IsRightHandInUnequippedState(stateContext: StateContext): Bool
  IsRightHandChangingEquipState(stateContext: StateContext): Bool
  IsRightHandInUnequippingState(stateContext: StateContext): Bool
  IsRightHandInEquippingState(stateContext: StateContext): Bool
  IsLeftHandInEquippedState(stateContext: StateContext): Bool
  IsLeftHandInUnequippedState(stateContext: StateContext): Bool
  IsLeftHandInUnequippingState(stateContext: StateContext): Bool
  GetReferenceNameFromEquipmentSide(side: EEquipmentSide): CName
  GetStateNameFromEquipmentState(equipmentState: EEquipmentState): CName
  CheckEquipmentStateMachineState(stateContext: StateContext, SMSide: EEquipmentSide, compareToState: EEquipmentState): Bool
  IsInFirstEquip(stateContext: StateContext): Bool
  AreChoiceHubsActive(scriptInterface: StateGameScriptInterface): Bool
  GetLootData(scriptInterface: StateGameScriptInterface): LootData
  IsLootDataActive(scriptInterface: StateGameScriptInterface): Bool
  ItemsInLootData(scriptInterface: StateGameScriptInterface): number
  CheckConsumableLootDataCondition(scriptInterface: StateGameScriptInterface): Bool
  SetItemIDWrapperPermanentParameter(stateContext: StateContext, parameterName: CName, item: ItemID): void
  GetItemIDFromWrapperPermanentParameter(stateContext: StateContext, parameterName: CName): ItemID
  ClearItemIDWrapperPermanentParameter(stateContext: StateContext, parameterName: CName): void
  IsPlayerInAnyMenu(scriptInterface: StateGameScriptInterface): Bool
  SendDataTrackingRequest(scriptInterface: StateGameScriptInterface, telemetryData: ETelemetryData, modifyValue: number): void
  RequestVehicleCameraPerspective(scriptInterface: StateGameScriptInterface, requestedCameraPerspective: vehicleCameraPerspective): void
  SetVehicleCameraSceneMode(scriptInterface: StateGameScriptInterface, sceneMode: Bool): void
  IsInSafeZone(scriptInterface: StateGameScriptInterface): Bool
  TutorialSetFact(scriptInterface: StateGameScriptInterface, factName: CName): void
  TutorialAddFact(scriptInterface: StateGameScriptInterface, factName: CName, add: number): void
  IsQuickHackPanelOpened(scriptInterface: StateGameScriptInterface): Bool
  IsRadialWheelOpen(scriptInterface: StateGameScriptInterface): Bool
  IsTimeDilationActive(stateContext: StateContext, scriptInterface: StateGameScriptInterface, timeDilationReason: CName): Bool
  ThreatsOnPlayerThreatList(scriptInterface: StateGameScriptInterface): Bool
  IsPlayerInSecuritySystem(scriptInterface: StateGameScriptInterface): Bool
  IsInStealthLocomotion(stateContext: StateContext): Bool
  ShowInputHint(scriptInterface: StateGameScriptInterface, actionName: CName, source: CName, label: string, holdIndicationType?: inkInputHintHoldIndicationType, enableHoldAnimation?: Bool): void
  RemoveInputHint(scriptInterface: StateGameScriptInterface, actionName: CName, source: CName): void
  RemoveInputHintsBySource(scriptInterface: StateGameScriptInterface, source: CName): void
  IsDisplayingInputHintBlocked(scriptInterface: StateGameScriptInterface, actionName: CName): Bool
  GetCancelChargeButtonInput(scriptInterface: StateGameScriptInterface): Bool
  ProcessCombatGadgetActionInputCaching(scriptInterface: StateGameScriptInterface, stateContext: StateContext): void
  TriggerNoiseStim(owner: GameObject, takedownActionType: ETakedownActionType): void
  ActivateDamageProjection(newState: Bool, weapon: WeaponObject, scriptInterface: StateGameScriptInterface, stateContext: StateContext): void
  IsNameplateVisible(scriptInterface: StateGameScriptInterface): Bool
  HandleDamagePreview(weapon: WeaponObject, scriptInterface: StateGameScriptInterface, stateContext: StateContext): void
  ClearPredictionForCurrentVisibleTarget(scriptInterface: StateGameScriptInterface): void
  CanWeaponSilentKill(weapon: WeaponObject, scriptInterface: StateGameScriptInterface): Bool
  UsingJohnnyReplacer(scriptInterface: StateGameScriptInterface): Bool
  IsPlayingAsReplacer(scriptInterface: StateGameScriptInterface): Bool
  IsFastForwardByLine(scriptInterface: StateGameScriptInterface): Bool
  CheckIsFastForwardByLine(scriptInterface: StateGameScriptInterface): Bool
  GetFFParamsForCrouch(scriptInterface: StateGameScriptInterface): CName
  /** @noSelf **/
  UpdateAimAssist(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface StateContext extends IScriptable {

  GetTemporaryBoolParameter(parameterName: CName): StateResultBool
  GetTemporaryIntParameter(parameterName: CName): StateResultInt
  GetTemporaryFloatParameter(parameterName: CName): StateResultFloat
  GetTemporaryVectorParameter(parameterName: CName): StateResultVector
  GetTemporaryCNameParameter(parameterName: CName): StateResultCName
  GetTemporaryScriptableParameter(parameterName: CName): IScriptable
  GetTemporaryTweakDBIDParameter(parameterName: CName): TweakDBID
  GetPermanentBoolParameter(parameterName: CName): StateResultBool
  GetPermanentIntParameter(parameterName: CName): StateResultInt
  GetPermanentFloatParameter(parameterName: CName): StateResultFloat
  GetPermanentVectorParameter(parameterName: CName): StateResultVector
  GetPermanentCNameParameter(parameterName: CName): StateResultCName
  GetPermanentScriptableParameter(parameterName: CName): IScriptable
  GetPermanentTweakDBIDParameter(parameterName: CName): TweakDBID
  GetConditionBoolParameter(parameterName: CName): StateResultBool
  GetConditionIntParameter(parameterName: CName): StateResultInt
  GetConditionFloatParameter(parameterName: CName): StateResultFloat
  GetConditionVectorParameter(parameterName: CName): StateResultVector
  GetConditionCNameParameter(parameterName: CName): StateResultCName
  GetConditionScriptableParameter(parameterName: CName): IScriptable
  GetConditionWeakScriptableParameter(parameterName: CName): IScriptable
  GetConditionTweakDBIDParameter(parameterName: CName): TweakDBID
  GetCurrentStates(stateMachineIdentifier: StateMachineIdentifier): CName[]
  IsStateActive(stateMachineName: CName, stateName: CName): Bool
  IsStateActiveWithIdentifier(stateMachineIdentifier: StateMachineIdentifier, stateName: CName): Bool
  GetStateMachineCurrentState(stateMachineName: CName): CName
  GetStateMachineCurrentStateWithIdentifier(stateMachineIdentifier: StateMachineIdentifier): CName
  IsStateMachineActive(stateMachineName: CName): Bool
  IsStateMachineActiveWithIdentifier(stateMachineIdentifier: StateMachineIdentifier): Bool
  IsStateJustBecomeActive(stateMachineName: CName, stateName: CName): Bool
  IsStateJustBecomeActiveWithIdentifier(stateMachineIdentifier: StateMachineIdentifier, stateName: CName): Bool
  SetTemporaryBoolParameter(parameterName: CName, value: Bool, force?: Bool): void
  SetTemporaryIntParameter(parameterName: CName, value: number, force?: Bool): void
  SetTemporaryFloatParameter(parameterName: CName, value: number, force?: Bool): void
  SetTemporaryVectorParameter(parameterName: CName, value: Vector4, force?: Bool): void
  SetTemporaryCNameParameter(parameterName: CName, value: CName, force?: Bool): void
  SetTemporaryScriptableParameter(parameterName: CName, value: IScriptable, force?: Bool): void
  SetTemporaryTweakDBIDParameter(parameterName: CName, value: TweakDBID, force?: Bool): void
  SetPermanentBoolParameter(parameterName: CName, value: Bool, force?: Bool): void
  SetPermanentIntParameter(parameterName: CName, value: number, force?: Bool): void
  SetPermanentFloatParameter(parameterName: CName, value: number, force?: Bool): void
  SetPermanentVectorParameter(parameterName: CName, value: Vector4, force?: Bool): void
  SetPermanentCNameParameter(parameterName: CName, value: CName, force?: Bool): void
  SetPermanentScriptableParameter(parameterName: CName, value: IScriptable, force?: Bool): void
  SetPermanentTweakDBIDParameter(parameterName: CName, value: TweakDBID, force?: Bool): void
  SetConditionBoolParameter(parameterName: CName, value: Bool, force?: Bool): void
  SetConditionIntParameter(parameterName: CName, value: number, force?: Bool): void
  SetConditionFloatParameter(parameterName: CName, value: number, force?: Bool): void
  SetConditionVectorParameter(parameterName: CName, value: Vector4, force?: Bool): void
  SetConditionCNameParameter(parameterName: CName, value: CName, force?: Bool): void
  SetConditionScriptableParameter(parameterName: CName, value: IScriptable, force?: Bool): void
  SetConditionWeakScriptableParameter(parameterName: CName, value: IScriptable, force?: Bool): void
  SetConditionTweakDBIDParameter(parameterName: CName, value: TweakDBID, force?: Bool): void
  RemovePermanentBoolParameter(parameterName: CName): Bool
  RemovePermanentIntParameter(parameterName: CName): Bool
  RemovePermanentFloatParameter(parameterName: CName): Bool
  RemovePermanentVectorParameter(parameterName: CName): Bool
  RemovePermanentCNameParameter(parameterName: CName): Bool
  RemovePermanentScriptableParameter(parameterName: CName): Bool
  RemovePermanentTweakDBIDParameter(parameterName: CName): Bool
  RemoveConditionBoolParameter(parameterName: CName): Bool
  RemoveConditionIntParameter(parameterName: CName): Bool
  RemoveConditionFloatParameter(parameterName: CName): Bool
  RemoveConditionVectorParameter(parameterName: CName): Bool
  RemoveConditionCNameParameter(parameterName: CName): Bool
  RemoveConditionScriptableParameter(parameterName: CName): Bool
  RemoveConditionWeakScriptableParameter(parameterName: CName): Bool
  RemoveConditionTweakDBIDParameter(parameterName: CName): Bool
}

declare interface StateResultFloat {

}

declare interface StateResultBool {

}

declare interface StateResultInt {

}

declare interface StateResultCName {

}

declare interface StateResultString {

}

declare interface StateResultVector {

}

declare interface AdjustTransformWithDurations extends AdjustTransform {

  SetPosition(value: Vector4): void
  SetRotation(value: Quaternion): void
  SetSlideDuration(value: number): void
  SetRotationDuration(value: number): void
  SetGravity(value: number): void
  SetCurve(value: CName): void
  SetTarget(value: GameObject): void
  SetDistanceRadius(value: number): void
  SetUseParabolicMotion(value: Bool): void
}

declare interface StateGameScriptInterface extends StateScriptInterface {

  GetStateVectorParameter(stateVectorParameter: physicsStateValue): Variant
  SetStateVectorParameter(stateVectorParameter: physicsStateValue, value: Variant): Bool
  Overlap(primitiveDimension: Vector4, position: Vector4, rotation: EulerAngles, collisionGroup?: CName, result?: TraceResult): Bool
  OverlapWithCollisionFilter(primitiveDimension: Vector4, position: Vector4, rotation: EulerAngles, collisionGroup?: QueryFilter, result?: TraceResult): Bool
  OverlapMultiple(primitiveDimension: Vector4, position: Vector4, rotation: EulerAngles, collisionGroup?: CName): TraceResult[]
  RayCast(start: Vector4, end: Vector4, collisionGroup?: CName): TraceResult
  RayCastWithCollisionFilter(start: Vector4, end: Vector4, collisionGroup?: QueryFilter): TraceResult
  RayCastMultiple(start: Vector4, end: Vector4, collisionGroup?: CName): TraceResult[]
  Sweep(primitiveDimension: Vector4, position: Vector4, rotation: EulerAngles, direction: Vector4, distance: number, collisionGroup?: CName, assumeInitialPositionClear?: Bool, result?: TraceResult): Bool
  SweepWithCollisionFilter(primitiveDimension: Vector4, position: Vector4, rotation: EulerAngles, direction: Vector4, distance: number, collisionGroup?: QueryFilter, assumeInitialPositionClear?: Bool, result?: TraceResult): Bool
  SweepMultiple(primitiveDimension: Vector4, position: Vector4, rotation: EulerAngles, direction: Vector4, distance: number, collisionGroup?: CName): TraceResult[]
  GetCollisionReport(): ControllerHit[]
  IsOnGround(): Bool
  IsOnMovingPlatform(): Bool
  CanCapsuleFit(capsuleHeight: number, capsuleRadius: number): Bool
  HasSecureFooting(): SecureFootingResult
  GetActionPrevStateTime(actionName: CName): number
  GetActionStateTime(actionName: CName): number
  GetActionValue(actionName: CName): number
  IsActionJustPressed(actionName: CName): Bool
  IsActionJustReleased(actionName: CName): Bool
  IsActionJustHeld(actionName: CName): Bool
  IsAxisChangeAction(actionName: CName): Bool
  IsRelativeChangeAction(actionName: CName): Bool
  GetActionPressCount(actionName: CName): number
  IsActionJustTapped(actionName: CName): Bool
  SetComponentVisibility(actionName: CName, visibility: Bool): Bool
  GetObjectFromComponent(targetingComponent: IPlacedComponent): GameObject
  TransformInvPointFromObject(point: Vector4, object?: GameObject): Vector4
  ActivateCameraSetting(settingId: CName): Bool
  SetCameraTimeDilationCurve(curveName: CName): Bool
  GetCameraWorldTransform(): Transform
  TEMP_WeaponStopFiring(): Bool
  IsTriggerModeActive(triggerMode: gamedataTriggerMode): Bool
  SetAnimationParameterInt(key: CName, value: number): Bool
  SetAnimationParameterFloat(key: CName, value: number): Bool
  SetAnimationParameterBool(key: CName, value: Bool): Bool
  SetAnimationParameterVector(key: CName, value: Vector4): Bool
  SetAnimationParameterQuaternion(key: CName, value: Quaternion): Bool
  SetAnimationParameterFeature(key: CName, value: AnimFeature, owner?: GameObject): Bool
  PushAnimationEvent(eventName: CName): Bool
  IsSceneAnimationActive(): Bool
  IsMoveInputConsiderable(): Bool
  GetInputHeading(): number
  GetOwnerStateVectorParameterFloat(parameterType: physicsStateValue): number
  GetOwnerStateVectorParameterVector(parameterType: physicsStateValue): Vector4
  GetOwnerMovingDirection(): Vector4
  GetOwnerForward(): Vector4
  GetOwnerTransform(): Transform
  RayCastNotPlayer(start: Vector4, end: Vector4): Bool
  MeetsPrerequisites(prereqName: TweakDBID): Bool
  GetItemIdInSlot(slotName: TweakDBID): ItemID
  CanEquipItem(stateContext: StateContext): Bool
  IsMountedToObject(object?: GameObject): Bool
  IsDriverInVehicle(child?: GameObject, parent?: GameObject): Bool
  IsPassengerInVehicle(child?: GameObject, parent?: GameObject): Bool
  GetMountingInfo(child: GameObject): MountingInfo
  GetRoleForSlot(slot: MountingSlotId, parent: GameObject, occupantSlotComponentName?: CName): gameMountingSlotRole
  GetWaterLevel(puppetPosition: Vector4, referencePosition: Vector4, waterLevel: number): Bool
  IsEntityInCombat(objectId?: EntityID): Bool
  CanEnterInteraction(stateContext: StateContext): Bool
  RequestWeaponEquipOnServer(slotName: TweakDBID, itemId: ItemID): void
}

declare interface ToggleAimDownSightsEvent extends Event {

}

declare interface NotifySurfaceDirectionChangedEvent extends Event {

}

declare interface SceneTier extends StimuliData {

  SetTierData(tierData: SceneTierData): void
  GetTierData(): SceneTierData
  GetTier(): GameplayTier
  GetForceEmptyHands(): Bool
}

declare interface InputContextSystem extends ScriptableSystem {

  OnPlayerAttach(request: PlayerAttachRequest): void
  GetActiveContext(): inputContextType
  IsActiveContextAction(): Bool
  IsActiveContextRPG(): Bool
  OnChangeActiveContextRequest(request: ChangeActiveContextRequest): void
}

declare interface ChangeActiveContextRequest extends PlayerScriptableSystemRequest {

}

declare interface AnimFeature_AimPlayer extends AnimFeature_BasicAim {

  SetZoomLevel(zoomLevel: number): void
  SetAimInTime(aimInTime: number): void
  SetAimOutTime(aimOutTime: number): void
}

declare interface ItemIdWrapper extends IScriptable {

}

declare interface GameplayCameraData extends IScriptable {

}

declare interface vehicleRequestCameraPerspectiveEvent extends Event {

}

declare interface vehicleCameraSceneEnableEvent extends Event {

}

declare interface OldUpperBodyTransition extends DefaultTransition {

  CanEquipFirearm(owner: GameObject, stateContext: StateContext): Bool
  /** @noSelf **/
  HasRightHandWeaponActiveInSlot(owner: GameObject): Bool
}

declare interface OldUpperBodyEventsTransition extends OldUpperBodyTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface HighLevelTransition extends DefaultTransition {

  BlockMovement(scriptInterface: StateGameScriptInterface, val: Bool): void
  ForceEmptyHands(stateContext: StateContext, val: Bool): void
  IsForceEmptyHands(stateContext: StateContext): Bool
  ForceTemporaryUnequip(stateContext: StateContext, val: Bool): void
  ForceSafeState(stateContext: StateContext): void
  ForceReadyState(stateContext: StateContext): void
  ResetForceWalkSpeed(stateContext: StateContext): void
  SetTier2LocomotionSlow(scriptInterface: StateGameScriptInterface): void
  SetTier2Locomotion(scriptInterface: StateGameScriptInterface): void
  SetTier2LocomotionFast(scriptInterface: StateGameScriptInterface): void
  RemoveTier2LocomotionSlow(scriptInterface: StateGameScriptInterface): void
  RemoveTier2Locomotion(scriptInterface: StateGameScriptInterface): void
  RemoveTier2LocomotionFast(scriptInterface: StateGameScriptInterface): void
  RemoveAllTierLocomotions(scriptInterface: StateGameScriptInterface): void
  ActivateTier3Locomotion(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ActivateTier4Locomotion(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ActivateTier5Locomotion(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ActivateWorkspotLocomotion(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ForceDefaultLocomotion(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  GetCurrentHealthPerc(scriptInterface: StateGameScriptInterface): number
  SetPlayerVitalsAnimFeatureData(stateContext: StateContext, scriptInterface: StateGameScriptInterface, val: number, stateDuration: number): void
  GetDeathType(stateContext: StateContext, scriptInterface: StateGameScriptInterface): EDeathType
  IsDeathMenuBlocked(scriptInterface: StateGameScriptInterface): Bool
  SetIsResurrectionAllowedBasedOnState(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  SetPlayerDeathAnimFeatureData(stateContext: StateContext, scriptInterface: StateGameScriptInterface, val: number): void
  EvaluateSettingCustomDeathAnimation(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  IsResurrectionAllowed(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  GetGLP(glpID: TweakDBID): Bool
  HasSecondHeart(owner: GameObject): Bool
}

declare interface AnimFeature_PlayerVitals extends AnimFeature {

}

declare interface AnimFeature_PlayerDeathAnimation extends AnimFeature {

}

declare interface SceneTierAbstract extends HighLevelTransition {

  GetCurrentSceneTier(stateContext: StateContext): GameplayTier
  SceneTierToEnter(): GameplayTier
}

declare interface LeftHandCyberwareTransition extends DefaultTransition {

  SendAnimFeatureData(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  SetLeftHandItemTypeAndState(scriptInterface: StateGameScriptInterface, type: number, state: number): void
  LockLeftHandAnimation(scriptInterface: StateGameScriptInterface, newState: Bool): void
  SetAnimEquipState(scriptInterface: StateGameScriptInterface, newState: Bool): void
  GetProjectileTemplateNameFromWeaponDefinition(weaponTweak: TweakDBID): CName
  GetEquipDuration(scriptInterface: StateGameScriptInterface): number
  GetUnequipDuration(scriptInterface: StateGameScriptInterface): number
  GetTransactionSystem(scriptInterface: StateGameScriptInterface): TransactionSystem
  GetStatsSystem(scriptInterface: StateGameScriptInterface): StatsSystem
  LeftHandCyberwareHasTag(scriptInterface: StateGameScriptInterface, tag: CName): Bool
  QuickwheelHasTag(scriptInterface: StateGameScriptInterface, tag: CName): Bool
  GetLeftHandWeaponObject(scriptInterface: StateGameScriptInterface): WeaponObject
  AttachAndPreviewProjectile(scriptInterface: StateGameScriptInterface, active: Bool): void
  DetachProjectile(scriptInterface: StateGameScriptInterface): void
  GetCurrentlyInstalledProjectile(scriptInterface: StateGameScriptInterface, installedProjectile: ItemID): Bool
  SetAnimFeatureState(stateContext: StateContext, value: number): void
  SetActionDuration(stateContext: StateContext, value: number): void
  SetIsQuickAction(stateContext: StateContext, value: Bool): void
  SetIsCharging(stateContext: StateContext, value: Bool): void
  SetIsLooping(stateContext: StateContext, value: Bool): void
  SetIsCatching(stateContext: StateContext, value: Bool): void
  SetIsSafeAction(stateContext: StateContext, value: Bool): void
  SetIsProjectileCaught(stateContext: StateContext, scriptInterface: StateGameScriptInterface, value: Bool): void
  ResetAnimFeatureParameters(stateContext: StateContext): void
  GetMaxActiveTime(scriptInterface: StateGameScriptInterface): number
  ShouldInstantlyUnequipCyberware(scriptInterface: StateGameScriptInterface, stateContext: StateContext): Bool
  IsUsingCyberwareAllowed(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  AimSnap(scriptInterface: StateGameScriptInterface): void
  EndAiming(scriptInterface: StateGameScriptInterface): void
}

declare interface AnimFeature_LeftHandCyberware extends AnimFeature {

}

declare interface AnimFeature_LeftHandAnimation extends AnimFeature {

}

declare interface AnimFeature_LeftHandItem extends AnimFeature {

}

declare interface gameprojectileProjectilePreviewEvent extends gameprojectileSpawnerPreviewEvent {

}

declare interface LeftHandCyberwareDataDef extends BlackboardDefinition {

}

declare interface CyberwareUtility extends IScriptable {

  /** @noSelf **/
  GetMaxActiveTimeFromTweak(item: TweakDBID): number
  /** @noSelf **/
  GetActiveCyberwareItem(player: PlayerPuppet): TweakDBID
  /** @noSelf **/
  StartGenericCwCooldown(player: PlayerPuppet): void
  /** @noSelf **/
  IsCurrentCyberwareOnCooldown(player: PlayerPuppet): Bool
}

declare interface LeftHandCyberwareEventsTransition extends LeftHandCyberwareTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  CleanUpLeftHandCyberwareState(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface LocomotionTransition extends DefaultTransition {

  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  InternalEnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  AddModifierGroupWithName(scriptInterface: StateGameScriptInterface, modifierTDBName: string): void
  AddModifierGroupForState(scriptInterface: StateGameScriptInterface): void
  RemoveModifierGroupForState(scriptInterface: StateGameScriptInterface): void
  ShowDebugText(text: string, scriptInterface: StateGameScriptInterface, layerId: number): void
  ClearDebugText(layerId: number, scriptInterface: StateGameScriptInterface): void
  AddImpulseInMovingDirection(stateContext: StateContext, scriptInterface: StateGameScriptInterface, impulse: number): void
  AddImpulse(stateContext: StateContext, impulse: Vector4): void
  AddVerticalImpulse(stateContext: StateContext, force: number): void
  SetCustomLocomotionParameters(scriptInterface: StateGameScriptInterface, locomotionParameters: LocomotionParameters): void
  SetCollisionFilter(scriptInterface: StateGameScriptInterface): void
  SetLocomotionParameters(stateContext: StateContext, scriptInterface: StateGameScriptInterface): LocomotionParameters
  SetLocomotionCameraParameters(stateContext: StateContext): void
  GetStateDefaultLocomotionParameters(scriptInterface: StateGameScriptInterface, locomotionParameters: LocomotionParameters): void
  BroadcastStimuliFootstepSprint(context: StateGameScriptInterface): void
  BroadcastStimuliFootstepRegular(context: StateGameScriptInterface): void
  SetDetailedState(scriptInterface: StateGameScriptInterface, state: gamePSMDetailedLocomotionStates): void
  IsTouchingGround(scriptInterface: StateGameScriptInterface): Bool
  HasSecureFooting(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  CheckSecureFootingFailure(result: SecureFootingResult): Bool
  HasSecureFootingDetailedResult(stateContext: StateContext, scriptInterface: StateGameScriptInterface): SecureFootingResult
  GetFallingSpeedBasedOnHeight(scriptInterface: StateGameScriptInterface, height: number): number
  GetSpeedBasedOnDistance(scriptInterface: StateGameScriptInterface, desiredDistance: number): number
  IsCurrentFallSpeed(stateContext: StateContext, scriptInterface: StateGameScriptInterface, fallSpeedThreshold: number): Bool
  IsCurrentFallSpeedTooFastToEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsAiming(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  WantsToDodge(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  WantsToDodgeFromMovementInput(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsIdleForced(stateContext: StateContext): Bool
  IsWalkForced(stateContext: StateContext): Bool
  IsFreezeForced(stateContext: StateContext): Bool
  PlayRumbleBasedOnDodgeDirection(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  IsStatusEffectType(statusEffectRecord: StatusEffect_Record, type: gamedataStatusEffectType): Bool
  SpawnLandingFxGameEffect(attackId: TweakDBID, scriptInterface: StateGameScriptInterface): void
  ProcessSprintInputLock(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  SetupSprintInputLock(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SimulationFilter {

  /** @noSelf **/
  SimulationFilter_BuildFromPreset(f: SimulationFilter, preset: CName): void
  /** @noSelf **/
  ALL(): SimulationFilter
  /** @noSelf **/
  ZERO(): SimulationFilter
}

declare interface SecureFootingResult {

}

declare interface LocomotionEventsTransition extends LocomotionTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateIsPlayerMovingHorizontallyBB(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateIsPlayerMovingVerticallyBB(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ConsumeStaminaBasedOnLocomotionState(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateInputToggles(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface LocomotionGroundEvents extends LocomotionEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface AnimFeature_PlayerLocomotionStateMachine extends AnimFeature {

}

declare interface LocomotionTakedownEvents extends LocomotionEventsTransition {

  JumpToIdleAnimation(scriptInterface: StateGameScriptInterface, target: GameObject): void
  JumpToWalkAnimation(scriptInterface: StateGameScriptInterface, target: GameObject): void
  JumpToStruggleAnimation(scriptInterface: StateGameScriptInterface, target: GameObject): void
  IsTakedownAndDispose(scriptInterface: StateGameScriptInterface): Bool
  SetPlayerIsStandingAnimParameter(scriptInterface: StateGameScriptInterface): void
  SetGrappleDuration(stateContext: StateContext, scriptInterface: StateGameScriptInterface, grappleDuration: number, target: GameObject): void
  ForceTemporaryWeaponUnequip(stateContext: StateContext, scriptInterface: StateGameScriptInterface, value: Bool): void
  RequestTimeDilationActivation(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  InterruptCameraAim(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  GetRightHandItemObject(scriptInterface: StateGameScriptInterface): ItemObject
  GetRightHandItemName(scriptInterface: StateGameScriptInterface): CName
  GetRightHandItemType(scriptInterface: StateGameScriptInterface): CName
  IsTakedownWeapon(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  FillAnimWrapperInfoBasedOnEquippedItem(scriptInterface: StateGameScriptInterface, clearWrapperInfo: Bool): void
  PlayExitAnimation(scriptInterface: StateGameScriptInterface, owner: GameObject, target: GameObject, syncedAnimName: CName): void
  JumpToNextAnimationInSequence(scriptInterface: StateGameScriptInterface, owner: GameObject): void
  JumpToAnimationWithID(scriptInterface: StateGameScriptInterface, owner: GameObject, ownerEntryId: number, instant: Bool): void
  SelectRandomSyncedAnimation(stateContext: StateContext): CName
  GetBossNameBasedOnRecord(target: GameObject): ETakedownBossName
  GetCurrentBossPhase(target: GameObject, stateContext: StateContext, phase: number): void
  SelectSyncedAnimationBasedOnPhase(stateContext: StateContext, target: GameObject): CName
  GetSyncedAnimationBasedOnPhase(stateContext: StateContext): CName
  SetEffectorBasedOnPhase(stateContext: StateContext): CName
  SelectSyncedAnimationBasedOnTargetFacing(owner: GameObject, target: GameObject, back?: Bool, front?: Bool, left?: Bool, right?: Bool, action?: CName): CName
  SelectSyncedAnimationAndExecuteAction(stateContext: StateContext, scriptInterface: StateGameScriptInterface, owner: GameObject, target: GameObject, action: CName): void
  DefeatTarget(stateContext: StateContext, scriptInterface: StateGameScriptInterface, activator: GameObject, target: GameObject, effectName: CName, effectTag: CName): void
  TestNPCOutsideNavmesh(scriptInterface: StateGameScriptInterface, activator: GameObject, target: GameObject, timeToTick: number, b: Bool): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface TakedownUtils extends IScriptable {

  /** @noSelf **/
  SetInGrappleAnimFeature(scriptInterface: StateGameScriptInterface, b: Bool): void
  /** @noSelf **/
  SetIgnoreLookAtEntity(scriptInterface: StateGameScriptInterface, target: GameObject, b: Bool): void
  /** @noSelf **/
  TakedownActionNameToEnum(actionName: CName): ETakedownActionType
  /** @noSelf **/
  SetTakedownAction(stateContext: StateContext, actionName: ETakedownActionType): void
  /** @noSelf **/
  SetTargetBodyType(executionOwner: GameObject, target: GameObject, enable: Bool): void
  /** @noSelf **/
  CleanUpGrappleState(caller: DefaultTransition, stateContext: StateContext, scriptInterface: StateGameScriptInterface, target: GameObject): void
  /** @noSelf **/
  ExitWorkspot(scriptInterface: StateGameScriptInterface, owner: GameObject): void
}

declare interface AnimFeature_Grapple extends AnimFeature {

}

declare interface EnableAimAssist extends Event {

}

declare interface LocomotionTakedownInitData extends IScriptable {

}

declare interface LocomotionAirEvents extends LocomotionEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  GetLandingType(stateContext: StateContext): number
}

declare interface AnimFeature_Landing extends AnimFeature {

}

declare interface FallEvents extends LocomotionAirEvents {

  OnEnterFromDodgeAir(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface LocomotionGroundDecisions extends LocomotionTransition {

  InternalEnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  CheckCrouchEnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  CrouchEnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  CrouchExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MineDispenserTransition extends DefaultTransition {

}

declare interface QuickSlotsTransition extends DefaultTransition {

  SetUIBlackboardBoolVariable(scriptInterface: StateGameScriptInterface, id: BlackboardID_Bool, value: Bool): void
  SetUIBlackboardFloatVariable(scriptInterface: StateGameScriptInterface, id: BlackboardID_Float, value: number): void
  SetUIBlackboardIntVariable(scriptInterface: StateGameScriptInterface, id: BlackboardID_Int, value: number): void
  SetUIBlackboardVector4Variable(scriptInterface: StateGameScriptInterface, id: BlackboardID_Vector4, value: Vector4): void
  GetQuickSlotsManager(scriptInterface: StateGameScriptInterface): QuickSlotsManager
  CheckForAnyItemInEquipmentArea(scriptInterface: StateGameScriptInterface, areaType: gamedataEquipmentArea): Bool
  HasAnyVehiclesUnlocked(scriptInterface: StateGameScriptInterface): number
  DoesVehicleSupportRadio(scriptInterface: StateGameScriptInterface): Bool
  CheckNoRadialMenusRestriction(scriptInterface: StateGameScriptInterface): Bool
  CheckVehicleSummonigRestriction(scriptInterface: StateGameScriptInterface): Bool
  IsPlayerInWheelBlockingWorkspot(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsVehicleDriverAllowedToSelectWeapons(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsplayerInStateAllowedToSelectWeapons(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface VehicleTransition extends DefaultTransition {

  /** @noSelf **/
  CanEnterDriverCombat(): Bool
  IsPlayerAllowedToEnterCombat(scriptInterface: StateGameScriptInterface): Bool
  IsPlayerAllowedToExitCombat(scriptInterface: StateGameScriptInterface): Bool
  IsPlayerAllowedToExitVehicle(scriptInterface: StateGameScriptInterface): Bool
  PlayerWantsToExitVehicle(scriptInterface: StateGameScriptInterface): Bool
  SetVehicleGameplayRestrictions(scriptInterface: StateGameScriptInterface, shouleAdd: Bool): void
  SetFirearmsGameplayRestriction(scriptInterface: StateGameScriptInterface, shouleAdd: Bool): void
  IsDriverInVehicle(scriptInterface: StateGameScriptInterface): Bool
  IsPassengerInVehicle(scriptInterface: StateGameScriptInterface): Bool
  SendAnimFeature(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ResetAnimFeature(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ResetVehParams(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  SendIsCar(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ResetIsCar(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  SetIsInVehicle(stateContext: StateContext, value: Bool): void
  SetIsVehicleDriver(stateContext: StateContext, value: Bool): void
  SetVehicleType(stateContext: StateContext, value: number): void
  SetIsInVehicleCombat(stateContext: StateContext, value: Bool): void
  SetIsInVehicleWindowCombat(stateContext: StateContext, value: Bool): void
  SetIsInVehicleDriverCombat(stateContext: StateContext, value: Bool): void
  SetVehicleClass(stateContext: StateContext, value: number): void
  SetIsEnteringCombat(stateContext: StateContext, value: Bool): void
  SetIsExitingCombat(stateContext: StateContext, value: Bool): void
  SetIsWorldRenderPlane(stateContext: StateContext, value: Bool): void
  SetIsCar(stateContext: StateContext, value: Bool): void
  SetWasStolen(stateContext: StateContext, value: Bool): void
  SetWasCombatForced(stateContext: StateContext, value: Bool): void
  SetRequestedTPPCamera(stateContext: StateContext, value: Bool): void
  SetSide(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  IsUnmountDirectionClosest(stateContext: StateContext, unmountDirection: vehicleExitDirection): Bool
  IsUnmountDirectionOpposite(stateContext: StateContext, unmountDirection: vehicleExitDirection): Bool
  /** @noSelf **/
  CheckVehicleDesiredTag(scriptInterface: StateGameScriptInterface, desiredTag: CName): Bool
  SetVehFppCameraParams(stateContext: StateContext, scriptInterface: StateGameScriptInterface, isPassenger: Bool, side?: Bool, combat?: Bool): void
  ResetVehFppCameraParams(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  GetVehType(stateContext: StateContext, scriptInterface: StateGameScriptInterface): number
  GetVehClass(stateContext: StateContext, scriptInterface: StateGameScriptInterface): number
  GetAdjacentSeat(slotName: CName, nextSlotName: CName): Bool
  IsAdjacentSeatAvailable(stateContext: StateContext, scriptInterface: StateGameScriptInterface, slotName: CName): Bool
  SendEquipToHandsRequest(scriptInterface: StateGameScriptInterface, itemID: ItemID): void
  RequestToggleVehicleCamera(scriptInterface: StateGameScriptInterface): void
  ResetVehicleCamera(scriptInterface: StateGameScriptInterface): void
  ToggleWindowForOccupiedSeat(scriptInterface: StateGameScriptInterface, slotName: CName, shouldopen: Bool): void
  GetUnmountingEvent(stateContext: StateContext): MountEventData
  IsExitForced(stateContext: StateContext): Bool
  RemoveUnmountingRequest(stateContext: StateContext): void
  RemoveMountingRequest(stateContext: StateContext): void
  StartLeavingVehicle(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  PlayVehicleExitDoorAnimation(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ExitWorkspot(stateContext: StateContext, scriptInterface: StateGameScriptInterface, isInstant: Bool, upsideDown?: Bool): void
  PlayerStateChange(scriptInterface: StateGameScriptInterface, newstate: number): void
  GetVehicleBlackboard(scriptInterface: StateGameScriptInterface): IBlackboard
  SetupVehicleDataPackage(stateContext: StateContext, scriptInterface: StateGameScriptInterface): VehicleDataPackage_Record
  GetVehicleDataPackage(stateContext: StateContext): VehicleDataPackage_Record
  GetVehicleInventory(scriptInterface: StateGameScriptInterface): void
  SetVehicleCameraParameters(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  GetPuppetVehicleSceneTransition(stateContext: StateContext): PuppetVehicleState
  TryToStopVehicle(stateContext: StateContext, scriptInterface: StateGameScriptInterface, force?: Bool): void
  IsInScene(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  GetVehicleObject(scriptInterface: StateGameScriptInterface): VehicleObject
  GetVehiclePS(scriptInterface: StateGameScriptInterface): VehicleComponentPS
  IsInVehicleWorkspot(scriptInterface: StateGameScriptInterface, slotName: CName): Bool
  DriverSwitchSeatsCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  PassangerSwitchSeatsCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  PauseStateMachines(stateContext: StateContext, executionOwner: GameObject): void
  ResumeStateMachines(executionOwner: GameObject): void
}

declare interface AnimFeature_VehicleData extends AnimFeature {

}

declare interface AnimFeature_VehiclePassenger extends AnimFeature {

}

declare interface VehicleFPPCameraParams_Record extends TweakDBRecord {

  Lookat_yaw_right_up_offset(): number
  Lookat_pitch_forward_down_ratio(): number
  Forward_offset_value(): number
  Lookat_yaw_left_offset(): number
  Lookat_pitch_forward_offset(): number
  Paralax_forward_offset(): number
  Paralax_radius(): number
  Lookat_offset_vertical(): number
  Lookat_yaw_right_offset(): number
  Lookat_yaw_offset_active_angle(): number
  Is_forward_offset(): number
  Lookat_yaw_left_up_offset(): number
  Is_paralax(): number
  Upperbody_pitch_weight(): number
  Upperbody_yaw_weight(): number
  Is_pitch_off(): number
  Is_yaw_off(): number
}

declare interface vehicleCameraResetEvent extends Event {

}

declare interface DebugDataDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface PSMStopStateMachine extends Event {

}

declare interface PSMStartStateMachine extends Event {

}

declare interface QuickSlotsEvents extends QuickSlotsTransition {

}

declare interface QuickSlotsDecisions extends QuickSlotsTransition {

}

declare interface MeleeTransition extends DefaultTransition {

  /** @noSelf **/
  GetMeleeAttackCooldownName(): CName
  /** @noSelf **/
  GetHoldEnterDuration(scriptInterface: StateGameScriptInterface): number
  IsBlockPressed(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsBlockHeld(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  LightMeleeAttackPressed(scriptInterface: StateGameScriptInterface): Bool
  LightMeleeAttackReleased(scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  MeleeAttackPressed(scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  MeleeAttackReleased(scriptInterface: StateGameScriptInterface): Bool
  QuickMeleePressed(scriptInterface: StateGameScriptInterface): Bool
  QuickMeleeHeld(scriptInterface: StateGameScriptInterface): Bool
  QuickMeleeReleased(scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  StrongMeleeAttackPressed(scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  StrongMeleeAttackReleased(scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  AnyMeleeAttack(scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  GetAimAssistMeleeRecord(scriptInterface: StateGameScriptInterface): AimAssistMelee_Record
  /** @noSelf **/
  AnyMeleeAttackPressed(scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  NoMeleeAttack(scriptInterface: StateGameScriptInterface): Bool
  NoStrongAttackPressed(scriptInterface: StateGameScriptInterface): Bool
  ShouldHold(stateContext: StateContext, scriptInterface: StateGameScriptInterface, skipDurationCheck?: Bool, skipPressCount?: Bool): Bool
  /** @noSelf **/
  CheckMeleeAttackPressCount(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  SetMeleeAttackPressCount(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ClearMeleePressCount(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  /** @noSelf **/
  WantsToStrongAttack(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  WantsToLightAttack(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ShouldInterruptHoldStates(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  UpdateMeleeInputBuffer(stateContext: StateContext, scriptInterface: StateGameScriptInterface, onlyLightMeleeAttack?: Bool): void
  /** @noSelf **/
  ClearInputBuffer(stateContext: StateContext): void
  EquipAttackCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  CheckItemType(scriptInterface: StateGameScriptInterface, itemType: gamedataItemType): Bool
  /** @noSelf **/
  MeleeSprintStateCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  MeleeUseExplorationCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IncrementAttackNumber(scriptInterface: StateGameScriptInterface, stateContext: StateContext): void
  IncrementTotalComboAttackNumber(scriptInterface: StateGameScriptInterface, stateContext: StateContext): void
  CheckIfFinalAttack(scriptInterface: StateGameScriptInterface, stateContext: StateContext): Bool
  CheckIfInfiniteCombo(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ResetAttackNumber(stateContext: StateContext): void
  SetAttackNumber(stateContext: StateContext, value: number): void
  SetCanSprintWhileCharging(stateContext: StateContext, value: Bool): void
  SetIsAttacking(stateContext: StateContext, value: Bool): void
  SetIsBlocking(stateContext: StateContext, value: Bool): void
  SetIsParried(stateContext: StateContext, value: Bool): void
  SetIsTargeting(stateContext: StateContext, value: Bool): void
  SetIsHolding(stateContext: StateContext, value: Bool): void
  SetIsSafe(stateContext: StateContext, value: Bool): void
  ApplyThrowAttackGameplayRestrictions(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  RemoveAllMeleeGameplayRestrictions(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  RemoveThrowAttackGameplayRestrictions(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  IsWeaponReady(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  HasWeaponStatFlag(scriptInterface: StateGameScriptInterface, flag: gamedataStatType): Bool
  DrawDebugText(scriptInterface: StateGameScriptInterface, textLayerId: number, text: string): void
  ClearDebugText(scriptInterface: StateGameScriptInterface, textLayerId: number): void
  GetPerfectAimSnapParams(): AimRequest
  GetBlockLookAtParams(): AimRequest
  SendAnimFeatureData(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  DisableNanoWireIK(scriptInterface: StateGameScriptInterface): void
  UpdateNanoWireEndPositionAnimFeature(scriptInterface: StateGameScriptInterface, animFeatureName: CName, enable: Bool, setPosition?: Bool, slotPosition?: Vector4): void
  GetMeleeMovementDirection(stateContext: StateContext, scriptInterface: StateGameScriptInterface): meleeMoveDirection
  /** @noSelf **/
  GetWeaponObject(scriptInterface: StateGameScriptInterface): WeaponObject
  GetAttackDataFromStateName(stateContext: StateContext, scriptInterface: StateGameScriptInterface, stateName: string, attackNumber: number, outgoingStruct: MeleeAttackData): Bool
  HasAttackRecord(scriptInterface: StateGameScriptInterface, stateName: string, attackNumber?: number): Bool
  GetAttackRecord(scriptInterface: StateGameScriptInterface, stateName: string, attackNumber: number, attackRecord: Attack_Melee_Record): Bool
  SpawnMeleeWeaponProjectile(scriptInterface: StateGameScriptInterface): void
  GetActiveMeleeWeaponItemID(scriptInterface: StateGameScriptInterface): TweakDBID
  GetProjectileTemplateNameFromWeaponDefinition(weaponTweak: TweakDBID): CName
  GetMeleeWeaponFriendlyName(scriptInterface: StateGameScriptInterface): CName
  /** @noSelf **/
  IsPlayingSyncedAnimation(scriptInterface: StateGameScriptInterface): Bool
  AdjustAttackPosition(scriptInterface: StateGameScriptInterface, stateContext: StateContext, attackData: MeleeAttackData): Bool
  AddAttackImpulse(scriptInterface: StateGameScriptInterface, stateContext: StateContext, attackData: MeleeAttackData): void
  AddCameraSpaceImpulse(scriptInterface: StateGameScriptInterface, stateContext: StateContext, attackData: MeleeAttackData): Vector4
  AddForwardImpulse(scriptInterface: StateGameScriptInterface, stateContext: StateContext, attackData: MeleeAttackData): Vector4
  AddUpImpulse(scriptInterface: StateGameScriptInterface, stateContext: StateContext, attackData: MeleeAttackData): Vector4
  GetMovementInput(scriptInterface: StateGameScriptInterface): number
  IsPlayerInputDirectedForward(scriptInterface: StateGameScriptInterface): Bool
  GetNanoWireTargetObject(scriptInterface: StateGameScriptInterface): GameObject
  IsTargetAPuppet(scriptInterface: StateGameScriptInterface): Bool
  IsTargetOfficer(scriptInterface: StateGameScriptInterface, object: GameObject): Bool
  IsAttackParried(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  HasMeleeTargeting(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  CanWeaponBlock(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  CanWeaponDeflect(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  CanThrowWeapon(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ResetFlags(stateContext: StateContext): void
  SpawnPreAttackGameEffect(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface AimAssistConfigPreset_Record extends TweakDBRecord {

  MagnetismParams(): AimAssistMagnetism_Record
  BulletMagnetismParams(): AimAssistBulletMagnetism_Record
  AimSnapParams(): AimAssistAimSnap_Record
  CommonParams(): AimAssistCommon_Record
  FinishingParams(): AimAssistFinishing_Record
  MeleeParams(): AimAssistMelee_Record
}

declare interface AnimFeature_MeleeData extends AnimFeature {

}

declare interface AnimFeature_SimpleIkSystem extends AnimFeature {

}

declare interface MeleeAttackData extends IScriptable {

}

declare interface PSMImpulse extends PSMBaseEvent {

}

declare interface MeleeEventsTransition extends MeleeTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ToggleWireVisualEffect(stateContext: StateContext, scriptInterface: StateGameScriptInterface, effectName: CName, b: Bool): void
}

declare interface UpperBodyTransition extends DefaultTransition {

  EmptyHandsCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  GetTransactionSystem(scriptInterface: StateGameScriptInterface): TransactionSystem
  /** @noSelf **/
  HasLeftWeaponEquipped(scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  HasAnyWeaponEquipped(scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  HasMeleeWeaponEquipped(scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  HasRangedWeaponEquipped(scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  HasMeleewareEquipped(scriptInterface: StateGameScriptInterface): Bool
  IsItemMeleeware(item: ItemID): Bool
  PlayEffectOnHeldItems(scriptInterface: StateGameScriptInterface, effectName: CName): void
  StopEffectOnHeldItems(scriptInterface: StateGameScriptInterface, effectName: CName): void
  BreakEffectLoopOnHeldItems(scriptInterface: StateGameScriptInterface, effectName: CName): void
  ShouldAim(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  SendDOFData(scriptInterface: StateGameScriptInterface, dofSetting: string): void
  SetWeaponHolster(scriptInterface: StateGameScriptInterface, newState: Bool): void
  ProcessWeaponSlotInput(scriptInterface: StateGameScriptInterface): Bool
  CheckRangedAttackInput(scriptInterface: StateGameScriptInterface): Bool
  CheckMeleeStatesForCombatGadget(scriptInterface: StateGameScriptInterface, stateContext: StateContext): Bool
}

declare interface AnimFeature_DOFControl extends AnimFeature {

}

declare interface AnimFeature_PlayerCoverActionWeaponHolster extends AnimFeature {

}

declare interface UpperBodyEventsTransition extends UpperBodyTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ResetEquipVars(stateContext: StateContext): void
  SyncEquipVarsToPermanentStorage(stateContext: StateContext): void
  UpdateSwitchItem(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ZoomTransition extends DefaultTransition {

  IsControllingDevice(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsDeviceOrFocusActive(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsDeviceAndFocusInactive(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ShouldPlayZoomExitSound(): Bool
  ShouldPlayZoomStepSound(): Bool
  ShouldPlayZoomFX(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  StartZoomEffect(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  PlayFocusModeZoomEnterSound(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  PlayZoomEndVisualEffect(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  SetCurrentZoomLevel(stateContext: StateContext, zoomLevel: number): void
  SetPreviousZoomLevel(stateContext: StateContext, value: number): void
  SetBlendTime(stateContext: StateContext, value: number): void
  SetZoomLevelNumber(stateContext: StateContext, value: number): void
  SetShouldUseWeaponZoomData(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ResetShouldUseWeaponZoomData(stateContext: StateContext): void
  GetActualZoomValue(stateContext: StateContext, scriptInterface: StateGameScriptInterface): number
  GetCurrentZoomLevel(stateContext: StateContext): number
  GetPreviousZoomLevel(stateContext: StateContext): number
  GetNextZoomLevel(stateContext: StateContext): number
  GetBlendTime(stateContext: StateContext): number
  GetZoomLevelNumber(stateContext: StateContext): number
  ResetAimType(stateContext: StateContext): void
  GetShouldUseWeaponZoomData(stateContext: StateContext): Bool
  GetZoomValueFromLevel(stateContext: StateContext, index: number): number
  GetZoomLevelsArray(stateContext: StateContext): number[]
  SendZoomAnimFeatureData(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface AnimFeature_Zoom extends AnimFeature {

}

declare interface BaseBullet extends BaseProjectile {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  Reset(): void
  OnInitialize(eventData: gameprojectileSetUpEvent): Bool
  StartTrailEffect(): void
  OnShoot(eventData: gameprojectileShootEvent): Bool
  OnShootTarget(eventData: gameprojectileShootTargetEvent): Bool
  OnTick(eventData: gameprojectileTickEvent): Bool
  OnCollision(eventData: gameprojectileHitEvent): Bool
  DealDamage(eventData: gameprojectileHitEvent): void
  PerformAttack(eventData: gameprojectileHitEvent): void
}

declare interface VehicleEventsTransition extends VehicleTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  HandleCameraInput(scriptInterface: StateGameScriptInterface): void
  HandleExitRequest(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ExitWithTeleport(stateContext: StateContext, scriptInterface: StateGameScriptInterface, validUnmountDirection: vehicleUnmountPosition, moveVehicle?: Bool, skipUnmount?: Bool): void
}

declare interface AnimFeature_Mounting extends AnimFeature {

}

declare interface vehicleUnmountPosition {

}

declare interface ExitingEventsBase extends VehicleEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  StartExiting(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface VehicleAudioEvent extends Event {

}

declare interface AbstractLandEvents extends LocomotionGroundEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  BroadcastLandingStim(stateContext: StateContext, scriptInterface: StateGameScriptInterface, stimType: gamedataStimType): void
  EvaluatePlayingLandingVFX(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface PSMFall extends Event {

  SetSpeed(speed: number): void
}

declare interface ControllerHit {

}

declare interface StatusEffectEvents extends LocomotionGroundEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  RotateToKnockdownSource(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ProcessStatusEffectBasedOnType(scriptInterface: StateGameScriptInterface, stateContext: StateContext, type: gamedataStatusEffectType): void
  SendCameraShakeDataToGraph(scriptInterface: StateGameScriptInterface, stateContext: StateContext, camShakeStrength: number): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  GetTimeInStatusEffect(stateContext: StateContext, scriptInterface: StateGameScriptInterface): number
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToFall(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  CommonOnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  DefaultOnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  SendStatusEffectAnimDataToGraph(stateContext: StateContext, scriptInterface: StateGameScriptInterface, state: EKnockdownStates): void
  ApplyCounterForce(scriptInterface: StateGameScriptInterface, stateContext: StateContext, desiredDistance: number, scaleDistance: Bool): void
  RemoveStatusEffect(scriptInterface: StateGameScriptInterface, stateContext: StateContext): void
  GetStatusEffectType(scriptInterface: StateGameScriptInterface, stateContext: StateContext): gamedataStatusEffectType
  GetStatusEffectRemainingDuration(scriptInterface: StateGameScriptInterface, stateContext: StateContext): number
  GetStatusEffectHitDirection(scriptInterface: StateGameScriptInterface): Vector4
  GetStartupAnimDuration(): number
  ShouldRotateToSource(): Bool
  GetAirRecoveryAnimDuration(): number
  GetRecoveryAnimDuration(): number
  GetLandAnimDuration(): number
  GetImpulseDistance(): number
  GetScaleImpulseDistance(): Bool
  GetCameraShakeStrength(): number
  ShouldForceUnequipWeapon(): Bool
  ShouldUseCustomAdditives(scriptInterface: StateGameScriptInterface): Bool
}

declare interface WeaponTransition extends DefaultTransition {

  ShowAttackPreview(showIfAiming: Bool, scriptInterface: StateGameScriptInterface, stateContext: StateContext): void
  GetDesiredAttackRecord(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Attack_Record
  GetBurstTimeRemainingName(): CName
  GetBurstCycleTimeName(): CName
  GetCycleTimeRemainingName(): CName
  GetBurstShotsRemainingName(): CName
  GetShootingStartName(): CName
  GetShootingNumBurstTotalName(): CName
  GetIsDelayFireName(): CName
  GetIsChargedFullAutoName(): CName
  GetQuestForceShootName(): CName
  InShootingSequence(stateContext: StateContext): Bool
  StartShootingSequence(stateContext: StateContext, scriptInterface: StateGameScriptInterface, fireDelay: number, burstCycleTime: number, numShotsBurst: number, isFullChargeFullAuto: Bool): void
  ShootingSequencePostShoot(stateContext: StateContext): void
  SetupNextShootingPhase(stateContext: StateContext, cycleTime: number, burstCycleTime: number, numShotsBurst: number): void
  EndShootingSequence(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ShootingSequenceUpdateCycleTime(timeDelta: number, stateContext: StateContext): void
  ShootingSequenceUpdateBurstTime(timeDelta: number, stateContext: StateContext): void
  CanPerformNextShotInSequence(weaponObject: WeaponObject, stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  CanPerformNextSemiAutoShot(weaponObject: WeaponObject, stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  CanPerformNextFullAutoShot(weaponObject: WeaponObject, stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  SetupStandardShootingSequence(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  IsSemiAutoAction(weaponObject: WeaponObject, stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsFullAutoAction(weaponObject: WeaponObject, stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ShowDebugText(textToShow: string, scriptInterface: StateGameScriptInterface, layerId: number): void
  ClearDebugText(layerId: number, scriptInterface: StateGameScriptInterface): void
  GetWeaponObject(scriptInterface: StateGameScriptInterface): WeaponObject
  PlayEffect(effectName: CName, scriptInterface: StateGameScriptInterface, eventTag?: CName): void
  StopEffect(effectName: CName, scriptInterface: StateGameScriptInterface): void
  IsWeaponReadyToShoot(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  GetWeaponTriggerModesNumber(scriptInterface: StateGameScriptInterface): number
  CompareTimeToPublicSafeTimestamp(stateContext: StateContext, scriptInterface: StateGameScriptInterface, timeToCompare: number): Bool
  HasSecondaryTriggerMode(scriptInterface: StateGameScriptInterface): Bool
  SwitchTriggerMode(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  IsPrimaryTriggerModeActive(scriptInterface: StateGameScriptInterface): Bool
  UpdateInputBuffer(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  /** @noSelf **/
  ShouldReloadWeapon(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  GetPlayerSpeed(scriptInterface: StateGameScriptInterface): number
  /** @noSelf **/
  ServerHasReloadRequest(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsHeavyWeaponEmpty(scriptInterface: StateGameScriptInterface): Bool
  GetMaxChargeThreshold(scriptInterface: StateGameScriptInterface): number
  GetReloadAnimSpeed(scriptInterface: StateGameScriptInterface, statType: gamedataStatType): number
  IsReloadDurationComplete(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsReloadUninterruptible(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  SetUninteruptibleReloadParams(stateContext: StateContext, clearParam: Bool): void
}

declare interface parameterRequestReload extends IScriptable {

}

declare interface WeaponEventsTransition extends WeaponTransition {

  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  StartWeaponCharge(statPoolsSystem: StatPoolsSystem, weaponEntityID: EntityID): void
  OnEnterNonChargeState(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ActionEvent extends AIEvent {

}

declare interface gameChangeDestination extends ActionInternalEvent {

}

declare interface ActionSlideToScriptProxy extends CActionScriptProxy {

  SetupWorldPosition(worldPosition: Vector4, duration?: number, ignoreNavigation?: Bool, rotateTowardsMovementDirection?: Bool): Bool
  SetupPosition(localPosition: Vector4, duration?: number, ignoreNavigation?: Bool, rotateTowardsMovementDirection?: Bool): Bool
  SetupObject(gameObject: GameObject, duration?: number, ignoreNavigation?: Bool, rotateTowardsMovementDirection?: Bool): Bool
}

declare interface ActionDodgeScriptProxy extends CActionScriptProxy {

  Setup(DodgeData: AnimFeature_DodgeData): Bool
}

declare interface ActionTeleportScriptProxy extends CActionScriptProxy {

  Setup(targetPosition: Vector4, rotation: number, doNavTest: Bool): Bool
}

declare interface ActionAnimationSlideParams {

}

declare interface AIActionLookatParams {

}

declare interface AIActionHelperTask extends AIbehaviortaskScript {

  GetActionStringName(context: ScriptExecutionContext): string
  GetActionPackageType(context: ScriptExecutionContext): AIactionParamsPackageTypes
  Initialize(context: ScriptExecutionContext): void
  GetActionID(): TweakDBID
}

declare interface AIActionSlideParams {

}

declare interface DestroyWeakspot extends AIActionHelperTask {

  Activate(context: ScriptExecutionContext): void
  DestroyWeakspot(context: ScriptExecutionContext, weakspots: WeakspotObject[], index: number): void
}

declare interface SetAppearance extends AIActionHelperTask {

  Activate(context: ScriptExecutionContext): void
  ApplyAppearance(context: ScriptExecutionContext, appearance: CName): void
}

declare interface MonitorMeleeCombo extends AIActionHelperTask {

  Deactivate(context: ScriptExecutionContext): void
}

declare interface SetDestinationWaypoint extends AIActionHelperTask {

  Activate(context: ScriptExecutionContext): void
  GetFinalDestination(context: ScriptExecutionContext): Vector4
  GetLowestDistanceIndex(context: ScriptExecutionContext, distances: number[]): number
  GetDistances(context: ScriptExecutionContext, refVector: Vector4): number[]
}

declare interface KillEntity extends AIActionHelperTask {

  Activate(context: ScriptExecutionContext): void
}

declare interface SetPhaseState extends AIActionHelperTask {

  Activate(context: ScriptExecutionContext): void
}

declare interface CheckPhaseState extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CheckPathToCombatTarget extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CheckFloatIsValid extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CheckBoolisValid extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CheckVectorIsValid extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface TweakAIActionConditionAbstract extends AIbehaviorconditionScript {

  Initialize(context: ScriptExecutionContext): Bool
  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
  StartInitCooldowns(context: ScriptExecutionContext): Bool
  GetDescription(context: ScriptExecutionContext): string
  GetActionRecord(context: ScriptExecutionContext, actionDebugName: string, actionRecord: AIAction_Record): Bool
}

declare interface TweakAIActionAbstract extends AIbehaviortaskScript {

  Initialize(context: ScriptExecutionContext): void
  VerifyActionRecord(): Bool
  Activate(context: ScriptExecutionContext): void
  RetryGetActionRecord(context: ScriptExecutionContext): Bool
  WaitForAnimToLoad(context: ScriptExecutionContext): Bool
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
  ChildCompleted(context: ScriptExecutionContext, status: AIbehaviorCompletionStatus): void
  GetActionDuration(context: ScriptExecutionContext): number
  GetTotalActionDuration(context: ScriptExecutionContext): number
  StartActionTimeStamp(context: ScriptExecutionContext): void
  UpdateActivePhase(context: ScriptExecutionContext, subActionsOutcome: AIbehaviorUpdateOutcome): Bool
  UpdateSubActions(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  UpdateGeneralSubActions(context: ScriptExecutionContext, duration: number): AIbehaviorUpdateOutcome
  UpdateStartupSubActions(context: ScriptExecutionContext, duration: number, subActionCount: number): AIbehaviorUpdateOutcome
  UpdateLoopSubActions(context: ScriptExecutionContext, duration: number, subActionCount: number): AIbehaviorUpdateOutcome
  UpdateRecoverySubActions(context: ScriptExecutionContext, duration: number, subActionCount: number): AIbehaviorUpdateOutcome
  RequestGracefulInterruption(context: ScriptExecutionContext): Bool
  ReactOnAllPhaseSubActionsCompleted(context: ScriptExecutionContext): void
  GetPhaseDuration(context: ScriptExecutionContext): number
  CalculatePhaseDuration(context: ScriptExecutionContext, phaseDurationFromAnimSlot?: number): void
  GetAllowBlendDuration(): number
  RepeatPhase(context: ScriptExecutionContext): Bool
  ChangeToNextPhase(context: ScriptExecutionContext): void
  ChangePhaseTo(context: ScriptExecutionContext, newPhase: EAIActionPhase): Bool
  OnPhaseStarted(context: ScriptExecutionContext): void
  OnPhaseEnded(context: ScriptExecutionContext, duration: number): void
  ActivateGeneralSubActions(context: ScriptExecutionContext): void
  ActivateStartupSubActions(context: ScriptExecutionContext): void
  ActivateLoopSubActions(context: ScriptExecutionContext): void
  ActivateRecoverySubActions(context: ScriptExecutionContext): void
  DeactivateGeneralSubActions(context: ScriptExecutionContext, duration: number): void
  DeactivateStartupSubActions(context: ScriptExecutionContext, duration: number): void
  DeactivateLoopSubActions(context: ScriptExecutionContext, duration: number): void
  DeactivateRecoverySubActions(context: ScriptExecutionContext, duration: number): void
  ActivateAnimationWrapperOverrides(context: ScriptExecutionContext): void
  DeactivateAnimationWrapperOverrides(context: ScriptExecutionContext): void
  SetAnimationWrapperOverrides(context: ScriptExecutionContext, value: number): void
  ActivateAnimData(context: ScriptExecutionContext): void
  DeactivateAnimData(context: ScriptExecutionContext): void
  SendAnimData(context: ScriptExecutionContext): void
  GetAnimFeature(context: ScriptExecutionContext): AnimFeature_AIAction
  GetAnimDirection(context: ScriptExecutionContext, animDirection: AIActionAnimDirection_Record): number
  PlayAnimationOnSlot(context: ScriptExecutionContext, animFeature: AnimFeature_AIAction): void
  GetSlideParams(context: ScriptExecutionContext, slideTarget: GameObject): ActionAnimationSlideParams
  GetSlideTarget(context: ScriptExecutionContext, slideTarget: GameObject, slideTargetTrackingMode: gamedataTrackingMode): Bool
  ActivateLookat(context: ScriptExecutionContext): void
  DeactivateLookat(context: ScriptExecutionContext): void
  TrackCommands(context: ScriptExecutionContext, stop: Bool): void
  WeaponOverride(context: ScriptExecutionContext, value: number): void
  ChangeNPCState(context: ScriptExecutionContext): void
  ResetNPCState(context: ScriptExecutionContext): void
  StartCooldowns(context: ScriptExecutionContext): void
  GetDescription(context: ScriptExecutionContext): string
  GetActionRecord(context: ScriptExecutionContext, actionDebugName: string, actionRecord: AIAction_Record, shouldCallAgain: Bool): Bool
}

declare interface AIActionLookat extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AIActionLookAtData_Record, lookAtEvent: LookAtAddEvent): void
  /** @noSelf **/
  GetLookatPartsRequests(lookatPresetRecord: LookAtPreset_Record, lookAtParts: LookAtPartRequest[]): void
  /** @noSelf **/
  Deactivate(owner: GameObject, lookAtAddEvents: LookAtAddEvent[]): void
}

declare interface AIActionLookAtData_Record extends TweakDBRecord {

  Target(): AIActionTarget_Record
  ActivationCondition(): AIActionCondition_Record
  Preset(): LookAtPreset_Record
  Offset(): Vector3
  TimeDelay(): number
}

declare interface LookAtPart_Record extends TweakDBRecord {

  PartName(): CName
  Weight(): number
  Suppress(): number
  Mode(): number
}

declare interface TweakAISubAction extends IScriptable {

  /** @noSelf **/
  OnCantFindProperActivateMethod(className: CName): void
  /** @noSelf **/
  OnCantFindProperUpdateMethod(className: CName): void
  /** @noSelf **/
  OnCantFindProperDeactivateMethod(className: CName): void
  /** @noSelf **/
  OnCantFindProperGetAnimVariationMethod(className: CName): void
  /** @noSelf **/
  OnCantFindProperGetPhaseDurationnMethod(className: CName): void
  /** @noSelf **/
  Activate(context: ScriptExecutionContext, subActionRecord: AISubAction_Record): Bool
  /** @noSelf **/
  Update(context: ScriptExecutionContext, subActionRecord: AISubAction_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, subActionRecord: AISubAction_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  GetAnimVariation(context: ScriptExecutionContext, subActionRecord: AISubAction_Record, animVariation: number): Bool
  /** @noSelf **/
  GetPhaseDuration(context: ScriptExecutionContext, subActionRecord: AISubAction_Record, actionPhase: EAIActionPhase, baseDuration: number, duration: number): Bool
}

declare interface AIActionChangeNPCState_Record extends TweakDBRecord {

  DefenseMode(): CName
  HitReactionMode(): CName
  HighLevelState(): CName
  LocomotionMode(): CName
  UpperBodyState(): CName
  StanceState(): CName
}

declare interface AIActionMovePolicy extends IScriptable {

  /** @noSelf **/
  GetTargetPositionProvider(owner: ScriptedPuppet, target: GameObject, trackingMode: gamedataTrackingMode): IPositionProvider
  /** @noSelf **/
  Add(context: ScriptExecutionContext, record: MovementPolicy_Record, policy: MovePolicies): void
  /** @noSelf **/
  CheckCondition(context: ScriptExecutionContext, condition: AIActionCondition_Record): Bool
  /** @noSelf **/
  Pop(context: ScriptExecutionContext, policy: MovePolicies): void
}

declare interface NavigationCostModCircle extends IScriptable {

}

declare interface DroneComponent extends ScriptableComponent {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttach(): void
  OnHighLevelStateDataEvent(evt: gameHighLevelStateDataEvent): Bool
  OnAIEvent(aiEvent: AIEvent): Bool
  ApplyPose(desiredPose: DronePose): void
  OnRagdollEnabledEvent(evt: RagdollNotifyEnabledEvent): Bool
  OnDefeated(evt: DefeatedEvent): Bool
  OnDeath(evt: gameDeathEvent): Bool
  RemoveSpawnGLPs(owner: NPCPuppet): void
  OnReenableCollider(evt: ReenableColliderEvent): Bool
  SendStaticDataToAnimgraph(): void
  OnApplyProceduralAnimFeatureEvent(evt: ApplyDroneProceduralAnimFeatureEvent): Bool
  OnApplyDroneLocomotionWrapperEvent(evt: ApplyDroneLocomotionWrapperEvent): Bool
  ApplyLocomotionWrappers(movementType: CName): void
  /** @noSelf **/
  SetLocomotionWrappers(owner: ScriptedPuppet, movementType: CName): void
}

declare interface AnimFeature_DroneProcedural extends AnimFeature {

}

declare interface ApplyDroneProceduralAnimFeatureEvent extends Event {

}

declare interface ApplyDroneLocomotionWrapperEvent extends Event {

}

declare interface AnimFeature_DroneStateAnimationData extends AnimFeature {

}

declare interface ReenableColliderEvent extends Event {

}

declare interface MovementPolicyTagList_Record extends TweakDBRecord {

  Condition(): AIActionCondition_Record
  Tags(): CName[]
  GetTagsCount(): number
  GetTagsItem(index: number): CName
  TagsContains(item: CName): Bool
}

declare interface AnimFeature_AIAction extends AnimFeature {

}

declare interface AIActionAnimDirection_Record extends TweakDBRecord {

  Target(): AIActionTarget_Record
  DirectionAngle(): number
}

declare interface AIActionSlideData_Record extends TweakDBRecord {

  Target(): AIActionTarget_Record
  OffsetAroundTarget(): number
  FinalRotationAngle(): number
  PositionSpeed(): number
  Distance(): number
  DirectionAngle(): number
  OffsetToTarget(): number
  SlideStartDelay(): number
  RotationSpeed(): number
  Duration(): number
  PositionPredictionTime(): number
  ZAlignmentCollisionThreshold(): number
  UsePositionSlide(): Bool
  DisablePositionSlideAgainstNpc(): Bool
  OverrideOffsetToTargetFromWeapon(): Bool
  UseRotationSlide(): Bool
}

declare interface AnimFeature_WeaponOverride extends AnimFeature {

}

declare interface TweakAIAction extends TweakAIActionAbstract {

  GetActionRecord(context: ScriptExecutionContext, actionDebugName: string, actionRecord: AIAction_Record, shouldCallAgain: Bool): Bool
  GetFriendlyName(): string
}

declare interface TweakAIActionCondition extends TweakAIActionConditionAbstract {

  GetActionRecord(context: ScriptExecutionContext, actionDebugName: string, actionRecord: AIAction_Record): Bool
  GetFriendlyName(): string
}

declare interface TweakAIActionSelector extends TweakAIActionAbstract {

  GetActionRecord(context: ScriptExecutionContext, actionDebugName: string, actionRecord: AIAction_Record, shouldCallAgain: Bool): Bool
  GetFriendlyName(): string
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
  RunNextAction(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface TweakAIActionSequence extends TweakAIActionAbstract {

  GetActionRecord(context: ScriptExecutionContext, actionDebugName: string, actionRecord: AIAction_Record, shouldCallAgain: Bool): Bool
  GetFriendlyName(): string
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
  ResetSequence(): void
  RunNextAction(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface TweakAIActionSmartComposite extends TweakAIActionAbstract {

  ResetComposite(): void
  GetSmartCompositeRecord(context: ScriptExecutionContext, smartCompositeID: TweakDBID, smartCompositeStringName: string, smartCompositeRecord: AIActionSmartComposite_Record): Bool
  GetActionRecord(context: ScriptExecutionContext, actionDebugName: string, actionRecord: AIAction_Record, shouldCallAgain: Bool): Bool
  RandomizeGracefulInterruptionConditionCheckInterval(): void
  GetFriendlyName(): string
  CheckGracefulInterruptionConditions(context: ScriptExecutionContext): Bool
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
  RepeatComposite(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  RunNextNode(context: ScriptExecutionContext): Bool
  RunCurrentNodeNextAction(context: ScriptExecutionContext): Bool
  ResetNodeIterator(): void
  IncrementNodeIterator(): void
}

declare interface IdleActionsCondition extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
  GetFriendlyName(): string
}

declare interface IdleActions extends TweakAIActionSmartComposite {

  GetSmartCompositeRecord(context: ScriptExecutionContext, smartCompositeID: TweakDBID, smartCompositeDebugName: string, smartCompositeRecord: AIActionSmartComposite_Record): Bool
  GetFriendlyName(): string
}

declare interface PatrolAction extends TweakAIActionSmartComposite {

  GetSmartCompositeRecord(context: ScriptExecutionContext, smartCompositeID: TweakDBID, smartCompositeDebugName: string, smartCompositeRecord: AIActionSmartComposite_Record): Bool
  GetFriendlyName(): string
}

declare interface AIPatrolDef extends AIBlackboardDef {

}

declare interface PatrolSpotAction extends TweakAIActionSmartComposite {

  GetSmartCompositeRecord(context: ScriptExecutionContext, smartCompositeID: TweakDBID, smartCompositeDebugName: string, smartCompositeRecord: AIActionSmartComposite_Record): Bool
  GetFriendlyName(): string
}

declare interface AIDelegateAttrRef {

}

declare interface AIDelegateTaskRef {

}

declare interface TestBehaviorDelegate extends ScriptBehaviorDelegate {

  GetGetterValue(): CName
  GetSomethingElse(): NodeRef
  IsSomething(): Bool
  TestTask(context: ScriptExecutionContext): void
  TaskFoo(context: ScriptExecutionContext): void
  TaskBar(): Bool
}

declare interface TestBehaviorDelegateTask extends AIbehaviortaskScript {

}

declare interface ActionWeightCondition extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface ActionWeightManagerDelegate extends ScriptBehaviorDelegate {

  ProcessActionToPlay(context: ScriptExecutionContext): Bool
  WeightUpdate(): Bool
}

declare interface AICommandFactory extends IScriptable {

}

declare interface AICommandParams extends AICommandFactory {

}

declare interface MiscAICommandNodeParams extends AICommandParams {

}

declare interface ScriptedAICommandParams extends MiscAICommandNodeParams {

  CreateCommand(): AICommand
}

declare interface worldTrafficLaneRef {

}

declare interface AIMovementTypeSpec {

  /** @noSelf **/
  Resolve(spec: AIMovementTypeSpec, puppet: gamePuppet): moveMovementType
}

declare interface AIMoveToCommand extends AIMoveCommand {

}

declare interface AIMoveOnSplineCommand extends AIMoveCommand {

}

declare interface AIAnimMoveOnSplineCommand extends AIMoveCommand {

}

declare interface AIRotateToCommand extends AIMoveCommand {

}

declare interface AIPatrolCommand extends AIMoveCommand {

}

declare interface AIFollowTargetCommand extends AIMoveCommand {

}

declare interface AIRootMotionCommand extends AIMoveCommand {

}

declare interface AIAssignRestrictMovementAreaCommand extends AICommand {

}

declare interface vehiclePortalsList extends IScriptable {

}

declare interface AIVehicleOnSplineCommand extends AIVehicleCommand {

}

declare interface AIVehicleFollowCommand extends AIVehicleCommand {

}

declare interface AIVehicleToNodeCommand extends AIVehicleCommand {

}

declare interface AIVehicleRacingCommand extends AIVehicleCommand {

}

declare interface AIVehicleJoinTrafficCommand extends AIVehicleCommand {

}

declare interface SceneAnimationMotionActionParams extends IScriptable {

}

declare interface AITeleportCommand extends AICommand {

}

declare interface AIBaseUseWorkspotCommand extends AICommand {

}

declare interface AIUseWorkspotCommand extends AIBaseUseWorkspotCommand {

}

declare interface AIEquipCommand extends AICommand {

}

declare interface AIUnequipCommand extends AICommand {

}

declare interface AIAssignRoleCommandParams extends ScriptedAICommandParams {

  GetCommandName(): string
  CreateCommand(): AICommand
}

declare interface AIClearRoleCommandParams extends ScriptedAICommandParams {

  GetCommandName(): string
  CreateCommand(): AICommand
}

declare interface AINoRole extends AIRole {

}

declare interface AIUseCoverCommand extends AICombatRelatedCommand {

}

declare interface AISetCombatPresetCommand extends AICombatRelatedCommand {

}

declare interface AISetCombatPresetCommandParams extends ScriptedAICommandParams {

  GetCommandName(): string
  CreateCommand(): AICommand
}

declare interface AIInjectCombatThreatCommandParams extends ScriptedAICommandParams {

  GetCommandName(): string
  CreateCommand(): AICommand
}

declare interface AIMeleeAttackCommandParams extends ScriptedAICommandParams {

  GetCommandName(): string
  CreateCommand(): AICommand
}

declare interface AIInjectCombatTargetCommand extends AICombatRelatedCommand {

}

declare interface AIInjectLookatTargetCommand extends AICombatRelatedCommand {

}

declare interface AIThrowGrenadeCommand extends AICombatRelatedCommand {

}

declare interface AIShootCommand extends AICombatRelatedCommand {

}

declare interface AIForceShootCommandParams extends ScriptedAICommandParams {

  GetCommandName(): string
  CreateCommand(): AICommand
}

declare interface AIAimAtTargetCommand extends AICommand {

}

declare interface AIAimAtTargetCommandParams extends ScriptedAICommandParams {

  GetCommandName(): string
  CreateCommand(): AICommand
}

declare interface AISwitchToPrimaryWeaponCommand extends AICommand {

}

declare interface AISwitchToSecondaryWeaponCommand extends AICommand {

}

declare interface AIHoldPositionCommand extends AIMoveCommand {

}

declare interface AIHoldPositionCommandParams extends ScriptedAICommandParams {

  GetCommandName(): string
  CreateCommand(): AICommand
}

declare interface AIMoveToCoverCommand extends AIMoveCommand {

}

declare interface AIMoveToCoverCommandParams extends ScriptedAICommandParams {

  GetCommandName(): string
  CreateCommand(): AICommand
}

declare interface AIStopCoverCommand extends AICommand {

}

declare interface AIStopCoverCommandParams extends ScriptedAICommandParams {

  GetCommandName(): string
  CreateCommand(): AICommand
}

declare interface AIJoinTargetsSquad extends AICommand {

}

declare interface AIJoinTargetsSquadCommandParams extends ScriptedAICommandParams {

  GetCommandName(): string
  CreateCommand(): AICommand
}

declare interface AIFollowerCombatCommand extends AIFollowerCommand {

}

declare interface AIFollowerTakedownCommandParams extends ScriptedAICommandParams {

  GetCommandName(): string
  CreateCommand(): AICommand
}

declare interface AIFlatheadSetSoloModeCommand extends AIFollowerCommand {

}

declare interface AIFlatheadSetSoloModeCommandParams extends ScriptedAICommandParams {

  GetCommandName(): string
  CreateCommand(): AICommand
}

declare interface AIScanTargetCommand extends AICommand {

}

declare interface AIScanTargetCommandParams extends ScriptedAICommandParams {

  GetCommandName(): string
  CreateCommand(): AICommand
}

declare interface AIbehaviortaskStackScript extends AIBehaviorScriptBase {

  GetInstanceTypeName(): CName
}

declare interface TestStackScriptData {

}

declare interface TestStackScript extends AIbehaviortaskStackScript {

  GetInstanceTypeName(): CName
  OnActivate(context: ScriptExecutionContext, data: TestStackScriptData): void
  OnDeactivate(context: ScriptExecutionContext, data: TestStackScriptData): void
  OnUpdate(context: ScriptExecutionContext, data: TestStackScriptData): AIbehaviorUpdateOutcome
  GetDescription(data: TestStackScriptData): string
}

declare interface AIbehaviorPassiveExpressionDefinition extends IScriptable {

}

declare interface AIbehaviorStackScriptPassiveExpressionDefinition extends AIbehaviorPassiveExpressionDefinition {

  MarkDirty(context: ScriptExecutionContext): void
  AddToUpdateQueue(context: ScriptExecutionContext): Bool
  RemoveFromUpdateQueue(context: ScriptExecutionContext): Bool
  AddBehaviorCallback(context: ScriptExecutionContext, callbackName: CName): number
  RemoveBehaviorCallback(context: ScriptExecutionContext, callbackId: number): Bool
  ListenToSignal(context: ScriptExecutionContext, signalName: CName): number
  StopListeningToSignal(context: ScriptExecutionContext, signalId: number): Bool
}

declare interface TestStackPassiveExpression extends AIbehaviorStackScriptPassiveExpressionDefinition {

  CalculateValue(context: ScriptExecutionContext, data: TestStackScriptData): Variant
}

declare interface AIBehaviorScript extends IScriptable {

  GetPuppet(context: ScriptExecutionContext): ScriptedPuppet
  GetGame(context: ScriptExecutionContext): GameInstance
}

declare interface AIArgumentMapping extends IScriptable {

  GetArgumentType(): AIArgumentType
  GetParameterizationType(): AIParameterizationType
  GetArgumentName(): CName
}

declare interface AttitudeGroupChangedEvent extends Event {

}

declare interface AIBehaviorCallbackExpression extends AIbehaviorexpressionScript {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
  CalculateValue(context: ScriptExecutionContext): Variant
  OnBehaviorCallback(cbName: CName, context: ScriptExecutionContext): Bool
}

declare interface RagdollRequestCollectAnimPoseEvent extends Event {

}

declare interface RagdollNotifyEnabledEvent extends Event {

}

declare interface RagdollNotifyDisabledEvent extends Event {

}

declare interface AnimatedRagdollNotifyEnabledEvent extends Event {

}

declare interface AnimatedRagdollNotifyDisabledEvent extends Event {

}

declare interface RagdollNotifyVelocityTresholdEvent extends Event {

}

declare interface RagdollPutToSleepEvent extends Event {

}

declare interface DisableRagdollComponentEvent extends Event {

}

declare interface AnimFeature_WeaponData extends AnimFeature {

  SetCycleTime(cycleTime: number): void
  SetChargePercentage(chargePercentage: number): void
  SetTimeInMaxCharge(timeInMaxCharge: number): void
  SetAmmoRemaining(ammoRemaining: number): void
  SetTriggerMode(triggerMode: gamedataTriggerMode): void
  SetMagazineFull(magazineFull: Bool): void
  SetTriggerDown(triggerDown: Bool): void
}

declare interface AnimFeature_NPCCoverStanceState extends AnimFeature_NPCState {

}

declare interface AnimFeature_CoverAction extends AnimFeature_AIAction {

}

declare interface AnimFeature_ExitCover extends AnimFeature_AIAction {

}

declare interface AnimFeature_EquipType extends AnimFeature {

}

declare interface AnimFeature_LoopableAction extends AnimFeature {

  SetLoopDuration(loopDuration: number): void
  SetNumLoops(numLoops: number): void
  SetActive(isActive: Bool): void
}

declare interface AnimFeature_Aim extends AnimFeature_BasicAim {

  Aim(aimPoint: Vector4): void
}

declare interface AnimFeature_Stance extends AnimFeature {

  SetStanceState(stanceState: animStanceState): void
}

declare interface BlackboardChangedEvent extends Event {

  GetDefinition(): BlackboardDefinition
  GetID(): BlackboardID
}

declare interface AnimFeature_MoveTo extends AnimFeature {

  MoveTo(targetPosition: Vector4, targetYawRotation: number, timeToMove: number): void
  MoveToWithDir(targetPosition: Vector4, targetYawRotation: Vector4, timeToMove: number): void
}

declare interface AnimFeature_Movement extends AnimFeature {

  SetSpeed(speed: number): void
}

declare interface AnimFeature_PlayerMovement extends AnimFeature_Movement {

  SetVerticalSpeed(verticalSpeed: number): void
  SetFacingDirection(facingDirection: Vector4): void
  SetMovementDirection(movementDirection: Vector4, forwardVector: Vector4): void
}

declare interface AnimFeature_LadderEnterStyleData extends AnimFeature {

}

declare interface AnimFeature_Cover extends AnimFeature {

  SetCoverState(coverState: animCoverState): void
  SetCoverAction(coverAction: animCoverAction): void
  SetCoverAngleToAction(angleToAction: number): void
  SetCoverPosition(position: Vector4): void
  SetCoverDirection(direction: Vector4): void
}

declare interface MeshParam_Weakspot extends AnimFeature {

}

declare interface AnimFeature_RotatingObject extends AnimFeature {

}

declare interface AnimFeature_FPPCamera extends AnimFeature {

  SetDeltaYaw(deltaYaw: number): void
  SetDeltaPitch(deltaPitch: number): void
  SetYawSpeed(yawSpeed: number): void
  SetPitchSpeed(pitchSpeed: number): void
}

declare interface AnimFeature_PlayerStateMachineState extends AnimFeature {

  SetActive(active: number): void
}

declare interface AnimFeature_IconicItem extends AnimFeature {

}

declare interface AnimFeature_CoverState extends AnimFeature {

}

declare interface AnimFeature_DelayEntry extends AnimFeature {

}

declare interface AnimFeature_PlayerCoverActionState extends AnimFeature {

}

declare interface AnimFeature_PlayerPeekScale extends AnimFeature {

}

declare interface AnimFeature_AnimatedDevice extends AnimFeature {

}

declare interface AnimFeature_IndustrialArm extends AnimFeature {

}

declare interface AnimFeature_DoorDevice extends AnimFeature {

}

declare interface AnimFeature_Container extends AnimFeature {

}

declare interface AnimFeature_ForkliftDevice extends AnimFeature {

}

declare interface AnimFeature_SceneSystem extends AnimFeature {

}

declare interface AnimFeature_SceneSystemCarrying extends AnimFeature {

}

declare interface AnimFeature_SelectRandomAnimSync extends AnimFeature {

}

declare interface AnimFeature_TriggerModeChange extends AnimFeature {

}

declare interface AnimFeature_MeleeSlotData extends AnimFeature {

}

declare interface AnimFeature_MeleeIKData extends AnimFeature {

}

declare interface AnimFeature_MeleeAttack extends AnimFeature {

}

declare interface AnimFeature_QuickMelee extends AnimFeature {

}

declare interface AnimFeature_Whip extends AnimFeature {

}

declare interface AnimFeature_AirHover extends AnimFeature {

}

declare interface AnimFeature_SuperheroLand extends AnimFeature {

}

declare interface AnimFeature_HoverJumpData extends AnimFeature {

}

declare interface AnimFeature_SwimmingData extends AnimFeature {

}

declare interface AnimFeature_AirThrusterData extends AnimFeature {

}

declare interface AnimFeature_VehicleNPCDeathData extends AnimFeature {

}

declare interface AnimFeature_LookAt extends AnimFeature {

}

declare interface AnimFeature_ProceduralIronsightData extends AnimFeature {

}

declare interface AnimFeature_DodgeData extends AnimFeature {

}

declare interface AnimFeature_Carry extends AnimFeature {

}

declare interface AnimFeature_PreClimbing extends AnimFeature {

}

declare interface AnimFeature_SafeAction extends AnimFeature {

}

declare interface AnimFeatureShieldState extends AnimFeatureCustom {

}

declare interface AnimFeature_StimReactions extends AnimFeature {

}

declare interface AnimFeature_ConsumableAnimation extends AnimFeature {

}

declare interface AnimFeature_Stamina extends AnimFeature {

}

declare interface AnimFeature_CombatState extends AnimFeature {

}

declare interface AnimFeature_AdHocAnimation extends AnimFeature {

}

declare interface AnimFeature_WeaponReload extends AnimFeature {

}

declare interface AnimFeature_CameraSceneMode extends AnimFeature {

}

declare interface AnimFeature_CameraBreathing extends AnimFeature {

}

declare interface AnimFeature_CameraRecoil extends AnimFeature {

}

declare interface AnimFeature_DeviceWorkspot extends AnimFeature {

}

declare interface AnimFeature_WeaponBlur extends AnimFeature {

}

declare interface AnimFeature_DroneActionAltitudeOffset extends AnimFeature {

}

declare interface AnimFeature_WeaponHandlingStats extends AnimFeature {

}

declare interface AnimFeature_WeaponReloadSpeedData extends AnimFeature {

}

declare interface AnimFeature_PhotomodeFacial extends AnimFeature {

}

declare interface AnimFeature_Reprimand extends AnimFeature {

}

declare interface BlackboardID_Bool extends BlackboardID {

}

declare interface BlackboardID_Int extends BlackboardID {

}

declare interface BlackboardID_Uint extends BlackboardID {

}

declare interface BlackboardID_Float extends BlackboardID {

}

declare interface BlackboardID_Name extends BlackboardID {

}

declare interface BlackboardID_Vector2 extends BlackboardID {

}

declare interface BlackboardID_Vector4 extends BlackboardID {

}

declare interface BlackboardID_Quat extends BlackboardID {

}

declare interface BlackboardID_Entity extends BlackboardID {

}

declare interface BlackboardID_String extends BlackboardID {

}

declare interface BlackboardID_EulerAngles extends BlackboardID {

}

declare interface BlackboardID_EntityID extends BlackboardID {

}

declare interface BlackboardID_Variant extends BlackboardID {

}

declare interface SpreadMapItem {

}

declare interface HackingDataDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
  /** @noSelf **/
  AddItemToSpreadMap(player: PlayerPuppet, key: InteractionBase_Record, count: number, range: number): Bool
  /** @noSelf **/
  GetValuesFromSpreadMap(player: PlayerPuppet, key: InteractionBase_Record, count: number, range: number): Bool
  /** @noSelf **/
  DecrementCountFromSpreadMap(player: PlayerPuppet, key: InteractionBase_Record): Bool
}

declare interface AISquadBlackBoardDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface DeviceDebugDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface ISkinableComponent extends IPlacedComponent {

}

declare interface AnimatedComponent extends ISkinableComponent {

}

declare interface LocalPlayerDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface UIWorldBoundariesDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface AIFollowSlotDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface MinesDataDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface CoverActionDataDef extends BlackboardDefinition {

}

declare interface UI_HUDButtonHintDef extends BlackboardDefinition {

}

declare interface BackDoorDeviceBlackboardDef extends MasterDeviceBaseBlackboardDef {

}

declare interface ArcadeMachineBlackboardDef extends DeviceBaseBlackboardDef {

}

declare interface ConfessionalBlackboardDef extends DeviceBaseBlackboardDef {

}

declare interface JukeboxBlackboardDef extends DeviceBaseBlackboardDef {

}

declare interface NcartTimetableBlackboardDef extends DeviceBaseBlackboardDef {

}

declare interface IntercomBlackboardDef extends DeviceBaseBlackboardDef {

}

declare interface DataTermDeviceBlackboardDef extends DeviceBaseBlackboardDef {

}

declare interface InteractiveDeviceBlackboardDef extends DeviceBaseBlackboardDef {

}

declare interface UI_HUDSignalProgressBarDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface UI_NPCNextToTheCrosshairDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface UI_FastForwardDef extends BlackboardDefinition {

}

declare interface VendorRegisterBlackBoardDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface UI_CompassInfoDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface BinkVideoSummary {

}

declare interface CustomCentaurBlackboardDef extends CustomBlackboardDef {

  AutoCreateInSystem(): Bool
}

declare interface UI_CustomQuestNotificationDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface UI_HudTooltipDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface UI_CpoCharacterSelectionDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface AIAlertedPatrolDef extends AIBlackboardDef {

}

declare interface UI_ActivityLogDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface InCrowd extends Event {

}

declare interface OutOfCrowd extends Event {

}

declare interface OnPavement extends Event {

}

declare interface OffPavement extends Event {

}

declare interface AIActionBossDataDef extends AIBlackboardDef {

  AutoCreateInSystem(): Bool
}

declare interface UI_CodexSystemDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface gameDoorComponent extends IComponent {

  IsInteractible(): Bool
  IsAutomatic(): Bool
  IsPhysical(): Bool
  IsOpen(): Bool
  IsLocked(): Bool
  IsSealed(): Bool
  IsOffline(): Bool
  GetOpeningSpeed(): number
  SetOpen(newVal: Bool): Bool
  SetLocked(newVal: Bool): Bool
  SetSealed(newVal: Bool): Bool
  SetOffline(newVal: Bool): Bool
  ToggleOpen(): void
}

declare interface QuickMeleeDataDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface PlayerSecureAreaDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface EntityStubComponent extends GameComponent {

}

declare interface UI_BriefingDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface EthnicityComponent extends IComponent {

}

declare interface CW_MuteArmDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface UI_ChatBoxDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface UI_HUDNarrationLogDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface UI_NarrativePlateDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface UI_HackingDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface UI_TopbarHubMenuDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface MountableComponent extends IComponent {

  /** @noSelf **/
  IsInteractionAcceptable(choiceEvent: InteractionChoiceEvent): Bool
}

declare interface InteractionMountBase_Record extends InteractionBase_Record {

  VehicleMountSlot(): CName
  Tag(): CName
}

declare interface UI_SceneScreenDef extends BlackboardDefinition {

  AutoCreateInSystem(): Bool
}

declare interface gameNavmeshDetector extends IPlacedComponent {

  OnNavmeshStateChanged(onNavmesh: Bool, navmeshDistance: number, overlapGeometry: Bool): void
}

declare interface gamePuppetMountableComponent extends MountableComponent {

  OnInteractionChoice(choiceEvent: InteractionChoiceEvent): Bool
}

declare interface gamevehicleVehicleMountableComponent extends MountableComponent {

  OnInteractionChoice(choiceEvent: InteractionChoiceEvent): Bool
  OnActionDemolition(evt: ActionDemolition): Bool
  OnActionEngineering(evt: ActionEngineering): Bool
  MountEntityToSlot(parentID: EntityID, childId: EntityID, slot: CName): void
}

declare interface InfluenceObstacleComponent extends IPlacedComponent {

  GetBoundingBox(): Box
  SetBoundingBox(boundingBox: Box): void
}

declare interface HitRepresentation_SetSingleScaleMultiplier_AllShapes extends Event {

}

declare interface HitRepresentation_SetSingleScaleMultiplier_SingleShape extends HitRepresentation_SetSingleScaleMultiplier_AllShapes {

}

declare interface HitRepresentation_SetSingleScaleMultiplier_MultipleShapes extends HitRepresentation_SetSingleScaleMultiplier_AllShapes {

}

declare interface InteractionSetChoicesEvent extends Event {

}

declare interface HitRepresentation_SetMultipleScaleMultipliers_MultipleShapes extends Event {

}

declare interface HitRepresentation_ResetSingleScaleMultiplier extends Event {

}

declare interface HitRepresentation_ResetMultipleScaleMultipliers extends Event {

}

declare interface HitRepresentation_ResetAllScaleMultipliers extends Event {

}

declare interface HitData_Humanoid extends HitData_Base {

}

declare interface AISubActionPlayVoiceOver_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionPlayVoiceOver_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionPlayVoiceOver_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionPlayVoiceOver_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  IsSquadmateConditionFulfilled(context: ScriptExecutionContext, record: AISubActionPlayVoiceOver_Record): Bool
  /** @noSelf **/
  IsCooldownConditionFulfilled(context: ScriptExecutionContext, record: AISubActionPlayVoiceOver_Record): Bool
  /** @noSelf **/
  IsConditionFulfilled(context: ScriptExecutionContext, record: AISubActionPlayVoiceOver_Record): Bool
  /** @noSelf **/
  SendVoiceOverEvent(context: ScriptExecutionContext, record: AISubActionPlayVoiceOver_Record, debugInitContext: CName): void
  /** @noSelf **/
  IsDelayConditionFulfilled(context: ScriptExecutionContext, record: AISubActionPlayVoiceOver_Record, duration: number): Bool
}

declare interface AISubActionPlayVoiceOver_Record extends AISubAction_Record {

  Condition(): AIActionCondition_Record
  Cooldown(): AIActionCooldown_Record
  Name(): CName
  Delay(): number
  SendEventToSquadmates(): Bool
  SetSelfAsAnsweringEntity(): Bool
  Repeat(): Bool
}

declare interface InventoryScriptListener extends InventoryListener {

}

declare interface OnLootEvent extends Event {

}

declare interface OnLootAllEvent extends Event {

}

declare interface AISubActionDisableCollider_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionDisableCollider_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionDisableCollider_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionDisableCollider_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  IsDelayConditionFulfilled(context: ScriptExecutionContext, record: AISubActionDisableCollider_Record, duration: number): Bool
}

declare interface AISubActionDisableCollider_Record extends AISubAction_Record {

  Delay(): number
  Disable(): Bool
  EnableOnDeactivate(): Bool
}

declare interface AISubActionAddFact_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionAddFact_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionAddFact_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionAddFact_Record, duration: number, interrupted: Bool): void
}

declare interface AISubActionAddFact_Record extends AISubAction_Record {

  Name(): CName
  Delay(): number
  ResetValue(): Bool
}

declare interface gameItemDropObject extends gameLootObject {

  GetItemEntityID(): EntityID
  GetItemObject(): ItemObject
  OnItemEntitySpawned(entID: EntityID): void
  OnGameAttached(): Bool
  OnInteractionActivated(choiceEvent: InteractionEvent): Bool
  IsEmpty(): Bool
  ShouldRegisterToHUD(): Bool
  OnHUDInstruction(evt: HUDInstruction): Bool
  OnItemRemovedEvent(evt: ItemBeingRemovedEvent): Bool
  OnItemAddedEvent(evt: ItemAddedEvent): Bool
  EvaluateLootQualityEvent(target: EntityID): void
}

declare interface ItemLootedEvent extends Event {

}

declare interface AISubActionQueueAIEvent_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionQueueAIEvent_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionQueueAIEvent_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionQueueAIEvent_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  QueueAIEvent(context: ScriptExecutionContext, record: AISubActionQueueAIEvent_Record): void
}

declare interface AISubActionQueueAIEvent_Record extends AISubAction_Record {

  Name(): CName
  Delay(): number
}

declare interface UILootedItemEvent extends Event {

}

declare interface ResolveQualityRangeInteractionLayerEvent extends Event {

}

declare interface AISubActionQueueCommunicationEvent_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionQueueCommunicationEvent_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionQueueCommunicationEvent_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionQueueCommunicationEvent_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  QueueCommunicationEvent(context: ScriptExecutionContext, record: AISubActionQueueCommunicationEvent_Record): void
}

declare interface AISubActionQueueCommunicationEvent_Record extends AISubAction_Record {

  TargetListener(): AIActionTarget_Record
  Name(): CName
  Delay(): number
}

declare interface AISubActionSpawnFX_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionSpawnFX_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionSpawnFX_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionSpawnFX_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  SpawnFX(context: ScriptExecutionContext, record: AISubActionSpawnFX_Record): void
  /** @noSelf **/
  DespawnFX(context: ScriptExecutionContext, record: AISubActionSpawnFX_Record): void
}

declare interface AISubActionSpawnFX_Record extends AISubAction_Record {

  AttachmentSlot(): AttachmentSlot_Record
  Name(): CName
  Delay(): number
}

declare interface PhysicalDestructionComponent extends IVisualComponent {

  IsFractured(): Bool
}

declare interface PhysicalDestructionEvent extends Event {

}

declare interface ExplorationEnteredEvent extends Event {

}

declare interface ExplorationLeftEvent extends Event {

}

declare interface ExitedSplineEvent extends Event {

}

declare interface AISubActionPlaySound_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionPlaySound_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionPlaySound_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionPlaySound_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  PlaySound(context: ScriptExecutionContext, record: AISubActionPlaySound_Record): void
}

declare interface AISubActionPlaySound_Record extends AISubAction_Record {

  AttachmentSlot(): AttachmentSlot_Record
  Name(): CName
  Delay(): number
}

declare interface AISubActionSetEquipWeaponsUtils extends IScriptable {

  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionCharacterRecordEquip_Record, itemsToEquip: NPCItemToEquip[], duration: number): AIbehaviorUpdateOutcome
}

declare interface gamePlayerControlledComponent extends IComponent {

}

declare interface gamestateMachineComponent extends gamePlayerControlledComponent {

  AddStateMachine(stateMachineName: CName, instanceData: StateMachineInstanceData, owner: Entity, tryHotSwap?: Bool): void
  RemoveStateMachine(stateMachineIdentifier: StateMachineIdentifier): void
  IsStateMachinePresent(stateMachineIdentifier: StateMachineIdentifier): Bool
  GetSnapshotContainer(): StateSnapshotsContainer
  OnStartTakedownEvent(startTakedownEvent: StartTakedownEvent): Bool
  OnRipOff(evt: RipOff): Bool
  OnStartMountingEvent(mountingEvent: MountingEvent): Bool
  OnStartUnmountingEvent(unmountingEvent: UnmountingEvent): Bool
  MountFromParent(mountingEvent: MountingEvent, ownerEntity: Entity): void
  MountAsChild(mountingEvent: MountingEvent, ownerEntity: Entity): void
  UnmountFromParent(unmountingEvent: UnmountingEvent, ownerEntity: Entity): void
  UnmountChild(unmountingEvent: UnmountingEvent, ownerEntity: Entity): void
}

declare interface StateMachineInstanceData {

}

declare interface TurretInitData extends IScriptable {

}

declare interface MountingRelationship {

}

declare interface VehicleTransitionInitData extends IScriptable {

}

declare interface CarriedObjectData extends IScriptable {

}

declare interface AISubActionSetEquipPrimaryWeapons_Record_Implementation extends IScriptable {

  /** @noSelf **/
  GetItemsToEquip(context: ScriptExecutionContext, record: AISubActionCharacterRecordEquip_Record, itemsToEquip: NPCItemToEquip[]): Bool
  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionSetEquipPrimaryWeapons_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionSetEquipPrimaryWeapons_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionSetEquipPrimaryWeapons_Record, duration: number, interrupted: Bool): void
}

declare interface gameContainerObjectBasePS extends gameLootContainerBasePS {

}

declare interface AISubActionSetEquipSecondaryWeapons_Record_Implementation extends IScriptable {

  /** @noSelf **/
  GetItemsToEquip(context: ScriptExecutionContext, record: AISubActionCharacterRecordEquip_Record, itemsToEquip: NPCItemToEquip[]): Bool
  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionSetEquipSecondaryWeapons_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionSetEquipSecondaryWeapons_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionSetEquipSecondaryWeapons_Record, duration: number, interrupted: Bool): void
}

declare interface ContainerObjectSingleItemPS extends gameLootContainerBasePS {

}

declare interface LootContainerObjectAnimatedByTransformPS extends gameLootContainerBasePS {

}

declare interface AISubActionEquipOnSlot_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionEquipOnSlot_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionEquipOnSlot_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionEquipOnSlot_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  ApplyAnimFeature(context: ScriptExecutionContext, itemsToEquip: NPCItemToEquip[], sendAnimFeature: Bool): void
  /** @noSelf **/
  Equip(context: ScriptExecutionContext, itemsToEquip: NPCItemToEquip[]): Bool
}

declare interface AISubActionEquipOnSlot_Record extends AISubActionCharacterRecordEquip_Record {

  UseItemSpawnDelayFromWeapon(): Bool
}

declare interface LootContainerObjectAnimatedByTransform extends gameContainerObjectBase {

  OnInteraction(choiceEvent: InteractionChoiceEvent): Bool
}

declare interface FollowTrajectoryParams extends gameprojectileTrajectoryParams {

}

declare interface SpiralControllerParams extends IScriptable {

}

declare interface SlideTrajectoryParams extends gameprojectileTrajectoryParams {

}

declare interface ProjectileSpawnComponent extends IPlacedComponent {

  Spawn(templateID: number): void
}

declare interface AppearanceRandomizerComponent extends ScriptableComponent {

  OnGameAttach(): void
  ApplyAppearance(appearance: CName): void
  PickAppearance(): CName
}

declare interface AVComponent extends VehicleComponent {

}

declare interface BossStealthComponent extends ScriptableComponent {

  OnGameAttach(): void
  OnStatusEffectApplied(evt: ApplyStatusEffectEvent): Bool
  OnNonStealthQuickHackVictimEvent(evt: NonStealthQuickHackVictimEvent): Bool
}

declare interface EnableColliderDelayEvent extends DelayEvent {

}

declare interface CarComponent extends VehicleComponent {

}

declare interface EffectExecutor_GameObjectOutline extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface EffectExecutionScriptContext {

  /** @noSelf **/
  GetTimeDelta(applierCtx: EffectExecutionScriptContext): number
  /** @noSelf **/
  GetTarget(applierCtx: EffectExecutionScriptContext): Entity
  /** @noSelf **/
  GetTargetNode(applierCtx: EffectExecutionScriptContext): GlobalNodeID
  /** @noSelf **/
  GetHitPosition(applierCtx: EffectExecutionScriptContext): Vector4
  /** @noSelf **/
  GetHitNormal(applierCtx: EffectExecutionScriptContext): Vector4
  /** @noSelf **/
  GetHitThroughTechSurface(applierCtx: EffectExecutionScriptContext): Bool
}

declare interface AdamSmasherHealthChangeListener extends CustomValueStatPoolsListener {

  OnStatPoolValueChanged(oldValue: number, newValue: number, percToPoints: number): void
  CheckPhase(oldValue: number, newValue: number, percToPoints: number): void
  ApplySmashed(): void
  ApplyPhase2(): void
  ApplyPhase3(): void
  ApplyEmergency(): void
  RemoveEmergency(): void
  EnableTorsoWeakspot(): void
  DisableTorsoWeakspot(): void
  EnableHeadWeakspot(): void
  DisableRightArm(): void
  DisableFrontPlate(): void
  EnableLauncherWeakspot(): void
  DisableLauncherWeakspot(): void
  DestroyWeakspotGenerator(): void
}

declare interface AdamSmasherComponent extends ScriptableComponent {

  OnGameAttach(): void
  OnEnableColliderDelayEvent(enableColliderEvent: EnableColliderDelayEvent): Bool
  OnDeathAfterDefeatedSmasher(evt: gameDeathEvent): Bool
  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ApplySmashed(): void
  DisableFrontPlate(): void
  EnableTorsoWeakspot(): void
  /** @noSelf **/
  GetRemovePlateHealthValue(): number
  /** @noSelf **/
  GetPhase2HealthValue(): number
  /** @noSelf **/
  GetEmergencyPhaseHealthValue(): number
  /** @noSelf **/
  GetPhase3HealthValue(): number
  SetPercentLifeForPhase(value: number): void
  EnableRipInteractionLayer(): void
  DisableRipInteractionLayer(): void
  DisableWeakspots(): void
  DisableAllHitShapes(): void
  DisableAllDefeatedHitShapes(): void
  EnableDefeatedHitShapes(): void
  OnDeactivate(): void
  OnDisableWeakspotDelayedEvent(evt: DisableWeakspotDelayedEvent): Bool
  OnStatusEffectApplied(evt: ApplyStatusEffectEvent): Bool
  ApplyNoInterrupt(): void
  SetHealth(target: NPCPuppet, valueToSet: number): void
  OnAudioEvent(evt: AudioEvent): Bool
}

declare interface DisableWeakspotDelayedEvent extends DelayEvent {

}

declare interface ScriptedWeakspotObject extends WeakspotObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  WeakspotInitialized(): void
  IsDead(): Bool
  GetWeakspotRecordData(): WeakspotRecordData
  ReadTweakData(): void
  OnInteractionChoice(evt: InteractionChoiceEvent): Bool
  OnScanninOwner(evt: ScanningLookAtEvent): Bool
  OnWeakspotPinged(evt: RevealStateChangedEvent): Bool
  OnWeakspotDestroy(evt: WeakspotDestroyedEvent): Bool
  OnWeakspotDestroyDelay(evt: DestroyWeakspotDelayedEvent): Bool
  ResolveWeakspotOnLoad(): void
  DestroyWeakspot(instigator?: GameObject): void
  DestroyWeakspotOnLoad(instigator?: GameObject): void
  SendHideMeshParameterValue(parameterName: CName): void
  /** @noSelf **/
  Kill(weakspot: GameObject, instigator?: GameObject): void
  ChangeAppearance(appName: CName): void
  DisableCollider(): void
  SendAIActionAnimFeature(animFeatureName: CName, value: number): void
  FireAttack(): void
  SetHighlight(): void
  UnSetHighlight(): void
  ProcessDamagePipeline(evt: gameHitEvent): void
  OnHit(evt: gameHitEvent): Bool
}

declare interface WeakspotOnDestroyProperties {

}

declare interface WeakspotOnDestroyEvent extends Event {

}

declare interface WeakspotRecordData {

}

declare interface Weakspot_Record extends SpawnableObject_Record {

  SlotToAttach(): AttachmentSlot_Record
  OnDestroyedEffectors(outList: Effector_Record[]): void
  GetOnDestroyedEffectorsCount(): number
  GetOnDestroyedEffectorsItem(index: number): Effector_Record
  OnDestroyedEffectorsContains(item: Effector_Record): Bool
  ValidCharacterAppearances(): CName[]
  GetValidCharacterAppearancesCount(): number
  GetValidCharacterAppearancesItem(index: number): CName
  ValidCharacterAppearancesContains(item: CName): Bool
  GameplayTags(): CName[]
  GetGameplayTagsCount(): number
  GetGameplayTagsItem(index: number): CName
  GameplayTagsContains(item: CName): Bool
}

declare interface DestroyWeakspotDelayedEvent extends Event {

}

declare interface DetectorModuleComponent extends ScriptableComponent {

  OnSenseVisibilityEvent(evt: SenseVisibilityEvent): Bool
}

declare interface DiodeLightPreset {

}

declare interface DiodeControlComponent extends ScriptableComponent {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnDeath(evt: gameDeathEvent): Bool
  /** @noSelf **/
  ActivateLightPreset(owner: GameObject, lightPreset: LightPreset_Record, delay?: number): void
  OnApplyDiodeLightPresetEvent(evt: ApplyDiodeLightPresetEvent): Bool
  ApplyPrimaryPreset(preset: DiodeLightPreset, delay: number, force: Bool): void
  ApplySecondaryPreset(preset: DiodeLightPreset, delay: number, duration: number): void
  OnRemoveSecondaryDiodeLightPresetEvent(evt: RemoveSecondaryDiodeLightPresetEvent): Bool
  ApplyPreset(preset: DiodeLightPreset, delay?: number): void
  QueueLightSettings(colorValues: number[], strength: number, time: number, curve: CName, loop: Bool, delay: number): void
  OnChangeDiodeLightSettingsEvent(evt: ChangeDiodeLightSettingsEvent): Bool
  ChangeLightSettings(colorValues: number[], strength: number, time: number, curve: CName, loop: Bool): void
  ToggleDiodes(state: Bool): void
}

declare interface LightPreset_Record extends TweakDBRecord {

  ColorMin(): number[]
  GetColorMinCount(): number
  GetColorMinItem(index: number): number
  ColorMinContains(item: number): Bool
  ColorMax(): number[]
  GetColorMaxCount(): number
  GetColorMaxItem(index: number): number
  ColorMaxContains(item: number): Bool
  Curve(): CName
  Strength(): number
  Duration(): number
  Time(): number
  OverrideColorMin(): Bool
  On(): Bool
  Loop(): Bool
  Force(): Bool
}

declare interface ApplyDiodeLightPresetEvent extends Event {

}

declare interface ChangeDiodeLightSettingsEvent extends Event {

}

declare interface RemoveSecondaryDiodeLightPresetEvent extends Event {

}

declare interface DurabilityLimitReach extends Event {

}

declare interface DurabilityComponent extends ScriptableComponent {

}

declare interface EntityAttachementData {

}

declare interface EntityAttachementRequestEvent extends Event {

}

declare interface EntityAttachementComponentPS extends GameComponentPS {

  GetMyEntityID(): EntityID
  GetOwnerEntityWeak(): Entity
  GetPendingChildAttachementsData(): EntityAttachementData[]
  OnChildAttachementRequest(evt: EntityAttachementRequestEvent): EntityNotificationType
  AddPendingChildAttachementRequest(data: EntityAttachementData): void
  HasPendingChildAttachementRequest(data: EntityAttachementData): Bool
  ClearPendingChildAttachementRequests(): void
}

declare interface EntityAttachementComponent extends ScriptableComponent {

  OnGameAttach(): void
  GetMyPS(): EntityAttachementComponentPS
  RestoreAttachements(): void
  RestoreChildAttachements(): void
  GetParentAttachementData(): EntityAttachementData
  AttachToParent(data: EntityAttachementData): void
  AttachChild(data: EntityAttachementData): void
  OnChildAttachementRequest(evt: EntityAttachementRequestEvent): Bool
}

declare interface FastTravelComponent extends ScriptableComponent {

  OnGameAttach(): void
  OnGameDetach(): void
  GetFasttravelNodes(): FastTravelPointData[]
  GetFastTravelSystem(): FastTravelSystem
  PerformFastTravel(pointData: FastTravelPointData, player: GameObject): void
  OnRegisterFastTravelPoints(evt: RegisterFastTravelPointsEvent): Bool
  OnFastTravelAction(evt: FastTravelDeviceAction): Bool
}

declare interface FastTravelDeviceAction extends ActionBool {

  SetProperties(data: FastTravelPointData): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  CreateActionWidgetPackage(actions?: DeviceAction[]): void
  GetFastTravelPointData(): FastTravelPointData
}

declare interface FollowSlot extends IScriptable {

}

declare interface FollowSlotsComponent extends ScriptableComponent {

  OnGameAttach(): void
  GetClosestAvailableSlot(requester: GameObject): FollowSlot
  GetAllAvailableSlots(): number[]
  GetCurrentWorldPositionOfSlot(slot: FollowSlot): Vector4
  OnReceiveSlotRequest(evt: RequestSlotEvent): Bool
  OnSlotReleased(evt: ReleaseSlotEvent): Bool
}

declare interface RequestSlotEvent extends Event {

}

declare interface ReleaseSlotEvent extends Event {

}

declare interface NPCScanningDescription extends ObjectScanningDescription {

  GetGameplayDesription(): TweakDBID
  GetCustomDesriptions(): TweakDBID[]
}

declare interface RefreshClueScanningDataEvent extends Event {

}

declare interface ClearCustomObjectDescriptionEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface ClueScannedEvent extends Event {

}

declare interface InitializeFocusCluesEvent extends Event {

}

declare interface OnScannableBraindanceClueEnabledEvent extends Event {

}

declare interface OnScannableBraindanceClueDisabledEvent extends Event {

}

declare interface AISubActionEquipOnBody_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionEquipOnBody_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionEquipOnBody_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  GetItemsToEquip(context: ScriptExecutionContext, record: AISubActionCharacterRecordEquip_Record, itemsToEquip: NPCItemToEquip[]): Bool
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionEquipOnBody_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  EquipOnBody(context: ScriptExecutionContext, itemsToEquip: NPCItemToEquip[]): Bool
}

declare interface InspectItemInspectionEvent extends Event {

}

declare interface LootItemInspectionEvent extends Event {

}

declare interface ObjectInspectListener extends IInspectListener {

  OnInspect(type: questObjectInspectEventType): void
}

declare interface InspectListenerEvent extends Event {

}

declare interface InspectableObjectComponentPS extends GameComponentPS {

  IsState(state: questObjectInspectEventType): Bool
  OnRegisterListener(evt: InspectListenerEvent): EntityNotificationType
  OnSetState(evt: SetInspectStateEvent): EntityNotificationType
  SetStarted(): void
  SetFinished(): void
  NotifyListeners(state: questObjectInspectEventType): void
}

declare interface InspectableObjectComponent extends ScriptableComponent {

  GetPS(): InspectableObjectComponentPS
  InspectObject(activator: GameObject): void
  OnInspectEvent(evt: ObjectInspectEvent): Bool
  GiveInspectableItem(activator: GameObject): void
  OnInspectItem(evt: InspectItemInspectionEvent): Bool
  OnLootItem(evt: InspectItemInspectionEvent): Bool
  SetInspectableObjectState(b: Bool): void
}

declare interface InspectDummy extends GameObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnInteractionChoice(choice: InteractionChoiceEvent): Bool
}

declare interface ToggleMappinsOnLookAtEvent extends Event {

}

declare interface DeactivateQuickHackIndicatorEvent extends Event {

}

declare interface MinotaurOnStatusEffectAppliedListener extends ScriptStatusEffectListener {

  OnStatusEffectApplied(statusEffect: StatusEffect_Record): void
  DisableLeftArmMesh(): void
  DisableRightArmMesh(): void
}

declare interface MinotaurMechComponent extends ScriptableComponent {

  OnGameAttach(): void
  OnGameDetach(): void
  OnStatusEffectApplied(evt: ApplyStatusEffectEvent): Bool
  OnEnableColliderDelayEvent(enableColliderEvent: EnableColliderDelayEvent): Bool
  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnAudioEvent(evt: AudioEvent): Bool
  OnMinotaurDeath(evt: gameDeathEvent): Bool
  FireAttack(): void
}

declare interface MotorcycleComponent extends VehicleComponent {

  OnVehicleParkedEvent(evt: VehicleParkedEvent): Bool
  OnMountingEvent(evt: MountingEvent): Bool
  OnUnmountingEvent(evt: UnmountingEvent): Bool
  ParkBike(): void
  UnParkBike(): void
  PickUpBike(): void
  OnKnockOverBikeEvent(evt: KnockOverBikeEvent): Bool
}

declare interface PhysicalImpulseEvent extends Event {

}

declare interface SMovementPattern {

}

declare interface ObjectMoverStatus extends Event {

}

declare interface ObjectMoverComponentPS extends GameComponentPS {

}

declare interface ObjectMoverComponent extends ScriptableComponent {

}

declare interface OdaEmergencyListener extends CustomValueStatPoolsListener {

  OnStatPoolValueChanged(oldValue: number, newValue: number, percToPoints: number): void
  CheckHPValue(oldValue: number, newValue: number, percToPoints: number): void
  SetRoamingBehaviorAuthorization(): void
}

declare interface OdaComponent extends ScriptableComponent {

  OnGameAttach(): void
  GetCombatTarget(): NPCPuppet
  OnAIEvent(aiEvent: AIEvent): Bool
  OnStatusEffectApplied(evt: ApplyStatusEffectEvent): Bool
  OnStatusEffectRemoved(evt: RemoveStatusEffect): Bool
  OnNonStealthQuickHackVictimEvent(evt: NonStealthQuickHackVictimEvent): Bool
  ApplyForceStaggerStatusEffect(): void
  ApplyBlockStaggerStatusEffect(): void
  RemoveForceStaggerStatusEffect(): void
  RemoveBlockStaggerStatusEffect(): void
  EvaluateAppearance(): void
  OnHit(evt: gameHitEvent): Bool
  OnSmartBulletDeflectedEvent(evt: SmartBulletDeflectedEvent): Bool
  OnLookedAtEvent(evt: LookedAtEvent): Bool
  OnDeactivate(): void
  OnDamageDealt(evt: gameTargetDamageEvent): Bool
}

declare interface AISubActionForceEquip_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionForceEquip_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionForceEquip_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionForceEquip_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  ApplyAnimFeature(context: ScriptExecutionContext, itemsToEquip: NPCItemToEquip[], record: AISubActionForceEquip_Record): void
  /** @noSelf **/
  Equip(context: ScriptExecutionContext, record: AISubActionForceEquip_Record): Bool
  /** @noSelf **/
  GetItemID(context: ScriptExecutionContext, record: AISubActionForceEquip_Record, itemID: ItemID): Bool
}

declare interface AISubActionForceEquip_Record extends AISubAction_Record {

  ItemObject(): AIActionTarget_Record
  ItemID(): Item_Record
  AttachmentSlot(): AttachmentSlot_Record
  ItemCategory(): ItemCategory_Record
  ItemType(): ItemType_Record
  ItemTag(): CName
  Delay(): number
  AnimationTime(): number
  EquipDespiteInterruption(): Bool
}

declare interface RoyceComponent extends ScriptableComponent {

  OnGameAttach(): void
  OnStatusEffectApplied(evt: ApplyStatusEffectEvent): Bool
  OnDeathAfterDefeatedRoyce(evt: gameDeathEvent): Bool
  OnEnableColliderDelayEvent(enableColliderEvent: EnableColliderDelayEvent): Bool
  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnAudioEvent(evt: AudioEvent): Bool
  OnDeath(evt: gameDeathEvent): Bool
  StartEffect(effectName: CName): void
  OnShotOnShield(hitEvent: gameHitEvent): Bool
}

declare interface RoyceHealthChangeListener extends CustomValueStatPoolsListener {

  OnStatPoolValueChanged(oldValue: number, newValue: number, percToPoints: number): void
}

declare interface SasquatchComponent extends ScriptableComponent {

  OnGameAttach(): void
  OnStatusEffectApplied(evt: ApplyStatusEffectEvent): Bool
}

declare interface ScannerControlComponent extends ScriptableComponent {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttach(): void
  OnAIEvent(aiEvent: AIEvent): Bool
  OnDeath(evt: gameDeathEvent): Bool
  OnAreaEnter(trigger: AreaEnteredEvent): Bool
  OnAreaExit(trigger: AreaExitedEvent): Bool
  StartFullscreenPlayerVFX(): void
  StopFullscreenPlayerVFX(): void
  StartScanning(scanType: MechanicalScanType): void
  StopCurrentScanningEffect(): void
  StopScanning(): void
  PlayScannerSlotAnimation(animationName: CName): void
  StopScannerSlotAnimation(): void
}

declare interface UpdateComponent extends ScriptableComponent {

  OnUpdate(deltaTime: number): void
}

declare interface AISubActionSetUnequipWeaponsUtils extends IScriptable {

  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionCharacterRecordUnequip_Record, itemsToUnequip: NPCItemToEquip[], duration: number): AIbehaviorUpdateOutcome
}

declare interface AISubActionSetUnequipPrimaryWeapons_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionSetUnequipPrimaryWeapons_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionSetUnequipPrimaryWeapons_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionSetUnequipPrimaryWeapons_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  GetItemsToUnequip(context: ScriptExecutionContext, record: AISubActionCharacterRecordUnequip_Record, itemsToUnequip: NPCItemToEquip[]): Bool
}

declare interface AISubActionSetUnequipSecondaryWeapons_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionSetUnequipSecondaryWeapons_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionSetUnequipSecondaryWeapons_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionSetUnequipSecondaryWeapons_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  GetItemsToUnequip(context: ScriptExecutionContext, record: AISubActionCharacterRecordUnequip_Record, itemsToUnequip: NPCItemToEquip[]): Bool
}

declare interface AISubActionUnequipOnSlot_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionUnequipOnSlot_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionUnequipOnSlot_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionUnequipOnSlot_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  Unequip(context: ScriptExecutionContext, dropItem: Bool, itemsToUnequip: NPCItemToEquip[]): Bool
  /** @noSelf **/
  Drop(context: ScriptExecutionContext, itemToUnequip: NPCItemToEquip): Bool
  /** @noSelf **/
  ApplyAnimFeature(context: ScriptExecutionContext, itemsToUnequip: NPCItemToEquip[]): void
}

declare interface AISubActionUnequipOnSlot_Record extends AISubActionCharacterRecordUnequip_Record {

  UseItemSpawnDelayFromWeapon(): Bool
}

declare interface AISubActionForceUnequip_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionForceUnequip_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionForceUnequip_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionForceUnequip_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  ApplyAnimFeature(context: ScriptExecutionContext, record: AISubActionForceUnequip_Record): void
  /** @noSelf **/
  Unequip(context: ScriptExecutionContext, record: AISubActionForceUnequip_Record): Bool
  /** @noSelf **/
  Drop(context: ScriptExecutionContext, record: AISubActionForceUnequip_Record): Bool
}

declare interface AISubActionForceUnequip_Record extends AISubAction_Record {

  AttachmentSlot(): AttachmentSlot_Record
  Delay(): number
  AnimationTime(): number
  UnequipDespiteInterruption(): Bool
  DropItem(): Bool
  GenerateLootAfterDrop(): Bool
}

declare interface WeaponPositionComponent extends ScriptableComponent {

  GetBlackboardIntVariable(id: BlackboardID_Int): number
  SetBlackboardIntVariable(id: BlackboardID_Int, value: number): void
  GetBlackboardBoolVariable(id: BlackboardID_Bool): Bool
  SetBlackboardBoolVariable(id: BlackboardID_Bool, varValue: Bool): void
  OnGameAttach(): void
  OnUpdate(deltaTime: number): void
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
  ResetDeltas(): void
  ResetData(): void
  ResetWeaponOffsetFromInput(): void
  ResetWeaponAimOffsetFromInput(): void
  ShouldDisplayDebugInfo(): Bool
  UpdateTweakDBParams(): void
  UpdateData(): void
  SendData(): void
  UpdateWeaponPositionDataFromTweakDB(): void
  UpdateWeaponPositionDataFromWeaponStats(): void
  UpdateWeaponPositionDataFromInput(): void
  SendWeaponPositionData(): void
  UpdateCameraData(): void
  SendCameraData(): void
  IsOwnerAiming(): Bool
  UpdateDebugInfo(): void
  ClearDebugInfo(): void
}

declare interface AISubActionDisableAimAssist_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionDisableAimAssist_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionDisableAimAssist_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionDisableAimAssist_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  EnableAimAssist(enable: Bool, context: ScriptExecutionContext): void
}

declare interface AISubActionDisableAimAssist_Record extends AISubAction_Record {

  Delay(): number
  Duration(): number
}

declare interface AISubActionApplyTimeDilation_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionApplyTimeDilation_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionApplyTimeDilation_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionApplyTimeDilation_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  SetTimeDilation(context: ScriptExecutionContext, record: AISubActionApplyTimeDilation_Record): Bool
}

declare interface AISubActionApplyTimeDilation_Record extends AISubAction_Record {

  EaseIn(): CName
  EaseOut(): CName
  Type(): CName
  Duration(): number
  Multiplier(): number
  OverrideMultiplerWhenPlayerInTimeDilation(): number
}

declare interface AISubActionModifyStatPool_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionModifyStatPool_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionModifyStatPool_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionModifyStatPool_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  ModifyStatPool(context: ScriptExecutionContext, record: AISubActionModifyStatPool_Record): void
}

declare interface AISubActionModifyStatPool_Record extends AISubAction_Record {

  StatPool(): StatPool_Record
  Delay(): number
  Amount(): number
  Perc(): Bool
}

declare interface AISubActionForceDeath_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionForceDeath_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionForceDeath_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionForceDeath_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  ForceDeath(context: ScriptExecutionContext, record: AISubActionForceDeath_Record): void
}

declare interface AISubActionForceDeath_Record extends AISubAction_Record {

  Delay(): number
  HitIntensity(): number
  HitBodyPart(): number
  HitSource(): number
  HitDirection(): number
}

declare interface AISubActionStatusEffect_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionStatusEffect_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionStatusEffect_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionStatusEffect_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  ApplyRemoveStatusEffect(context: ScriptExecutionContext, record: AISubActionStatusEffect_Record): void
  /** @noSelf **/
  ApplyStatusEffect(context: ScriptExecutionContext, record: AISubActionStatusEffect_Record): void
  /** @noSelf **/
  RemoveStatusEffect(context: ScriptExecutionContext, record: AISubActionStatusEffect_Record): void
}

declare interface AISubActionStatusEffect_Record extends AISubAction_Record {

  Target(): AIActionTarget_Record
  StatusEffects(outList: StatusEffect_Record[]): void
  GetStatusEffectsCount(): number
  GetStatusEffectsItem(index: number): StatusEffect_Record
  StatusEffectsContains(item: StatusEffect_Record): Bool
  Delay(): number
  Remove(): Bool
  Apply(): Bool
}

declare interface AISubActionGameplayLogicPackage_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionGameplayLogicPackage_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionGameplayLogicPackage_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionGameplayLogicPackage_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  ApplyGameplayLogicPackage(context: ScriptExecutionContext, record: AISubActionGameplayLogicPackage_Record): void
  /** @noSelf **/
  RemoveGameplayLogicPackage(context: ScriptExecutionContext, record: AISubActionGameplayLogicPackage_Record): void
}

declare interface AISubActionGameplayLogicPackage_Record extends AISubAction_Record {

  Packages(outList: GameplayLogicPackage_Record[]): void
  GetPackagesCount(): number
  GetPackagesItem(index: number): GameplayLogicPackage_Record
  PackagesContains(item: GameplayLogicPackage_Record): Bool
}

declare interface OnReserveWorkspotEvent extends OnWorkspotAvailabilityEvent {

}

declare interface OnReleaseWorkspotEvent extends OnWorkspotAvailabilityEvent {

}

declare interface AISubActionSetInt_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionSetInt_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionSetInt_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionSetInt_Record, duration: number, interrupted: Bool): void
}

declare interface AISubActionSetInt_Record extends AISubAction_Record {

  Name(): CName
  Delay(): number
  Value(): number
}

declare interface AISubActionReloadWeapon_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionReloadWeapon_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionReloadWeapon_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionReloadWeapon_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  GetWeapon(context: ScriptExecutionContext, record: AISubActionReloadWeapon_Record, weapon: WeaponObject): Bool
}

declare interface AISubActionReloadWeapon_Record extends AISubAction_Record {

  WeaponSlot(): AttachmentSlot_Record
  PauseCondition(outList: AIActionCondition_Record[]): void
  GetPauseConditionCount(): number
  GetPauseConditionItem(index: number): AIActionCondition_Record
  PauseConditionContains(item: AIActionCondition_Record): Bool
  Duration(): number
}

declare interface AISubActionTriggerStim_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionTriggerStim_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionTriggerStim_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionTriggerStim_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  TriggerStim(context: ScriptExecutionContext, record: AISubActionTriggerStim_Record): void
}

declare interface AISubActionTriggerStim_Record extends AISubAction_Record {

  StimType(): StimType_Record
  StimSource(): AIActionTarget_Record
  Target(): AIActionTarget_Record
  Delay(): number
  Radius(): number
  Direct(): Bool
}

declare interface AISubActionChangeAttitude_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionChangeAttitude_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionChangeAttitude_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionChangeAttitude_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  ChangeAttitude(context: ScriptExecutionContext, record: AISubActionChangeAttitude_Record): void
}

declare interface AISubActionChangeAttitude_Record extends AISubAction_Record {

  Target(): AIActionTarget_Record
  Attitude(): CName
  Delay(): number
}

declare interface TestScriptableComponent extends ScriptableComponent {

  OnGameAttach(): void
  OnGameDetach(): void
  OnEditorAttach(): void
  OnEditorDetach(): void
  OnUpdate(deltaTime: number): void
  OnHit(evt: gameHitEvent): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
}

declare interface AISubActionThrowItem_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionThrowItem_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionThrowItem_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionThrowItem_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  ThrowInit(context: ScriptExecutionContext, record: AISubActionThrowItem_Record): void
  /** @noSelf **/
  GetCachedGrenadeQuery(context: ScriptExecutionContext, targetPosition: Vector4, throwAngle: number, outStartType: gameGrenadeThrowStartType): Bool
  /** @noSelf **/
  ThrowItem(context: ScriptExecutionContext, record: AISubActionThrowItem_Record): Bool
  /** @noSelf **/
  DropItem(context: ScriptExecutionContext, record: AISubActionThrowItem_Record): void
  /** @noSelf **/
  SetNPCThrowingGrenade(context: ScriptExecutionContext): void
}

declare interface AISubActionThrowItem_Record extends AISubAction_Record {

  Target(): AIActionTarget_Record
  AttachmentSlot(): AttachmentSlot_Record
  ThrowType(): CName
  PositionPredictionTime(): number
  Delay(): number
  ThrowAngle(): number
  TrajectoryGravity(): number
  DropItemOnInterruption(): Bool
  CheckThrowQuery(): Bool
}

declare interface gameprojectileSetUpAndLaunchEvent extends gameprojectileLaunchEvent {

}

declare interface IOrientationProvider extends IScriptable {

  /** @noSelf **/
  CreateStaticOrientationProvider(orientation: Quaternion): IOrientationProvider
  /** @noSelf **/
  CreateEntityOrientationProvider(slotComponent: SlotComponent, slotName: CName, entity: Entity, orientationEntitySpace?: Quaternion): IOrientationProvider
}

declare interface PlayerProximityStopEvent extends Event {

}

declare interface CrowdCallingPoliceEvent extends Event {

}

declare interface SpreadFearEvent extends Event {

}

declare interface AISubActionTriggerItemActivation_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionTriggerItemActivation_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionTriggerItemActivation_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionTriggerItemActivation_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  TriggerActivation(context: ScriptExecutionContext, record: AISubActionTriggerItemActivation_Record): void
}

declare interface AISubActionTriggerItemActivation_Record extends AISubAction_Record {

  AttachmentSlot(): AttachmentSlot_Record
  Instigator(): AIActionTarget_Record
  Delay(): number
}

declare interface gameprojectileForceActivationEvent extends Event {

}

declare interface AISubActionAttackWithWeapon_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionAttackWithWeapon_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionAttackWithWeapon_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionAttackWithWeapon_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  AttackWithWeapon(context: ScriptExecutionContext, record: AISubActionAttackWithWeapon_Record): AIbehaviorUpdateOutcome
  /** @noSelf **/
  StartContinuousAttack(context: ScriptExecutionContext, weapon: WeaponObject): void
  /** @noSelf **/
  StartAttack(context: ScriptExecutionContext, record: AISubActionAttackWithWeapon_Record, weapon: WeaponObject, attack: Attack_GameEffect, effect: EffectInstance): void
  /** @noSelf **/
  GetWeapon(context: ScriptExecutionContext, record: AISubActionAttackWithWeapon_Record, weapon: WeaponObject): Bool
  /** @noSelf **/
  SetAttackNameInBlackBoard(context: ScriptExecutionContext, attackName: CName): void
}

declare interface AISubActionAttackWithWeapon_Record extends AISubAction_Record {

  Attack(): Attack_Record
  WeaponSlots(outList: AttachmentSlot_Record[]): void
  GetWeaponSlotsCount(): number
  GetWeaponSlotsItem(index: number): AttachmentSlot_Record
  WeaponSlotsContains(item: AttachmentSlot_Record): Bool
  AttackName(): CName
  ColliderBoxSize(): Vector3
  AttackTime(): number
  AttackRange(): number
  AttackDuration(): number
}

declare interface EffectDataHelper extends IScriptable {

  /** @noSelf **/
  FillMeleeEffectData(effectData: EffectData, colliderBoxSize: Vector4, duration: number, position: Vector4, rotation: Quaternion, direction: Vector4, range: number): void
}

declare interface AISubActionRegisterActionName_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionRegisterActionName_Record): void
}

declare interface AISubActionRegisterActionName_Record extends AISubAction_Record {

  ActionName(): CName
}

declare interface AISubActionMeleeAttackManager_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionMeleeAttackManager_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionMeleeAttackManager_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionMeleeAttackManager_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  startWeaponTrailEffect(context: ScriptExecutionContext, weapons: ItemObject[]): void
  /** @noSelf **/
  startStrongArmsTrailEffect(owner: GameObject, weapon: ItemObject): void
  /** @noSelf **/
  stopWeaponTrailEffect(context: ScriptExecutionContext, weapons: ItemObject[]): void
  /** @noSelf **/
  stopStrongArmsTrailEffect(owner: GameObject, weapon: ItemObject): void
}

declare interface AISubActionMeleeAttackManager_Record extends AISubAction_Record {

  Name(): CName
  FxDelay(): number
  TrailDuration(): number
  TrailDelay(): number
  WarningDelay(): number
  SpawnTrail(): Bool
  SpawnWeaponFX(): Bool
  SendFriendlyFireWarning(): Bool
}

declare interface SenseInitializeEvent extends Event {

}

declare interface OnBeingDetectedEvent extends Event {

  GetSourceObject(): GameObject
}

declare interface EnterShapeEvent extends SenseVisibilityEvent {

}

declare interface ExitShapeEvent extends SenseVisibilityEvent {

}

declare interface SenseBox extends ISenseShape {

}

declare interface SenseSphere extends ISenseShape {

}

declare interface SenseAngleRange extends ISenseShape {

}

declare interface AISubActionShootToPoint_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionShootToPoint_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionShootToPoint_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionShootToPoint_Record, duration: number, interrupted: Bool): void
}

declare interface AISubActionShootWithWeapon_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionShootWithWeapon_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionShootWithWeapon_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionShootWithWeapon_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  Shoot(context: ScriptExecutionContext, record: AISubActionShootWithWeapon_Record, duration: number, weapon: WeaponObject, requestedTriggerMode: gamedataTriggerMode, targetPosition: Vector4, target: GameObject, offset?: Vector4, predictionTime?: number): void
  /** @noSelf **/
  ShouldTrackTarget(owner: gamePuppet, record: AISubActionShootWithWeapon_Record, weapon: WeaponObject): Bool
  /** @noSelf **/
  QueueNextShot(weapon: WeaponObject, requestedTriggerMode: gamedataTriggerMode, duration: number): void
  /** @noSelf **/
  QueueFirstShot(weapon: WeaponObject): void
  /** @noSelf **/
  ShootToPoints(context: ScriptExecutionContext, record: AISubActionShootToPoint_Record, weapon: WeaponObject, requestedTriggerMode: gamedataTriggerMode, duration: number): Bool
  /** @noSelf **/
  ShootMissileRainGrid(context: ScriptExecutionContext, record: AISubActionMissileRainGrid_Record, weapon: WeaponObject, requestedTriggerMode: gamedataTriggerMode, target: GameObject, targetPosition: Vector4, duration: number): Bool
  /** @noSelf **/
  ShootMissileRainCircular(context: ScriptExecutionContext, record: AISubActionMissileRainCircular_Record, weapon: WeaponObject, requestedTriggerMode: gamedataTriggerMode, target: GameObject, targetPosition: Vector4, duration: number): Bool
  /** @noSelf **/
  SetShootPointsBytag(context: ScriptExecutionContext, tags: CName[], shootPointPosition: Vector4[]): Bool
  /** @noSelf **/
  ConvertVector3ArrayToVector4Array(v3: Vector3[]): Vector4[]
  /** @noSelf **/
  SetShootPointsByCoordinate(context: ScriptExecutionContext, target: GameObject, coordinateArray: Vector4[], shootPointPosition: Vector4[]): Bool
  /** @noSelf **/
  GetWeapon(context: ScriptExecutionContext, record: AISubActionShootWithWeapon_Record, weaponsList: WeaponObject[]): Bool
}

declare interface AISubActionShootToPoint_Record extends AISubActionShootWithWeapon_Record {

  RotationObj(): AIActionTarget_Record
  PositionObj(): AIActionTarget_Record
  TargetPositionObj(): AIActionTarget_Record
  PointPosition(): Vector3[]
  GetPointPositionCount(): number
  GetPointPositionItem(index: number): Vector3
  PointPositionContains(item: Vector3): Bool
  WaypointTag(): CName[]
  GetWaypointTagCount(): number
  GetWaypointTagItem(index: number): CName
  WaypointTagContains(item: CName): Bool
}

declare interface AISubActionMissileRainGrid_Record extends AISubActionShootWithWeapon_Record {

  MissileOffsets(): Vector3[]
  GetMissileOffsetsCount(): number
  GetMissileOffsetsItem(index: number): Vector3
  MissileOffsetsContains(item: Vector3): Bool
}

declare interface AISubActionMissileRainCircular_Record extends AISubActionShootWithWeapon_Record {

  MaxRadius(): number
  MissilesPerLaunch(): number
  MinRadius(): number
}

declare interface SoundComponentBase extends IPlacedComponent {

}

declare interface soundComponent extends SoundComponentBase {

}

declare interface AISubActionMissileRainGrid_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionMissileRainGrid_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionMissileRainGrid_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionMissileRainGrid_Record, duration: number, interrupted: Bool): void
}

declare interface AISubActionMissileRainCircular_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionMissileRainCircular_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionMissileRainCircular_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionMissileRainCircular_Record, duration: number, interrupted: Bool): void
}

declare interface TacticRatio {

}

declare interface gameStatsComponent extends GameComponent {

}

declare interface AISubActionCreateGameEffect_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionCreateGameEffect_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionCreateGameEffect_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionCreateGameEffect_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  CreateGameEffect(context: ScriptExecutionContext, record: AISubActionCreateGameEffect_Record): void
}

declare interface AISubActionCreateGameEffect_Record extends AISubAction_Record {

  PositionObj(): AIActionTarget_Record
  TargetPositionObj(): AIActionTarget_Record
  RotationObj(): AIActionTarget_Record
  Target(): AIActionTarget_Record
  EffectTag(): CName
  EffectName(): CName
  ColliderBoxSize(): Vector3
  Range(): number
  Duration(): number
  Delay(): number
}

declare interface AISubActionSetWaypointByTag_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionSetWaypointByTag_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionSetWaypointByTag_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionSetWaypointByTag_Record, duration: number, interrupted: Bool): void
}

declare interface AISubActionSetTargetByTag_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionSetTargetByTag_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionSetTargetByTag_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionSetTargetByTag_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  SetTargetByTag(context: ScriptExecutionContext, record: AISubActionSetTargetByTag_Record): Bool
  /** @noSelf **/
  GetDistancesFromPosition(context: ScriptExecutionContext, targets: Vector4[], distances: number[]): Bool
  /** @noSelf **/
  GetDistancesFromEntity(context: ScriptExecutionContext, targets: Entity[], distances: number[]): Bool
  /** @noSelf **/
  GetPositionsFromEntity(context: ScriptExecutionContext, targets: Entity[], positions: Vector4[]): Bool
  /** @noSelf **/
  SelectIndex(context: ScriptExecutionContext, selectionPreference: CName, minDistance: number, maxDistance: number, distances: number[], minDistanceObj: number, maxDistanceObj: number, distancesObj: number[], targetsPosition?: Vector4[], allowedOffMeshTags?: CName[], lineOfSightTarget?: Vector4): number
  /** @noSelf **/
  CheckPath(context: ScriptExecutionContext, startPosition: Vector4, endPosition: Vector4, offMeshTags?: CName[]): Bool
  /** @noSelf **/
  GetClosestIndexInRange(context: ScriptExecutionContext, minDistance: number, maxDistance: number, distances: number[], minDistanceObj: number, maxDistanceObj: number, distancesObj: number[], targetsPosition?: Vector4[], allowedOffMeshTags?: CName[], lineOfSightTarget?: Vector4): number
  /** @noSelf **/
  GetFarthestIndexInRange(context: ScriptExecutionContext, minDistance: number, maxDistance: number, distances: number[], minDistanceObj: number, maxDistanceObj: number, distancesObj: number[], targetsPosition?: Vector4[], allowedOffMeshTags?: CName[], lineOfSightTarget?: Vector4): number
  /** @noSelf **/
  GetRandomIndexInRange(context: ScriptExecutionContext, minDistance: number, maxDistance: number, distances: number[], minDistanceObj: number, maxDistanceObj: number, distancesObj: number[], allowedOffMeshTags: CName[], targetsPosition?: Vector4[], lineOfSightTarget?: Vector4): number
}

declare interface AISubActionSetWaypointByTag_Record extends AISubActionSetTargetByTag_Record {

}

declare interface GameTagSystem extends IGameSystem {

  GetAnyMatchingEntity(tag: CName): Entity
  GetAllMatchingEntities(tag: CName, entities: Entity[]): Bool
}

declare interface AISubActionSetInfluenceMap_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionSetInfluenceMap_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionSetInfluenceMap_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionSetInfluenceMap_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  SetInfluenceMap(context: ScriptExecutionContext, record: AISubActionSetInfluenceMap_Record): void
}

declare interface AISubActionSetInfluenceMap_Record extends AISubAction_Record {

  PositionObj(): AIActionTarget_Record
  Lerp(): Vector2
  Delay(): number
  Radius(): number
  Threat(): Bool
}

declare interface InfluenceMapSystem extends IInfluenceMapSystem {

  SetSearchValueSquad(position: Vector4, radius: number, owner: gamePuppet): void
  SetSearchValue(position: Vector4, radius: number): void
  SetSearchValueLerp(position: Vector4, radius: number, minValue: number, maxValue: number): void
}

declare interface AISubActionSetStimSource_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionSetStimSource_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionSetStimSource_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionSetStimSource_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  SetStimSource(context: ScriptExecutionContext, record: AISubActionSetStimSource_Record): void
}

declare interface AISubActionSetStimSource_Record extends AISubAction_Record {

  StimTarget(): AIActionTarget_Record
  Delay(): number
  UseInvestigateData(): Bool
}

declare interface AISubActionWorkspot_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionWorkspot_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionWorkspot_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionWorkspot_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  ReserveWorkspot(context: ScriptExecutionContext, record: AISubActionWorkspot_Record): void
  /** @noSelf **/
  ReleaseWorkspot(context: ScriptExecutionContext, record: AISubActionWorkspot_Record): void
}

declare interface AISubActionWorkspot_Record extends AISubAction_Record {

  WorkspotObject(): AIActionTarget_Record
}

declare interface AISubActionChangeCoverSelectionPreset_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionChangeCoverSelectionPreset_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionChangeCoverSelectionPreset_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionChangeCoverSelectionPreset_Record, duration: number, interrupted: Bool): void
}

declare interface AISubActionChangeCoverSelectionPreset_Record extends AISubAction_Record {

  GatheringObjectCenter(): AIActionTarget_Record
  InitialPreset(): CName
  Preset(): CName
  ChangeThreshold(): number
  CoverDisablingDuration(): number
  FallbackToLastSelectedPreset(): Bool
}

declare interface AISubActionStartCooldown_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionStartCooldown_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionStartCooldown_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionStartCooldown_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  StartCooldowns(context: ScriptExecutionContext, record: AISubActionStartCooldown_Record): void
}

declare interface AISubActionStartCooldown_Record extends AISubAction_Record {

  Cooldowns(outList: AIActionCooldown_Record[]): void
  GetCooldownsCount(): number
  GetCooldownsItem(index: number): AIActionCooldown_Record
  CooldownsContains(item: AIActionCooldown_Record): Bool
  Delay(): number
}

declare interface AISubActionSquadSync_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionSquadSync_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionSquadSync_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionSquadSync_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  SquadSync(context: ScriptExecutionContext, record: AISubActionSquadSync_Record): void
}

declare interface AISubActionSquadSync_Record extends AISubAction_Record {

  SquadType(): AISquadType_Record
  Pull(): Bool
}

declare interface AISubActionSecuritySystemNotification_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionSecuritySystemNotification_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionSecuritySystemNotification_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionSecuritySystemNotification_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  NotifySecuritySystem(context: ScriptExecutionContext, record: AISubActionSecuritySystemNotification_Record): void
}

declare interface AISubActionSecuritySystemNotification_Record extends AISubAction_Record {

  Threat(): AIActionTarget_Record
  NotificationType(): AIActionSecurityNotificationType_Record
}

declare interface AIActionSecurityNotificationType_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataAIActionSecurityNotificationType
}

declare interface AISubActionCallSquadSearchBackUp_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionCallSquadSearchBackUp_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionCallSquadSearchBackUp_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionCallSquadSearchBackUp_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  CallBackup(context: ScriptExecutionContext, record: AISubActionCallSquadSearchBackUp_Record): void
}

declare interface AISubActionQuickHack_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionQuickHack_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionQuickHack_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionQuickHack_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  VisualiseConnection(context: ScriptExecutionContext, record: AISubActionQuickHack_Record): void
  /** @noSelf **/
  CancelConnection(context: ScriptExecutionContext, record: AISubActionQuickHack_Record): void
  /** @noSelf **/
  Hack(context: ScriptExecutionContext, record: AISubActionQuickHack_Record): void
  /** @noSelf **/
  SendNetworkLinkEvent(netrunner: GameObject, proxy: GameObject, target: GameObject, from: GameObject, to: GameObject): void
}

declare interface AISubActionQuickHack_Record extends AISubAction_Record {

  Target(): AIActionTarget_Record
  ActionResult(): ObjectAction_Record
  PauseUploadCondition(outList: AIActionCondition_Record[]): void
  GetPauseUploadConditionCount(): number
  GetPauseUploadConditionItem(index: number): AIActionCondition_Record
  PauseUploadConditionContains(item: AIActionCondition_Record): Bool
  Delay(): number
  EstablishContactOnly(): Bool
}

declare interface AISubActionActivateStrongArmsFX_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionActivateStrongArmsFX_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionActivateStrongArmsFX_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionActivateStrongArmsFX_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  SpawnStrongArmsFX(context: ScriptExecutionContext): void
}

declare interface AISubActionActivateStrongArmsFX_Record extends AISubAction_Record {

  Delay(): number
}

declare interface AISubActionMountVehicle_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionMountVehicle_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionMountVehicle_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionMountVehicle_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  MountVehicle(context: ScriptExecutionContext, record: AISubActionMountVehicle_Record): Bool
}

declare interface AISubActionMountVehicle_Record extends AISubAction_Record {

  Vehicle(): AIActionTarget_Record
  Slot(): VehicleSeat_Record
  MountInstantly(): Bool
}

declare interface AISubActionUseSensePreset_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionUseSensePreset_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionUseSensePreset_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionUseSensePreset_Record, duration: number, interrupted: Bool): void
}

declare interface AISubActionUseSensePreset_Record extends AISubAction_Record {

  SensePreset(): SensePreset_Record
  Delay(): number
}

declare interface AISubActionConditionalFailure_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionConditionalFailure_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionConditionalFailure_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionConditionalFailure_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  StartCooldowns(context: ScriptExecutionContext, record: AISubActionConditionalFailure_Record): void
}

declare interface AISubActionConditionalFailure_Record extends AISubAction_Record {

  Condition(outList: AIActionCondition_Record[]): void
  GetConditionCount(): number
  GetConditionItem(index: number): AIActionCondition_Record
  ConditionContains(item: AIActionCondition_Record): Bool
  Cooldowns(outList: AIActionCooldown_Record[]): void
  GetCooldownsCount(): number
  GetCooldownsItem(index: number): AIActionCooldown_Record
  CooldownsContains(item: AIActionCooldown_Record): Bool
  Delay(): number
}

declare interface AISubActionCompleteCommand_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionCompleteCommand_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionCompleteCommand_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionCompleteCommand_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  CompleteCommand(context: ScriptExecutionContext): void
}

declare interface AISubActionCompleteCommand_Record extends AISubAction_Record {

  Target(): AIActionTarget_Record
  Commands(): CName[]
  GetCommandsCount(): number
  GetCommandsItem(index: number): CName
  CommandsContains(item: CName): Bool
  Delay(): number
  CheckOneTimeExecutionFlag(): Bool
}

declare interface AISubActionLeaveCover_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionLeaveCover_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionLeaveCover_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionLeaveCover_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  LeaveCover(context: ScriptExecutionContext, record: AISubActionLeaveCover_Record): Bool
}

declare interface AISubActionLeaveCover_Record extends AISubAction_Record {

  Delay(): number
  CheckExposure(): number
}

declare interface AISubActionCustomEffectors_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionCustomEffectors_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionCustomEffectors_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionCustomEffectors_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  ApplyRemoveEffectors(context: ScriptExecutionContext, record: AISubActionCustomEffectors_Record): void
  /** @noSelf **/
  ApplyEffectors(context: ScriptExecutionContext, record: AISubActionCustomEffectors_Record): void
  /** @noSelf **/
  RemoveEffectors(context: ScriptExecutionContext, record: AISubActionCustomEffectors_Record): void
}

declare interface AISubActionCustomEffectors_Record extends AISubAction_Record {

  Target(): AIActionTarget_Record
  Effectors(outList: Effector_Record[]): void
  GetEffectorsCount(): number
  GetEffectorsItem(index: number): Effector_Record
  EffectorsContains(item: Effector_Record): Bool
  Delay(): number
  Remove(): Bool
  Apply(): Bool
}

declare interface AISubActionActivateLightPreset_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionActivateLightPreset_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionActivateLightPreset_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionActivateLightPreset_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  ActivateLightPreset(context: ScriptExecutionContext, record: AISubActionActivateLightPreset_Record): void
}

declare interface AISubActionActivateLightPreset_Record extends AISubAction_Record {

  LightPreset(): LightPreset_Record
  Delay(): number
}

declare interface AISubActionFailIfFriendlyFire_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionFailIfFriendlyFire_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionFailIfFriendlyFire_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionFailIfFriendlyFire_Record, duration: number, interrupted: Bool): void
}

declare interface AISubActionFailIfFriendlyFire_Record extends AISubAction_Record {

  Target(): AIActionTarget_Record
  CheckOnlyFirstFrame(): Bool
}

declare interface AISubActionUpdateFriendlyFireParams_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionUpdateFriendlyFireParams_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionUpdateFriendlyFireParams_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionUpdateFriendlyFireParams_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  SetFriendlyFireGeometry(equippedItemType: gamedataItemType, ffs: IFriendlyFireSystem): void
}

declare interface AISubActionUpdateFriendlyFireParams_Record extends AISubAction_Record {

  UpdateOnDeactivate(): Bool
}

declare interface AISubActionSendSignal_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionSendSignal_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionSendSignal_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionSendSignal_Record, duration: number, interrupted: Bool): void
}

declare interface AISubActionSendSignal_Record extends AISubAction_Record {

  Name(): CName
  Duration(): number
  Delay(): number
}

declare interface AISubActionFastExitWorkspot_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionFastExitWorkspot_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionFastExitWorkspot_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionFastExitWorkspot_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  ExitWorkspot(context: ScriptExecutionContext, record: AISubActionFastExitWorkspot_Record): void
}

declare interface AISubActionFastExitWorkspot_Record extends AISubAction_Record {

  Target(): AIActionTarget_Record
  DestinationObj(): AIActionTarget_Record
  Delay(): number
  PlaySlowExitIfFailed(): Bool
  StayInWorkspotIfFailed(): Bool
}

declare interface AISubActionMeleeAttackAttemptEvent_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionMeleeAttackAttemptEvent_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionMeleeAttackAttemptEvent_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionMeleeAttackAttemptEvent_Record, duration: number, interrupted: Bool): void
}

declare interface AISubActionMeleeAttackAttemptEvent_Record extends AISubAction_Record {

  Target(): AIActionTarget_Record
  IsWindUp(): Bool
}

declare interface AISubActionSetWorldPosition_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionSetWorldPosition_Record): void
  /** @noSelf **/
  CalculateWorldPosition(context: ScriptExecutionContext, record: AISubActionSetWorldPosition_Record): Vector4
  /** @noSelf **/
  GetNavmeshPosition(context: ScriptExecutionContext, checkPosition: Vector4): Bool
  /** @noSelf **/
  GetWorldPositionWithOffset(context: ScriptExecutionContext, referenceTarget: AIActionTarget_Record, offset: Vector3, useLocalSpace: Bool): Vector4
  /** @noSelf **/
  GetRandomOffset(minOffset: Vector3, maxOffset: Vector3): Vector3
}

declare interface AISubActionSetWorldPosition_Record extends AISubAction_Record {

  CustomPositionTarget(): AIActionTarget_Record
  ReferenceTarget(): AIActionTarget_Record
  MinOffsetFromTarget(): Vector3
  MaxOffsetFromTarget(): Vector3
  RandomizePoint(): Bool
  UseLocalSpace(): Bool
  CheckForNavmesh(): Bool
}

declare interface AISubActionCover_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionCover_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionCover_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionCover_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  GetAnimVariation(context: ScriptExecutionContext, record: AISubActionCover_Record): number
  /** @noSelf **/
  GetInvalidCoverID(): number
  /** @noSelf **/
  SetDesiredCover(context: ScriptExecutionContext, record: AISubActionCover_Record): void
  /** @noSelf **/
  SelectCover(context: ScriptExecutionContext, cooldown: AIActionCooldown_Record, consideredCoverID: number, consideredRing: gamedataAIRingType, currentRing: gamedataAIRingType, compareRings: Bool): Bool
  /** @noSelf **/
  SetCurrentCover(context: ScriptExecutionContext): void
  /** @noSelf **/
  SetCoverData(context: ScriptExecutionContext, record: AISubActionCover_Record): void
  /** @noSelf **/
  SetInitialCoverData(puppet: ScriptedPuppet, coverID: number): void
  /** @noSelf **/
  SetCoverExposureAnim(context: ScriptExecutionContext, puppet: ScriptedPuppet, coverID: number, record: AISubActionCover_Record, target: GameObject, lineOfSightTolerance: number): void
  /** @noSelf **/
  CalculateCoverExposureMethod(puppet: ScriptedPuppet, coverID: number, record: AISubActionCover_Record, target: GameObject, lineOfSightTolerance: number, trackedLocation: TrackedLocation): AICoverExposureMethod
}

declare interface VehicleReadyInteractionDelayEvent extends Event {

}

declare interface VehicleCycleLightsEvent extends Event {

}

declare interface TrapComponent extends ScriptableComponent {

  OnGameAttach(): void
  OnAreaEnter(evt: AreaEnteredEvent): Bool
  SpawnAttack(): void
}

declare interface WidgetHudComponentInterface extends WidgetBaseComponent {

  GetWidget(entryName: CName): inkWidget
}

declare interface WidgetHudComponent extends WidgetHudComponentInterface {

}

declare interface ScriptableVirtualCameraViewComponent extends VirtualCameraViewComponent {

  OnFeedChange(evt: FeedEvent): Bool
}

declare interface SecuritySupportListener extends AIScriptsTargetTrackingListener {

  /** @noSelf **/
  Construct(npc: ScriptedPuppet): SecuritySupportListener
  OnAccuracyBoundReached(above: Bool): void
}

declare interface ThreatExpectationInvalid extends AIEvent {

}

declare interface EnemyPushedToSquad extends AIEvent {

}

declare interface HostJoinedSquad extends AIEvent {

}

declare interface EntitySpotted extends AIEvent {

}

declare interface EntityLost extends AIEvent {

}

declare interface ClearAllRevealRequestsEvent extends Event {

}

declare interface AISubActionHitData_Record_Implementation extends IScriptable {

  /** @noSelf **/
  GetAnimVariation(context: ScriptExecutionContext, record: AISubActionHitData_Record): number
}

declare interface AISubActionFail_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionFail_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionFail_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionFail_Record, duration: number, interrupted: Bool): void
}

declare interface CameraData {

}

declare interface AISubActionInitialReactionParams_Record_Implementation extends IScriptable {

  /** @noSelf **/
  GetAnimVariation(context: ScriptExecutionContext, record: AISubActionInitialReaction_Record): number
  /** @noSelf **/
  GetAnimDirection(context: ScriptExecutionContext, record: AISubActionInitialReaction_Record): number
}

declare interface AISubActionInitialReaction_Record extends AISubAction_Record {

  DirectionObj(): AIActionTarget_Record
}

declare interface TestMappinScriptData extends MappinScriptData {

}

declare interface PrereqCheckData {

}

declare interface PrereqData {

}

declare interface PrereqParams {

}

declare interface ScanningTooltipElementData {

}

declare interface AmmoData {

}

declare interface RequestItemParam {

}

declare interface parameterRequestItem extends IScriptable {

}

declare interface parameterRequestEquip extends IScriptable {

}

declare interface gameSubStatModifierData extends gameStatModifierData {

}

declare interface gameStatModifierDetailedData {

}

declare interface gameStatDetailedData {

}

declare interface gameStatModifierGroup {

}

declare interface AISubActionRandomize_Record_Implementation extends IScriptable {

  /** @noSelf **/
  GetAnimVariation(context: ScriptExecutionContext, record: AISubActionRandomize_Record): number
  /** @noSelf **/
  SetAnimVariationInBlackBoard(context: ScriptExecutionContext, animVariation: number): void
  /** @noSelf **/
  GetAnimVariationInBlackBoard(context: ScriptExecutionContext): number
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionRandomize_Record, duration: number, interrupted: Bool): void
}

declare interface AISubActionRandomize_Record extends AISubAction_Record {

  AnimVariationRandomize(): number[]
  GetAnimVariationRandomizeCount(): number
  GetAnimVariationRandomizeItem(index: number): number
  AnimVariationRandomizeContains(item: number): Bool
}

declare interface AISubActionCallReinforcements_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionCallReinforcements_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionCallReinforcements_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionCallReinforcements_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  StartCallReinforcement(context: ScriptExecutionContext, record: AISubActionCallReinforcements_Record): void
}

declare interface AISubActionCallReinforcements_Record extends AISubAction_Record {

  Duration(): number
  Delay(): number
}

declare interface AISubActionGeneratePointOfInterestTarget_Record_Implementation extends IScriptable {

  /** @noSelf **/
  SetPointOfInterest(context: ScriptExecutionContext, record: AISubActionGeneratePointOfInterestTarget_Record): void
  /** @noSelf **/
  GetSquadMate(context: ScriptExecutionContext, record: AISubActionGeneratePointOfInterestTarget_Record): GameObject
  /** @noSelf **/
  GetFriendlyTarget(context: ScriptExecutionContext, record: AISubActionGeneratePointOfInterestTarget_Record): GameObject
  /** @noSelf **/
  GetClosestThreat(context: ScriptExecutionContext, record: AISubActionGeneratePointOfInterestTarget_Record): GameObject
  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionGeneratePointOfInterestTarget_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionGeneratePointOfInterestTarget_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionGeneratePointOfInterestTarget_Record, duration: number, interrupted: Bool): void
}

declare interface AISubActionGeneratePointOfInterestTarget_Record extends AISubAction_Record {

  ClosestThreatDurationRange(): Vector2
  SquadMateDurationRange(): Vector2
  RandomPointDurationRange(): Vector2
  FriendlyTargetDurationRange(): Vector2
  RandomPointZRotationAngleRange(): Vector2
  RandomPointYRotationAngleRange(): Vector2
  SquadMateWatchingMaxAngle(): number
  ChoosingRandomPointChanceWeight(): number
  ChoosingFriendlyTargetChanceWeight(): number
  ChoosingClosestThreatChanceWeight(): number
  ChoosingSquadMateChanceWeight(): number
  FriendlyTargetWatchingMaxAngle(): number
  ClosestThreatWatchingMaxAngle(): number
}

declare interface AISubActionDroneModifyAltitude_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionDroneModifyAltitude_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionDroneModifyAltitude_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionDroneModifyAltitude_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  SetDesiredAltitudeOffset(context: ScriptExecutionContext, desiredOffset: number): void
}

declare interface AISubActionDroneModifyAltitude_Record extends AISubAction_Record {

  Delay(): number
  AltitudeOffset(): number
}

declare interface AISubActionScaleDurationWithDistance_Record_Implementation extends IScriptable {

  /** @noSelf **/
  Activate(context: ScriptExecutionContext, record: AISubActionScaleDurationWithDistance_Record): void
  /** @noSelf **/
  Update(context: ScriptExecutionContext, record: AISubActionScaleDurationWithDistance_Record, duration: number): AIbehaviorUpdateOutcome
  /** @noSelf **/
  Deactivate(context: ScriptExecutionContext, record: AISubActionScaleDurationWithDistance_Record, duration: number, interrupted: Bool): void
  /** @noSelf **/
  GetPhaseDuration(context: ScriptExecutionContext, record: AISubActionScaleDurationWithDistance_Record, actionPhase: number, baseDuration: number): number
}

declare interface AISubActionScaleDurationWithDistance_Record extends AISubAction_Record {

  Source(): AIActionTarget_Record
  Target(): AIActionTarget_Record
  DistanceRange(): Vector2
  ScaleDistanceToTime(): Vector2
}

declare interface WrappedEntIDArray {

}

declare interface InfoBox extends IScriptable {

  AddCategory(category: string, color?: Color): void
  AddStringValue(name: string, value: string): void
  AddVector4Value(name: string, value: Vector4): void
  AddVector2Value(name: string, value: Vector2): void
  AddQuatValue(name: string, value: Quaternion): void
  AddColorValue(name: string, value: Color, coloredValue?: Bool): void
  AddFloatValue(name: string, value: number): void
  AddIntValue(name: string, value: number): void
  AddUintValue(name: string, value: number): void
  AddBoolValue(name: string, value: Bool): void
}

declare interface UnequipStart extends AttachmentSlotEvent {

}

declare interface UnequipEnd extends AttachmentSlotEvent {

}

declare interface EquipStart extends AttachmentSlotEvent {

  GetItemID(): ItemID
  SetItemID(itemId: ItemID): void
  GetStartingRenderingPlane(): ERenderingPlane
  SetStartingRenderingPlane(renderingPlane: ERenderingPlane): void
  GetFirstEquip(): Bool
  SetFirstEquip(firstEquip: Bool): void
  SetHighPriority(highPriority: Bool): void
}

declare interface EquipEnd extends AttachmentSlotEvent {

  GetItemID(): ItemID
  SetItemID(itemId: ItemID): void
}

declare interface AttachmentSlotsScriptListener extends AttachmentSlotsListener {

}

declare interface SetCameraParamsEvent extends Event {

}

declare interface SetCameraParamsWithOverridesEvent extends Event {

}

declare interface gameProjectedHitEvent extends gameHitEvent {

}

declare interface gameCloseByEvent extends Event {

}

declare interface gameUnconsciousEvent extends Event {

}

declare interface gameDropItemEvent extends Event {

}

declare interface gameCoverHitEvent extends gameHitEvent {

}

declare interface WillDieSoonEvent extends Event {

}

declare interface IKTargetRef {

}

declare interface IKTargetRequest {

}

declare interface IKTargetAddEvent extends AnimTargetAddEvent {

  SetEntityOrientationTarget(targetEntity: Entity, slotTargetName: CName, orientationOffsetEntitySpace: Quaternion): void
  SetStaticOrientationTarget(staticOrientationWs: Quaternion): void
}

declare interface IKTargetRemoveEvent extends Event {

  /** @noSelf **/
  QueueRemoveIkTargetRemoveEvent(owner: GameObject, ikEvent: IKTargetAddEvent): void
}

declare interface OnInventoryEmptyEvent extends Event {

}

declare interface InventoryChangedEvent extends Event {

}

declare interface MakeInventoryShareableEvent extends Event {

}

declare interface SetLootInteractionAccessibilityEvent extends Event {

}

declare interface ContainerFilledEvent extends Event {

}

declare interface LookAtFacingPositionProvider extends IPositionProvider {

  SetCameraComponent(owner: GameObject): void
}

declare interface LookAtRef {

}

declare interface StoppedMovingEvent extends Event {

}

declare interface gameQuickItemsEvent extends Event {

}

declare interface FinalizeActivationTPPRepresentationEvent extends Event {

}

declare interface FinalizeDeactivationTPPRepresentationEvent extends Event {

}

declare interface gameRicochetData {

}

declare interface gameprojectileShootTargetEvent extends gameprojectileShootEvent {

}

declare interface gameprojectileBroadPhaseHitEvent extends Event {

}

declare interface gameprojectileFollowEvent extends Event {

}

declare interface gameprojectileAcceleratedMovementEvent extends gameprojectileLinearMovementEvent {

}

declare interface EndTakedownEvent extends Event {

}

declare interface RemoveCachedStatusEffectFXEvent extends Event {

}

declare interface ReactionEvent extends Event {

}

declare interface ScanningActionFinishedEvent extends Event {

}

declare interface ScanningEventForInstigator extends ScanningEvent {

}

declare interface ScanningModeEvent extends Event {

}

declare interface TaggedEvent extends Event {

}

declare interface ScanningPulseStartEvent extends Event {

}

declare interface ScanningPulseEvent extends Event {

}

declare interface PSMPostponedParameterInt extends PSMPostponedParameterBase {

}

declare interface PSMPostponedParameterFloat extends PSMPostponedParameterBase {

}

declare interface PSMPostponedParameterVector extends PSMPostponedParameterBase {

}

declare interface PSMPostponedParameterCName extends PSMPostponedParameterBase {

}

declare interface TaggedAIEvent extends AIEvent {

  AddTag(tag: CName): void
}

declare interface SignalEvent extends TaggedAIEvent {

}

declare interface AICommandEvent extends AIEvent {

}

declare interface AICommandStateEvent extends Event {

}

declare interface KatanaStimuli extends StimuliData {

}

declare interface StimuliEffectEvent extends Event {

}

declare interface SendAIBheaviorReactionStim extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface StimuliSquadActionEvent extends BaseStimuliEvent {

  GetDescription(): string
}

declare interface AreaEnteredEvent extends TriggerEvent {

}

declare interface AreaExitedEvent extends TriggerEvent {

}

declare interface VehicleRepairEvent extends Event {

}

declare interface HasVehicleBeenFlippedOverForSomeTimeEvent extends Event {

}

declare interface VehicleReadyToParkEvent extends Event {

}

declare interface gameVisionModuleEvent extends Event {

}

declare interface gameVisionModeEvent extends Event {

}

declare interface gameVisionModeVisualEvent extends Event {

}

declare interface gameVisionModeHideEvent extends Event {

}

declare interface gameVisionModeMappinEvent extends Event {

}

declare interface gameweaponeventsOwnerAimEvent extends Event {

}

declare interface InteractionChoiceCaptionIconPart extends InteractionChoiceCaptionPart {

}

declare interface InteractionChoiceCaptionBluelinePart extends InteractionChoiceCaptionPart {

}

declare interface ResloveFocusClueDescriptionEvent extends Event {

}

declare interface OnAttachedEvent extends Event {

}

declare interface OutlineItemRequestEvent extends Event {

}

declare interface GameplayPerkCondition extends GameplayConditionBase {

  Evaluate(requester: GameObject): Bool
  GetPlayerPerk(requester: GameObject): number
  GetRequiredLevel(): number
  GetPerkType(): gamedataPerkType
  GetDescription(requester: GameObject): Condition
  GetConditionDescription(): string
}

declare interface GameplayItemCondition extends GameplayConditionBase {

  Evaluate(requester: GameObject): Bool
  GetDescription(requester: GameObject): Condition
  GetConditionDescription(): string
}

declare interface GameplayCyberwareCondition extends GameplayConditionBase {

  Evaluate(requester: GameObject): Bool
  GetDescription(requester: GameObject): Condition
  GetConditionDescription(): string
}

declare interface GameplayFactCondition extends GameplayConditionBase {

  Evaluate(requester: GameObject): Bool
  GetDescription(requester: GameObject): Condition
}

declare interface GameplayStatCondition extends GameplayConditionBase {

  Evaluate(requester: GameObject): Bool
  GetRequiredLevel(gi: GameInstance): number
  GetPlayerStat(requester: GameObject): number
  GetStatType(): gamedataStatType
  GetDescription(requester: GameObject): Condition
  GetConditionDescription(gi: GameInstance): string
  SetProperties(sel_stat: EDeviceChallengeAttribute, sel_difficulty: EGameplayChallengeLevel): void
}

declare interface EffectDurationModifier extends IScriptable {

}

declare interface EffectDurationModifier_Scripted extends EffectDurationModifier {

}

declare interface MuteArmDurationModifier extends EffectDurationModifier_Scripted {

  Init(ctx: EffectScriptContext): number
  Process(ctx: EffectScriptContext, durationCtx: EffectDurationModifierScriptContext): number
  ResetMuteArmBlackboard(ctx: EffectScriptContext): void
}

declare interface EffectDurationModifierScriptContext {

  /** @noSelf **/
  GetTimeDelta(modifierCtx: EffectDurationModifierScriptContext): number
  /** @noSelf **/
  GetRemainingTime(modifierCtx: EffectDurationModifierScriptContext): number
  /** @noSelf **/
  SetRemainingTime(modifierCtx: EffectDurationModifierScriptContext, time: number): void
}

declare interface EffectScriptContext {

  /** @noSelf **/
  GetGameInstance(ctx: EffectScriptContext): GameInstance
  /** @noSelf **/
  ReportError(ctx: EffectScriptContext, error: string): void
  /** @noSelf **/
  GetSharedData(ctx: EffectScriptContext): EffectData
  /** @noSelf **/
  GetBlackboard(ctx: EffectScriptContext): IBlackboard
  /** @noSelf **/
  GetInstigator(ctx: EffectScriptContext): Entity
  /** @noSelf **/
  GetSource(ctx: EffectScriptContext): Entity
  /** @noSelf **/
  GetWeapon(ctx: EffectScriptContext): Entity
  /** @noSelf **/
  SpawnEffect(ctx: EffectScriptContext, resource: FxResource, transform: WorldTransform, ignoreTimeDilation?: Bool): void
}

declare interface ContinuousEffector extends Effector {

  ContinuousAction(owner: GameObject, instigator: GameObject): void
}

declare interface TestEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
}

declare interface StatPoolEffector extends Effector {

  ActionOff(owner: GameObject): void
  ActionOn(owner: GameObject): void
}

declare interface SenseSwitchEffector extends Effector {

  /** @noSelf **/
  SenseSwitch(senseComponent: SenseComponent, condition: Bool): void
  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
}

declare interface SpawnSubCharacterEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  Uninitialize(game: GameInstance): void
  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
}

declare interface DOTContinuousEffector extends ContinuousEffector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  ContinuousAction(owner: GameObject, instigator: GameObject): void
}

declare interface ForceDismembermentEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
}

declare interface ForceDismembermentEffector_Record extends Effector_Record {

  WoundType(): string
  BodyPart(): string
  DismembermentChance(): number
  ShouldKillNPC(): Bool
  SkipDeathAnim(): Bool
  IsCritical(): Bool
}

declare interface ModifyStatPoolModifierEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  Uninitialize(game: GameInstance): void
  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
  RevertPoolModifier(): void
}

declare interface ModifyStatPoolModifierEffector_Record extends Effector_Record {

  ModificationType(): string
  StatPoolType(): string
  PoolModifier(): PoolValueModifier_Record
}

declare interface ModifyStatPoolValueEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  RepeatedAction(owner: GameObject): void
  ProcessEffector(owner: GameObject): void
}

declare interface StatPoolUpdate_Record extends TweakDBRecord {

  StatPoolType(): StatPool_Record
  StatPoolValue(): number
}

declare interface AddItemsEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
}

declare interface ApplyEffectorEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
  Uninitialize(game: GameInstance): void
}

declare interface ApplyEffectorEffector_Record extends Effector_Record {

  ApplicationTarget(): string
  EffectorToApply(): Effector_Record
}

declare interface ApplyLightPresetEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  SendChangeLightEvent(owner: GameObject, colorValues: number[], strength: number, time: number, curve: CName, loop: Bool): void
}

declare interface ApplyLightPresetEffector_Record extends Effector_Record {

  LightPreset(): LightPreset_Record
}

declare interface ApplyRandomStatusEffectEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  Uninitialize(game: GameInstance): void
  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
  RemoveStatusEffect(): void
  SetRandomStatusEffect(): void
}

declare interface ApplyShaderEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  Uninitialize(game: GameInstance): void
}

declare interface ApplyShaderOnEquipmentEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  Uninitialize(game: GameInstance): void
  GetAttachmentSlotsForEquipment(): TweakDBID[]
}

declare interface ApplyShaderOnObjectEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
  Uninitialize(game: GameInstance): void
}

declare interface ApplyStatGroupEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ProcessEffector(owner: GameObject): void
  Uninitialize(game: GameInstance): void
  RepeatedAction(owner: GameObject): void
  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
  RemoveModifierGroup(): void
}

declare interface ApplyStatGroupEffector_Record extends Effector_Record {

  ApplicationTarget(): string
  StatGroup(): StatModifierGroup_Record
}

declare interface ApplyStatusEffectByChanceEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  Uninitialize(game: GameInstance): void
  RepeatedAction(owner: GameObject): void
  ActionOff(owner: GameObject): void
  ApplyStatusEffect(): void
  RemoveStatusEffect(): void
}

declare interface ApplyStatusEffectEffector_Record extends Effector_Record {

  ApplicationTarget(): string
  StatusEffect(): StatusEffect_Record
  Count(): number
  Inverted(): Bool
  RemoveWithEffector(): Bool
}

declare interface ApplyStatusEffectEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  Uninitialize(game: GameInstance): void
  ProcessAction(owner: GameObject): void
  ActionOn(owner: GameObject): void
  RepeatedAction(owner: GameObject): void
  ActionOff(owner: GameObject): void
  ApplyStatusEffect(): void
  RemoveStatusEffect(): void
  GetInstigator(obj: GameObject): GameObject
}

declare interface FinisherEffector extends ApplyStatusEffectEffector {

  Uninitialize(game: GameInstance): void
  ActionOn(owner: GameObject): void
}

declare interface ChangeAppearanceEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  Uninitialize(game: GameInstance): void
}

declare interface ChaosWeaponCustomEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ProcessEffector(owner: GameObject): void
  Uninitialize(game: GameInstance): void
  ActionOn(owner: GameObject): void
  RemoveModifierGroup(): void
}

declare interface ChaosWeaponDamageTypeEffector extends ChaosWeaponCustomEffector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ProcessEffector(owner: GameObject): void
}

declare interface DisassembleOwnedJunkEffector extends Effector {

  ActionOn(owner: GameObject): void
}

declare interface TogglePlayerFlashlightEffector extends Effector {

  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
  Uninitialize(game: GameInstance): void
  ProcessEffector(game: GameInstance, enable: Bool): void
}

declare interface AddHitFlagToAttackEffector extends ModifyAttackEffector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  Uninitialize(game: GameInstance): void
  ProcessEffector(): void
  ActionOn(owner: GameObject): void
  RepeatedAction(owner: GameObject): void
}

declare interface AddStatusEffectToAttackEffector extends ModifyAttackEffector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  Uninitialize(game: GameInstance): void
  RepeatedAction(owner: GameObject): void
}

declare interface AddStatusEffectToAttackEffector_Record extends Effector_Record {

  StatusEffect(): StatusEffect_Record
  Stacks(): number
  ApplicationChance(): number
  IsRandom(): Bool
}

declare interface ModifyAttackCritChanceEffector extends ModifyAttackEffector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  Uninitialize(game: GameInstance): void
  RepeatedAction(owner: GameObject): void
}

declare interface ModifyDamageEffector extends ModifyAttackEffector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  Uninitialize(game: GameInstance): void
  RepeatedAction(owner: GameObject): void
  ModifyDamage(hitEvent: gameHitEvent, operationType: EMathOperator, value: number): void
}

declare interface ModifyDamageWithDistance extends ModifyDamageEffector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  Uninitialize(game: GameInstance): void
  RepeatedAction(owner: GameObject): void
}

declare interface ModifyDamageWithStatPoolEffector extends ModifyDamageEffector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  Uninitialize(game: GameInstance): void
  GetRefObject(hitEvent: gameHitEvent): GameObject
  RepeatedAction(owner: GameObject): void
}

declare interface ModifyDamageWithVelocity extends ModifyDamageEffector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  Uninitialize(game: GameInstance): void
  RepeatedAction(owner: GameObject): void
}

declare interface RemoveHitFlagFromAttackEffector extends ModifyAttackEffector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  Uninitialize(game: GameInstance): void
  ProcessEffector(): void
  ActionOn(owner: GameObject): void
  RepeatedAction(owner: GameObject): void
}

declare interface DestroyWeakspotEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
}

declare interface DisableTargetingEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  Uninitialize(game: GameInstance): void
  SignalEvent(toggle: Bool): void
}

declare interface DismemberEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
}

declare interface EncumbranceEvaluationEffector extends Effector {

  RepeatedAction(owner: GameObject): void
}

declare interface EvaluateEncumbranceEvent extends Event {

}

declare interface HighlightObjectEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
}

declare interface PlayBreathingAnimationEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
  Uninitialize(game: GameInstance): void
}

declare interface PlayVFXEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
  Uninitialize(game: GameInstance): void
  RepeatedAction(owner: GameObject): void
  Deactivate(): void
}

declare interface PlaySFXEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
  Uninitialize(game: GameInstance): void
  RepeatedAction(owner: GameObject): void
  Deactivate(): void
}

declare interface ApplyObjectActionEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
}

declare interface VoiceOverQuickHackFeedbackEvent extends Event {

}

declare interface WeaponMalfunctionHudEffector extends Effector {

  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
  Uninitialize(game: GameInstance): void
}

declare interface MadnessEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
  Uninitialize(game: GameInstance): void
}

declare interface PingSquadEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
  Uninitialize(game: GameInstance): void
  MarkSquad(mark: Bool, root: GameObject): void
  GetPingLevel(level: number): TweakDBID
}

declare interface RefreshPingEffector extends Effector {

  ActionOn(owner: GameObject): void
  RefreshSquad(root: GameObject): void
}

declare interface SetFriendlyEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  Uninitialize(game: GameInstance): void
  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
  ChangeAttitude(owner: GameObject, target: GameObject): Bool
  SetAnimFeature(owner: ScriptedPuppet): void
}

declare interface AndroidTurnOnEffector extends Effector {

  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
  Uninitialize(game: GameInstance): void
}

declare interface AndroidTurnOffEffector extends Effector {

  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
  Uninitialize(game: GameInstance): void
}

declare interface SpreadInitEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
}

declare interface SpreadInitEffector_Record extends Effector_Record {

  ObjectAction(): ObjectAction_Record
  BonusJumps(): number
  SpreadCount(): number
  SpreadDistance(): number
}

declare interface SpreadEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
}

declare interface SpreadEffector_Record extends Effector_Record {

  ObjectAction(): ObjectAction_Record
  EffectTag(): CName
  SpreadToAllTargetsInTheArea(): Bool
}

declare interface EffectExecutor_Spread extends EffectExecutor_Scripted {

  Init(ctx: EffectScriptContext): Bool
  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface RevealPlayerPositionEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
}

declare interface ForceMoveInCombatEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
}

declare interface ForceMoveInCombatCallInEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
}

declare interface ReloadWeaponEffector extends Effector {

  ActionOn(owner: GameObject): void
}

declare interface ForceResetAmmoEvent extends Event {

  SetTargetValue(targetValue: number): void
}

declare interface RemoveAllStatusEffectsEffector extends Effector {

  ActionOn(owner: GameObject): void
}

declare interface RemoveStatusEffectsEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
}

declare interface RemoveDOTStatusEffectsEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  Uninitialize(game: GameInstance): void
}

declare interface RestoreStatPoolEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
}

declare interface SetTargetHealthEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  Set(target: NPCPuppet): void
}

declare interface SetTimeDilationEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
}

declare interface ShowUIWarningEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
}

declare interface AddDevelopmentPointEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
}

declare interface BuyAttributeEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
}

declare interface GiveRewardEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  Uninitialize(game: GameInstance): void
  RepeatedAction(owner: GameObject): void
  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
}

declare interface ResetDevelopmentPointsEffector extends Effector {

  ActionOn(owner: GameObject): void
}

declare interface RemoveAllPerks extends PlayerScriptableSystemRequest {

  Set(_owner: GameObject): void
}

declare interface SetFactEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
}

declare interface ToggleFactEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
}

declare interface TriggerHackingMinigameEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  Uninitialize(game: GameInstance): void
  ActionOn(owner: GameObject): void
  OnItemCracked(value: number): Bool
}

declare interface TriggerHackingMinigameEffector_Record extends Effector_Record {

  JournalEntry(): string
  Reward(): RewardBase_Record
}

declare interface UnlockMinigameProgramEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  Uninitialize(game: GameInstance): void
  StoreMinigameProgramsOnPlayer(program: MinigameProgramData, player: PlayerPuppet, addOrRemove: Bool): void
}

declare interface StopAndPlayVFXEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  Uninitialize(game: GameInstance): void
}

declare interface StopAndPlaySFXEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  Uninitialize(game: GameInstance): void
}

declare interface StopVFXEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
}

declare interface StopSFXEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
}

declare interface ToggleMaterialOverlayEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
  Uninitialize(game: GameInstance): void
}

declare interface TriggerAttackByChanceEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  RepeatedAction(owner: GameObject): void
  ActionOn(owner: GameObject): void
}

declare interface SimpleTriggerAttackEffect extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  RepeatedAction(owner: GameObject): void
  ActionOn(owner: GameObject): void
}

declare interface TriggerAttackOnOwnerEffect extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  RepeatedAction(owner: GameObject): void
  GetAttackPosition(obj: GameObject): Vector4
}

declare interface TriggerAttackOnTargetEffect extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  RepeatedAction(owner: GameObject): void
}

declare interface TriggerContinuousAttackEffector extends ContinuousEffector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ContinuousAction(owner: GameObject, instigator: GameObject): void
}

declare interface UncontrolledMovementEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
}

declare interface UncontrolledMovementEffector_Record extends Effector_Record {

  DebugSourceName(): CName
  RagdollNoGroundThreshold(): number
  RagdollOnCollision(): Bool
}

declare interface SetRagdollComponentStateEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
}

declare interface EffectRef {

}

declare interface EffectProviderScriptContext {

  /** @noSelf **/
  GetTimeDelta(providerCtx: EffectProviderScriptContext): number
  /** @noSelf **/
  AddTarget(ctx: EffectScriptContext, providerCtx: EffectProviderScriptContext, target?: Entity): void
}

declare interface EffectSingleFilterScriptContext {

  /** @noSelf **/
  GetTimeDelta(filterCtx: EffectSingleFilterScriptContext): number
  /** @noSelf **/
  GetEntity(filterCtx: EffectSingleFilterScriptContext): Entity
  /** @noSelf **/
  GetHitPosition(filterCtx: EffectSingleFilterScriptContext): Vector4
  /** @noSelf **/
  GetHitNormal(filterCtx: EffectSingleFilterScriptContext): Vector4
}

declare interface EffectGroupFilterScriptContext {

  /** @noSelf **/
  GetTimeDelta(filterCtx: EffectGroupFilterScriptContext): number
}

declare interface EffectPreloadScriptContext {

  /** @noSelf **/
  PreloadFxResource(ctx: EffectPreloadScriptContext, resource: FxResource): void
}

declare interface EffectObjectProvider extends EffectNode {

}

declare interface EffectObjectFilter extends EffectNode {

}

declare interface EffectObjectSingleFilter extends EffectObjectFilter {

}

declare interface EffectObjectGroupFilter extends EffectObjectFilter {

}

declare interface EffectAction extends IScriptable {

}

declare interface EffectPreAction extends EffectAction {

}

declare interface EffectPostAction extends EffectAction {

}

declare interface gameEffectObjectFilter extends EffectNode {

}

declare interface gameEffectObjectGroupFilter extends gameEffectObjectFilter {

}

declare interface gameEffectObjectFilter_OnlyNearest extends gameEffectObjectGroupFilter {

}

declare interface EffectObjectProvider_Scripted extends EffectObjectProvider {

}

declare interface EffectObjectSingleFilter_Scripted extends EffectObjectSingleFilter {

}

declare interface EffectObjectGroupFilter_Scripted extends EffectObjectGroupFilter {

}

declare interface EffectPreAction_Scripted extends EffectPreAction {

}

declare interface EffectPostAction_Scripted extends EffectPostAction {

}

declare interface EffectInputParameter_Bool {

  /** @noSelf **/
  Get(ctx: EffectInputParameter_Bool, bb: IBlackboard): Bool
}

declare interface EffectInputParameter_Int {

  /** @noSelf **/
  Get(ctx: EffectInputParameter_Int, bb: IBlackboard): number
}

declare interface EffectInputParameter_Float {

  /** @noSelf **/
  Get(ctx: EffectInputParameter_Float, bb: IBlackboard): number
}

declare interface EffectInputParameter_CName {

  /** @noSelf **/
  Get(ctx: EffectInputParameter_CName, bb: IBlackboard): CName
}

declare interface EffectInputParameter_String {

  /** @noSelf **/
  Get(ctx: EffectInputParameter_String, bb: IBlackboard): string
}

declare interface EffectInputParameter_Vector {

  /** @noSelf **/
  Get(ctx: EffectInputParameter_Vector, bb: IBlackboard): Vector4
}

declare interface EffectInputParameter_Quat {

  /** @noSelf **/
  Get(ctx: EffectInputParameter_Quat, bb: IBlackboard): Quaternion
}

declare interface EffectInputParameter_Variant {

  /** @noSelf **/
  Get(ctx: EffectInputParameter_Variant, bb: IBlackboard): Variant
}

declare interface EffectOutputParameter_Bool {

  /** @noSelf **/
  Set(ctx: EffectOutputParameter_Bool, bb: IBlackboard, value: Bool): void
}

declare interface EffectOutputParameter_Int {

  /** @noSelf **/
  Set(ctx: EffectOutputParameter_Int, bb: IBlackboard, value: number): void
}

declare interface EffectOutputParameter_Float {

  /** @noSelf **/
  Set(ctx: EffectOutputParameter_Float, bb: IBlackboard, value: number): void
}

declare interface EffectOutputParameter_CName {

  /** @noSelf **/
  Set(ctx: EffectOutputParameter_CName, bb: IBlackboard, value: CName): void
}

declare interface EffectOutputParameter_String {

  /** @noSelf **/
  Set(ctx: EffectOutputParameter_String, bb: IBlackboard, value: string): void
}

declare interface EffectOutputParameter_Vector {

  /** @noSelf **/
  Set(ctx: EffectOutputParameter_Vector, bb: IBlackboard, value: Vector4): void
}

declare interface EffectOutputParameter_Quat {

  /** @noSelf **/
  Set(ctx: EffectOutputParameter_Quat, bb: IBlackboard, value: Quaternion): void
}

declare interface EffectOutputParameter_Variant {

  /** @noSelf **/
  Set(ctx: EffectOutputParameter_Variant, bb: IBlackboard, value: Variant): void
}

declare interface EffectInfo {

  /** @noSelf **/
  GetGatheredCount(info: EffectInfo): number
  /** @noSelf **/
  GetFilteredCount(info: EffectInfo): number
  /** @noSelf **/
  GetProcessedCount(info: EffectInfo): number
}

declare interface EffectInfoEvent extends Event {

}

declare interface IComparisonPrereq extends IPrereq {

}

declare interface WasScannedPrereq extends IPrereq {

}

declare interface HotSpotLayerDefinition extends gameinteractionsNodeDefinition {

}

declare interface InteractionManager extends IInteractionManager {

  IsInteractionLookAtTarget(activatorOwner: GameObject, hotSpotOwner: GameObject): Bool
}

declare interface MovementParameters {

}

declare interface MovingPlatformMovementLinear extends IMovingPlatformMovementPointToPoint {

}

declare interface BeforeArrivedAt extends Event {

}

declare interface gameObjectActionRefreshEvent extends Event {

}

declare interface PrereqStateChangedEvent extends Event {

  GetPrereqState(): PrereqState
}

declare interface NPCRevealedPrereq extends IScriptablePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface GameObjectRevealedRedPrereq extends IScriptablePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface GameObjectRevealedGreenPrereq extends IScriptablePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface RevealAccessPointPrereq extends IScriptablePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface AccessPoint extends InteractiveMasterDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ShouldRegisterToHUD(): Bool
  ResolveGameplayState(): void
  OnStartGlitchingText(evt: StartGlitchingText): Bool
  OnGameDetached(): Bool
  GetController(): AccessPointController
  GetDevicePS(): AccessPointControllerPS
  InitiatePersonalLinkWorkspot(puppet: GameObject): void
  PerformDive(attempt: number, isRemote: Bool): void
  OnAccessPointMiniGameStatus(evt: AccessPointMiniGameStatus): Bool
  TerminateConnection(): void
  GlitchScreenAfterBreaching(): void
  OnValidate(evt: Validate): Bool
  OnShutdownModule(evt: ShutdownModule): Bool
  OnDummyEvent(evt: DummyEvent): Bool
  CanRevealRemoteActionsWheel(): Bool
  DeviceUpdate(): void
  GlitchDiode(index: number): void
  DeterminGameplayRole(): EGameplayRole
  GetBlackboardDef(): BackDoorDeviceBlackboardDef
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
  SetIsInDefaultState(isInDefault: Bool): void
  ShutdownModule(module: number): void
  BootModule(module: number): void
  IsAccessPoint(): Bool
  IsRevealed(): Bool
  OnDebugRemoteConnectionEvent(evt: DebugRemoteConnectionEvent): Bool
  OnFactChangedEvent(evt: FactChangedEvent): Bool
  UploadProgram(): void
  TogglePersonalLink(toggle: Bool, puppet: GameObject): void
  OnDiveFinished(reason: CName): void
  IsControllingDevices(): Bool
}

declare interface AccessPointController extends MasterController {

  GetPS(): AccessPointControllerPS
}

declare interface StartGlitchingText extends Event {

}

declare interface DummyEvent extends Event {

}

declare interface ShutdownModule extends Event {

}

declare interface NPCDeadPrereq extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface NPCIncapacitatedPrereq extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface NPCGrappledByPlayerPrereq extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface SinglePlayerPrereq extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface NPCNotMountedToVehiclePrereq extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface NPCIsHumanoidPrereq extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface PuppetNotBossPrereq extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface NotReplacerPrereq extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface NotJohnnyReplacerPrereq extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface NotVRReplacerPrereq extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface PlayerDeadPrereq extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface PuppetIncapacitatedPrereq extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface PlayerNotCarryingPrereq extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface PlayerNotGrapplingPrereq extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface DisableAllWorldInteractionsNotEnabledPrereq extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface DisableAllVehicleInteractionsNotEnabledPrereq extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface PlayerHasTakedownWeaponEquippedPrereq extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface PlayerHasMantisBladesEquippedPrereq extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface IsNpcMountedInSlotPrereqState extends PrereqState {

  OnMountingStateChanged(): void
}

declare interface IsNpcMountedInSlotPrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface gameScriptedPrereqPSChangeListenerWrapper extends IScriptable {

  /** @noSelf **/
  CreateListener(gameInstance: GameInstance, persistentId: PersistentID, prereqState: PrereqState): gameScriptedPrereqPSChangeListenerWrapper
}

declare interface CanPlayerHijackMountedNpcPrereqState extends PrereqState {

  OnMountingStateChanged(): void
}

declare interface CanPlayerHijackMountedNpcPrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface gameScriptedPrereqMountingListenerWrapper extends IScriptable {

  /** @noSelf **/
  CreateVehicleListener(gameInstance: GameInstance, vehicleId: EntityID, prereqState: PrereqState): gameScriptedPrereqMountingListenerWrapper
}

declare interface IsNpcPlayingMountingAnimationPrereqState extends PrereqState {

  OnPSStateChanged(): void
}

declare interface IsNpcPlayingMountingAnimationPrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface IsVehicleDoorLockedState extends PrereqState {

  OnPSStateChanged(): void
}

declare interface IsVehicleDoorLocked extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface IsVehicleDoorQuestLockedState extends PrereqState {

  OnPSStateChanged(): void
}

declare interface IsVehicleDoorQuestLocked extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface PlayerHasNanoWiresEquippedPrereq extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface IsMultiplayerGamePrereq extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface PlayerHasCPOMissionDataPrereq extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface SelectedForMultiplayerChoiceDialog extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface PlayerCanTakeCPOMissionDataPrereq extends InteractionScriptedCondition {

  Test(activatorObject: GameObject, hotSpotObject: GameObject, hotSpotLayer: HotSpotLayerDefinition): Bool
}

declare interface PlayerCanGiveCPOMissionDataPrereq extends InteractionScriptedCondition {

  Test(activatorObject: GameObject, hotSpotObject: GameObject, hotSpotLayer: HotSpotLayerDefinition): Bool
}

declare interface AccessPointHasCPOMissionDataPrereq extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface CPOMissionDataAccessPoint extends CPOMissionDevice {

  HasDataToDownload(): Bool
  OnInteraction(choiceEvent: InteractionChoiceEvent): Bool
  IsDamagePresetValid(presetName: CName): Bool
}

declare interface AccessPointIsBlocked extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface IsScannerTarget extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface AccessPointCompatibleWithUser extends InteractionScriptedCondition {

  Test(activatorObject: GameObject, hotSpotObject: GameObject, hotSpotLayer: HotSpotLayerDefinition): Bool
}

declare interface PlayerControlsDevicePrereq extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
  Initialize(record: TweakDBID): void
}

declare interface PlayerNotInBraindancePrereq extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface CPOMissionPlayerVoted extends InteractionScriptedCondition {

  Test(activatorObject: GameObject, hotSpotObject: GameObject, hotSpotLayer: HotSpotLayerDefinition): Bool
}

declare interface CPOVotingDevice extends CPOMissionDevice {

  GetVoteFactName(): CName
  GetVoteTimerFactName(): CName
  OnGameAttached(): Bool
  OnInteraction(choiceEvent: InteractionChoiceEvent): Bool
}

declare interface CPOMissionPlayerNotVoted extends CPOMissionPlayerVoted {

  Test(activatorObject: GameObject, hotSpotObject: GameObject, hotSpotLayer: HotSpotLayerDefinition): Bool
}

declare interface PuppetMortalPrereq extends IScriptablePrereq {

  Initialize(record: TweakDBID): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface AlwaysTruePrereqState extends PrereqState {

}

declare interface AlwaysTruePrereq extends IScriptablePrereq {

  OnApplied(state: PrereqState, game: GameInstance, context: IScriptable): void
}

declare interface ConstantStatPoolPrereqListener extends BaseStatPoolPrereqListener {

  OnStatPoolValueReached(oldValue: number, newValue: number, percToPoints: number): Bool
  OnStatPoolValueChanged(oldValue: number, newValue: number, percToPoints: number): void
  RegisterState(state: PrereqState): void
}

declare interface ConstantStatPoolPrereqState extends StatPoolPrereqState {

  StatPoolConstantUpdate(oldValue: number, newValue: number): void
}

declare interface ConstantStatPoolPrereq extends StatPoolPrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
}

declare interface DismembermentTriggeredHitPrereqCondition extends BaseHitPrereqCondition {

  SetData(recordID: TweakDBID): void
  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface DismembermentTriggeredPrereqState extends PrereqState {

  OnStateUpdate(value: number): Bool
}

declare interface DismembermentTriggeredPrereq extends IScriptablePrereq {

  Evaluate(owner: GameObject, value: number): Bool
  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  OnApplied(state: PrereqState, game: GameInstance, context: IScriptable): void
}

declare interface HitAttackSubtypePrereqState extends GenericHitPrereqState {

  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface HitAttackSubtypePrereq extends GenericHitPrereq {

  Initialize(recordID: TweakDBID): void
}

declare interface DamageTypePrereqState extends GenericHitPrereqState {

  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface DamageTypePrereq extends GenericHitPrereq {

  Initialize(recordID: TweakDBID): void
}

declare interface HitDistanceCoveredPrereqState extends GenericHitPrereqState {

  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface HitDistanceCoveredPrereq extends GenericHitPrereq {

  Initialize(recordID: TweakDBID): void
}

declare interface HitDamageOverTimePrereqState extends GenericHitPrereqState {

  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface HitDamageOverTimePrereq extends GenericHitPrereq {

  Initialize(recordID: TweakDBID): void
}

declare interface HitFlagPrereqState extends GenericHitPrereqState {

  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface HitFlagPrereq extends GenericHitPrereq {

  Initialize(recordID: TweakDBID): void
}

declare interface HitIsBodyPartHeadPrereqState extends GenericHitPrereqState {

  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface HitIsBodyPartHeadPrereq extends GenericHitPrereq {

}

declare interface HitIsBodyPartLimbPrereqState extends GenericHitPrereqState {

  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface HitIsBodyPartLimbPrereq extends GenericHitPrereq {

}

declare interface HitIsBodyPartTorsoPrereqState extends GenericHitPrereqState {

  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface HitIsBodyPartTorsoPrereq extends GenericHitPrereq {

}

declare interface HitIsHumanPrereqState extends GenericHitPrereqState {

  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface HitIsHumanPrereq extends GenericHitPrereq {

  Initialize(recordID: TweakDBID): void
}

declare interface HitIsInstigatorPlayerPrereqState extends GenericHitPrereqState {

  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface HitIsInstigatorPlayerPrereq extends GenericHitPrereq {

}

declare interface HitIsMovingPrereqState extends GenericHitPrereqState {

  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface HitIsMovingPrereq extends GenericHitPrereq {

  Initialize(recordID: TweakDBID): void
}

declare interface HitIsRarityPrereqState extends GenericHitPrereqState {

  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface HitIsRarityPrereq extends GenericHitPrereq {

  Initialize(recordID: TweakDBID): void
}

declare interface HitIsRicochetPrereqState extends GenericHitPrereqState {

  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface HitIsRicochetPrereq extends GenericHitPrereq {

}

declare interface HitIsSourceGrenadePrereqState extends GenericHitPrereqState {

  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface HitIsSourceGrenadePrereq extends GenericHitPrereq {

}

declare interface HitIsTheSameTargetPrereqState extends GenericHitPrereqState {

  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface HitIsTheSameTargetPrereq extends GenericHitPrereq {

  Initialize(recordID: TweakDBID): void
}

declare interface HitReceivedPrereq extends GenericHitPrereq {

}

declare interface HitStatPoolComparisonPrereqState extends GenericHitPrereqState {

  Evaluate(hitEvent: gameHitEvent): Bool
  ComparePoolValues(hitEvent: gameHitEvent, prereq: HitStatPoolComparisonPrereq): Bool
}

declare interface HitStatPoolComparisonPrereq extends GenericHitPrereq {

  Initialize(recordID: TweakDBID): void
}

declare interface HitStatPoolPrereqState extends GenericHitPrereqState {

  Evaluate(hitEvent: gameHitEvent): Bool
  ComparePoolValues(hitEvent: gameHitEvent, prereq: HitStatPoolPrereq): Bool
}

declare interface HitStatPoolPrereq extends GenericHitPrereq {

  Initialize(recordID: TweakDBID): void
}

declare interface HitStatusEffectPresentPrereqState extends GenericHitPrereqState {

  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface HitStatusEffectPresentPrereq extends GenericHitPrereq {

  Initialize(recordID: TweakDBID): void
}

declare interface AIActionAND_Record extends AIActionSubCondition_Record {

  AND(outList: AIActionSubCondition_Record[]): void
  GetANDCount(): number
  GetANDItem(index: number): AIActionSubCondition_Record
  ANDContains(item: AIActionSubCondition_Record): Bool
}

declare interface TargetKilledPrereqState extends GenericHitPrereqState {

  Evaluate(hitEvent: gameHitEvent): Bool
}

declare interface TargetKilledPrereq extends GenericHitPrereq {

  Initialize(recordID: TweakDBID): void
}

declare interface WoundedTriggeredPrereqState extends PrereqState {

  OnStateUpdate(value: number): Bool
}

declare interface WoundedTriggeredPrereq extends IScriptablePrereq {

  Evaluate(owner: GameObject, value: number): Bool
  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  OnApplied(state: PrereqState, game: GameInstance, context: IScriptable): void
}

declare interface ConnectedToBackdoorPrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface HasNetworkPrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface NetworkBreachedPrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface FactValuePrereqState extends PrereqState {

  OnFactChanged(factValue: number): void
}

declare interface FactValuePrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  OnApplied(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
  Evaluate(value: number): Bool
}

declare interface GameTimePrereqState extends PrereqState {

  UpdatePrereq(): void
}

declare interface GameTimePrereq extends IScriptablePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  Initialize(recordID: TweakDBID): void
}

declare interface ItemCreationPrereqDataWrapper extends IScriptable {

  GetItemData(): gameItemData
  GetOwner(): IScriptable
  IsCreatedOnNPC(): Bool
  IsCreatedOnPlayer(): Bool
  IsCreatedOnLevel(): Bool
}

declare interface ItemCreationPrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface AIActionOR_Record extends AIActionSubCondition_Record {

  OR(outList: AIActionSubCondition_Record[]): void
  GetORCount(): number
  GetORItem(index: number): AIActionSubCondition_Record
  ORContains(item: AIActionSubCondition_Record): Bool
}

declare interface ItemInSlotPrereqState extends PrereqState {

  SlotFilled(slotID: TweakDBID, itemID: ItemID): void
  SlotEmptied(slotID: TweakDBID, itemID: ItemID): void
}

declare interface ItemInSlotPrereq extends IScriptablePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  OnApplied(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
  Initialize(recordID: TweakDBID): void
  Evaluate(itemID: ItemID, owner: GameObject): Bool
  Evaluate(itemCategory: gamedataItemCategory): Bool
  Evaluate(itemType: gamedataItemType): Bool
  Evaluate(weaponEvolution: gamedataWeaponEvolution): Bool
  Evaluate(itemID: ItemID, tag: CName): Bool
  CheckGenericWeaponModSlots(itemID: ItemID, owner: GameObject): Bool
  IsGenericWeaponMod(tweakDBID: TweakDBID, quality: number): Bool
}

declare interface ItemInSlotCallback extends AttachmentSlotsScriptCallback {

  OnItemEquipped(slotID: TweakDBID, itemID: ItemID): void
  OnItemUnequipped(slotID: TweakDBID, itemID: ItemID): void
  RegisterState(state: PrereqState): void
}

declare interface OnOffPrereqState extends PrereqState {

}

declare interface AIActionTicket_Record extends AITicket_Record {

}

declare interface OnOffPrereq extends IScriptablePrereq {

  OnApplied(state: PrereqState, game: GameInstance, context: IScriptable): void
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
}

declare interface AIActionType_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataAIActionType
}

declare interface AIAffiliationCond_Record extends AIActionSubCondition_Record {

  Affiliation(): Affiliation_Record
}

declare interface InvestedPerksPrereqState extends PrereqState {

}

declare interface PerkPrereqState extends PrereqState {

}

declare interface PerkPrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface AICommand_Record extends TweakDBRecord {

  HasCommands(): CName[]
  GetHasCommandsCount(): number
  GetHasCommandsItem(index: number): CName
  HasCommandsContains(item: CName): Bool
  HasNewOrOverridenCommands(): CName[]
  GetHasNewOrOverridenCommandsCount(): number
  GetHasNewOrOverridenCommandsItem(index: number): CName
  HasNewOrOverridenCommandsContains(item: CName): Bool
}

declare interface BodyCarryingPSMPrereqState extends PlayerStateMachinePrereqState {

}

declare interface AICooldownCond_Record extends AIActionSubCondition_Record {

  Cooldowns(outList: AIActionCooldown_Record[]): void
  GetCooldownsCount(): number
  GetCooldownsItem(index: number): AIActionCooldown_Record
  CooldownsContains(item: AIActionCooldown_Record): Bool
}

declare interface BodyCarryingPSMPrereq extends PlayerStateMachinePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  GetStateMachineEnum(): string
  GetCurrentPSMStateIndex(bb: IBlackboard): number
}

declare interface BodyDisposalPSMPrereqState extends PlayerStateMachinePrereqState {

}

declare interface BodyDisposalPSMPrereq extends PlayerStateMachinePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  GetStateMachineEnum(): string
  GetCurrentPSMStateIndex(bb: IBlackboard): number
}

declare interface WeaponStateMachinePrereqState extends PrereqState {

}

declare interface WeaponStateMachinePrereq extends IScriptablePrereq {

}

declare interface AIDirectorEntryStartType_Record extends TweakDBRecord {

  EnumName(): CName
  Type(): gamedataAIDirectorEntryStartType
}

declare interface AIDirectorSchedule_Record extends TweakDBRecord {

  Entries(outList: AIDirectorScheduleEntry_Record[]): void
  GetEntriesCount(): number
  GetEntriesItem(index: number): AIDirectorScheduleEntry_Record
  EntriesContains(item: AIDirectorScheduleEntry_Record): Bool
}

declare interface AIDirectorScheduleEntry_Record extends TweakDBRecord {

  EntryStartType(): AIDirectorEntryStartType_Record
  Plans(outList: AIDirectorSchedulePlan_Record[]): void
  GetPlansCount(): number
  GetPlansItem(index: number): AIDirectorSchedulePlan_Record
  PlansContains(item: AIDirectorSchedulePlan_Record): Bool
  Duration(): number
  TensionDelta(): number
  KillsLimit(): number
}

declare interface CombatPSMPrereqState extends PlayerStateMachinePrereqState {

}

declare interface CombatPSMPrereq extends PlayerStateMachinePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  GetStateMachineEnum(): string
  GetCurrentPSMStateIndex(bb: IBlackboard): number
}

declare interface AIDirectorSchedulePlan_Record extends TweakDBRecord {

  SpawningDesc(): AIDirectorScheduleSpawningDesc_Record
  MinTensionToPerform(): number
}

declare interface DetailedLocomotionPSMPrereqState extends PlayerStateMachinePrereqState {

}

declare interface DetailedLocomotionPSMPrereq extends PlayerStateMachinePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  GetStateMachineEnum(): string
  GetCurrentPSMStateIndex(bb: IBlackboard): number
}

declare interface AIDirectorSchedulePlanEnemyEntry_Record extends TweakDBRecord {

  Character(): Character_Record
  Tags(): CName[]
  GetTagsCount(): number
  GetTagsItem(index: number): CName
  TagsContains(item: CName): Bool
  SpawnChanceFactor(): number
  MaxAmountConcurrently(): number
}

declare interface AIDirectorScheduleSpawningDesc_Record extends TweakDBRecord {

  Entries(outList: AIDirectorSchedulePlanEnemyEntry_Record[]): void
  GetEntriesCount(): number
  GetEntriesItem(index: number): AIDirectorSchedulePlanEnemyEntry_Record
  EntriesContains(item: AIDirectorSchedulePlanEnemyEntry_Record): Bool
  SpawningBigDistance(): number
  SpawningAngle(): number
  EnemiesAmount(): number
  SpawningMinDistance(): number
}

declare interface FallPSMPrereqState extends PlayerStateMachinePrereqState {

}

declare interface FallPSMPrereq extends PlayerStateMachinePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  GetStateMachineEnum(): string
  GetCurrentPSMStateIndex(bb: IBlackboard): number
}

declare interface AIDriverCond_Record extends AIActionSubCondition_Record {

  Driver(): AIActionTarget_Record
}

declare interface HighLevelPSMPrereqState extends PlayerStateMachinePrereqState {

}

declare interface HighLevelPSMPrereq extends PlayerStateMachinePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  GetStateMachineEnum(): string
  GetCurrentPSMStateIndex(bb: IBlackboard): number
}

declare interface AIFriendlyFireCond_Record extends AIActionSubCondition_Record {

  CheckPlayer(): Bool
}

declare interface IsInWorkspotPSMPrereqState extends PlayerStateMachinePrereqState {

}

declare interface IsInWorkspotPSMPrereq extends PlayerStateMachinePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  GetStateMachineEnum(): string
  GetCurrentPSMStateIndex(bb: IBlackboard): number
}

declare interface LocomotionPSMPrereqState extends PlayerStateMachinePrereqState {

}

declare interface LocomotionPSMPrereq extends PlayerStateMachinePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  GetStateMachineEnum(): string
  GetCurrentPSMStateIndex(bb: IBlackboard): number
}

declare interface AIInTacticPositionCond_Record extends AIActionSubCondition_Record {

  Target(): AIActionTarget_Record
  Tactics(outList: AITacticType_Record[]): void
  GetTacticsCount(): number
  GetTacticsItem(index: number): AITacticType_Record
  TacticsContains(item: AITacticType_Record): Bool
}

declare interface MeleePSMPrereqState extends PlayerStateMachinePrereqState {

}

declare interface MeleePSMPrereq extends PlayerStateMachinePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  GetStateMachineEnum(): string
  GetCurrentPSMStateIndex(bb: IBlackboard): number
}

declare interface MeleeWeaponPSMPrereqState extends PlayerStateMachinePrereqState {

}

declare interface MeleeWeaponPSMPrereq extends PlayerStateMachinePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  GetStateMachineEnum(): string
  GetCurrentPSMStateIndex(bb: IBlackboard): number
}

declare interface RangedWeaponPSMPrereqState extends PlayerStateMachinePrereqState {

}

declare interface RangedWeaponPSMPrereq extends PlayerStateMachinePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  GetStateMachineEnum(): string
  GetCurrentPSMStateIndex(bb: IBlackboard): number
}

declare interface SwimmingPSMPrereqState extends PlayerStateMachinePrereqState {

}

declare interface SwimmingPSMPrereq extends PlayerStateMachinePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  GetStateMachineEnum(): string
  GetCurrentPSMStateIndex(bb: IBlackboard): number
}

declare interface TakedownPSMPrereqState extends PlayerStateMachinePrereqState {

}

declare interface TakedownPSMPrereq extends PlayerStateMachinePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  GetStateMachineEnum(): string
  GetCurrentPSMStateIndex(bb: IBlackboard): number
}

declare interface AINodeMap_Record extends TweakDBRecord {

  Map(outList: AINodeMapField_Record[]): void
  GetMapCount(): number
  GetMapItem(index: number): AINodeMapField_Record
  MapContains(item: AINodeMapField_Record): Bool
}

declare interface AINodeMapField_Record extends TweakDBRecord {

  Node(): AIRecord_Record
  IsOverriddenBy(): AIRecord_Record
  ForLOD(): number
}

declare interface TimeDilationPSMPrereqState extends PlayerStateMachinePrereqState {

}

declare interface TimeDilationPSMPrereq extends PlayerStateMachinePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  GetStateMachineEnum(): string
  GetCurrentPSMStateIndex(bb: IBlackboard): number
}

declare interface UpperBodyPSMPrereqState extends PlayerStateMachinePrereqState {

}

declare interface UpperBodyPSMPrereq extends PlayerStateMachinePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  GetStateMachineEnum(): string
  GetCurrentPSMStateIndex(bb: IBlackboard): number
}

declare interface UsingCoverPSMPrereqState extends PlayerStateMachinePrereqState {

  OnStateUpdateBool(value: Bool): Bool
}

declare interface UsingCoverPSMPrereq extends PlayerStateMachinePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  GetStateMachineEnum(): string
  GetCurrentPSMStateIndex(bb: IBlackboard): number
  Initialize(recordID: TweakDBID): void
}

declare interface VehiclePSMPrereqState extends PlayerStateMachinePrereqState {

}

declare interface VehiclePSMPrereq extends PlayerStateMachinePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  GetStateMachineEnum(): string
  GetCurrentPSMStateIndex(bb: IBlackboard): number
}

declare interface ZonesPSMPrereqState extends PlayerStateMachinePrereqState {

}

declare interface ZonesPSMPrereq extends PlayerStateMachinePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  GetStateMachineEnum(): string
  GetCurrentPSMStateIndex(bb: IBlackboard): number
}

declare interface ActionTargetPrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  OnApplied(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface ActionTargetPrereq_Record extends IPrereq_Record {

  Target(): AIActionTarget_Record
  Invert(): Bool
}

declare interface NPCAttitudeTowardsPlayerPrereqState extends PrereqState {

  OnAttitudeStateChanged(): void
}

declare interface NPCAttitudeTowardsPlayerPrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
  OnApplied(state: PrereqState, game: GameInstance, context: IScriptable): void
  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
}

declare interface gameScriptedPrereqAttitudeListenerWrapper extends IScriptable {

  /** @noSelf **/
  CreateListener(gameInstance: GameInstance, agent1: AttitudeAgent, agent2: AttitudeAgent, prereqState: PrereqState): gameScriptedPrereqAttitudeListenerWrapper
}

declare interface NPCRecordHasVisualTagState extends PrereqState {

}

declare interface NPCRecordHasVisualTag extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  IsOnRegisterSupported(): Bool
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface EntityHasVisualTagPrereqState extends PrereqState {

}

declare interface EntityHasVisualTag extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface AISquadClosestToSectorCheck_Record extends AISquadDistanceRelationToSectorCheck_Record {

}

declare interface AISquadClosestToTargetCheck_Record extends AISquadDistanceRelationToTargetCheck_Record {

}

declare interface AISquadFurthestToSectorCheck_Record extends AISquadDistanceRelationToSectorCheck_Record {

}

declare interface AISquadFurthestToTargetCheck_Record extends AISquadDistanceRelationToTargetCheck_Record {

}

declare interface NPCIsAggressiveState extends PrereqState {

}

declare interface NPCIsAggressivePrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
  OnApplied(state: PrereqState, game: GameInstance, context: IScriptable): void
}

declare interface NPCLocomotionTypePrereqState extends PrereqState {

  OnLocomotionTypeChanged(value: number): Bool
}

declare interface NPCLocomotionTypePrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  Evaluate(owner: GameObject, value: number): Bool
}

declare interface AISquadType_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataAISquadType
}

declare interface EntityNoticedPlayerPrereqState extends PrereqState {

  OnStateUpdate(value: number): Bool
}

declare interface EntityNoticedPlayerPrereq extends IScriptablePrereq {

  Evaluate(owner: GameObject, value: number): Bool
  Initialize(recordID: TweakDBID): void
  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  OnApplied(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface NPCRarityPrereqState extends PrereqState {

}

declare interface NPCRarityPrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  IsOnRegisterSupported(): Bool
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface NPCReactionPresetPrereqState extends PrereqState {

}

declare interface NPCReactionPresetPrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface AISubActionCallSquadSearchBackUp_Record extends AISubAction_Record {

  Target(): AIActionTarget_Record
  NumberOfTargets(): number
  CallInLevel(): number
}

declare interface NPCInScenePrereqState extends PrereqState {

  OnSceneInspectionStateChanged(isEntityInScene: Bool): void
}

declare interface NPCInScenePrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
  Evaluate(isEntityInScene: Bool): Bool
}

declare interface gameScriptedPrereqSceneInspectionListenerWrapper extends IScriptable {

  /** @noSelf **/
  CreateEntityListener(gameInstance: GameInstance, entityId: EntityID, prereqState: PrereqState): gameScriptedPrereqSceneInspectionListenerWrapper
}

declare interface NPCDetectingPlayerPrereqState extends PrereqState {

  OnStateUpdate(value: number): Bool
}

declare interface NPCDetectingPlayerPrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
  Evaluate(owner: GameObject, percentage: number): Bool
}

declare interface NPCTypePrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  OnApplied(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface NPCTypePrereq_Record extends IPrereq_Record {

  AllowedTypes(outList: NPCType_Record[]): void
  GetAllowedTypesCount(): number
  GetAllowedTypesItem(index: number): NPCType_Record
  AllowedTypesContains(item: NPCType_Record): Bool
  Invert(): Bool
}

declare interface NPCIsChildPrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface NPCIsCrowdPrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface VisualTagsPrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  OnApplied(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface VisualTagsPrereq_Record extends IPrereq_Record {

  AllowedTags(): CName[]
  GetAllowedTagsCount(): number
  GetAllowedTagsItem(index: number): CName
  AllowedTagsContains(item: CName): Bool
  Invert(): Bool
}

declare interface PlayerCombatStateTimePrereqState extends PrereqState {

  OnStateUpdate(value: number): Bool
}

declare interface PlayerCombatStateTimePrereq extends IScriptablePrereq {

  Evaluate(owner: GameObject, value: number): Bool
  Initialize(recordID: TweakDBID): void
  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  OnApplied(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface AISubActionEquipOnBody_Record extends AISubActionCharacterRecordEquip_Record {

}

declare interface AISubActionFail_Record extends AISubAction_Record {

}

declare interface CharacterDataPrereqState extends PrereqState {

}

declare interface CharacterDataPrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  OnApplied(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface HighLevelNPCStatePrereqState extends NPCStatePrereqState {

}

declare interface HighLevelNPCStatePrereq extends NPCStatePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
  Initialize(recordID: TweakDBID): void
  GetStateToCheck(): number
}

declare interface AISubActionHitData_Record extends AISubAction_Record {

}

declare interface IsHumanPrereqState extends PrereqState {

}

declare interface IsHumanPrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface CurrentHighLevelNPCStatePrereq extends IScriptablePrereq {

  Initialize(record: TweakDBID): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface IsPlayerMovingPrereqState extends PlayerStateMachinePrereqState {

  OnStateUpdateBool(value: Bool): Bool
}

declare interface IsPlayerMovingPrereq extends PlayerStateMachinePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  GetStateMachineEnum(): string
  GetCurrentPSMStateIndex(bb: IBlackboard): number
  Initialize(recordID: TweakDBID): void
}

declare interface IsPlayerPrereqState extends PrereqState {

}

declare interface IsPlayerPrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  OnApplied(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface IsPlayerReachablePrereqState extends PrereqState {

}

declare interface IsPlayerReachablePrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface IsPuppetActivePrereqState extends PrereqState {

  OnPSStateChanged(): void
}

declare interface IsPuppetActivePrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  OnApplied(state: PrereqState, game: GameInstance, context: IScriptable): void
  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface IsPuppetBreachedPrereqState extends PrereqState {

  OnPSStateChanged(): void
}

declare interface IsPuppetBreachedPrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface AISubActionSetEquipPrimaryWeapons_Record extends AISubActionCharacterRecordEquip_Record {

}

declare interface AISubActionSetEquipSecondaryWeapons_Record extends AISubActionCharacterRecordEquip_Record {

}

declare interface AISubActionSetItemAsTarget_Record extends AISubActionSetTargetByTag_Record {

  ItemCategory(): ItemCategory_Record
  ItemType(): ItemType_Record
}

declare interface AISubActionSetUnequipPrimaryWeapons_Record extends AISubActionCharacterRecordUnequip_Record {

}

declare interface AISubActionSetUnequipSecondaryWeapons_Record extends AISubActionCharacterRecordUnequip_Record {

}

declare interface UpperBodyNPCStatePrereqState extends NPCStatePrereqState {

}

declare interface UpperBodyNPCStatePrereq extends NPCStatePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  Initialize(recordID: TweakDBID): void
  GetStateToCheck(): number
}

declare interface StanceNPCStatePrereqState extends NPCStatePrereqState {

}

declare interface StanceNPCStatePrereq extends NPCStatePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
  Initialize(recordID: TweakDBID): void
  GetStateToCheck(): number
}

declare interface RandomChancePrereqState extends PrereqState {

}

declare interface RandomChancePrereq extends IScriptablePrereq {

  OnApplied(state: PrereqState, game: GameInstance, context: IScriptable): void
}

declare interface CurrentStanceNPCStatePrereq extends IScriptablePrereq {

  Initialize(record: TweakDBID): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface SetChancePrereqState extends PrereqState {

}

declare interface SetChancePrereq extends IScriptablePrereq {

  OnApplied(state: PrereqState, game: GameInstance, context: IScriptable): void
  Initialize(record: TweakDBID): void
}

declare interface StatPoolSpentPrereqListener extends BaseStatPoolPrereqListener {

  OnStatPoolValueChanged(oldValue: number, newValue: number, percToPoints: number): void
  RegisterState(state: PrereqState): void
}

declare interface StatPoolSpentPrereqState extends PrereqState {

  GetThreshold(): number
  SetThreshold(v: number): void
}

declare interface StatPoolSpentPrereq extends IScriptablePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  Initialize(recordID: TweakDBID): void
}

declare interface AITacticType_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataAITacticType
}

declare interface StatusEffectAbsentPrereqState extends StatusEffectPrereqState {

  StatusEffectUpdate(statusEffect: StatusEffect_Record, isApplied: Bool): void
}

declare interface StatusEffectAbsentPrereq extends StatusEffectPrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  Initialize(recordID: TweakDBID): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
  OnApplied(state: PrereqState, game: GameInstance, context: IScriptable): void
}

declare interface StatusEffectRemovedPrereqState extends StatusEffectPrereqState {

  StatusEffectUpdate(statusEffect: StatusEffect_Record, isApplied: Bool): void
}

declare interface StatusEffectRemovedPrereq extends StatusEffectPrereq {

  Initialize(recordID: TweakDBID): void
  Evaluate(statusEffect: StatusEffect_Record): Bool
}

declare interface TemporalPrereqDelayCallback extends DelayCallback {

  Call(): void
  RegisterState(state: PrereqState): void
}

declare interface TemporalPrereqState extends PrereqState {

  RegisterDealyCallback(delayTime: number): void
  CallbackRecall(): void
}

declare interface TemporalPrereq extends IScriptablePrereq {

  OnRegister(state: PrereqState, game: GameInstance, context: IScriptable): Bool
  OnUnregister(state: PrereqState, game: GameInstance, context: IScriptable): void
  Initialize(recordID: TweakDBID): void
}

declare interface PlayerVehicleStatePrereq extends IScriptablePrereq {

  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface AbsoluteZLimiterCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  ZLimit(): number
}

declare interface DialogueChoiceHubPrereqState extends PrereqState {

}

declare interface DialogueChoiceHubPrereq extends IScriptablePrereq {

  Initialize(recordID: TweakDBID): void
  IsFulfilled(game: GameInstance, context: IScriptable): Bool
}

declare interface ActionMap_Record extends TweakDBRecord {

  DefaultMap(): AINodeMap_Record
  Map(outList: ActionMapField_Record[]): void
  GetMapCount(): number
  GetMapItem(index: number): ActionMapField_Record
  MapContains(item: ActionMapField_Record): Bool
}

declare interface ActionMapField_Record extends TweakDBRecord {

  ItemType(): ItemType_Record
  Map(): AINodeMap_Record
}

declare interface ActionPayment_Record extends ObjectAction_Record {

}

declare interface ActionWidgetDefinition_Record extends WidgetDefinition_Record {

}

declare interface Advertisement_Record extends TweakDBRecord {

  Definitions(outList: AdvertisementFormatDef_Record[]): void
  GetDefinitionsCount(): number
  GetDefinitionsItem(index: number): AdvertisementFormatDef_Record
  DefinitionsContains(item: AdvertisementFormatDef_Record): Bool
  LocalizationKey(): CName
  Resource(): ResRef
}

declare interface AdvertisementFormatDef_Record extends TweakDBRecord {

  Format(): string
  LibraryName(): string
  LocalizationKeyOverride(): CName
}

declare interface AdvertisementFormatsEnum_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
}

declare interface AdvertisementGroup_Record extends TweakDBRecord {

  IncludedGroups(outList: AdvertisementGroup_Record[]): void
  GetIncludedGroupsCount(): number
  GetIncludedGroupsItem(index: number): AdvertisementGroup_Record
  IncludedGroupsContains(item: AdvertisementGroup_Record): Bool
  Advertisements(outList: Advertisement_Record[]): void
  GetAdvertisementsCount(): number
  GetAdvertisementsItem(index: number): Advertisement_Record
  AdvertisementsContains(item: Advertisement_Record): Bool
  FallbackAtlasResource(): ResRef
  LightTintColor(): Vector3
  AdvertTintColor(): Vector3
}

declare interface AimAssistAimSnap_Record extends TweakDBRecord {

  CameraInputMagToBreak(): number
  Precision(): number
  Duration(): number
  MaxDuration(): number
  MinDistance(): number
  MaxDistance(): number
  TargetAngleDistanceFactor(): number
  EndOnAimingStopped(): Bool
  EaseIn(): Bool
  EaseOut(): Bool
  IsEnabled(): Bool
  AdjustPitch(): Bool
  EndOnCameraInputApplied(): Bool
  AdjustYaw(): Bool
  EndOnTargetReached(): Bool
  EndOnTimeExceeded(): Bool
  EvaluateTargets(): Bool
  CheckRange(): Bool
  CancelWithRecoil(): Bool
}

declare interface AimAssistBulletMagnetism_Record extends TweakDBRecord {

  TargetHighAngularVelocity(): number
  TargetSearchAngleYaw(): number
  TargetSearchAnglePitch(): number
  MagPointOffset(): number
  IsEnabled(): Bool
}

declare interface AimAssistCommon_Record extends TweakDBRecord {

  AimAssistType(): AimAssistType_Record
  FirstPassAngleRange(): EulerAngles
  SoftLockBrakeAngle(): EulerAngles
  AngleDistUnit(): number
  RotatingAwayFromPastTargetPenalty(): number
  AngleProximityThreshold(): number
  AngleProximityBonus(): number
  PastTargetWeight(): number
  AngleDistUnitWeight(): number
  WorldProximityThreshold(): number
  WorldDistUnitWeight(): number
  WorldProximityBonus(): number
  WorldDistUnit(): number
  TargetLostTimeOut(): number
  SoftLockTargetWeight(): number
  TargetAcquisitionDelayTime(): number
  RecentInputTime(): number
  IsEnabledForMouse(): Bool
  IsEnabled(): Bool
}

declare interface AimAssistFinishing_Record extends TweakDBRecord {

  MaxTime(): number
  MaxCorrectionYaw(): number
  VelocityDecreaseActivationFactor(): number
  InputHistoryTime(): number
  MaxCorrectionAngle(): number
  MaxCorrectionPitch(): number
  IsEnabled(): Bool
}

declare interface AimAssistMagnetism_Record extends TweakDBRecord {

  DistanceMultiplier(): CName
  StickInputMagMultiplier(): CName
  MaxStrength(): Vector2
  YawBoundAdditiveForPitchMagnetism(): number
  PitchBoundAdditiveForYawMagnetism(): number
  BlendOnTime(): number
  BlendOffTime(): number
  MaxTimeTillOffTarget(): number
  MinTimeTillOffTarget(): number
  SoftLockTimeToReach(): number
  FullStickThreshold(): number
  FullStickYawAngleDisable(): number
  TargetLostBlendOut(): Bool
  IsEnabled(): Bool
  CheckWeaponEffectiveRange(): Bool
  DisableWithNoInput(): Bool
}

declare interface ReactionData extends IScriptable {

}

declare interface AimAssistMelee_Record extends TweakDBRecord {

  MoveToTargetEnabledAttacks(): number
  MoveToTargetSearchDistance(): number
  MoveToTargetDistanceIntoAttackRange(): number
  AimSnapOnBlockHit(): Bool
  AimSnapOnAttack(): Bool
  AimSnapOnThrow(): Bool
  AimSnapOnAim(): Bool
  AimSnapOnHit(): Bool
}

declare interface AimAssistTargetData_Record extends TweakDBRecord {

  Filters(outList: AimAssistType_Record[]): void
  GetFiltersCount(): number
  GetFiltersItem(index: number): AimAssistType_Record
  FiltersContains(item: AimAssistType_Record): Bool
  HeightUp(): number
  AimSnapAngle(): number
  HeightDown(): number
  Width(): number
  AimSnapPriorityWeight(): number
  IsForAimMagnetisim(): Bool
  IsForAimSnap(): Bool
}

declare interface AimAssistType_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataAimAssistType
}

declare interface AngleDistanceCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  AngleDistanceScore(): number
  CoverLowerMinVerticalAngle(): number
  MaximumDistance(): number
  MinThreatsAmountToCheckDistance(): number
  CoverProtectionAngleMul(): number
  ThreatPredictionTime(): number
  VerticalAngleCooldown(): number
  ShootingSpotLowerMinVerticalAngle(): number
  ClosestThreatsAmountToIgnoreDistanceCheck(): number
}

declare interface AngleRange_Record extends SenseShape_Record {

  Position(): Vector3
  Angle(): number
  Range(): number
  HalfHeight(): number
}

declare interface Appearance_Record extends TweakDBRecord {

  Tags(): CName[]
  GetTagsCount(): number
  GetTagsItem(index: number): CName
  TagsContains(item: CName): Bool
}

declare interface ApperanceToEthnicities_Record extends TweakDBRecord {

  Ethnicities(outList: EthnicNames_Record[]): void
  GetEthnicitiesCount(): number
  GetEthnicitiesItem(index: number): EthnicNames_Record
  EthnicitiesContains(item: EthnicNames_Record): Bool
  AppearanceName(): CName
}

declare interface ApperanceToEthnicitiesMap_Record extends TweakDBRecord {

  Map(outList: ApperanceToEthnicities_Record[]): void
  GetMapCount(): number
  GetMapItem(index: number): ApperanceToEthnicities_Record
  MapContains(item: ApperanceToEthnicities_Record): Bool
}

declare interface TargetSearchFilter {

}

declare interface AttachableObject_Record extends SpawnableObject_Record {

}

declare interface animAnimFeatureEntry {

}

declare interface StateSnapshot {

}

declare interface Tier3CameraSettings {

}

declare interface SnapshotResult {

}

declare interface StateSnapshotsContainer {

  /** @noSelf **/
  GetSnapshot(self: StateSnapshotsContainer, stateMachineIdentifier: StateMachineIdentifier): SnapshotResult
}

declare interface Attack_Landing_Record extends Attack_GameEffect_Record {

  FxPackage(): LandingFxPackage_Record
}

declare interface SceneTier1Data extends SceneTierData {

}

declare interface SceneTier2Data extends SceneTierData {

}

declare interface SceneTier3Data extends SceneTierDataMotionConstrained {

}

declare interface SceneTier4Data extends SceneTierDataMotionConstrained {

}

declare interface SceneTier5Data extends SceneTierDataMotionConstrained {

}

declare interface Attack_Projectile_Record extends Attack_Record {

  ProjectileTemplateName(): CName
}

declare interface Attitude_Record extends TweakDBRecord {

  Value(): string
  Group1(): AttitudeGroup_Record
  Group2(): AttitudeGroup_Record
}

declare interface VehicleRadioStationChanged extends Event {

}

declare interface VehicleRadioSongChanged extends Event {

}

declare interface Attribute_Record extends Stat_Record {

  Proficiencies(outList: Proficiency_Record[]): void
  GetProficienciesCount(): number
  GetProficienciesItem(index: number): Proficiency_Record
  ProficienciesContains(item: Proficiency_Record): Bool
}

declare interface VehicleCameraManagerFT extends VehicleCameraManager {

  FT_IsSceneModeActive(): Bool
  FT_RequestSceneMode(active: Bool): void
  FT_GetActiveCameraType(): vehicleCameraType
}

declare interface AvoidLineOfSightSelectionParameters_Record extends CoverSelectionParameters_Record {

  Angle(): number
  Multiplier(): number
  Height(): number
  Distance(): number
}

declare interface BaseDrivingParameters_Record extends TweakDBRecord {

  Brake(): VehiclePIDSettings_Record
  Stopping(): VehicleStoppingSettings_Record
  BoostStats(): VehicleAIBoostSettings_Record
  Accel(): VehiclePIDSettings_Record
  SteeringReverse(): VehicleSteeringSettings_Record
  Steering(): VehicleSteeringSettings_Record
  MaxVisionDistance(): number
  WheelTurnSpeed(): number
  HasPanic(): Bool
}

declare interface Bounce_Record extends ProjectileCollision_Record {

}

declare interface Box_Record extends SenseShape_Record {

  Min(): Vector3
  Max(): Vector3
}

declare interface CPOItemCategoryBase_Record extends TweakDBRecord {

}

declare interface CPOLoadoutBase_Record extends TweakDBRecord {

  DisplayName(): string
  Items(outList: InventoryItem_Record[]): void
  GetItemsCount(): number
  GetItemsItem(index: number): InventoryItem_Record
  ItemsContains(item: InventoryItem_Record): Bool
}

declare interface CarriableObject_Record extends SpawnableObject_Record {

}

declare interface LadderDescription extends IScriptable {

}

declare interface ItemEquipRequest extends IScriptable {

}

declare interface ItemUnequipRequest extends IScriptable {

}

declare interface ClimbParameters extends ClimbParametersBase {

  SetHorizontalDuration(val: number): void
  SetVerticalDuration(val: number): void
  SetClimbType(val: number): void
}

declare interface VaultParameters extends ClimbParametersBase {

  SetObstacleDestination(val: Vector4): void
  SetObstacleDepth(val: number): void
  SetMinSpeed(val: number): void
}

declare interface LocomotionSwimmingParameters extends LocomotionParameters {

  SetBuoyancyLineFraction(val: number): void
  SetDragCoefficient(val: number): void
}

declare interface LocomotionBraindanceParameters extends LocomotionParameters {

  SetUpperMovementLimit(val: number): void
  SetLowerMovementLimit(val: number): void
}

declare interface SecureFootingParameters {

}

declare interface CharacterEntry_Record extends TweakDBRecord {

  Name(): CName
  Id(): number
}

declare interface CharacterList_Record extends TweakDBRecord {

  Entries(outList: CharacterEntry_Record[]): void
  GetEntriesCount(): number
  GetEntriesItem(index: number): CharacterEntry_Record
  EntriesContains(item: CharacterEntry_Record): Bool
}

declare interface ChatterHelperRadius_Record extends TweakDBRecord {

  MinDistanceToOtherPlayer(): number
  MaxDistanceToOtherPlayer(): number
}

declare interface ChoiceCaptionPartType_Record extends TweakDBRecord {

  Comment(): string
  EnumName(): CName
  Type(): gamedataChoiceCaptionPartType
}

declare interface ChoiceCaptionTagPart_Record extends ChoiceCaptionPart_Record {

  TagLocId(): string
}

declare interface ClearLineOfSightCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  Cooldown(): number
  Multiplier(): number
  ClearLOSDistanceTolerance(): number
  PreferredActionCount(): number
}

declare interface ClosestToOwnerCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  PreferredOwnerDistance(): number
  DistanceToOwnerMultiplier(): number
}

declare interface Clothing_Record extends Item_Record {

}

declare interface Clothing_inline0_Record extends CombinedStatModifier_Record {

}

declare interface Clothing_inline1_Record extends ConstantStatModifier_Record {

}

declare interface Codex_Record extends TweakDBRecord {

  Entries(outList: CodexRecord_Record[]): void
  GetEntriesCount(): number
  GetEntriesItem(index: number): CodexRecord_Record
  EntriesContains(item: CodexRecord_Record): Bool
}

declare interface CodexRecord_Record extends TweakDBRecord {

  RecordContent(outList: CodexRecordPart_Record[]): void
  GetRecordContentCount(): number
  GetRecordContentItem(index: number): CodexRecordPart_Record
  RecordContentContains(item: CodexRecordPart_Record): Bool
  Tags(): CName[]
  GetTagsCount(): number
  GetTagsItem(index: number): CName
  TagsContains(item: CName): Bool
  UnlockPrereq(): CName
  UnlockedFromStart(): Bool
}

declare interface CodexRecordPart_Record extends TweakDBRecord {

  PartContent(): string
  PartName(): CName
}

declare interface CompanionDistancePreset_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Distance(): number
  Tolerance(): number
  Type(): gamedataCompanionDistancePreset
}

declare interface CompoundSelectionPreset_Record extends TweakDBRecord {

  Presets(): string[]
  GetPresetsCount(): number
  GetPresetsItem(index: number): string
  PresetsContains(item: string): Bool
  GatherRadius(): number
}

declare interface ComputerScreenType_Record extends DeviceScreenType_Record {

}

declare interface Cone_Record extends SenseShape_Record {

  Position2(): Vector3
  Position1(): Vector3
  Radius1(): number
  Radius2(): number
}

declare interface WeakspotDestroyedEvent extends Event {

}

declare interface WeakspotOnDestroyEffector extends Effector {

  Initialize(record: TweakDBID, game: GameInstance, parentRecord: TweakDBID): void
  ActionOn(owner: GameObject): void
  ActionOff(owner: GameObject): void
}

declare interface CooldownType_Record extends TweakDBRecord {

  Type(): CName
}

declare interface CoverHealthCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  HpMultiplier(): number
}

declare interface CoverSelectionPreset_Record extends TweakDBRecord {

  CombatRing(): AIRingType_Record
  Scoring(): string[]
  GetScoringCount(): number
  GetScoringItem(index: number): string
  ScoringContains(item: string): Bool
  PostFiltering(): string[]
  GetPostFilteringCount(): number
  GetPostFilteringItem(index: number): string
  PostFilteringContains(item: string): Bool
  Filtering(): string[]
  GetFilteringCount(): number
  GetFilteringItem(index: number): string
  FilteringContains(item: string): Bool
  DismissedCoverTimer(): number
  GatherRadius(): number
  UsesLineOfSight(): Bool
}

declare interface CoverTypeCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  MaxScore(): number
  CoverScore(): number
  ShootingSpotScore(): number
}

declare interface Crosshair_Record extends TweakDBRecord {

  WidgetResourcePath(): ResRef
}

declare interface CrowdSettingsPackageBase_Record extends TweakDBRecord {

  Specs(outList: CrowdSlotMovementPatternBase_Record[]): void
  GetSpecsCount(): number
  GetSpecsItem(index: number): CrowdSlotMovementPatternBase_Record
  SpecsContains(item: CrowdSlotMovementPatternBase_Record): Bool
}

declare interface CrowdSlotMovementPatternBase_Record extends TweakDBRecord {

  Settings(): CrowdSlotMovementSettingsBase_Record
  Name(): CName
}

declare interface CrowdSlotMovementSettingsBase_Record extends TweakDBRecord {

  MaxStopSpeed(): number
  DirectionSmoothFactor(): number
  CurveFactor(): number
  MinLightDelay(): number
  RadiusSmoothFactor(): number
  BumpTriggerSpeedFactor(): number
  MaxSpeed(): number
  AvoidanceReserve(): number
  MaxDeviationFromPath(): number
  SoftAdheranceMax(): number
  MoveSpeedType(): number
  OverlapTolerance(): number
  MaxLightDelay(): number
  Length(): number
  StopReserve(): number
  SoftAdheranceMin(): number
  ReachFactor(): number
  FenceGapReserve(): number
  BumpTriggerMaxDistancePlayer(): number
  MinSpeed(): number
  BaseRadius(): number
  AccelerationFactor(): number
  BumpTriggerRadiusFactor(): number
  RotationSpeed(): number
  SurroundDistance(): number
  BumpTriggerMaxDistanceNPC(): number
  MaxSpeedTolerance(): number
  RadiusTopClamp(): number
  BumpTriggerMinSpeed(): number
  BrakePressureFactor(): number
  Acceleration(): number
  RadiusBottomClamp(): number
  AbsoluteFrontClamp(): number
  MinStopSpeed(): number
  LaneObstacleBuffer(): number
  Deceleration(): number
  CurveLimit(): number
  SpeedStage(): Bool
  DirectionStage(): Bool
  IgnorePlayer(): Bool
  DropItems(): Bool
  IgnoreLights(): Bool
  IgnoreSpeedLimitations(): Bool
  IgnorePedestrians(): Bool
  IgnoreCars(): Bool
  IgnoreRules(): Bool
  IgnoreStatics(): Bool
}

declare interface CurrencyReward_inline0_Record extends ConstantStatModifier_Record {

}

declare interface Curves_Record extends TweakDBRecord {

  Curves(outList: Curve_Record[]): void
  GetCurvesCount(): number
  GetCurvesItem(index: number): Curve_Record
  CurvesContains(item: Curve_Record): Bool
}

declare interface CyberwareArea_Record extends EquipmentArea_Record {

  StatModifierGroups(outList: StatModifierGroup_Record[]): void
  GetStatModifierGroupsCount(): number
  GetStatModifierGroupsItem(index: number): StatModifierGroup_Record
  StatModifierGroupsContains(item: StatModifierGroup_Record): Bool
}

declare interface DefenseMode_Record extends TweakDBRecord {

  Comment(): string
  EnumName(): CName
  Type(): gamedataDefenseMode
}

declare interface DestructibleObject_Record extends BaseObject_Record {

}

declare interface DetectionCurve_Record extends TweakDBRecord {

  States(): CName[]
  GetStatesCount(): number
  GetStatesItem(index: number): CName
  StatesContains(item: CName): Bool
  Name(): CName
  MaxDistance(): number
}

declare interface DevelopmentPoint_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataDevelopmentPointType
}

declare interface DeviceAreaAttack_Record extends Attack_GameEffect_Record {

}

declare interface DeviceContentAssignment_Record extends ContentAssignment_Record {

}

declare interface DeviceWidgetDefinition_Record extends WidgetDefinition_Record {

}

declare interface Frustum {

}

declare interface DistanceFromOthersCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  MinimalPreferredDistance(): number
  MinimalDistance(): number
  DistanceScoreMultiplier(): number
}

declare interface DriveHelperType_Record extends TweakDBRecord {

  EnumName(): CName
}

declare interface DriveWheelsAccelerateNoise_Record extends DriveHelper_Record {

  MaxApplyTime(): number
  AccelerationBoostMaxSpeed(): number
  MaxForcesDifference(): number
  AccelerationBoost(): number
  MinApplyTime(): number
  MinForcesDifference(): number
  MinLongSlipRatio(): number
  AccelerationBoostReverse(): number
  AccelerationNoiseMaxSpeed(): number
}

declare interface DroneAnimationSetup_Record extends TweakDBRecord {

  TiltAngleOnSpeed(): number
  SizeFront(): number
  SizeBack(): number
  WalkTiltCoefficient(): number
  SizeLeft(): number
  SizeRight(): number
  Mass(): number
  SpeedIdleThreshold(): number
  MassNormalizedCoefficient(): number
  StartingRecoveryBalance(): number
  PseudoAcceleration(): number
  TurnInertiaDamping(): number
}

declare interface DynamicDownforceHelper_Record extends DriveHelper_Record {

  MaxSpeed(): number
  MaxSpeedFactorGround(): number
  MinSpeed(): number
  MaxSpeedFactorAir(): number
}

declare interface EnvLight_Record extends TweakDBRecord {

  Color(): number[]
  GetColorCount(): number
  GetColorItem(index: number): number
  ColorContains(item: number): Bool
  Intensity(): number
  Radius(): number
  Temperature(): number
}

declare interface EthnicNames_Record extends TweakDBRecord {

  Gender(): Gender_Record
  Ethnicity(): Ethnicity_Record
  Surnames(): CName[]
  GetSurnamesCount(): number
  GetSurnamesItem(index: number): CName
  SurnamesContains(item: CName): Bool
  VisualTags(): CName[]
  GetVisualTagsCount(): number
  GetVisualTagsItem(index: number): CName
  VisualTagsContains(item: CName): Bool
  Names(): CName[]
  GetNamesCount(): number
  GetNamesItem(index: number): CName
  NamesContains(item: CName): Bool
  NameOrderFormat(): CName
  DisplayName(): CName
}

declare interface Ethnicity_Record extends TweakDBRecord {

  Comment(): string
  EnumName(): CName
  Type(): gamedataEthnicity
}

declare interface FacialPreset_Record extends TweakDBRecord {

  ProfileName(): CName
  UpperFaceBlendAdditive(): Bool
  LowerFaceBlendAdditive(): Bool
  EyesBlendAdditive(): Bool
}

declare interface FastTravelBinkData_Record extends TweakDBRecord {

  District(): District_Record
  Time(): Time_Record
  Weather(): Weather_Record
  BinkPath(): ResRef
}

declare interface FastTravelBinksGroup_Record extends TweakDBRecord {

  BinksData(outList: FastTravelBinkData_Record[]): void
  GetBinksDataCount(): number
  GetBinksDataItem(index: number): FastTravelBinkData_Record
  BinksDataContains(item: FastTravelBinkData_Record): Bool
}

declare interface FastTravelScreenData_Record extends TweakDBRecord {

  Time(): Time_Record
  District(): District_Record
  Weather(): Weather_Record
  ExtendingResourcePath(): ResRef
  ResourcePath(): ResRef
}

declare interface FastTravelScreenDataGroup_Record extends TweakDBRecord {

  ScreensData(outList: FastTravelScreenData_Record[]): void
  GetScreensDataCount(): number
  GetScreensDataItem(index: number): FastTravelScreenData_Record
  ScreensDataContains(item: FastTravelScreenData_Record): Bool
}

declare interface FocusClue_Record extends ScannableData_Record {

}

declare interface Footstep_Record extends TweakDBRecord {

  FootstepEntityLeft(): CName
  FootstepEntityRight(): CName
  TimeToFade(): number
}

declare interface FriendlyTargetAngleDistanceCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  CoverProtectionAngleMul(): number
  MinDot(): number
  AngleDistanceScore(): number
  PositionChangeThreshold(): number
  MaxScoreIfInRange(): Bool
}

declare interface FriendlyTargetDistanceCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  SpatialHintMults(): Vector3
  FriendlyTargetPreferredDistance(): number
  FriendlyTargetMaxDistance(): number
  FriendlyTargetZLimit(): number
  FriendlyTargetMinDistance(): number
  DistanceToFriendlyTargetMultiplier(): number
}

declare interface GOGReward_Record extends TweakDBRecord {

  DisplayName(): CName
  Description(): CName
  IconsAtlasSlot(): CName
  RewardToken(): number
}

declare interface RectF {

}

declare interface Gender_Record extends TweakDBRecord {

  Comment(): string
  EnumName(): CName
  Type(): gamedataGender
}

declare interface GenderEntity_Record extends TweakDBRecord {

  Gender(): Gender_Record
  MultiplayerEntities(): ResRef[]
  GetMultiplayerEntitiesCount(): number
  GetMultiplayerEntitiesItem(index: number): ResRef
  Entity(): ResRef
  Initial(): Bool
}

declare interface GenericHighwaySign_Record extends BaseSign_Record {

  DistrictName(): string
  SubDistrictName(): string
  IconName(): CName
}

declare interface GenericMetroSign_Record extends BaseSign_Record {

  SubDistrictName(): string
  StationName(): string
  MetroLineName(): CName[]
  GetMetroLineNameCount(): number
  GetMetroLineNameItem(index: number): CName
  MetroLineNameContains(item: CName): Bool
  IconName(): CName
}

declare interface GenericStreetNameSign_Record extends BaseSign_Record {

  DistrictName(): string
  SubDistrictName(): string
  StreetName(): string
}

declare interface Sphere {

  /** @noSelf **/
  IntersectRay(sphere: Sphere, orign: Vector4, direction: Vector4, enterPoint: Vector4, exitPoint: Vector4): number
  /** @noSelf **/
  IntersectEdge(sphere: Sphere, a: Vector4, b: Vector4, intersectionPoint0: Vector4, intersectionPoint1: Vector4): number
}

declare interface HUD_Preset_Entry_Record extends TweakDBRecord {

  HudEntries(): CName[]
  GetHudEntriesCount(): number
  GetHudEntriesItem(index: number): CName
  HudEntriesContains(item: CName): Bool
}

declare interface HackingMiniGame_Record extends TweakDBRecord {

  AllowedTraps(outList: Trap_Record[]): void
  GetAllowedTrapsCount(): number
  GetAllowedTrapsItem(index: number): Trap_Record
  AllowedTrapsContains(item: Trap_Record): Bool
  PredefinedNetworkPrograms(): string[]
  GetPredefinedNetworkProgramsCount(): number
  GetPredefinedNetworkProgramsItem(index: number): string
  PredefinedNetworkProgramsContains(item: string): Bool
  PredefinedBasicAccess(): string[]
  GetPredefinedBasicAccessCount(): number
  GetPredefinedBasicAccessItem(index: number): string
  PredefinedBasicAccessContains(item: string): Bool
  PredefinedEnemyPrograms(): string[]
  GetPredefinedEnemyProgramsCount(): number
  GetPredefinedEnemyProgramsItem(index: number): string
  PredefinedEnemyProgramsContains(item: string): Bool
  Symbols(): string[]
  GetSymbolsCount(): number
  GetSymbolsItem(index: number): string
  SymbolsContains(item: string): Bool
  PredefinedGrid(): string[]
  GetPredefinedGridCount(): number
  GetPredefinedGridItem(index: number): string
  PredefinedGridContains(item: string): Bool
  PredefinedCyberdeckPrograms(): string[]
  GetPredefinedCyberdeckProgramsCount(): number
  GetPredefinedCyberdeckProgramsItem(index: number): string
  PredefinedCyberdeckProgramsContains(item: string): Bool
  SymbolProbabilities(): string[]
  GetSymbolProbabilitiesCount(): number
  GetSymbolProbabilitiesItem(index: number): string
  SymbolProbabilitiesContains(item: string): Bool
  SymbolProbabilitiesAlternative(): string[]
  GetSymbolProbabilitiesAlternativeCount(): number
  GetSymbolProbabilitiesAlternativeItem(index: number): string
  SymbolProbabilitiesAlternativeContains(item: string): Bool
  NetworkLevel(): number
  EnemyNetrunnerLevel(): number
  Dimension(): number
  GameType(): number
  InitialTimer(): number
  BufferModifier(): number
  HiddenCellsProbability(): number
  HasEnemyNetrunner(): Bool
  HasHiddenCells(): Bool
  HasInitialTimer(): Bool
  Officer(): Bool
}

declare interface HandbrakeFrictionModifier_Record extends DriveHelper_Record {

  BlendOutTime(): number
  RearWheelsLongFrictionCoef(): number
  RearWheelsLatFrictionCoef(): number
  AdditionalBrakeForLongUse(): number
  PostHandbrakeTractionBoost(): number
}

declare interface HomingParameters_Record extends TweakDBRecord {

  AngleInVerticalPlane(): number
  HalfLeanAngle(): number
  AngleInHitPlane(): number
  EndLeanAngle(): number
  BendFactor(): number
  ReturnTimeMargin(): number
  BendTimeRatio(): number
  InterpolationTimeRatio(): number
  StartVelocity(): number
  LinearTimeRatio(): number
  SnapRadius(): number
  AngleInterpolationDuration(): number
  Accuracy(): number
  ShouldRotate(): Bool
}

declare interface IconsGeneratorContext_Record extends TweakDBRecord {

  MalePlayerAnimSet(): ResRef
  FemalePlayerAnimSet(): ResRef
}

declare interface ImprovementRelation_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataImprovementRelation
}

declare interface InAirGravityModifier_Record extends DriveHelper_Record {

  SmoothingFactor(): number
  BaseAddedGravity(): number
  MinDriveSpeed(): number
  MaxDriveSpeed(): number
  DriveSpeedAddedGravity(): number
  ZVelReductionStart(): number
  ZVelReductionEnd(): number
}

declare interface InitLoadingScreen_Record extends TweakDBRecord {

  FirstAnimLibraryName(): CName
  SecondAnimLibraryName(): CName
  FirstAnimName(): CName
  ThirdAnimLibraryName(): CName
  ThirdAnimName(): CName
  MainMenuResource(): ResRef
  LoadingScreenResource(): ResRef
  SecondAnimName(): CName
  MainMenuLibraryName(): CName
  LoopAnimName(): CName
  MainMenuAnimName(): CName
  MainMenuLoopAnimName(): CName
  VoTrackAnimName(): CName
}

declare interface InventoryItemGroup_Record extends TweakDBRecord {

  Items(outList: InventoryItem_Record[]): void
  GetItemsCount(): number
  GetItemsItem(index: number): InventoryItem_Record
  ItemsContains(item: InventoryItem_Record): Bool
}

declare interface PhysicalCollisionEvent extends Event {

}

declare interface HitCharacterControllerEvent extends Event {

}

declare interface LifePathBluelinePart extends BluelinePart {

}

declare interface BuildBluelinePart extends BluelinePart {

}

declare interface PaymentBluelinePart extends BluelinePart {

}

declare interface BluelineDescription extends IScriptable {

}

declare interface BluelineObject extends IScriptable {

  ProcessScriptCondition(description: BluelineDescription, scriptCondition: IScriptable, playerObject: GameObject): void
  AsConjunction(description: BluelineDescription): void
  AsDisjunction(description: BluelineDescription): void
}

declare interface BluelineConditionTypeBase extends ScriptConditionTypeBase {

  GetBluelinePart(playerObject: GameObject): BluelinePart
  ExecuteBluelineAction(playerObject: GameObject): void
}

declare interface ItemArrayQuery_Record extends ItemQuery_Record {

  MinItems(): number
  MaxItems(): number
}

declare interface ItemCreationPrereq_Record extends StatPrereq_Record {

}

declare interface ItemDropSettings_Record extends TweakDBRecord {

  DesiredAngularVelocity(): number
  DesiredInitialRotation(): number
}

declare interface ItemPartConnection_Record extends TweakDBRecord {

  AttachmentSlot(): AttachmentSlot_Record
  Parent(): number
  Child(): number
}

declare interface ItemQueryElement_Record extends LootTableElement_Record {

  Query(): ItemQuery_Record
}

declare interface ItemRequiredSlot_Record extends TweakDBRecord {

  AttachmentSlot(): AttachmentSlot_Record
  Tags(): CName[]
  GetTagsCount(): number
  GetTagsItem(index: number): CName
  TagsContains(item: CName): Bool
}

declare interface ItemStructure_Record extends TweakDBRecord {

  EnumName(): CName
  EnumComment(): CName
  Type(): gamedataItemStructure
}

declare interface ResourceMetricsReportGenerator extends IScriptable {

  /** @noSelf **/
  WriteReportToFile(fileName: string): void
}

declare interface ItemsFactoryAppearanceSuffixBase_Record extends TweakDBRecord {

  ScriptedSystem(): CName
  ScriptedFunction(): CName
  InstantSwitch(): Bool
}

declare interface ItemsFactoryAppearanceSuffixOrder_Record extends TweakDBRecord {

  AppearanceSuffixes(outList: ItemsFactoryAppearanceSuffixBase_Record[]): void
  GetAppearanceSuffixesCount(): number
  GetAppearanceSuffixesItem(index: number): ItemsFactoryAppearanceSuffixBase_Record
  AppearanceSuffixesContains(item: ItemsFactoryAppearanceSuffixBase_Record): Bool
}

declare interface JournalIcon_Record extends UIIcon_Record {

}

declare interface KeepCurrentCoverCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  KeepCoverBonus(): number
}

declare interface LandingFxMaterial_Record extends TweakDBRecord {

  Material(): Material_Record
  Effect(): ResRef
}

declare interface LandingFxPackage_Record extends TweakDBRecord {

  Materials(outList: LandingFxMaterial_Record[]): void
  GetMaterialsCount(): number
  GetMaterialsItem(index: number): LandingFxMaterial_Record
  MaterialsContains(item: LandingFxMaterial_Record): Bool
}

declare interface Layout_Record extends TweakDBRecord {

  EnumName(): CName
  LibraryPath(): ResRef
}

declare interface LinearAccuracy_Record extends Accuracy_Record {

  Duration(): number
}

declare interface LoadingTipsGroup_Record extends TweakDBRecord {

  HintLocalizationKeys(): CName[]
  GetHintLocalizationKeysCount(): number
  GetHintLocalizationKeysItem(index: number): CName
  HintLocalizationKeysContains(item: CName): Bool
  UnlockingFact(): CName
}

declare interface LocomotionMode_Record extends TweakDBRecord {

  Comment(): string
  EnumName(): CName
  Type(): gamedataLocomotionMode
}

declare interface LootItem_Record extends LootTableElement_Record {

  ItemID(): Item_Record
}

declare interface LootTable_Record extends TweakDBRecord {

  LootGenerationType(): string
  LootItems(outList: LootItem_Record[]): void
  GetLootItemsCount(): number
  GetLootItemsItem(index: number): LootItem_Record
  LootItemsContains(item: LootItem_Record): Bool
  Queries(outList: ItemQueryElement_Record[]): void
  GetQueriesCount(): number
  GetQueriesItem(index: number): ItemQueryElement_Record
  QueriesContains(item: ItemQueryElement_Record): Bool
  LootTableInclusions(outList: LootTable_Record[]): void
  GetLootTableInclusionsCount(): number
  GetLootTableInclusionsItem(index: number): LootTable_Record
  LootTableInclusionsContains(item: LootTable_Record): Bool
  MaxItemsToLoot(): number
  MinItemsToLoot(): number
}

declare interface MappinClampingSettings_Record extends TweakDBRecord {

  EllipseOffset(): Vector2
  EllipseSize(): Vector2
  CustomTopRightEllipseSize(): Vector2
  CustomTopRightEllipseOffset(): Vector2
  CustomBottomRightEllipseOffset(): Vector2
  CustomTopLeftEllipseOffset(): Vector2
  ClampingRectangleRightAndBottom(): Vector2
  CustomBottomRightEllipseSize(): Vector2
  CustomTopLeftEllipseSize(): Vector2
  ClampingRectangleLeftAndTop(): Vector2
  CustomBottomLeftEllipseSize(): Vector2
  CustomBottomLeftEllipseOffset(): Vector2
  EllipseShapeSize(): Vector2
  MinimumClampPercent(): number
  ClampSmoothing(): number
  CustomTopLeftEllipse(): Bool
  UseSpecialShapeLogic(): Bool
  CustomTopRightEllipse(): Bool
  CustomBottomLeftEllipse(): Bool
  DisableTopRightEllipse(): Bool
  CustomBottomRightEllipse(): Bool
  DisableBottomRightEllipse(): Bool
  DisableBottomLeftEllipse(): Bool
  DisableTopLeftEllipse(): Bool
  UseEllipseShape(): Bool
}

declare interface MappinDefinition_Record extends Base_MappinDefinition_Record {

  PossibleVariants(outList: MappinVariant_Record[]): void
  GetPossibleVariantsCount(): number
  GetPossibleVariantsItem(index: number): MappinVariant_Record
  PossibleVariantsContains(item: MappinVariant_Record): Bool
}

declare interface MappinPhase_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataMappinPhase
}

declare interface MappinPhaseDefinition_Record extends TweakDBRecord {

  Phase(): MappinPhase_Record
  Variant(): MappinVariant_Record
}

declare interface MappinUICustomOpacityParams_Record extends TweakDBRecord {

  DistanceWhenFullyVisible(): number
  VisibilityConeStartAngle(): number
  DistanceWhenFullyHidden(): number
  VisibilityConeEndAngle(): number
  VisibilityConeMaximumOpacity(): number
}

declare interface Ref_1_3_1_TrivialClass extends IScriptable {

}

declare interface Ref_1_3_1_TrivialClassExplicitExtends extends IScriptable {

}

declare interface Ref_1_3_1_NonTrivialClass extends IScriptable {

  NonStaticFunction(): void
  /** @noSelf **/
  StaticFunction(): void
  OnSomething(): Bool
  OnTimer(dt: number, id: number): void
}

declare interface Ref_1_3_1_FinalClass extends IScriptable {

}

declare interface Ref_1_3_1_AbstractClass extends IScriptable {

}

declare interface Ref_1_3_1_AbstractFinalClass extends IScriptable {

}

declare interface Ref_1_3_1_PublicClass extends IScriptable {

}

declare interface Ref_1_3_1_ProtectedClass extends Ref_1_3_1_PublicClass {

}

declare interface Ref_1_3_1_PrivateClass extends Ref_1_3_1_ProtectedClass {

}

declare interface Ref_1_3_2_TrivialStruct {

}

declare interface MappinUIGlobalProfile_Record extends TweakDBRecord {

  NameplateVisibleInTier(): Bool[]
  GetNameplateVisibleInTierCount(): number
  GetNameplateVisibleInTierItem(index: number): Bool
  NameplateVisibleInTierContains(item: Bool): Bool
  VerticalRelationVisibleRangeMin(): number
  VerticalRelationTolerance(): number
  VerticalRelationVisibleRangeMax(): number
  GpsPortalIconScale(): number
  CompletedPOIOpacity(): number
  NameplateVisibleInBraindance(): Bool
}

declare interface Ref_1_3_2_DerivedStruct extends Ref_1_3_2_NonTrivialStruct {

}

declare interface Ref_1_3_2_FinalStruct {

}

declare interface MappinUIParamGroup_Record extends TweakDBRecord {

  MinFactor(): number
  MaxValue(): number
  ValueOffset(): number
  MaxFactor(): number
  MinValue(): number
  QuadraticPeakMultiplier(): number
  Quadratic(): Bool
}

declare interface Ref_1_3_2_1_BottomDerivedStruct extends Ref_1_3_2_1_DerivedStruct {

}

declare interface Ref_1_3_2_2_DerivedStruct extends Ref_1_3_2_2_BaseStruct {

  /** @noSelf **/
  Foo(self: Ref_1_3_2_2_BaseStruct): void
  /** @noSelf **/
  Bar(self: Ref_1_3_2_2_DerivedStruct): void
}

declare interface Ref_1_4_1_Struct {

}

declare interface Ref_1_4_1_Class extends IScriptable {

}

declare interface Ref_1_4_2_Class extends IScriptable {

}

declare interface Ref_1_4_2_HandlesOwner {

}

declare interface MappinUISettings_Record extends MappinUIRuntimeProfile_Record {

  CompletedPOIOpacity(): number
  ShowInTier3(): Bool
}

declare interface MappinUISpawnProfile_Record extends TweakDBRecord {

  SpawnDistance(): number
  DespawnDistance(): number
}

declare interface Ref_2_1_BaseClass extends IScriptable {

  f1(): void
  f2(): void
  f3(): void
  TestBase(): void
}

declare interface MappinVariant_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataMappinVariant
}

declare interface Material_Record extends TweakDBRecord {

  Name(): CName
}

declare interface MaterialFx_Record extends TweakDBRecord {

  Impact_reflected_effect(): ResRef[]
  GetImpact_reflected_effectCount(): number
  GetImpact_reflected_effectItem(index: number): ResRef
  Impact_dismemberment_piercing(): ResRef[]
  GetImpact_dismemberment_piercingCount(): number
  GetImpact_dismemberment_piercingItem(index: number): ResRef
  Impact_main_effect(): ResRef[]
  GetImpact_main_effectCount(): number
  GetImpact_main_effectItem(index: number): ResRef
  Impact_pierce_splatter_near(): ResRef[]
  GetImpact_pierce_splatter_nearCount(): number
  GetImpact_pierce_splatter_nearItem(index: number): ResRef
  Impact_decal(): ResRef[]
  GetImpact_decalCount(): number
  GetImpact_decalItem(index: number): ResRef
  Impact_pierce_decal(): ResRef[]
  GetImpact_pierce_decalCount(): number
  GetImpact_pierce_decalItem(index: number): ResRef
  Impact_pierce_splatter_far(): ResRef[]
  GetImpact_pierce_splatter_farCount(): number
  GetImpact_pierce_splatter_farItem(index: number): ResRef
  Impact_pierce_effect(): ResRef[]
  GetImpact_pierce_effectCount(): number
  GetImpact_pierce_effectItem(index: number): ResRef
  Pierce_near_distance(): number
  Pierce_far_distance(): number
  Reflected_angle_max(): number
  Pierce_enter(): Bool
  Pierce_exit(): Bool
}

declare interface Ref_2_1_DerivedClass extends Ref_2_1_BaseClass {

  TestDerived(): void
}

declare interface Ref_2_2_6_Class extends IScriptable {

  ThisOperator(): number
  /** @noSelf **/
  StaticFunction(): void
}

declare interface MetaQuest_Record extends TweakDBRecord {

  EnumName(): string
  EnumComment(): string
  Type(): gamedataMetaQuest
}

declare interface MiniGame_AllSymbols_Record extends TweakDBRecord {

  SymbolsWithRarity(outList: MiniGame_SymbolsWithRarity_Record[]): void
  GetSymbolsWithRarityCount(): number
  GetSymbolsWithRarityItem(index: number): MiniGame_SymbolsWithRarity_Record
  SymbolsWithRarityContains(item: MiniGame_SymbolsWithRarity_Record): Bool
}

declare interface Ref_2_2_7_Struct {

}

declare interface MiniGame_AllSymbols_inline0_Record extends MiniGame_SymbolsWithRarity_Record {

}

declare interface MiniGame_AllSymbols_inline1_Record extends MiniGame_SymbolsWithRarity_Record {

}

declare interface MiniGame_AllSymbols_inline2_Record extends MiniGame_SymbolsWithRarity_Record {

}

declare interface MiniGame_AllSymbols_inline3_Record extends MiniGame_SymbolsWithRarity_Record {

}

declare interface MiniGame_AllSymbols_inline4_Record extends MiniGame_SymbolsWithRarity_Record {

}

declare interface MiniGame_Trap_Record extends TweakDBRecord {

  TrapType(): MinigameTrapType_Record
  TrapIcon(): UIIcon_Record
  TrapDescription(): CName
  TrapName(): CName
  SpawnProbability(): number
  NegativeTrap(): Bool
}

declare interface Ref_2_3_2_Derived extends Ref_2_3_2_Base {

}

declare interface MinigameActionType_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
}

declare interface MinigameCategory_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
}

declare interface MinigameTrapType_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
}

declare interface Minigame_Def_Record extends TweakDBRecord {

  DefaultTrap(): MiniGame_Trap_Record
  OverrideProgramsList(outList: Program_Record[]): void
  GetOverrideProgramsListCount(): number
  GetOverrideProgramsListItem(index: number): Program_Record
  OverrideProgramsListContains(item: Program_Record): Bool
  AdditionalProgramsList(outList: Program_Record[]): void
  GetAdditionalProgramsListCount(): number
  GetAdditionalProgramsListItem(index: number): Program_Record
  AdditionalProgramsListContains(item: Program_Record): Bool
  ForbiddenProgramsList(outList: Program_Record[]): void
  GetForbiddenProgramsListCount(): number
  GetForbiddenProgramsListItem(index: number): Program_Record
  ForbiddenProgramsListContains(item: Program_Record): Bool
  GridTraps(outList: RowTraps_Record[]): void
  GetGridTrapsCount(): number
  GetGridTrapsItem(index: number): RowTraps_Record
  GridTrapsContains(item: RowTraps_Record): Bool
  GridSymbols(outList: RowSymbols_Record[]): void
  GetGridSymbolsCount(): number
  GetGridSymbolsItem(index: number): RowSymbols_Record
  GridSymbolsContains(item: RowSymbols_Record): Bool
  BufferFullExitText(): CName
  TimeOutExitText(): CName
  GreatSuccessExitText(): CName
  GenericExitText(): CName
  SuccessExitText(): CName
  FailExitText(): CName
  CanceledExitText(): CName
  GridSize(): number
  OverlapProbability(): number
  TrapsProbability(): number
  TimeLimit(): number
  BufferSize(): number
  UseProgression(): Bool
  SaveSeed(): Bool
  NoTraps(): Bool
}

declare interface Ref_2_3_4_Struct {

}

declare interface Ref_2_3_4_AnotherStruct {

}

declare interface Ref_3_1_Class extends IScriptable {

  NonStaticFunction(): void
  NonStaticFunction(a: number): number
  /** @noSelf **/
  StaticFunction(): void
  /** @noSelf **/
  StaticFunction(a: number): number
  OnSomething(): Bool
  OnSomethingElse(): Bool
  Tick(deltaTime: number, id: number): void
  Update(deltaTime: GameTime, id: number): void
  VoidEventsExample(): void
}

declare interface MovementParam_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  MaxSpeed(): number
  Acceleration(): number
  Deceleration(): number
  RotationSpeed(): number
  Type(): gamedataMovementType
}

declare interface Ref_3_1_1_MyStruct {

  /** @noSelf **/
  DoSomething(obj: Ref_3_1_1_MyStruct, something: number): void
}

declare interface MovementParams_Record extends TweakDBRecord {

  Params(outList: MovementParam_Record[]): void
  GetParamsCount(): number
  GetParamsItem(index: number): MovementParam_Record
  ParamsContains(item: MovementParam_Record): Bool
}

declare interface Ref_3_2_1_OptionalParameters extends IScriptable {

  OptionalInTheMiddle(i: number, j?: number, f?: number): void
  OptionalAtTheEnd(i: number, j?: number, f?: number): void
  UseCases(): void
}

declare interface Ref_3_2_2_OutputParameters extends IScriptable {

  NoOutParam(insideValue: number): void
  OutParam(insideValue: number): void
  UseCases(): void
}

declare interface Ref_3_3_Overloading extends IScriptable {

  Test(): void
  Test(a: number): void
  Test(a: number): void
  Test(a: number, b: number): void
  Test(a: number, b: number): void
  UseCases(): void
}

declare interface Ref_3_4_BottomDerivedClass extends Ref_3_4_DerivedClass {

  VirtualFunction(): void
}

declare interface MultiPrereq_Record extends IPrereq_Record {

  NestedPrereqs(outList: IPrereq_Record[]): void
  GetNestedPrereqsCount(): number
  GetNestedPrereqsItem(index: number): IPrereq_Record
  NestedPrereqsContains(item: IPrereq_Record): Bool
  AggregationType(): CName
}

declare interface MutablePoolValueModifier_Record extends PoolValueModifier_Record {

  EnabledMod(): StatModifier_Record
  DelayOnChangeMod(): StatModifier_Record
  StartDelayMods(outList: StatModifier_Record[]): void
  GetStartDelayModsCount(): number
  GetStartDelayModsItem(index: number): StatModifier_Record
  StartDelayModsContains(item: StatModifier_Record): Bool
  RangeEndMods(outList: StatModifier_Record[]): void
  GetRangeEndModsCount(): number
  GetRangeEndModsItem(index: number): StatModifier_Record
  RangeEndModsContains(item: StatModifier_Record): Bool
  RangeBeginMods(outList: StatModifier_Record[]): void
  GetRangeBeginModsCount(): number
  GetRangeBeginModsItem(index: number): StatModifier_Record
  RangeBeginModsContains(item: StatModifier_Record): Bool
  ValuePerSecMods(outList: StatModifier_Record[]): void
  GetValuePerSecModsCount(): number
  GetValuePerSecModsItem(index: number): StatModifier_Record
  ValuePerSecModsContains(item: StatModifier_Record): Bool
}

declare interface worldScriptedAudioSignpostTrigger extends IScriptable {

  OnPlayerEnter(localPlayer: GameObject): Bool
  OnPlayerExit(localPlayer: GameObject): Bool
}

declare interface Ref_4_1_2_ClassVariables extends IScriptable {

  Test(): void
}

declare interface NPCBehaviorState_Record extends TweakDBRecord {

  Comment(): string
  EnumName(): CName
  Type(): gamedataNPCBehaviorState
}

declare interface Ref_4_1_2_StructureVariables {

  /** @noSelf **/
  Test(obj: Ref_4_1_2_StructureVariables): void
}

declare interface StopWeaponFireSoundEvent extends Event {

}

declare interface Ref_4_2_1_Class extends IScriptable {

  Test(): void
}

declare interface Ref_4_2_2_ConstantHandles extends IScriptable {

  Func(): void
  ConstFunc(): void
  CreateConst(): Ref_4_2_2_ConstantHandles
  Test(ch2: Ref_4_2_2_ConstantHandles): void
}

declare interface AudioNotifyItemEquippedEvent extends Event {

}

declare interface WeaponPreFireEvent extends Event {

}

declare interface PickUpBodyBreathingEvent extends Event {

}

declare interface DropBodyBreathingEvent extends Event {

}

declare interface Ref_4_2_2_Derived extends Ref_4_2_2_Base {

}

declare interface Ref_4_3_Defaults {

}

declare interface Ref_4_3_DerivedStruct_Defaults extends Ref_4_3_Defaults {

}

declare interface Ref_4_4_Hints {

}

declare interface Ref_4_5_Browsable_Base {

}

declare interface Ref_4_5_Browsable extends Ref_4_5_Browsable_Base {

}

declare interface Ref_4_5_Attributes {

}

declare interface Ref_6_ReplicatedVariables_SubStructure {

}

declare interface Ref_6_ReplicatedVariables_Class extends IScriptable {

}

declare interface Ref_6_ReplicatedVariables {

}

declare interface NPCHighLevelState_Record extends TweakDBRecord {

  Comment(): string
  EnumName(): CName
  Type(): gamedataNPCHighLevelState
}

declare interface NPCQuestAffiliation_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataNPCQuestAffiliation
}

declare interface NPCStanceState_Record extends TweakDBRecord {

  Comment(): string
  EnumName(): CName
  Type(): gamedataNPCStanceState
}

declare interface NPCUpperBodyState_Record extends TweakDBRecord {

  Comment(): string
  EnumName(): CName
  Type(): gamedataNPCUpperBodyState
}

declare interface NewsFeedTitle_Record extends TweakDBRecord {

  TitlesList(): CName[]
  GetTitlesListCount(): number
  GetTitlesListItem(index: number): CName
  TitlesListContains(item: CName): Bool
}

declare interface NonLinearAccuracy_Record extends Accuracy_Record {

  Exponent(): number
  TimeFactor(): number
}

declare interface NumberPlate_Record extends LCDScreen_Record {

}

declare interface RegisterNewAbilityCooldownRequest {

}

declare interface RegisterCooldownFromRecordRequest {

}

declare interface RemoveCooldownRequest extends ScriptableSystemRequest {

}

declare interface SCooldown {

}

declare interface ObjectActionGameplayCategory_Record extends ScannableData_Record {

}

declare interface OffMeshLinkTag_Record extends TweakDBRecord {

  Prerequisites(outList: IPrereq_Record[]): void
  GetPrerequisitesCount(): number
  GetPrerequisitesItem(index: number): IPrereq_Record
  PrerequisitesContains(item: IPrereq_Record): Bool
  Tag(): CName
  IsAllowed(): Bool
}

declare interface OwnerAngleCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  MinAngle(): number
  MaxAngle(): number
}

declare interface OwnerDistanceCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  OwnerMaxDistance(): number
  DistanceToOwnerMultiplier(): number
  OwnerPreferredDistance(): number
  OwnerMinDistance(): number
}

declare interface OwnerThreatCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  OwnerThreatCoverAngle(): number
}

declare interface ParentAttachmentType_Record extends TweakDBRecord {

  Name(): string
  Type(): gamedataParentAttachmentType
}

declare interface ParticleDamage_Record extends TweakDBRecord {

  Attack(): Attack_Record
  ParticlePath(): ResRef
  Cooldown(): number
}

declare interface PassiveProficiencyBonusUIData_Record extends TweakDBRecord {

  IntValues(): number[]
  GetIntValuesCount(): number
  GetIntValuesItem(index: number): number
  IntValuesContains(item: number): Bool
  FloatValues(): number[]
  GetFloatValuesCount(): number
  GetFloatValuesItem(index: number): number
  FloatValuesContains(item: number): Bool
  Stats(outList: Stat_Record[]): void
  GetStatsCount(): number
  GetStatsItem(index: number): Stat_Record
  StatsContains(item: Stat_Record): Bool
  Loc_name_key(): CName
  Loc_desc_key(): CName
}

declare interface CoverDemandHolder extends IScriptable {

  GetCoverID(): number
}

declare interface PathLengthCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  MaximumRatio(): number
  MinPathLengthToPerform(): number
  Multiplier(): number
  UseFriendlyTargetAsStart(): Bool
  DoorInvalidatesPath(): Bool
}

declare interface PathSecurityCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  ThreatHalfSightAngle(): number
  PathSampleDist(): number
  Multiplier(): number
  ThreatSightRange(): number
}

declare interface CityLightSystemUpdateEvent extends Event {

}

declare interface UnregisterTimetableRequest extends ScriptableSystemRequest {

}

declare interface PerkLevelUIData_Record extends TweakDBRecord {

  IntValues(): number[]
  GetIntValuesCount(): number
  GetIntValuesItem(index: number): number
  IntValuesContains(item: number): Bool
  FloatValues(): number[]
  GetFloatValuesCount(): number
  GetFloatValuesItem(index: number): number
  FloatValuesContains(item: number): Bool
  NameValues(): CName[]
  GetNameValuesCount(): number
  GetNameValuesItem(index: number): CName
  NameValuesContains(item: CName): Bool
}

declare interface PerkUtility_Record extends TweakDBRecord {

  EnumName(): string
  EnumComment(): string
  UtilityType(): gamedataPerkUtility
}

declare interface PhotoModeBackground_Record extends PhotoModeItem_Record {

  TextureName(): ResRef
}

declare interface PhotoModeEffect_Record extends PhotoModeItem_Record {

  LutPath(): CName
  HdrLutPath(): CName
}

declare interface PhotoModeFace_Record extends PhotoModeItem_Record {

  FaceId(): number
}

declare interface PhotoModeFrame_Record extends PhotoModeItem_Record {

  ImagePartsNames(): CName[]
  GetImagePartsNamesCount(): number
  GetImagePartsNamesItem(index: number): CName
  ImagePartsNamesContains(item: CName): Bool
  Color(): number[]
  GetColorCount(): number
  GetColorItem(index: number): number
  ColorContains(item: number): Bool
  AtlasName(): ResRef
  LibraryItemName(): CName
  FlipVertical(): Bool
  FlipHorizontal(): Bool
}

declare interface PhotoModePose_Record extends PhotoModeItem_Record {

  DisableLookAtForGarmentTags(): CName[]
  GetDisableLookAtForGarmentTagsCount(): number
  GetDisableLookAtForGarmentTagsItem(index: number): CName
  DisableLookAtForGarmentTagsContains(item: CName): Bool
  FilterOutForGarmentTags(): CName[]
  GetFilterOutForGarmentTagsCount(): number
  GetFilterOutForGarmentTagsItem(index: number): CName
  FilterOutForGarmentTagsContains(item: CName): Bool
  LookAtPreset(): CName
  AnimationName(): CName
  AcceptedWeaponConfig(): CName
  Category(): CName
  PoseStateConfig(): CName
  PositionOffset(): Vector3
  PoseSize(): number
}

declare interface PhotoModePoseCategory_Record extends TweakDBRecord {

  CategoryName(): CName
  DisplayName(): CName
}

declare interface PhotoModeSticker_Record extends PhotoModeItem_Record {

  ImagePartName(): CName
  AtlasName(): ResRef
}

declare interface Pierce_Record extends ProjectileCollision_Record {

}

declare interface Ping_Record extends TweakDBRecord {

  EnumComment(): string
  WorldIconName(): CName
  MinimapIconName(): CName
  VoTriggerName(): CName
  EnumName(): CName
  MaxCount(): number
  LifeSpan(): number
  Type(): gamedataPingType
}

declare interface PlayerPossesion_Record extends TweakDBRecord {

  EnumName(): string
  EnumComment(): string
  Type(): gamedataPlayerPossesion
}

declare interface Prereq_Record extends TweakDBRecord {

  Name(): string
  DevNotes(): string
  Checks(outList: PrereqCheck_Record[]): void
  GetChecksCount(): number
  GetChecksItem(index: number): PrereqCheck_Record
  ChecksContains(item: PrereqCheck_Record): Bool
  AndValues(): Bool
}

declare interface PrereqCheck_Record extends TweakDBRecord {

  PrereqType(): string
  ComparisonType(): string
  ContextObject(): string
  ValueToCompare(): number
}

declare interface Program_Record extends TweakDBRecord {

  Program(): ObjectAction_Record
  CharactersChain(): number[]
  GetCharactersChainCount(): number
  GetCharactersChainItem(index: number): number
  CharactersChainContains(item: number): Bool
  ProgramName(): CName
}

declare interface ProjectileLaunchMode_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataProjectileLaunchMode
}

declare interface ProjectileOnCollisionAction_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataProjectileOnCollisionAction
}

declare interface Prop_Record extends SpawnableObject_Record {

  FriendlyName(): string
}

declare interface DebugCheatsSystem extends IDebugCheatsSystem {

  EnableCheat(object: GameObject, cheatType: gamecheatsystemFlag, enable: Bool): Bool
  ToggleCheat(object: GameObject, gmType: gamecheatsystemFlag): Bool
  HasCheat(object: GameObject, gmType: gamecheatsystemFlag): Bool
  IncreaseGlobalTimeDilation(): void
  DecreaseGlobalTimeDilation(): void
  IncreasePlayerTimeDilation(): void
  DecreasePlayerTimeDilation(): void
}

declare interface QuestRestrictionMode_Record extends TweakDBRecord {

  InjectedActions(): CName[]
  GetInjectedActionsCount(): number
  GetInjectedActionsItem(index: number): CName
  InjectedActionsContains(item: CName): Bool
}

declare interface QuestSystemSetup_Record extends TweakDBRecord {

  CustomTooltipActions(): string[]
  GetCustomTooltipActionsCount(): number
  GetCustomTooltipActionsItem(index: number): string
  CustomTooltipActionsContains(item: string): Bool
  ContentTokenSpawnMinCooldown(): number
  ContentTokenSpawnMaxCooldown(): number
}

declare interface RPGAction_Record extends TweakDBRecord {

  Reward(): RewardBase_Record
  Prereqs(outList: IPrereq_Record[]): void
  GetPrereqsCount(): number
  GetPrereqsItem(index: number): IPrereq_Record
  PrereqsContains(item: IPrereq_Record): Bool
  ActionName(): CName
}

declare interface RPGDataPackage_Record extends TweakDBRecord {

  StatModifiers(outList: StatModifier_Record[]): void
  GetStatModifiersCount(): number
  GetStatModifiersItem(index: number): StatModifier_Record
  StatModifiersContains(item: StatModifier_Record): Bool
  StatModifierGroups(outList: StatModifierGroup_Record[]): void
  GetStatModifierGroupsCount(): number
  GetStatModifierGroupsItem(index: number): StatModifierGroup_Record
  StatModifierGroupsContains(item: StatModifierGroup_Record): Bool
  StatPools(outList: StatPool_Record[]): void
  GetStatPoolsCount(): number
  GetStatPoolsItem(index: number): StatPool_Record
  StatPoolsContains(item: StatPool_Record): Bool
  Effectors(outList: Effector_Record[]): void
  GetEffectorsCount(): number
  GetEffectorsItem(index: number): Effector_Record
  EffectorsContains(item: Effector_Record): Bool
}

declare interface DebugPlayerBreadcrumbs extends IDebugPlayerBreadcrumbs {

}

declare interface RaceCheckpoint_Record extends LCDScreen_Record {

}

declare interface RadioStation_Record extends TweakDBRecord {

  DisplayName(): string
  Icon(): UIIcon_Record
  Index(): number
}

declare interface RandomNewsFeedBatch_Record extends TweakDBRecord {

  FeedList(): CName[]
  GetFeedListCount(): number
  GetFeedListItem(index: number): CName
  FeedListContains(item: CName): Bool
}

declare interface RandomPassengerEntry_Record extends TweakDBRecord {

  ValidSlotNames(): CName[]
  GetValidSlotNamesCount(): number
  GetValidSlotNamesItem(index: number): CName
  ValidSlotNamesContains(item: CName): Bool
  CharacterRecords(outList: WeightedCharacter_Record[]): void
  GetCharacterRecordsCount(): number
  GetCharacterRecordsItem(index: number): WeightedCharacter_Record
  CharacterRecordsContains(item: WeightedCharacter_Record): Bool
  Role(): CName
  Probability(): number
}

declare interface RandomRatioCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

}

declare interface RandomStatModifier_Record extends StatModifier_Record {

  Min(): number
  Max(): number
}

declare interface ReactionLimit_Record extends TweakDBRecord {

  Name(): CName
  Limit(): number
}

declare interface ReactionPresetCivilian_Record extends ReactionPreset_Record {

}

declare interface ReactionPresetCorpo_Record extends ReactionPreset_Record {

}

declare interface ReactionPresetGanger_Record extends ReactionPreset_Record {

}

declare interface ReactionPresetMechanical_Record extends ReactionPreset_Record {

}

declare interface ReactionPresetNoReaction_Record extends ReactionPreset_Record {

}

declare interface ReactionPresetPolice_Record extends ReactionPreset_Record {

}

declare interface RearWheelsFrictionModifier_Record extends DriveHelper_Record {

  MinLongSlipRatio(): number
  MinLongFrictionCoef(): number
  MinLatSlipRatio(): number
  MaxLatSlipRatio(): number
  MaxLongSlipRatio(): number
  MinLatFrictionCoef(): number
  MaxSpeed(): number
  MaxHelperAcceleration(): number
}

declare interface RecipeItem_Record extends Item_Record {

  CraftableItems(outList: Item_Record[]): void
  GetCraftableItemsCount(): number
  GetCraftableItemsItem(index: number): Item_Record
  CraftableItemsContains(item: Item_Record): Bool
}

declare interface Regular_Record extends ProjectileLaunch_Record {

  StartVelocity(): number
  StartVelocityCharged(): number
}

declare interface RegularGDM_Record extends GrenadeDeliveryMethod_Record {

}

declare interface DropPointCallback extends InventoryScriptCallback {

  OnItemRemoved(itemID: ItemID, difference: number, currentQuantity: number): void
}

declare interface RewardBase_inline0_Record extends ConstantStatModifier_Record {

}

declare interface RewardSet_Record extends TweakDBRecord {

  RewardItems(outList: Item_Record[]): void
  GetRewardItemsCount(): number
  GetRewardItemsItem(index: number): Item_Record
  RewardItemsContains(item: Item_Record): Bool
}

declare interface Rigs_Record extends TweakDBRecord {

  RigsResRefs(): ResRef[]
  GetRigsResRefsCount(): number
  GetRigsResRefsItem(index: number): ResRef
}

declare interface RotationLimiter_Record extends DriveHelper_Record {

  DriftLimit(): number
  DriftFullAngleBegin(): number
  DriftLimitMaxVel(): number
  HandbrakeLimit(): number
  DriftExceededAngle(): number
  DriftLimitStartVel(): number
  MaxAngularSpeedRad(): number
  DriftFullAngleEnd(): number
  SmoothingTime(): number
}

declare interface RowSymbols_Record extends TweakDBRecord {

  Symbols(): number[]
  GetSymbolsCount(): number
  GetSymbolsItem(index: number): number
  SymbolsContains(item: number): Bool
}

declare interface RowTraps_Record extends TweakDBRecord {

  Traps(): number[]
  GetTrapsCount(): number
  GetTrapsItem(index: number): number
  TrapsContains(item: number): Bool
}

declare interface SceneCameraDoF_Record extends TweakDBRecord {

  ProfileName(): CName
  DofNearFocus(): number
  DofFarBlur(): number
  DofNearBlur(): number
  DofFarFocus(): number
  DofIntensity(): number
  UseNearPlane(): Bool
  UseFarPlane(): Bool
}

declare interface ScreenMessageData_Record extends TweakDBRecord {

  FriendlyName(): string
  FontPath(): string
  BackgroundTextureID(): UIIcon_Record
  MessageGroup(): ScreenMessagesList_Record
  TextColor(): number[]
  GetTextColorCount(): number
  GetTextColorItem(index: number): number
  TextColorContains(item: number): Bool
  BackgroundColor(): number[]
  GetBackgroundColorCount(): number
  GetBackgroundColorItem(index: number): number
  BackgroundColorContains(item: number): Bool
  TextVerticalAlignment(): CName
  FontStyle(): CName
  LocalizedDescription(): CName
  TextHorizontalAlignment(): CName
  LocalizedName(): CName
  RightMargin(): number
  LeftMargin(): number
  BottomMargin(): number
  FontSize(): number
  TopMargin(): number
  BackgroundOpacity(): number
  ScrollSpeed(): number
  AutoScroll(): Bool
}

declare interface ScreenMessagesList_Record extends TweakDBRecord {

  Messages(outList: ScreenMessageData_Record[]): void
  GetMessagesCount(): number
  GetMessagesItem(index: number): ScreenMessageData_Record
  MessagesContains(item: ScreenMessageData_Record): Bool
}

declare interface SectorSelector_Record extends TweakDBRecord {

  HomeRight(): Bool
  TargetMid(): Bool
  TargetLeft(): Bool
  TargetBackRight(): Bool
  TargetBackMid(): Bool
  HomeMid(): Bool
  TargetBackLeft(): Bool
  HomeLeft(): Bool
  TargetRight(): Bool
  HomeBackLeft(): Bool
  HomeBackMid(): Bool
  HomeBackRight(): Bool
  DefensiveSelection(): Bool
}

declare interface SenseObjectType_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataSenseObjectType
}

declare interface SlotItemPartElement_Record extends TweakDBRecord {

  Item(): Item_Record
  Weight(): number
}

declare interface SmartGunMissParams_Record extends TweakDBRecord {

  SpiralCycleTimeMax(): number
  MinMissAngleYaw(): number
  SpiralRampDownFactor(): number
  SpiralRampUpDistanceEnd(): number
  SpiralRadius(): number
  MinMissAnglePitch(): number
  SpiralRampUpDistanceStart(): number
  MaxMissAnglePitch(): number
  SpiralRampDownDistanceEnd(): number
  SpiralRampDownDistanceStart(): number
  SpiralCycleTimeMin(): number
  AreaToIgnoreHalfYaw(): number
  MaxMissAngleYaw(): number
  Gravity(): number
  SpiralRandomizePhase(): Bool
}

declare interface SmartGunTargetSortConfigurations_Record extends TweakDBRecord {

  HipConfig(): SmartGunTargetSortData_Record
  AdsConfig(): SmartGunTargetSortData_Record
}

declare interface SmartGunTargetSortData_Record extends TweakDBRecord {

  AngleDistUnitSq(): number
  WorldProximityThresholdSq(): number
  AngleDistUnitWeightSq(): number
  WorldProximityBonusSq(): number
  AngleProximityThresholdSq(): number
  AngleProximityBonusSq(): number
  WorldDistUnitSq(): number
  WorldDistUnitWeightSq(): number
  PreviouslyLockedBonusSq(): number
}

declare interface SquadBackyardBase_Record extends TweakDBRecord {

  PaddingFrom(): number
  PaddingTo(): number
}

declare interface SquadBase_Record extends TweakDBRecord {

  DefensiveLeftFence(): SquadFenceBase_Record
  DefensiveBackyard(): SquadBackyardBase_Record
  OffensiveBackyard(): SquadBackyardBase_Record
  DefensiveRightFence(): SquadFenceBase_Record
  OffensiveRightFence(): SquadFenceBase_Record
  OffensiveLeftFence(): SquadFenceBase_Record
  ScriptHandler(): CName
  SquadParams(): CName
  HasActiveAlley(): Bool
}

declare interface SquadFenceBase_Record extends TweakDBRecord {

  PaddingInnerFence(): number
  PaddingOuterFence(): number
}

declare interface SquadInstance_Record extends TweakDBRecord {

  SquadName(): CName
  SquadTemplate(): CName
}

declare interface StatDistributionData_Record extends TweakDBRecord {

  StatType(): Stat_Record
  Value(): number
}

declare interface StatPoolDistributionData_Record extends TweakDBRecord {

  StatPoolType(): StatPool_Record
  Value(): number
}

declare interface StatsArray_Record extends TweakDBRecord {

  EnumStats(outList: Stat_Record[]): void
  GetEnumStatsCount(): number
  GetEnumStatsItem(index: number): Stat_Record
  EnumStatsContains(item: Stat_Record): Bool
  AdditionalStats(outList: Stat_Record[]): void
  GetAdditionalStatsCount(): number
  GetAdditionalStatsItem(index: number): Stat_Record
  AdditionalStatsContains(item: Stat_Record): Bool
  ArrayName(): CName
}

declare interface StatsFolder_Record extends TweakDBRecord {

  Stats(outList: Stat_Record[]): void
  GetStatsCount(): number
  GetStatsItem(index: number): Stat_Record
  StatsContains(item: Stat_Record): Bool
  Folders(outList: StatsFolder_Record[]): void
  GetFoldersCount(): number
  GetFoldersItem(index: number): StatsFolder_Record
  FoldersContains(item: StatsFolder_Record): Bool
  Arrays(outList: StatsArray_Record[]): void
  GetArraysCount(): number
  GetArraysItem(index: number): StatsArray_Record
  ArraysContains(item: StatsArray_Record): Bool
}

declare interface StatsList_Record extends TweakDBRecord {

  Stats(outList: Stat_Record[]): void
  GetStatsCount(): number
  GetStatsItem(index: number): Stat_Record
  StatsContains(item: Stat_Record): Bool
}

declare interface StatusEffectAIBehaviorType_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataStatusEffectAIBehaviorType
}

declare interface StatusEffectUIData_Record extends TweakDBRecord {

  DisplayName(): string
  Description(): string
  FluffText(): string
  IconPath(): string
  FloatValues(): number[]
  GetFloatValuesCount(): number
  GetFloatValuesItem(index: number): number
  FloatValuesContains(item: number): Bool
  IntValues(): number[]
  GetIntValuesCount(): number
  GetIntValuesItem(index: number): number
  IntValuesContains(item: number): Bool
  NameValues(): CName[]
  GetNameValuesCount(): number
  GetNameValuesItem(index: number): CName
  NameValuesContains(item: CName): Bool
  Stats(outList: Stat_Record[]): void
  GetStatsCount(): number
  GetStatsItem(index: number): Stat_Record
  StatsContains(item: Stat_Record): Bool
  Priority(): number
}

declare interface StatusEffect_inline0_Record extends StatModifierGroup_Record {

}

declare interface StatusEffect_inline1_Record extends ConstantStatModifier_Record {

}

declare interface StickyGDM_Record extends GrenadeDeliveryMethod_Record {

}

declare interface Stop_Record extends ProjectileCollision_Record {

}

declare interface StopAndStick_Record extends ProjectileCollision_Record {

}

declare interface StopAndStickPerpendicular_Record extends ProjectileCollision_Record {

}

declare interface StreetCredTier_Record extends TweakDBRecord {

  StreetCredRequirement(): number
}

declare interface StreetSign_Record extends BaseSign_Record {

}

declare interface SubStatModifier_Record extends StatModifier_Record {

  RefStat(): Stat_Record
  RefObject(): CName
}

declare interface Substat_Record extends Stat_Record {

  ModifierType(): CName
}

declare interface TPPCameraSetup_Record extends TweakDBRecord {

  CurvesPath(): ResRef
  Pivot(): Vector3
  Pivot_z_offset_lerp_speed(): number
  Boom_length_lerp_speed(): number
  Shake_max_pitch(): number
  Manual_control_reset_timeout(): number
  Pivot_x_offset_lerp_speed(): number
  Shake_max_roll(): number
  Gear_changing_boom_modifier(): number
  Boom_length_acc_mod_multiplier(): number
  Gear_changing_fov_modifier(): number
  Fov_lerp_speed(): number
  Boom_length_base(): number
  Boom_length_min_value(): number
  Gear_changing_pitch_modifier(): number
  Shake_frequency(): number
  Camera_collision_sweep_small_sphere_radius(): number
  Auto_center_speed_threshold(): number
  Boom_length_acc_mod_reaction_speed(): number
  Shake_max_yaw(): number
  Reverse_camera_speed_threshold(): number
  Camera_collision_sweep_big_sphere_radius(): number
  Boom_pitch_lerp_speed(): number
  Boom_length_no_accumulated_acc_impulses(): number
  Camera_centric_vertical_offset(): number
  Boom_yaw_lerp_speed(): number
  Boom_length_dec_mod_reaction_speed(): number
  Debug_boom_length(): number
  Debug_boom_roll(): number
  Debug_boom_pitch(): number
  Debug_boom_yaw(): number
  Debug_fov(): number
  Camera_transition_min_boom_length(): number
  Camera_transition_time_activation(): number
  Camera_transition_time_deactivation(): number
  Camera_transition_time_deactivation_quick(): number
  Enable_camera_auto_center(): Bool
  Debug_static_camera(): Bool
}

declare interface TPPLookAtPresets_Record extends TweakDBRecord {

  NoWeaponPresets(outList: LookAtPreset_Record[]): void
  GetNoWeaponPresetsCount(): number
  GetNoWeaponPresetsItem(index: number): LookAtPreset_Record
  NoWeaponPresetsContains(item: LookAtPreset_Record): Bool
  WeaponReadyPresets(outList: LookAtPreset_Record[]): void
  GetWeaponReadyPresetsCount(): number
  GetWeaponReadyPresetsItem(index: number): LookAtPreset_Record
  WeaponReadyPresetsContains(item: LookAtPreset_Record): Bool
  ReloadPresets(outList: LookAtPreset_Record[]): void
  GetReloadPresetsCount(): number
  GetReloadPresetsItem(index: number): LookAtPreset_Record
  ReloadPresetsContains(item: LookAtPreset_Record): Bool
  WeaponSafePresets(outList: LookAtPreset_Record[]): void
  GetWeaponSafePresetsCount(): number
  GetWeaponSafePresetsItem(index: number): LookAtPreset_Record
  WeaponSafePresetsContains(item: LookAtPreset_Record): Bool
}

declare interface TacticLimiterCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  AddUtilityValue(): number
}

declare interface TemporalPrereq_Record extends IPrereq_Record {

  Duration(): number
}

declare interface TerminalScreenType_Record extends DeviceScreenType_Record {

}

declare interface ThreatDistanceCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  ThreatMaxDistance(): number
  DistanceToThreatMultiplier(): number
  ThreatPreferredDistance(): number
  ThreatMinDistance(): number
  ThreatPredictionTime(): number
  UseThreatMaxDistanceFiltering(): Bool
  AllowNegativeThreatMaxDistanceScoring(): Bool
}

declare interface RegisterActiveClueOwnerkRequest extends ScriptableSystemRequest {

}

declare interface ThreatTrackingPresetBase_Record extends TweakDBRecord {

  BeliefAccuracy(): Accuracy_Record
  BaseAccuracy(): Accuracy_Record
  BaseDroppingThreatCooldown(): number
  DroppingCooldownPerSecondWhileVisible(): number
  VisibleBeliefSpeedMultiplier(): number
  DroppingCooldownPerHit(): number
  MaximumDroppingCooldownValue(): number
  MoveBeliefOnlyIfVisible(): Bool
}

declare interface ThumbnailWidgetDefinition_Record extends WidgetDefinition_Record {

}

declare interface Time_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
}

declare interface Tracking_Record extends ProjectileLaunch_Record {

  BendFactor(): number
  HalfLeanAngle(): number
  LinearTimeRatio(): number
  ReturnTimeMargin(): number
  BendTimeRatio(): number
  InterpolationTimeRatio(): number
  EndLeanAngle(): number
  AngleInterpolationDuration(): number
}

declare interface Trap_Record extends TweakDBRecord {

  Name(): string
  Type(): TrapType_Record
  Probability(): number
}

declare interface TrapType_Record extends TweakDBRecord {

  EnumName(): CName
}

declare interface UIAnimation_Record extends TweakDBRecord {

  WidgetResource(): ResRef
  AnimationName(): CName
  Loop(): Bool
}

declare interface UICharacterCreationAttribute_Record extends TweakDBRecord {

  Description(): string
  Shortcut(): string
  Attribute(): Stat_Record
  IconPath(): CName
  Value(): number
}

declare interface UICharacterCreationAttributesPreset_Record extends TweakDBRecord {

  Attributes(outList: UICharacterCreationAttribute_Record[]): void
  GetAttributesCount(): number
  GetAttributesItem(index: number): UICharacterCreationAttribute_Record
  AttributesContains(item: UICharacterCreationAttribute_Record): Bool
}

declare interface UICondition_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  IsCustom(): Bool
  Type(): gamedataUICondition
}

declare interface UIElement_Record extends TweakDBRecord {

  CustomConditions(outList: UICondition_Record[]): void
  GetCustomConditionsCount(): number
  GetCustomConditionsItem(index: number): UICondition_Record
  CustomConditionsContains(item: UICondition_Record): Bool
}

declare interface UIIconCensorFlag_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataUIIconCensorFlag
}

declare interface UIIconCensorship_Record extends TweakDBRecord {

  CensoredIcon(): UIIcon_Record
  Replacer(): UIIcon_Record
  CensorFlags(outList: UIIconCensorFlag_Record[]): void
  GetCensorFlagsCount(): number
  GetCensorFlagsItem(index: number): UIIconCensorFlag_Record
  CensorFlagsContains(item: UIIconCensorFlag_Record): Bool
}

declare interface UINameplate_Record extends TweakDBRecord {

  Type(): UINameplateDisplayType_Record
  Slot(): CName
  Position(): Vector3
  Enabled(): Bool
}

declare interface UINameplateDisplayType_Record extends TweakDBRecord {

  Comment(): string
  EnumName(): CName
  Type(): gamedataUINameplateDisplayType
}

declare interface UphillDriveHelper_Record extends DriveHelper_Record {

  SlopeCompensationFactor(): number
  SlopeCompensationMaxAngle(): number
}

declare interface UtilityLossCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  UtilityLossTimeoutCover(): number
  UtilityLossMultiplier(): number
  HitsTakenToClearScoreCover(): number
  HitsTakenToClearScoreInIdle(): number
  UtilityLossTimeoutShootingSpot(): number
  UtilityLossTimeoutInIdle(): number
  HitsTakenToClearScoreShootingSpot(): number
}

declare interface VehicleAIBoostSettings_Record extends TweakDBRecord {

  MaxTorqueBoost(): number
  MaxLongTractionBoost(): number
  MaxLatTractionBoost(): number
}

declare interface VehicleAirControl_Record extends TweakDBRecord {

  Yaw(): VehicleAirControlAxis_Record
  Pitch(): VehicleAirControlAxis_Record
  Roll(): VehicleAirControlAxis_Record
  AnglePID(): number[]
  GetAnglePIDCount(): number
  GetAnglePIDItem(index: number): number
  AnglePIDContains(item: number): Bool
  VelocityPID(): number[]
  GetVelocityPIDCount(): number
  GetVelocityPIDItem(index: number): number
  VelocityPIDContains(item: number): Bool
  FlippedOverRecoveryPID(): number[]
  GetFlippedOverRecoveryPIDCount(): number
  GetFlippedOverRecoveryPIDItem(index: number): number
  FlippedOverRecoveryPIDContains(item: number): Bool
  MassReference(): number
}

declare interface VehicleAirControlAxis_Record extends TweakDBRecord {

  ControlAxis(): CName
  VelocityDampingThresholdMin(): number
  AngleCorrectionThresholdMax(): number
  VelocityDampingFactorMin(): number
  AngleCorrectionThresholdMin(): number
  VelocityDampingFactorMax(): number
  VelocityDampingThresholdMax(): number
  AngleCorrectionFactorMax(): number
  MaxVelocityCompensation(): number
  Multiplier(): number
  BrakeMultiplierWhenNoInput(): number
  AngleCorrectionFactorMin(): number
  MaxAngleCompensation(): number
  ZeroAngleThreshold(): number
  MaxAngleToCompensateThreshold(): number
  StabilizeAxis(): Bool
}

declare interface VehicleBehaviorData_Record extends TweakDBRecord {

  ReadyToParkDistance(): number
}

declare interface VehicleCameraManager_Record extends TweakDBRecord {

  CamCollisionOBBIncrease(): Vector3
  CameraBlendTime(): number
  AllowCameraReset(): Bool
}

declare interface VehicleCrowdCollisionsParams_Record extends TweakDBRecord {

  VehicleCollisionBoxScaleBump(): number
  BumpEventSpeedThreshold(): number
  RagdollSpeedThreshold(): number
  VehicleCollisionBoxScaleRagdoll(): number
  CollisionWarningTime(): number
  RagdollActivationTime(): number
}

declare interface Example_FxSpawning extends ScriptableComponent {

  OnGameAttach(): void
}

declare interface VehicleDeformablePart_Record extends TweakDBRecord {

  Zones(outList: VehicleDeformableZone_Record[]): void
  GetZonesCount(): number
  GetZonesItem(index: number): VehicleDeformableZone_Record
  ZonesContains(item: VehicleDeformableZone_Record): Bool
  Component(): CName
}

declare interface VehicleDeformableZone_Record extends TweakDBRecord {

  Shapes(): number[]
  GetShapesCount(): number
  GetShapesItem(index: number): number
  ShapesContains(item: number): Bool
  GridCells(): number[]
  GetGridCellsCount(): number
  GetGridCellsItem(index: number): number
  GridCellsContains(item: number): Bool
}

declare interface VehicleDestructibleLight_Record extends TweakDBRecord {

  GridCells(): number[]
  GetGridCellsCount(): number
  GetGridCellsItem(index: number): number
  GridCellsContains(item: number): Bool
  Component(): CName
  Threshold(): number
}

declare interface VehicleDestructibleWheel_Record extends TweakDBRecord {

  Name(): CName
  Intact(): CName
  Flat(): CName
}

declare interface VehicleDestructionPointDamper_Record extends TweakDBRecord {

  PointIndex(): number
  DampValue(): number
  PointFragility(): number
}

declare interface VehicleDetachablePart_Record extends TweakDBRecord {

  Components(): CName[]
  GetComponentsCount(): number
  GetComponentsItem(index: number): CName
  ComponentsContains(item: CName): Bool
  GridCells(): number[]
  GetGridCellsCount(): number
  GetGridCellsItem(index: number): number
  GridCellsContains(item: number): Bool
  Name(): CName
  Threshold(): number
  SpawnsExplosionEffect(): Bool
}

declare interface VehicleDriveModelData_Record extends TweakDBRecord {

  WaterParams(): VehicleWater_Record
  WheelSetup(): VehicleWheelDrivingSetup_Record
  WheelsFrictionMap(): VehicleWheelsFrictionMap_Record
  DriveHelpers(outList: DriveHelper_Record[]): void
  GetDriveHelpersCount(): number
  GetDriveHelpersItem(index: number): DriveHelper_Record
  DriveHelpersContains(item: DriveHelper_Record): Bool
  TankSpringsLocalPositions(): Vector2[]
  GetTankSpringsLocalPositionsCount(): number
  GetTankSpringsLocalPositionsItem(index: number): Vector2
  TankSpringsLocalPositionsContains(item: Vector2): Bool
  BikeTiltPID(): number[]
  GetBikeTiltPIDCount(): number
  GetBikeTiltPIDItem(index: number): number
  BikeTiltPIDContains(item: number): Bool
  BikeCurvesPath(): ResRef
  Center_of_mass_offset(): Vector3
  MomentOfInertiaScale(): Vector3
  MomentOfInertia(): Vector3
  SmoothWheelContactDecreaseTime(): number
  SlopeTractionReductionBegin(): number
  SideWeightTransferFactor(): number
  TurningRollFactorWeakContactThresholdMax(): number
  TurningRollFactor(): number
  TurnUpdateInputFastChangeSpeed(): number
  LowVelStoppingDeceleration(): number
  SlipRatioMinSpeedThreshold(): number
  BrakingFrictionFactor(): number
  TurnUpdateInputSlowChangeSpeed(): number
  TurningRollFactorWeakContactThresholdMin(): number
  HandbrakeBrakingTorque(): number
  TurnUpdateInputDiffProgressionPow(): number
  MaxWheelTurnDeg(): number
  BodyFriction(): number
  SlipAngleMinSpeedThreshold(): number
  BankBodyLRTanMultiplier(): number
  SlipAngleCurveScale(): number
  TankAcceleration(): number
  TurnUpdateInputDiffForSlowChange(): number
  PerfectSteeringFactor(): number
  TurnUpdateMaxSpeedTurnMul(): number
  BikeTiltReturnSpeed(): number
  WheelTurnMaxAddPerSecond(): number
  BikeTiltSpeed(): number
  TurnUpdateBaseSpeedThreshold(): number
  TurnUpdateMaxSpeedTurnChangeMul(): number
  AntiSwaybarDampingScalor(): number
  Total_mass(): number
  TurnUpdateMaxSpeedThreshold(): number
  BankBodyFBTanMultiplier(): number
  SlopeTractionReductionFactor(): number
  WheelTurnMaxSubPerSecond(): number
  BikeTiltCustomSpeed(): number
  TankSpringVerticalOffset(): number
  TurningRollFactorWeakContactMul(): number
  TankDeceleration(): number
  SlipRatioCurveScale(): number
  TurnUpdateInputDiffForFastChange(): number
  RollingResistanceFactor(): number
  TankSpringRadius(): number
  AirResistanceFactor(): number
  BurnOutRotationModifier(): number
  SlopeTractionReductionMax(): number
  TankSpringDamping(): number
  DifferentialOvershootFactor(): number
  ForwardWeightTransferFactor(): number
  TankSpringDistance(): number
  Chassis_mass(): number
  TankSpringStiffness(): number
  SmoothWheelContactIncreseTime(): number
  BikeMaxTilt(): number
  TankTurningSpeed(): number
  TankMaxSpeed(): number
  TankGravityMul(): number
  TankCTOP(): number
  TankCTOI(): number
  TankCTOD(): number
  UseAlternativeTurnUpdate(): Bool
}

declare interface VehicleEngineData_Record extends TweakDBRecord {

  Gears(outList: VehicleGear_Record[]): void
  GetGearsCount(): number
  GetGearsItem(index: number): VehicleGear_Record
  GearsContains(item: VehicleGear_Record): Bool
  GearCurvesPath(): ResRef
  GearChangeCooldown(): number
  ClutchSyncTorqueWheelMul(): number
  MinRPM(): number
  WheelsResistanceRatio(): number
  FlyWheelMomentOfInertia(): number
  EngineMaxTorque(): number
  ClutchSyncTorqueMul(): number
  ResistanceTorque(): number
  MaxRPM(): number
  GearChangeTime(): number
  InstantR1GearChange(): Bool
  ForceReverseRPMToMin(): Bool
}

declare interface VehicleFxCollision_Record extends TweakDBRecord {

  Materials(outList: VehicleFxCollisionMaterial_Record[]): void
  GetMaterialsCount(): number
  GetMaterialsItem(index: number): VehicleFxCollisionMaterial_Record
  MaterialsContains(item: VehicleFxCollisionMaterial_Record): Bool
}

declare interface mpPlayerManager extends gameIPlayerManager {

  GetPlayerNicknameByGameObject(gameObject: GameObject): string
}

declare interface VehicleFxCollisionMaterial_Record extends TweakDBRecord {

  Material(): Material_Record
  Impact_decal(): ResRef
  Scratch_particles(): ResRef
  Impact_particles(): ResRef
  Scratch_decal(): ResRef
}

declare interface VehicleFxWheelsDecals_Record extends TweakDBRecord {

  Materials(outList: VehicleFxWheelsDecalsMaterial_Record[]): void
  GetMaterialsCount(): number
  GetMaterialsItem(index: number): VehicleFxWheelsDecalsMaterial_Record
  MaterialsContains(item: VehicleFxWheelsDecalsMaterial_Record): Bool
  Smear_materials(outList: VehicleFxWheelsDecalsMaterialSmear_Record[]): void
  GetSmear_materialsCount(): number
  GetSmear_materialsItem(index: number): VehicleFxWheelsDecalsMaterialSmear_Record
  Smear_materialsContains(item: VehicleFxWheelsDecalsMaterialSmear_Record): Bool
}

declare interface gameIGameRulesSystem extends IGameSystem {

  SendChat(chat: string): void
  IsPlayerReady(PeerID: string): Bool
  IsGameVictorious(): Bool
  IsGameUnsuccessful(): Bool
  GetHeistStatus(): grsHeistStatus
}

declare interface VehicleFxWheelsDecalsMaterialSmear_Record extends VehicleFxWheelsDecalsMaterial_Record {

  Distance(): number
}

declare interface VehicleFxWheelsParticles_Record extends TweakDBRecord {

  Materials(outList: VehicleFxWheelsParticlesMaterial_Record[]): void
  GetMaterialsCount(): number
  GetMaterialsItem(index: number): VehicleFxWheelsParticlesMaterial_Record
  MaterialsContains(item: VehicleFxWheelsParticlesMaterial_Record): Bool
}

declare interface VehicleFxWheelsParticlesMaterial_Record extends TweakDBRecord {

  Material(): Material_Record
  Skid_marks_particles(): ResRef
  Tire_tracks_particles(): ResRef
}

declare interface VehicleGear_Record extends TweakDBRecord {

  MaxSpeed(): number
  MaxEngineRPM(): number
  MinSpeed(): number
  MinEngineRPM(): number
  TorqueMultiplier(): number
}

declare interface VehicleImpactTraffic_Record extends TweakDBRecord {

  MinThreshold(): number
  MaxThreshold(): number
  MaxTimerStunned(): number
}

declare interface VehiclePIDSettings_Record extends TweakDBRecord {

  I(): number
  P(): number
  OutputSaturationLimit(): number
  D(): number
  IntegratorClampingLimit(): number
}

declare interface VehicleProceduralFPPCameraParams_Record extends TweakDBRecord {

  ImpactThreshold(): number
  DisplacementThresholdForward(): number
  MaxDisplacementDown(): number
  ForwardDampFactor(): number
  MaxAccelerationTiltAngle(): number
  SteeringAngleRight(): number
  MaxDisplacementUp(): number
  DirectionFollowMaxVelocity(): number
  MaxDisplacementRight(): number
  MaxDisplacementLeft(): number
  HeightDampFactor(): number
  MaxDisplacementBackward(): number
  ImpactDamperDampFactor(): number
  MaxSlowdownTiltAngle(): number
  SteeringDampFactor(): number
  SideDampFactor(): number
  SteeringAngleLeft(): number
  SmoothSpeedDampFactor(): number
  MaxDisplacementForward(): number
  ImpactBlendSpeed(): number
  ImpactStrengthCoef(): number
  MaxRollCorrection(): number
  MaxPitchCorrectionUP(): number
  MaxPitchCorrectionDown(): number
  RollCorrectionDampFactor(): number
  PitchCorrectionDampFactor(): number
}

declare interface VehicleSteeringSettings_Record extends TweakDBRecord {

  SpeedForMaxDistance(): number
  SpeedForMinDistance(): number
  MinTargetDistance(): number
  ErrorMagnitudeForMildSteering(): number
  MildSteeringSpeed(): number
  MaxTargetDistance(): number
  FullSteeringSpeed(): number
  ErrorMagnitudeForFullSteering(): number
}

declare interface VehicleStoppingSettings_Record extends TweakDBRecord {

  MildBrakingChangeSpeed(): number
  ErrorMagnitudeForMildBrakingChange(): number
  FullBrakingChangeSpeed(): number
  ErrorMagnitudeForFullBrakingChange(): number
  DecreaseMul(): number
}

declare interface VehicleSurfaceBinding_Record extends TweakDBRecord {

  SurfaceType(): VehicleSurfaceType_Record
  FrictionPreset(): VehicleWheelsFrictionPreset_Record
}

declare interface VehicleSurfaceType_Record extends TweakDBRecord {

  DisplayName(): string
  MaterialNames(): CName[]
  GetMaterialNamesCount(): number
  GetMaterialNamesItem(index: number): CName
  MaterialNamesContains(item: CName): Bool
}

declare interface VehicleTPPCameraParams_Record extends TweakDBRecord {

  Fov(): number
  SlopeCorrectionOnGroundPitchMin(): number
  AutoCenterMaxSpeedThreshold(): number
  CameraSphereRadius(): number
  DrivingDirectionCompensationSpeedCoef(): number
  CameraMinPitch(): number
  SlopeCorrectionInAirPitchMin(): number
  SlopeCorrectionInAirDampFactor(): number
  SlopeCorrectionInAirPitchMax(): number
  ElasticBoomForwardAccelerationCoef(): number
  CameraBoomExtensionSpeed(): number
  DrivingDirectionCompensationAngle(): number
  SlopeCorrectionOnGroundStrength(): number
  AutoCenterSpeed(): number
  DrivingDirectionCompensationAngularVelocityMin(): number
  SlopeCorrectionInAirSpeedMax(): number
  ElasticBoomSpeedExpansionSpeedMin(): number
  SlopeCorrectionInAirRaiseCoef(): number
  AutoCenterStartTimeGamepad(): number
  AutoCenterStartTimeMouse(): number
  DrivingDirectionCompensationAngleSmooth(): number
  ElasticBoomAccelerationExpansionLength(): number
  SlopeCorrectionInAirFallCoef(): number
  CameraMaxPitch(): number
  SlopeCorrectionInAirStrength(): number
  DrivingDirectionCompensationSpeedMax(): number
  SlopeCorrectionOnGroundPitchMax(): number
  DrivingDirectionCompensationSpeedMin(): number
  ElasticBoomSpeedExpansionSpeedMax(): number
  ElasticBoomSpeedExpansionLength(): number
  HeadLookAtMaxYaw(): number
  HeadLookAtCenterYawThreshold(): number
  HeadLookAtMaxPitchUp(): number
  HeadLookAtMaxPitchDown(): number
  HeadLookAtRotationSpeed(): number
  CollisionDetection(): Bool
  ElasticBoomVelocity(): Bool
  ElasticBoomAcceleration(): Bool
  DrivingDirectionCompensation(): Bool
  SlopeAdjustement(): Bool
  AirFlowDistortion(): Bool
  LockedCamera(): Bool
}

declare interface VehicleTPPCameraPresetParams_Record extends TweakDBRecord {

  Height(): CName
  Distance(): CName
  LookAtOffset(): Vector3
  DefaultRotationPitch(): number
  AirFlowDistortionSpeedMin(): number
  BoomLength(): number
  AirFlowDistortionSpeedMax(): number
  AirFlowDistortionSizeHorizontal(): number
  AirFlowDistortionSizeVertical(): number
}

declare interface VehicleWater_Record extends TweakDBRecord {

  SubmergedThreshold(): number
  BuoyancyCoef(): number
  LinearDampingCoef(): number
  AngularDampingCoef(): number
  DisableEngine(): Bool
  DisableAirControl(): Bool
}

declare interface VehicleWeapon_Record extends TweakDBRecord {

  Slot(): AttachmentSlot_Record
  Item(): Item_Record
  WeaponShootAnimEvent(): CName
  MinYaw(): number
  MaxYaw(): number
  MaxPitch(): number
  CycleTime(): number
  AttackRange(): number
  SingleShotProjectiles(): number
  SingleProjectileCycleTime(): number
  WholeBurstProjectiles(): number
  MinPitch(): number
  GenericTick(): Bool
  GenericShoot(): Bool
  CanFiendlyFire(): Bool
}

declare interface VehicleWheelDimensionsPreset_Record extends TweakDBRecord {

  TireRadius(): number
  RimRadius(): number
  TireWidth(): number
  WheelOffset(): number
}

declare interface VehicleWheelDimensionsSetup_Record extends TweakDBRecord {

  FrontPreset(): VehicleWheelDimensionsPreset_Record
  BackPreset(): VehicleWheelDimensionsPreset_Record
}

declare interface VehicleWheelDrivingPreset_Record extends TweakDBRecord {

  TireLongitudinalSlipEffectsMul(): number
  TireRollingResistanceCoef(): number
  Mass(): number
  SwaybarDisplacementLimit(): number
  TireFrictionCoef(): number
  TireLateralSlipEffectsMul(): number
  MaxBrakingTorque(): number
  SpringDampingLowRateCompression(): number
  SpringReboundDamping(): number
  SpringBoundDampingLowRate(): number
  ExtremeCompressionEventScalor(): number
  SpringDampingHighRateCompression(): number
  SwaybarStiffness(): number
  SpringDamping(): number
  FrictionMulLongitudinal(): number
  FrictionMulLateral(): number
  SwaybarLengthScalar(): number
  SpringReboundDampingLowRate(): number
  SpringStiffness(): number
  VisualSuspensionDroop(): number
  LogicalSuspensionCompressionLength(): number
  VisualSuspensionCompressionLength(): number
  WheelsVerticalOffset(): number
}

declare interface VehicleWheelDrivingSetup_2_Record extends VehicleWheelDrivingSetup_Record {

  F(): VehicleWheelRole_Record
  B(): VehicleWheelRole_Record
}

declare interface VehicleWheelDrivingSetup_4_Record extends VehicleWheelDrivingSetup_Record {

  RF(): VehicleWheelRole_Record
  RB(): VehicleWheelRole_Record
  LF(): VehicleWheelRole_Record
  LB(): VehicleWheelRole_Record
}

declare interface VehicleWheelRole_Record extends TweakDBRecord {

  IsDrive(): Bool
  IsMainBrake(): Bool
  IsHandBrake(): Bool
}

declare interface VehicleWheelsFrictionMap_Record extends TweakDBRecord {

  DefaultFrictionPreset(): VehicleWheelsFrictionPreset_Record
  Surfaces(outList: VehicleSurfaceBinding_Record[]): void
  GetSurfacesCount(): number
  GetSurfacesItem(index: number): VehicleSurfaceBinding_Record
  SurfacesContains(item: VehicleSurfaceBinding_Record): Bool
}

declare interface VehicleWheelsFrictionPreset_Record extends TweakDBRecord {

  DisplayName(): string
  FrictionCurveSet(): ResRef
  LooseSurfaceLongDriveResistanceCoeff(): number
  LooseSurfaceLongSpeedMax(): number
  LooseSurfaceLatSpeedMax(): number
  FrictionLongMultiplier(): number
  LooseSurfaceLatResistanceCoeff(): number
  LooseSurfaceLongNonDriveResistanceCoeff(): number
  FrictionLatMultiplier(): number
  AudioMaterialCoeff(): number
}

declare interface GOGRewardsScriptListener extends IScriptable {

}

declare interface GOGRewardPack {

}

declare interface GOGRewardsSystem extends IScriptable {

  GetStatus(): GOGRewardsSystemStatus
  GetError(): GOGRewardsSystemErrors
  RequestInitialStatus(): void
  SetScriptListener(listener: GOGRewardsScriptListener): void
  FindRewardRecordByRewardToken(token: number): GOGReward_Record
  IsRewardUnlocked(rewardRecord: GOGReward_Record): Bool
  GetUnlockedRewardPacks(): GOGRewardPack[]
  GetRegistrationUrl(): string
}

declare interface VendorCraftable_Record extends VendorWare_Record {

  Craftbook(): Craftable_Record
}

declare interface VendorExperience_Record extends VendorWare_Record {

  Proficiency(): Proficiency_Record
  PricePerPoint(outList: StatModifier_Record[]): void
  GetPricePerPointCount(): number
  GetPricePerPointItem(index: number): StatModifier_Record
  PricePerPointContains(item: StatModifier_Record): Bool
}

declare interface VisionGroup_Record extends TweakDBRecord {

  GroupName(): CName
  Range(): number
}

declare interface VisionModuleBase_Record extends TweakDBRecord {

  Group(): VisionGroup_Record
  Focus_cue(): CName
  Light_deact_mode(): CName
  Light_act_type(): CName
  Light_deact_type(): CName
  Default_cue(): CName
  Heavy_act_type(): CName
  Light_act_mode(): CName
  Heavy_act_mode(): CName
  Heavy_deact_mode(): CName
  Heavy_deact_type(): CName
  Prereq(): CName
  ObjectPrereq(): CName
  Light_act_delay(): number
  Light_deact_duration(): number
  Heavy_deact_duration(): number
  Light_act_duration(): number
  Heavy_act_delay(): number
  Light_deact_delay(): number
  Default_color(): number
  Focus_color(): number
  Heavy_act_duration(): number
  Heavy_deact_delay(): number
  Default_seeThroughWalls(): Bool
  Focus_seeThroughWalls(): Bool
}

declare interface GAMEOBJECT_Actor extends HUDActor {

}

declare interface VEHICLE_Actor extends HUDActor {

}

declare interface DEVICE_Actor extends HUDActor {

}

declare interface PUPPET_ACtor extends HUDActor {

}

declare interface WeaponManufacturer_Record extends TweakDBRecord {

  Name(): string
  Type(): gamedataWeaponManufacturer
}

declare interface Weather_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
}

declare interface WeatherPreset_Record extends SpawnableObject_Record {

  Name(): CName
}

declare interface Website_Record extends TweakDBRecord {

  Url(): string
  WidgetPath(): ResRef
}

declare interface WeightedCharacter_Record extends TweakDBRecord {

  Character(): Character_Record
  Weight(): number
}

declare interface WorkspotActionType_Record extends TweakDBRecord {

  Comment(): string
  EnumName(): CName
  Type(): gamedataWorkspotActionType
}

declare interface WorkspotCategory_Record extends TweakDBRecord {

  Comment(): string
  EnumName(): CName
  Type(): gamedataWorkspotCategory
}

declare interface WorkspotReactionType_Record extends TweakDBRecord {

  EnumName(): CName
  Type(): gamedataWorkspotReactionType
}

declare interface WorkspotStatusEffect_Record extends StatusEffect_Record {

}

declare interface WorldMapFilter_Record extends TweakDBRecord {

  EnumComment(): string
  EnumName(): CName
  Type(): gamedataWorldMapFilter
}

declare interface WorldMapFreeCameraSettings_Record extends TweakDBRecord {

  RotationMin(): EulerAngles
  RotationMax(): EulerAngles
  RotationSpeed(): EulerAngles
  RotationDefault(): EulerAngles
  ZoomDefaultInFastTravel(): number
  PanSpeedMax(): number
  MouseRotateStrength(): number
  MousePanStrength(): number
  ZoomSpeedMin(): number
  ZoomDefault(): number
  ZoomMax(): number
  FovMin(): number
  ZoomSpeedMax(): number
  ZoomMin(): number
  MouseZoomSpeedMin(): number
  FovMax(): number
  MouseZoomSpeedMax(): number
  PanSpeedMin(): number
  IconScaleMin(): number
  IconScaleMax(): number
  ZoomSpeed(): number
  PitchRelativeToZoom(): Bool
}

declare interface CloseQHmenu extends Event {

}

declare interface WorldMapSettings_Record extends TweakDBRecord {

  TopDownCamera(): WorldMapFreeCameraSettings_Record
  FreeCamera(): WorldMapFreeCameraSettings_Record
  ZoomLevels(outList: WorldMapZoomLevel_Record[]): void
  GetZoomLevelsCount(): number
  GetZoomLevelsItem(index: number): WorldMapZoomLevel_Record
  ZoomLevelsContains(item: WorldMapZoomLevel_Record): Bool
  ZoomTransitionTime(): number
  MouseZoomTransitionTime(): number
  CameraModeTransitionTime(): number
  ZoomToZoomValue(): number
  ZoomToEnabledAtMinimumZoom(): number
  EnableGroupTransitionAnimations(): Bool
}

declare interface WorldMapZoomLevel_Record extends TweakDBRecord {

  MappinFilterGroups(outList: MappinUIFilterGroup_Record[]): void
  GetMappinFilterGroupsCount(): number
  GetMappinFilterGroupsItem(index: number): MappinUIFilterGroup_Record
  MappinFilterGroupsContains(item: MappinUIFilterGroup_Record): Bool
  Rotation(): EulerAngles
  Fov(): number
  Zoom(): number
  IconScale(): number
  PanSpeed(): number
  ShowDistricts(): Bool
  ShowSubDistricts(): Bool
  CanChangeFilters(): Bool
}

declare interface XPPoints_inline0_Record extends ConstantStatModifier_Record {

}

declare interface device_gameplay_role_Record extends ScannableData_Record {

}

declare interface device_role_action_desctiption_Record extends ScannableData_Record {

}

declare interface device_scanning_data_Record extends ScannableData_Record {

}

declare interface npc_scanning_data_Record extends ScannableData_Record {

}

declare interface MappinEntry {

}

declare interface NameplateChangedEvent extends ScriptableSystemRequest {

}

declare interface Crosshair extends ModuleInstance {

}

declare interface AimAssist extends ModuleInstance {

}

declare interface JournalQuestGuidanceMarker extends JournalEntry {

}

declare interface JournalQuestMapPin extends JournalQuestMapPinBase {

}

declare interface JournalQuestMapPinLink extends JournalEntry {

}

declare interface JournalQuestSubObjective extends JournalQuestObjectiveBase {

}

declare interface JournalQuestPhase extends JournalContainerEntry {

}

declare interface JournalPhoneChoiceGroup extends JournalContainerEntry {

}

declare interface JournalPhoneConversation extends JournalContainerEntry {

  GetTitle(): string
}

declare interface JournalBriefingMapSection extends JournalBriefingBaseSection {

  GetMapLocation(): Vector4
}

declare interface JournalBriefingVideoSection extends JournalBriefingBaseSection {

  GetVideoPath(): ResRef
}

declare interface JournalBriefingPaperDollSection extends JournalBriefingBaseSection {

}

declare interface JournalTarotGroup extends JournalFileEntry {

}

declare interface JournalTarot extends JournalEntry {

  GetIndex(): number
  GetImagePart(): CName
  GetName(): string
  GetDescription(): string
}

declare interface JournalCodexGroup extends JournalContainerEntry {

  GetGroupName(): string
}

declare interface JournalCodexEntry extends JournalContainerEntry {

  GetTitle(): string
  GetImageID(): TweakDBID
  GetLinkImageID(): TweakDBID
}

declare interface JournalCodexDescription extends JournalEntry {

  GetSubTitle(): string
  GetTextContent(): string
}

declare interface EnteredPathWithDoors extends Event {

}

declare interface FinishedPathWithDoors extends Event {

}

declare interface NavigationObstacle extends IScriptable {

}

declare interface JournalInternetRectangle extends JournalInternetBase {

}

declare interface JournalOnscreenGroup extends JournalFileEntry {

}

declare interface JournalEmailGroup extends JournalFileEntry {

}

declare interface JournalFileGroup extends JournalFileEntry {

}

declare interface JournalMetaQuestObjective extends JournalEntry {

  GetDescription(): string
  GetProgressPercent(): number
  GetIconID(): TweakDBID
}

declare interface JournalMetaQuest extends JournalFileEntry {

  GetTitle(): string
}

declare interface JournalMetaQuestScriptedData {

}

declare interface PhotoModeEnableEvent extends Event {

  SetEnable(enable: Bool): void
  GetEnable(): Bool
}

declare interface PrereqManager extends IPrereqManager {

  MeetsPrerequisite(prereqData: PrereqData, params: PrereqParams): Bool
  MeetsPrerequisiteByID(prereqID: string, params: PrereqParams): Bool
}

declare interface PreventionSystemConfig {

}

declare interface EntityReference {

}

declare interface MappinVariantChangedEvent extends Event {

  GetEntry(): JournalEntry
  GetPhase(): gamedataMappinPhase
  GetVariant(): gamedataMappinVariant
}

declare interface RestrictMovementArea {

}

declare interface ICombatRestrictMovementAreaCondition extends IScriptable {

}

declare interface CombatRestrictMovementAreaScriptCondition extends ICombatRestrictMovementAreaCondition {

  IsFulfilled(game: GameInstance, entityId: EntityID, area: RestrictMovementArea, entityEntered: Bool): Bool
}

declare interface CombatRestrictMovementAreaPlayerEnterMainRMACondition extends CombatRestrictMovementAreaScriptCondition {

  IsFulfilled(game: GameInstance, entityId: EntityID, area: RestrictMovementArea, entityEntered: Bool): Bool
}

declare interface CombatRestrictMovementAreaAllDeadCondition extends CombatRestrictMovementAreaScriptCondition {

  IsFulfilled(game: GameInstance, entityId: EntityID, area: RestrictMovementArea, entityEntered: Bool): Bool
}

declare interface ClearBraindanceStateRequest extends ScriptableSystemRequest {

}

declare interface ClearBraindancePauseRequest extends ScriptableSystemRequest {

}

declare interface StatsBundleHandler extends IScriptable {

  GetStatValue(statType: gamedataStatType): number
  GetStatBoolValue(statType: gamedataStatType): Bool
  GetStatDetails(): gameStatDetailedData[]
  AddModifier(modifierData: gameStatModifierData): Bool
  RemoveModifier(modifierData: gameStatModifierData): void
  RemoveAllModifiers(statType: gamedataStatType): void
}

declare interface StatsSystemHelper extends IScriptable {

  /** @noSelf **/
  GetDetailedStatInfo(obj: GameObject, statType: gamedataStatType, statData: gameStatDetailedData): Bool
}

declare interface DeactivateAllNetworkLinksRequest extends ScriptableSystemRequest {

}

declare interface TCSInputCameraZoom extends Event {

}

declare interface QhackExecuted extends Event {

}

declare interface ObjectLookedAtEvent extends Event {

}

declare interface TargetFilterTicket {

}

declare interface TargetHitInfo {

  /** @noSelf **/
  IsValid(self: TargetHitInfo): Bool
}

declare interface TargetFilterResult extends IScriptable {

  OnReset(): void
  OnClone(cloneDestination: TargetFilterResult): void
}

declare interface TargetFilter extends IScriptable {

  GetHitEntityID(): EntityID
  GetHitComponent(): IComponent
}

declare interface TargetFilter_Script extends TargetFilter {

  GetFilterMask(): number
  GetFilter(): QueryFilter
  SetFilter(queryFilter: QueryFilter): void
  TestFilterMask(mask: number): Bool
  GetResult(destination: TargetFilterResult): void
  PreFilter(): void
  Filter(hitInfo: TargetHitInfo, workingState: TargetFilterResult): void
  PostFilter(): void
  CreateFilterResult(): TargetFilterResult
}

declare interface TelemetryQuickHack {

}

declare interface TrafficSystem extends IScriptable {

  IsPathIntersectingWithTraffic(path: Vector4[], distanceFromTraffic: number, intersection: Vector4): Bool
}

declare interface questTutorialManager extends questITutorialManager {

  RequestToCloseOverlay(overlayId: number): void
}

declare interface gameuiIUIObjectsLoaderSystem extends IGameSystem {

  IsItemPreviewable(itemData: gameItemData, isGarment: Bool): Bool
}

declare interface GarageVehicleID {

  /** @noSelf **/
  Resolve(vehicleID: string): GarageVehicleID
}

declare interface IWatchdogSystem extends IGameSystem {

  HasActiveFallback(entityId: EntityID, fallbackCategory: CName): Bool
  IsFallbackHandled(fallbackCategory: CName): Bool
  IsFallbackForced(fallbackCategory: CName): Bool
  SetForcedFallback(fallbackCategory: CName, isForced: Bool): void
}

declare interface RainEvent extends Event {

}

declare interface ExtendedWorkspotInfo extends IScriptable {

}

declare interface PreventionDelayed100SpawnPoliceRequest extends ScriptableSystemRequest {

}

declare interface ConnectedWorkspotNotificationEvent extends Event {

}

declare interface PreventionForceSpawnPoliceRequest extends ScriptableSystemRequest {

}

declare interface NoReactionPerformedRequest extends ScriptableSystemRequest {

}

declare interface ReactionFinishedEvent extends Event {

}

declare interface SetupWorkspotActionEvent extends StimuliData {

}

declare interface WorkEntryId {

}

declare interface WorkspotCondition extends IScriptable {

  CheckCondition(ent: Entity): Bool
}

declare interface TestConditon extends WorkspotCondition {

  CheckCondition(ent: Entity): Bool
}

declare interface TestFalseConditon extends WorkspotCondition {

  CheckCondition(ent: Entity): Bool
}

declare interface IsUnarmedCondition extends WorkspotCondition {

  CheckCondition(ent: Entity): Bool
}

declare interface HasMeleeWeaponEquippedCondition extends WorkspotCondition {

  CheckCondition(ent: Entity): Bool
}

declare interface inkAnimBuilder extends IScriptable {

  Interpolate(interpolatorName: CName, startValue: Variant, endValue: Variant): inkAnimBuilder
  InterpolateFrom(interpolatorName: CName, startValue: Variant): inkAnimBuilder
  InterpolateTo(interpolatorName: CName, endValue: Variant): inkAnimBuilder
  Mode(mode: inkanimInterpolationMode): inkAnimBuilder
  Type(type: inkanimInterpolationType): inkAnimBuilder
  Duration(duration: number): inkAnimBuilder
  Delay(delay: number): inkAnimBuilder
  Offset(offset: number): inkAnimBuilder
  Additive(isAdditive: Bool): inkAnimBuilder
  Relative(useRelativeDuration: Bool): inkAnimBuilder
  Play(): Bool
  PlayWithOptions(playbackOptions: inkAnimOptions): Bool
}

declare interface HasRangedWeaponEquippedCondition extends WorkspotCondition {

  CheckCondition(ent: Entity): Bool
}

declare interface inkAnimController extends IScriptable {

  Select(widget: inkWidget, selectionRule?: inkSelectionRule, param?: string): inkAnimController
  FromSet(other: inkWidgetsSet): inkAnimController
  Caller(caller: inkWidget): inkAnimController
  PlayOffset(offset: number): inkAnimController
  Interpolate(interpolatorName: CName, startValue: Variant, endValue: Variant): inkAnimBuilder
  InterpolateFrom(interpolatorName: CName, startValue: Variant): inkAnimBuilder
  InterpolateTo(interpolatorName: CName, endValue: Variant): inkAnimBuilder
  Play(): Bool
  PlayWithOptions(playbackOptions: inkAnimOptions): Bool
  GetProxy(index: number): inkAnimProxy
  Stop(): void
  Pause(): void
  Resume(): void
  RegisterToCallback(eventType: inkanimEventType, object: IScriptable, functionName: CName): void
  UnregisterFromCallback(eventType: inkanimEventType, object: IScriptable, functionName: CName): void
}

declare interface PrimaryWeaponTypeCondition extends WorkspotCondition {

  CheckCondition(ent: Entity): Bool
}

declare interface PreventionConditionAbstract extends AIbehaviorconditionScript {

}

declare interface ShouldPoliceReactionBeAggressive extends PreventionConditionAbstract {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface EquippedWeaponTypeCondition extends WorkspotCondition {

  CheckCondition(ent: Entity): Bool
}

declare interface inkAnimSequence extends IScriptable {

}

declare interface LogicalCondition extends WorkspotCondition {

  CheckCondition(ent: Entity): Bool
}

declare interface inkAnimToggleVisibilityEvent extends inkAnimEvent {

}

declare interface inkAnimSetVisibilityEvent extends inkAnimEvent {

  SetVisibility(isVisible: Bool): void
}

declare interface inkAnimMargin extends inkAnimInterpolator {

  GetStartMargin(): inkMargin
  GetEndMargin(): inkMargin
  SetStartMargin(startMargin: inkMargin): void
  SetEndMargin(endMargin: inkMargin): void
}

declare interface inkAnimRotation extends inkAnimInterpolator {

  GetStartRotation(): number
  GetEndRotation(): number
  SetStartRotation(startRotation: number): void
  SetEndRotation(endRotation: number): void
}

declare interface inkAnimShear extends inkAnimInterpolator {

  GetStartShear(): Vector2
  GetEndShear(): Vector2
  SetStartShear(startShear: Vector2): void
  SetEndShear(endShear: Vector2): void
}

declare interface inkAnimPivot extends inkAnimInterpolator {

  GetStartPivot(): Vector2
  GetEndPivot(): Vector2
  SetStartPivot(startPivot: Vector2): void
  SetEndPivot(endPivot: Vector2): void
}

declare interface inkAnimAnchor extends inkAnimInterpolator {

  GetStartAnchor(): Vector2
  GetEndAnchor(): Vector2
  SetStartAnchor(startAnchor: Vector2): void
  SetEndAnchor(endAnchor: Vector2): void
}

declare interface inkAnimEffect extends inkAnimInterpolator {

  GetStartValue(): number
  GetEndValue(): number
  SetEffectType(effectType: inkEffectType): void
  SetEffectName(effectName: CName): void
  SetParamName(paramName: CName): void
  SetStartValue(startValue: number): void
  SetEndValue(endValue: number): void
}

declare interface AutoplayVideoController extends inkLogicController {

  OnInitialize(): Bool
}

declare interface inkAnimTextReplace extends inkAnimTextInterpolator {

}

declare interface inkAnimTextValueProgress extends inkAnimTextInterpolator {

}

declare interface FilterRadioGroup extends inkRadioGroupController {

  SetData(enumCount: number, tooltipsManager?: gameuiTooltipsManager, tooltipIndex?: number): void
  SetData(data: number[], tooltipsManager?: gameuiTooltipsManager, tooltipIndex?: number): void
  ToggleData(data: number): void
  OnHoverOver(evt: inkPointerEvent): Bool
  OnHoverOut(evt: inkPointerEvent): Bool
}

declare interface ToggleController extends inkToggleController {

  SetToggleData(data: number): void
  GetData(): number
  GetLabelKey(): string
  GetIcon(): string
}

declare interface inkEntityPreviewCameraSettings {

}

declare interface inkEntityPreviewGameController extends gameuiMenuGameController {

  GetCameraSettings(): inkEntityPreviewCameraSettings
  EnableCamera(): void
  DisableCamera(): void
  ResetCamera(): void
  ResetTargetPosition(): void
  ZoomIn(strength: number): void
  ZoomOut(strength: number): void
  RotateYaw(strength: number): void
  RotatePitch(strength: number): void
  Move(direction: Vector4, strength: number): void
}

declare interface gameuiPuppetPreview_ReadyToBeDisplayed extends Event {

}

declare interface gameuiPuppetPreview_SetCameraSetupEvent extends Event {

}

declare interface inkGenderSelectionPuppetPreviewGameController extends inkPuppetPreviewGameController {

  OnInitialize(): Bool
  GetAnimFeature(animFeature: AnimFeature_Paperdoll): void
}

declare interface inkCharacterCreationPuppetPreviewGameController extends inkPuppetPreviewGameController {

  OnInitialize(): Bool
  GetAnimFeature(animFeature: AnimFeature_Paperdoll): void
  OnSetCameraSetupEvent(index: number, slotName: CName): Bool
}

declare interface gameuiGenericNotificationData {

}

declare interface inkMenuLogicController extends inkLogicController {

}

declare interface gameuiScreenProjectionsData extends IScriptable {

}

declare interface inkScrollController extends inkLogicController {

  SetScrollPosition(newValue: number): void
  UpdateScrollPositionFromScrollArea(): void
}

declare interface inkSliderController extends inkLogicController {

  Setup(minimumValue: number, maximumValue: number, defaultValue: number, step?: number): void
  GetProgress(): number
  GetCurrentValue(): number
  GetMaxValue(): number
  GetMinValue(): number
  GetStep(): number
  GetPercentageHandleSize(): number
  SetPercentageHandleSize(newSize: number): void
  ChangeValue(newValue: number): void
  ChangeProgress(newValue: number): void
  Next(): void
  Prior(): void
  GetSlidingAreaRef(): inkWidgetRef
  GetHandleRef(): inkWidgetRef
}

declare interface SpawnLibraryItemController extends inkLogicController {

  OnInitialize(): Bool
}

declare interface inkStepperData {

}

declare interface inkStepperController extends inkLogicController {

  PushData(dataItem: inkStepperData, refreshImmediately: Bool): void
  PushDataList(dataList: inkStepperData[], refreshImmediately: Bool): void
  Clear(refreshImmediately: Bool): void
  Refresh(): void
  SetSelectedIndex(index: number): void
  GetSelectedIndex(): number
  Prior(): void
  Next(): void
  Size(): number
}

declare interface inkVirtualCompoundBackgroundController extends inkLogicController {

}

declare interface inkVirtualUniformListController extends inkVirtualCompoundController {

}

declare interface inkVirtualUniformGridController extends inkVirtualUniformListController {

}

declare interface inkVirtualGridController extends inkVirtualListController {

}

declare interface inkGridController extends inkVirtualCompoundController {

  SetProvider(classifier: inkItemPositionProvider): void
  GetIndexFromCoords(x: number, y: number): number
  RemoveItemFromSlot(slotIdx: number): inkWidget
  PlaceItemInSlot(item: inkWidget, slotIdx: number): void
  GetSlotIndex(position: Vector2): number
  GetItemIndexFromSlot(slotIndex: number): number
  GetItemWidget(itemIndex: number): inkWidget
  GetItemData(itemIndex: number): Variant
  GetItemPosition(itemIndex: number): Vector2
  GetItemSize(itemIndex: number): Vector2
}

declare interface inkBorder extends inkLeafWidget {

}

declare interface inkCacheWidget extends inkCompoundWidget {

}

declare interface inkFlex extends inkCompoundWidget {

}

declare interface inkInputKeyData {

  /** @noSelf **/
  SetInputKey(self: inkInputKeyData, inputKey: EInputKey): void
  /** @noSelf **/
  SetInputCustomKey(self: inkInputKeyData, inputKey: EInputCustomKey): void
  /** @noSelf **/
  SetIsHoldInput(self: inkInputKeyData, isHoldInput: Bool): void
}

declare interface LabelInputDisplayController extends inkInputDisplayController {

  SetInputActionLabel(actionName: CName, label: string): void
}

declare interface inkLinePattern extends inkImage {

  AddVertex(value: Vector2): void
}

declare interface inkMask extends inkLeafWidget {

  IsTexturePartExist(texturePart: CName): Bool
  SetTexturePart(texturePart: CName): Bool
  GetTexturePart(): CName
}

declare interface inkRichTextBox extends inkText {

}

declare interface inkScrollArea extends inkCompoundWidget {

  ScrollVertical(value: number): void
  ScrollHorizontal(value: number): void
  GetVerticalScrollPosition(): number
  GetHorizontalScrollPosition(): number
  GetRealVerticalScrollPosition(): number
  GetRealHorizontalScrollPosition(): number
  GetContentSize(): Vector2
  GetViewportSize(): Vector2
  GetUseInternalMask(): Bool
  SetUseInternalMask(value: Bool): void
}

declare interface inkCircle extends inkBaseShapeWidget {

}

declare interface inkShape extends inkBaseShapeWidget {

  ChangeShape(shapeName: CName): void
}

declare interface inkTextInput extends inkText {

  RequestFocus(): void
}

declare interface inkUniformGrid extends inkCompoundWidget {

  SetWrappingWidgetCount(count: number): void
  GetWrappingWidgetCount(): number
  SetOrientation(orientation: inkEOrientation): void
  GetOrientation(): inkEOrientation
}

declare interface VideoWidgetSummary {

}

declare interface inkVirtualCompoundWidget extends inkCompoundWidget {

}

declare interface inkWidgetLayout {

}

declare interface gameuiBraindanceClueDescriptor {

}

declare interface inkComboBoxController extends inkLogicController {

  ShowComboBox(targetWidget: inkWidget): void
  HideComboBox(): void
  GetComboBoxContentWidget(): inkWidget
  GetPlaceholderWidget(): inkWidget
  GetComboBox(): inkWidget
  IsComboBoxVisible(): Bool
}

declare interface inkComboBoxObjectController extends inkLogicController {

  GetContentWidget(): inkWidget
}

declare interface inkLocalizationChangedEvent extends inkEvent {

}

declare interface inkActionName extends IScriptable {

  IsAction(actionName: CName): Bool
}

declare interface inkCharacterEvent extends inkInputEvent {

  GetCharacter(): number
}

declare interface inkHoverResizeController extends inkLogicController {

  OnInitialize(): Bool
  OnRootHoverOver(e: inkPointerEvent): Bool
  OnRootHoverOut(e: inkPointerEvent): Bool
  InitializeAnimations(): void
}

declare interface inkArray extends IScriptable {

  PushBack(object: IScriptable): void
  PopBack(): IScriptable
  InsertAt(index: number, object: IScriptable): Bool
  Remove(object: IScriptable): Bool
  Clear(): void
  Size(): number
  Empty(): Bool
  Get(): IScriptable[]
}

declare interface BaseItemDataSource extends AbstractDataSource {

  GetItem(index: number): gameItemData
  HasItem(data: gameItemData): Bool
}

declare interface ItemDataSource extends BaseItemDataSource {

  Initialize(owner: GameObject): void
}

declare interface ItemDataView extends BaseItemDataSource {

  SetSource(source: BaseItemDataSource): void
  AddSkipTag(tag: CName): void
  RemoveSkipTag(tag: CName): void
  SetSkipTags(tags: CName[]): void
  ResetSkipTags(): void
  Filter(): void
  SetItemTypesForSorting(types: gamedataItemType[]): void
  ResetItemTypesForSorting(): void
  EnableSorting(): void
  DisableSorting(): void
  IsSortingEnabled(): Bool
  Sort(): void
}

declare interface inkMenuInstance_SwitchToScenario extends Event {

  Init(eventName: CName, userData?: inkUserData): void
}

declare interface inkFIFOQueue extends IScriptable {

  Init(objects: IScriptable[]): void
  Dequeue(): IScriptable
  Enqueue(): void
}

declare interface inkMenuLayer_SetMenuModeEvent extends Event {

  Init(mode: inkMenuMode, state: inkMenuState): void
}

declare interface inkMenuLayer_SetGender extends Event {

  IsMale(): Bool
}

declare interface inkMenuLayer_SetCursorVisibility extends Event {

  Init(isVisible: Bool, pos?: Vector2): void
}

declare interface inkMenuLayer_AbortHackingMinigame extends Event {

}

declare interface ListItemsGroupController extends CodexListItemController {

  OnInitialize(): Bool
  OnAddedToList(target: ListItemController): Bool
  SetData(data: IScriptable[]): void
  OnContentClicked(index: number, target: ListItemController): Bool
  ProcessToggledOn(data: IScriptable): void
  OnFoldoutButtonClicked(e: inkPointerEvent): Bool
  OnToggledOn(target: ListItemController): Bool
  OnToggledOff(target: ListItemController): Bool
  OpenGroup(): void
  CloseGroup(): void
  GetLastClicked(): IScriptable
  Select(entry: IScriptable): void
  SelectDefault(): void
}

declare interface gameuiPhoneWaveformData extends IScriptable {

}

declare interface PhoneWaveformGameController extends inkGameController {

  SetMeasurementsCount(value: number): void
  GetMeasurementsCount(): number
  SetMeasurementsIntreval(value: number): void
  GetMeasurementsIntreval(): number
  SetItemName(value: CName): void
  OnInitialize(): Bool
  OnUpdate(audioData: gameuiPhoneWaveformData): Bool
  InitWaveform(): void
  SpawnBar(margin: inkMargin): inkCompoundWidget
  UpdateWaveform(audioData: Vector4[]): void
  FixSize(bar: inkWidget, value: number): Vector2
}

declare interface inkMenusState extends IScriptable {

  IsMenusVisible(): Bool
  ShowMenus(vakue: Bool): void
  GetControllerMenuName(): CName
  OpenMenu(fileName: CName, userData?: IScriptable): inkWidget
  CloseMenu(fileName: CName): void
  CloseAllMenus(): void
  IsMenuOpened(fileName: CName): Bool
  GetMenu(fileName: CName): inkWidget
  IsHubMenuBlocked(): Bool
  SetHubMenuBlocked(blocked: Bool): void
  DispatchEvent(menuName: CName, eventName: CName, userData?: IScriptable): Bool
}

declare interface inkScreenProjectionData {

}

declare interface inkScreenProjection extends IScriptable {

  RegisterListener(object: IScriptable, functionName: CName): void
  UnregisterListener(object: IScriptable, functionName: CName): void
  IsInScreen(): Bool
  GetEntity(): Entity
  SetEntity(entity: Entity): void
  ResetEntity(): void
  GetSlotComponentName(): CName
  SetSlotComponentName(slotComponentName: CName): void
  GetSlotName(): CName
  SetSlotName(slotName: CName): void
  GetSlotFallbackName(): CName
  SetSlotFallbackName(slotName: CName): void
  GetStaticWorldPosition(): Vector4
  SetStaticWorldPosition(position: Vector4): void
  GetFixedWorldOffset(): Vector4
  SetFixedWorldOffset(offset: Vector4): void
  ResetFixedWorldOffset(): void
  GetUserData(): IScriptable
  SetUserData(userData: IScriptable): void
  SetEnabled(enabled: Bool): void
  VoIsPerceptible(entityId: EntityID): Bool
}

declare interface inkClippedMenuScenarioData extends IScriptable {

}

declare interface MenuScenario_ClippedMenu extends inkMenuScenario {

  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnOpenPauseMenu(): Bool
  OnOpenHubMenu(): Bool
}

declare interface BaseWeakScriptableDataSource extends AbstractDataSource {

  GetItem(index: number): IScriptable
  HasItem(data: IScriptable): Bool
}

declare interface WeakScriptableDataSource extends BaseWeakScriptableDataSource {

  AppendItem(data: IScriptable): void
  InsertItemAt(index: number, data: IScriptable): void
  RemoveItem(data: IScriptable): void
  RemoveItemAt(index: number): void
  Clear(): void
  GetArray(): IScriptable[]
  Reset(scriptables: IScriptable[]): void
}

declare interface LatestSaveMetadataInfo extends IScriptable {

}

declare interface inkTextOffsetController extends inkTextAnimationController {

  GetBaseText(): string
  SetBaseText(text: string): void
  GetTimeSkip(): number
  SetTimeSkip(timeSkipValue: number): void
  GetGlitchComplexity(): number
}

declare interface WeakScriptableDataView extends BaseWeakScriptableDataSource {

  SetSource(source: BaseWeakScriptableDataSource): void
  Filter(): void
  EnableSorting(): void
  DisableSorting(): void
  IsSortingEnabled(): Bool
  Sort(): void
  FilterItem(data: IScriptable): Bool
  SortItem(left: IScriptable, right: IScriptable): Bool
}

declare interface inkTextKiroshiAnimController extends inkTextAnimationController {

  GetNativeText(): string
  SetNativeText(text: string, language: scnDialogLineLanguage): void
  GetTargetText(): string
  SetTargetText(text: string): void
  GetPreTranslatedText(): string
  SetPreTranslatedText(text: string): void
  GetPostTranslatedText(): string
  SetPostTranslatedText(text: string): void
  GetTimeSkip(): number
  SetTimeSkip(timeSkipValue: number): void
  SetupFontSettings(fontSize: number): void
}

declare interface inkTextValueProgressController extends inkTextAnimationController {

  GetBaseValue(): number
  SetBaseValue(baseValue: number): void
  GetTargetValue(): number
  SetTargetValue(targetValue: number): void
  GetNumbersAfterDot(): number
  SetNumbersAfterDot(numbersAfterDot: number): void
  GetStepValue(): number
  SetStepValue(stepValue: number): void
}

declare interface inkTextMotherTongueController extends inkLogicController {

  ApplyTexts(): void
  GetNativeText(): string
  SetNativeText(text: string, language: scnDialogLineLanguage): void
  GetTranslatedText(): string
  SetTranslatedText(text: string): void
  GetPreTranslatedText(): string
  SetPreTranslatedText(text: string): void
  GetPostTranslatedText(): string
  SetPostTranslatedText(text: string): void
}

declare interface UIAudioHandler extends IScriptable {

  PlaySound(widgetName: CName, eventName: CName, actionKey?: CName): void
  SetParameter(parameterName: CName, parameterValue: number): void
  SetSwitch(switchName: CName, switchValue: number): void
}

declare interface ScrollingText {

}

declare interface textScrollingAnimController extends inkLogicController {

  OnInitialize(): Bool
  StartScroll(fast?: Bool): void
  StopScroll(): void
  AddToHackLog(count: number): void
  OnEndLoop(proxy: inkAnimProxy): Bool
}

declare interface PopupSettings {

}

declare interface PopupData {

  /** @noSelf **/
  GetVideo(self: PopupData): ResRef
}

declare interface BaseVariantDataSource extends AbstractDataSource {

  GetItem(index: number): Variant
  HasItem(data: Variant): Bool
}

declare interface VariantDataSource extends BaseVariantDataSource {

  AppendItem(data: Variant): void
  InsertItemAt(index: number, data: Variant): void
  RemoveItem(data: Variant): void
  RemoveItemAt(index: number): void
  Clear(): void
  GetArray(): Variant[]
  Reset(variants: Variant[]): void
}

declare interface VariantDataView extends BaseVariantDataSource {

  SetSource(source: BaseVariantDataSource): void
  Filter(): void
  EnableSorting(): void
  DisableSorting(): void
  IsSortingEnabled(): Bool
  Sort(): void
  FilterItem(data: Variant): Bool
  SortItem(left: Variant, right: Variant): Bool
}

declare interface inkVectorGraphicWidget extends inkLeafWidget {

  LoadSVG(svgPath: string): void
}

declare interface AnimateAnchorOnHoverView extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnHoverOver(e: inkPointerEvent): Bool
  OnHoverOut(e: inkPointerEvent): Bool
  OnHoverChanged(isHovered: Bool): void
  StopAnimation(): void
}

declare interface HoverEvent extends Event {

}

declare interface KeyBindingEvent extends Event {

}

declare interface BaseToggleView extends inkLogicController {

  OnInitialize(): Bool
  OnButtonStateChanged(controller: inkButtonController, oldState: inkEButtonState, newState: inkEButtonState): Bool
  ToggleStateChanged(oldState: inkEToggleState, newState: inkEToggleState): void
  GetParentButton(): inkToggleController
}

declare interface ButtonCursorStateView extends BaseButtonView {

  ButtonStateChanged(oldState: inkEButtonState, newState: inkEButtonState): void
}

declare interface ButtonPlaySoundView extends BaseButtonView {

  ButtonStateChanged(oldState: inkEButtonState, newState: inkEButtonState): void
}

declare interface SettingsSelectorControllerBool extends SettingsSelectorController {

  Setup(entry: ConfigVar, isPreGame: Bool): void
  Refresh(): void
  OnInitialize(): Bool
  AcceptValue(forward: Bool): void
}

declare interface InputProgressView extends inkLogicController {

  OnInitialize(): Bool
  SetProgress(progress: number): void
  SetProgress(percentProgress: number): void
  Reset(): void
}

declare interface ConfigVarInt extends ConfigVar {

  SetValue(value: number): void
  GetValue(): number
  GetDefaultValue(): number
  GetMinValue(): number
  GetMaxValue(): number
  GetStepValue(): number
}

declare interface SettingsSelectorControllerKeyBinding extends SettingsSelectorController {

  IsListeningForInput(): Bool
  ListenForInput(): void
  StopListeningForInput(): void
  TriggerActionFeedback(): void
  /** @noSelf **/
  PrepareInputTag(keyName: CName, groupName: CName, actionName: CName): string
  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnKeyBindingEvent(e: KeyBindingEvent): Bool
  Refresh(): void
  OnRelease(e: inkPointerEvent): Bool
  SetValue(key: CName): void
  ResetValue(): void
}

declare interface ConfigVarName extends ConfigVar {

  SetValue(value: CName): void
  GetValue(): CName
  GetDefaultValue(): CName
}

declare interface PlayLibraryAnimationButtonView extends BaseButtonView {

  ButtonStateChanged(oldState: inkEButtonState, newState: inkEButtonState): void
}

declare interface TransparencyAnimationToggleView extends BaseToggleView {

  ToggleStateChanged(oldState: inkEToggleState, newState: inkEToggleState): void
}

declare interface TransparencyAnimationButtonView extends BaseButtonView {

  ButtonStateChanged(oldState: inkEButtonState, newState: inkEButtonState): void
}

declare interface SettingsSelectorControllerInt extends SettingsSelectorControllerRange {

  Setup(entry: ConfigVar, isPreGame: Bool): void
  OnSliderValueChanged(sliderController: inkSliderController, progress: number, value: number): Bool
  OnHandleReleased(): Bool
  RegisterShortcutCallbacks(): void
  ChangeValue(forward: Bool): void
  AcceptValue(forward: Bool): void
  Refresh(): void
  OnUpdateValue(): Bool
}

declare interface SettingsSelectorControllerFloat extends SettingsSelectorControllerRange {

  Setup(entry: ConfigVar, isPreGame: Bool): void
  OnSliderValueChanged(sliderController: inkSliderController, progress: number, value: number): Bool
  OnHandleReleased(): Bool
  RegisterShortcutCallbacks(): void
  ChangeValue(forward: Bool): void
  AcceptValue(forward: Bool): void
  Refresh(): void
  OnUpdateValue(): Bool
}

declare interface inkWidgetPath {

  /** @noSelf **/
  IsValid(self: inkWidgetPath): Bool
  /** @noSelf **/
  Build(n0: CName): inkWidgetPath
  /** @noSelf **/
  Build(n0: CName, n1: CName): inkWidgetPath
  /** @noSelf **/
  Build(n0: CName, n1: CName, n2: CName): inkWidgetPath
  /** @noSelf **/
  Build(n0: CName, n1: CName, n2: CName, n3: CName): inkWidgetPath
  /** @noSelf **/
  Build(n0: CName, n1: CName, n2: CName, n3: CName, n4: CName): inkWidgetPath
  /** @noSelf **/
  Build(n0: CName, n1: CName, n2: CName, n3: CName, n4: CName, n5: CName): inkWidgetPath
  /** @noSelf **/
  Build(n0: CName, n1: CName, n2: CName, n3: CName, n4: CName, n5: CName, n6: CName): inkWidgetPath
  /** @noSelf **/
  Build(n0: CName, n1: CName, n2: CName, n3: CName, n4: CName, n5: CName, n6: CName, n7: CName): inkWidgetPath
}

declare interface SettingsSelectorControllerListInt extends SettingsSelectorControllerList {

  Setup(entry: ConfigVar, isPreGame: Bool): void
  ChangeValue(forward: Bool): void
  Refresh(): void
}

declare interface inkCursorInfo extends inkUserData {

  SetSize(size: Vector2): void
}

declare interface LabeledCursorData extends inkUserData {

}

declare interface inkHoldControllerActionData extends inkUserData {

  SetActionName(actionName: CName): void
  GetActionName(): CName
}

declare interface SettingsSelectorControllerListFloat extends SettingsSelectorControllerList {

  Setup(entry: ConfigVar, isPreGame: Bool): void
  ChangeValue(forward: Bool): void
  Refresh(): void
}

declare interface SettingsSelectorControllerListString extends SettingsSelectorControllerList {

  Setup(entry: ConfigVar, isPreGame: Bool): void
  ChangeValue(forward: Bool): void
  Refresh(): void
}

declare interface HandIKDescriptionResult {

}

declare interface SettingsSelectorControllerLanguagesList extends SettingsSelectorControllerListName {

  SetDownloadButtonVisible(visible: Bool): void
  SetDownloadButtonEnabled(enabled: Bool): void
  Setup(entry: ConfigVar, isPreGame: Bool): void
  OnInitialize(): Bool
  ChangeValue(forward: Bool): void
  RegisterDownloadButtonHovers(descriptionText: inkTextRef): void
  OnDownload(e: inkPointerEvent): Bool
  Refresh(): void
  OnSettingHoverOver(e: inkPointerEvent): Bool
  OnSettingHoverOut(e: inkPointerEvent): Bool
}

declare interface AIPhaseStateEventHandlerComponent extends AIRelatedComponents {

  OnWeakspotDestroyEvent(evt: WeakspotOnDestroyEvent): Bool
}

declare interface AICustomComponents extends AIRelatedComponents {

}

declare interface GateSignalInstance {

}

declare interface GateSignal extends TaggedSignalUserData {

}

declare interface ConsumeGateSignal extends GateSignal {

}

declare interface CentaurShieldStateChangeEvent extends Event {

}

declare interface HitShieldEvent extends Event {

}

declare interface CentaurShieldController extends AICustomComponents {

  OnGameAttach(): void
  /** @noSelf **/
  ChangeShieldState(obj: GameObject, newState: ECentaurShieldState): void
  OnShieldStateChange(stateChangeEvent: CentaurShieldStateChangeEvent): Bool
  ChangeShieldState(newState: ECentaurShieldState): void
  UpdateAnimFeature(): void
  UpdateBlackbaord(): void
  ApplyShieldDestroyedStats(): void
  PlayShieldDestroyedVoiceOver(): void
  GetFloatFromCharacterTweak(varName: string, defaultValue?: number): number
  GetStringFromCharacterTweak(varName: string, defaultValue?: string): string
  TriggerShieldControllerExplosion(): void
  OnStatusEffectApplied(evt: ApplyStatusEffectEvent): Bool
  OnEventReceived(stimEvent: StimuliEvent): Bool
  OnHitShield(evt: HitShieldEvent): Bool
}

declare interface HitReactionMechComponent extends HitReactionComponent {

  EvaluateHit(newHitEvent: gameHitEvent): void
  OnForcedDeathEvent(forcedDeath: ForcedDeathEvent): Bool
  ProcessMechDeath(hitEvent: gameHitEvent, npc: NPCPuppet): Bool
}

declare interface inkCanvasRef extends inkCompoundRef {

}

declare interface inkHorizontalPanelRef extends inkBasePanelRef {

}

declare interface inkVerticalPanelRef extends inkBasePanelRef {

}

declare interface inkFlexRef extends inkCompoundRef {

}

declare interface inkUniformGridRef extends inkCompoundRef {

  /** @noSelf **/
  SetWrappingWidgetCount(self: inkUniformGridRef, count: number): void
  /** @noSelf **/
  GetWrappingWidgetCount(self: inkUniformGridRef): number
  /** @noSelf **/
  SetOrientation(self: inkUniformGridRef, orientation: inkEOrientation): void
  /** @noSelf **/
  GetOrientation(self: inkUniformGridRef): inkEOrientation
}

declare interface inkGridRef extends inkCompoundRef {

}

declare interface inkVirtualCompoundRef extends inkCompoundRef {

}

declare interface inkScrollAreaRef extends inkCompoundRef {

  /** @noSelf **/
  ScrollVertical(self: inkScrollAreaRef, value: number): void
  /** @noSelf **/
  ScrollHorizontal(self: inkScrollAreaRef, value: number): void
  /** @noSelf **/
  GetVerticalScrollPosition(self: inkScrollAreaRef): number
  /** @noSelf **/
  GetHorizontalScrollPosition(self: inkScrollAreaRef): number
  /** @noSelf **/
  GetRealVerticalScrollPosition(self: inkScrollAreaRef): number
  /** @noSelf **/
  GetRealHorizontalScrollPosition(self: inkScrollAreaRef): number
  /** @noSelf **/
  GetContentSize(self: inkScrollAreaRef): Vector2
  /** @noSelf **/
  GetViewportSize(self: inkScrollAreaRef): Vector2
  /** @noSelf **/
  GetUseInternalMask(self: inkScrollAreaRef): Bool
  /** @noSelf **/
  SetUseInternalMask(self: inkScrollAreaRef, value: Bool): void
}

declare interface inkCacheRef extends inkCompoundRef {

}

declare interface inkTextInputRef extends inkLeafRef {

}

declare interface inkBorderRef extends inkLeafRef {

}

declare interface inkRectangleRef extends inkLeafRef {

}

declare interface inkCircleRef extends inkLeafRef {

}

declare interface inkShapeRef extends inkLeafRef {

  /** @noSelf **/
  ChangeShape(self: inkShapeRef, shapeName: CName): void
}

declare interface inkMaskRef extends inkLeafRef {

  /** @noSelf **/
  SetTexturePart(self: inkMaskRef, texturePart: CName): Bool
  /** @noSelf **/
  IsTexturePartExist(self: inkMaskRef, texturePart: CName): Bool
  /** @noSelf **/
  GetTexturePart(self: inkMaskRef): CName
}

declare interface inkRichTextBoxRef extends inkTextRef {

}

declare interface BleedingEffectDamageUpdate extends Event {

}

declare interface StatusEffectManagerComponent extends AIMandatoryComponents {

  GetPuppet(): ScriptedPuppet
  GetBlackboard(): IBlackboard
  SetAnimWrapperWeight(key: CName, value: number): void
  OnStatusEffectApplied(evt: ApplyStatusEffectEvent): Bool
  EnterInstantDismemberment(): void
}

declare interface buffListGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPlayerAttach(playerGameObject: GameObject): Bool
  OnBuffDataChanged(value: Variant): Bool
  OnDeBuffDataChanged(value: Variant): Bool
  UpdateBuffs(): void
  UpdateVisibility(): void
  UpdateBuffDebuffList(): void
  SendVisibilityUpdate(oldVisible: Bool, nowVisible: Bool): void
}

declare interface BuffListVisibilityChangedEvent extends Event {

}

declare interface buffListItemLogicController extends inkLogicController {

  OnInitialize(): Bool
  SetData(icon: CName, time: number): void
  SetTimeText(f: number): void
  SetData(icon: TweakDBID, time: number): void
  SetData(icon: CName, stackCount: number): void
}

declare interface HitReactionBehaviorData extends IScriptable {

  GetHitReactionDeactivationTimeStamp(): number
}

declare interface HitReactionStopMotionExtraction extends Event {

}

declare interface GodModeStatListener extends ScriptStatsListener {

  OnGodModeChanged(ownerID: EntityID, newType: gameGodModeType): void
}

declare interface healthbarWidgetGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPlayerAttach(playerGameObject: GameObject): Bool
  OnPlayerDetach(playerGameObject: GameObject): Bool
  RegisterPSMListeners(playerObject: GameObject): void
  UnregisterPSMListeners(playerObject: GameObject): void
  StartDamageFallDelay(): void
  OnDamageAggregationFinished(anim: inkAnimProxy): Bool
  SetHealthProgress(value: number, silent: Bool): void
  OnCharacterLevelUpdated(value: number): Bool
  AnimateCharacterLevelUpdated(value: number): void
  OnLevelUpAnimationFinished(anim: inkAnimProxy): Bool
  OnCharacterLevelCurrentXPUpdated(value: number): Bool
  SetupQuickhacksMemoryBar(): void
  UpdateQuickhacksMemoryBarSize(size: number): void
  OnQuickhacksMemoryPercentUpdate(value: number): Bool
  IsCyberdeckEquipped(): Bool
  SetArmorProgress(normalizedValue: number, silent: Bool): void
  OnStatsChanged(value: Variant): Bool
  OnRightWeaponSwap(value: Variant): Bool
  OnLeftWeaponSwap(value: Variant): Bool
  IsUnarmed(): Bool
  UpdateGodModeVisibility(): void
  ComputeHealthBarVisibility(): void
  OnHPHideAnimationFinished(anim: inkAnimProxy): Bool
  IsPlayingMultiplayer(): Bool
  HelperHasGodMode(): Bool
  CreateAnimations(): void
  OnCombatStateChanged(value: number): Bool
  OnPSMVisionStateChanged(value: number): Bool
  OnSceneTierChange(argTier: number): Bool
  OnBuffListVisibilityChanged(evt: BuffListVisibilityChangedEvent): Bool
  OnForceHide(): Bool
  OnForceTierVisibility(tierVisibility: Bool): Bool
}

declare interface QuickhackBarController extends inkLogicController {

  SetStatus(value: number): void
}

declare interface PlayerBioMonitor {

}

declare interface netChargesWidgetGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  RefreshCharges(): void
  SetChargeState(chargeWidget: inkCompoundWidget, state: Bool): void
  SetChargeNumber(chargeWidget: inkCompoundWidget, number: number): void
  OnMaxChargesChanged(value: number): Bool
  OnCurrentChargesChanged(value: number): Bool
  OnNameChanged(value: CName): Bool
}

declare interface OxygenbarWidgetGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPlayerAttach(playerGameObject: GameObject): Bool
  OnPlayerDetach(playerGameObject: GameObject): Bool
  RegisterPSMListeners(playerPuppet: GameObject): void
  UnregisterPSMListeners(playerPuppet: GameObject): void
  UpdateOxygenValue(oldValue: number, newValue: number, percToPoints: number): void
  UpdateOxygenLevelWarningFluffTexts(oxygenPerc: number): void
  EvaluateOxygenBarVisibility(): void
  OnOxygenHideAnimationFinished(anim: inkAnimProxy): Bool
  IsPlayingMultiplayer(): Bool
  CreateAnimations(): void
  OnPSMSwimmingStateChanged(value: number): Bool
  OnSceneTierChange(argTier: number): Bool
  OnForceHide(): Bool
  OnForceTierVisibility(tierVisibility: Bool): Bool
}

declare interface OxygenListener extends ScriptStatPoolsListener {

  BindOxygenBar(bar: OxygenbarWidgetGameController): void
  OnStatPoolValueChanged(oldValue: number, newValue: number, percToPoints: number): void
}

declare interface StaminabarWidgetGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPlayerAttach(playerGameObject: GameObject): Bool
  OnPlayerDetach(playerGameObject: GameObject): Bool
  RegisterPSMListeners(playerPuppet: GameObject): void
  UnregisterPSMListeners(playerPuppet: GameObject): void
  UpdateStaminaValue(oldValue: number, newValue: number, percToPoints: number): void
  UpdateStaminaLevelWarningFluffTexts(staminaState: gamePSMStamina): void
  EvaluateStaminaBarVisibility(): void
  ShouldHide(): Bool
  IsPlayingMultiplayer(): Bool
  OnStaminaHideAnimationFinished(anim: inkAnimProxy): Bool
  CreateAnimations(): void
  OnSceneTierChange(argTier: number): Bool
  OnStaminaPSMChange(arg: number): Bool
  OnForceHide(): Bool
  OnForceTierVisibility(tierVisibility: Bool): Bool
}

declare interface StaminaPoolListener extends ScriptStatPoolsListener {

  BindStaminaBar(bar: StaminabarWidgetGameController): void
  OnStatPoolValueChanged(oldValue: number, newValue: number, percToPoints: number): void
}

declare interface activityLogGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  AddNewEntry(value: string): void
  OnNewEntries(value: Variant): Bool
  OnTypingFinished(widget: inkWidget): Bool
  OnDisappeared(widget: inkWidget): Bool
  OnHide(val: Bool): Bool
}

declare interface activityLogEntryLogicController extends inkLogicController {

  OnInitialize(): Bool
  SetText(displayText: string): void
  Reset(): void
  IsAvailable(): Bool
  OnTyping(proxy: inkAnimProxy): Bool
  OnStopTyping(proxy: inkAnimProxy): Bool
  OnDisappeared(proxy: inkAnimProxy): Bool
}

declare interface ButtonHints extends inkLogicController {

  OnInitialize(): Bool
  AddButtonHint(icon: EInputKey, label: string): void
  AddButtonHint(action: CName, label: CName, holdInteraction: Bool): void
  AddButtonHint(action: CName, label: CName): void
  AddButtonHint(action: CName, label: string): void
  AddCharacterRoatateButtonHint(): void
  RemoveButtonHint(action: CName): void
  ClearButtonHints(): void
  RemoveItem(action: CName): inkWidget
  Hide(): void
  Show(): void
  IsVisible(): Bool
  CheckForPreExisting(action: CName): ButtonHintListItem
}

declare interface ButtonHintListItem extends inkLogicController {

  OnInitialize(): Bool
  CheckAction(action: CName): Bool
  SetData(action: CName, label: string): void
  SetData(icon: EInputKey, label: string): void
}

declare interface InkAnimHelper extends IScriptable {

  /** @noSelf **/
  GetDef_Transparency(startAlpha: number, endAlpha: number, duration: number, delay: number, type: inkanimInterpolationType, mode: inkanimInterpolationMode): inkAnimDef
  /** @noSelf **/
  GetDef_Blink(startAlpha: number, endAlpha: number, duration: number, delay: number, type: inkanimInterpolationType, mode: inkanimInterpolationMode): inkAnimDef
}

declare interface CustomAnimationsGameController extends inkGameController {

  OnInitialize(): Bool
  OnCustomUIAnimationEvent(evt: CustomUIAnimationEvent): Bool
  InitalizeAnimationsData(): void
  PlayAnimation(animationName: CName, playbackOption: EInkAnimationPlaybackOption): void
  PlayOnSpawnAnimations(): void
  ResolveLibraryItemSpawn(itemName: CName, anchor: inkEAnchor, async?: Bool, forceRespawnLibraryItem?: Bool): Bool
  OnInitialSpawnLibrararyItem(widget: inkWidget, userData: IScriptable): Bool
}

declare interface SceneScreen extends GameObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnChangeUIAnimEvent(evt: ChangeUIAnimEvent): Bool
  SendDataToUIBlackboard(animName: CName): void
  GetBlackboard(): IBlackboard
  CreateBlackboard(): void
  GetUIAnimationData(): SceneScreenUIAnimationsData
}

declare interface ChangeUIAnimEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface SceneScreenUIAnimationsData extends IScriptable {

}

declare interface CustomAnimationsHudGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnCustomUIAnimationEvent(evt: CustomUIAnimationEvent): Bool
  PlayAnimation(animationName: CName, playbackOption: EInkAnimationPlaybackOption): void
  PlayOnSpawnAnimations(): void
  ResolveLibraryItemSpawn(itemName: CName, anchor: inkEAnchor, async?: Bool, forceRespawnLibraryItem?: Bool): Bool
  OnInitialSpawnLibrararyItem(widget: inkWidget, userData: IScriptable): Bool
}

declare interface GenericMessageNotification extends inkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  AddButtonHints(actionName: CName, label: string): void
  OnHandlePressInput(evt: inkPointerEvent): Bool
  OnConfirmClick(evt: inkPointerEvent): Bool
  OnCancelClick(evt: inkPointerEvent): Bool
  OnOkClick(evt: inkPointerEvent): Bool
  OnYesClick(evt: inkPointerEvent): Bool
  OnNoClick(evt: inkPointerEvent): Bool
  OnPositiveHoverOver(evt: inkPointerEvent): Bool
  OnNegativeHoverOver(evt: inkPointerEvent): Bool
  OnPositiveHoverOut(evt: inkPointerEvent): Bool
  OnNegativeHoverOut(evt: inkPointerEvent): Bool
  Close(result: GenericMessageNotificationResult): void
  OnCloseAnimationFinished(proxy: inkAnimProxy): Bool
  /** @noSelf **/
  GetBaseData(): GenericMessageNotificationData
  /** @noSelf **/
  Show(controller: worlduiIGameController, title: string, message: string): inkGameNotificationToken
  /** @noSelf **/
  Show(controller: worlduiIGameController, identifier: number, title: string, message: string): inkGameNotificationToken
  /** @noSelf **/
  Show(controller: worlduiIGameController, message: string): inkGameNotificationToken
  /** @noSelf **/
  Show(controller: worlduiIGameController, identifier: number, message: string): inkGameNotificationToken
  /** @noSelf **/
  Show(controller: worlduiIGameController, title: string, message: string, type: GenericMessageNotificationType): inkGameNotificationToken
  /** @noSelf **/
  Show(controller: worlduiIGameController, identifier: number, title: string, message: string, type: GenericMessageNotificationType): inkGameNotificationToken
  /** @noSelf **/
  Show(controller: worlduiIGameController, message: string, type: GenericMessageNotificationType): inkGameNotificationToken
  /** @noSelf **/
  Show(controller: worlduiIGameController, identifier: number, message: string, type: GenericMessageNotificationType): inkGameNotificationToken
}

declare interface GenericMessageNotificationData extends inkGameNotificationData {

}

declare interface GenericMessageNotificationCloseData extends inkGameNotificationData {

}

declare interface HoldIndicatorGameController extends inkGameController {

  OnInitialize(): Bool
  OnHoldProgress(value: number): Bool
  OnHoldStart(): Bool
  OnHoldFinish(): Bool
  OnHoldStop(): Bool
  HoldProgress(value: number): void
  HoldStart(): void
  HoldFinish(): void
  HoldStop(): void
}

declare interface GamepadHoldIndicatorGameController extends HoldIndicatorGameController {

  OnInitialize(): Bool
  HoldProgress(value: number): void
  HoldStart(): void
  HoldFinish(): void
  HoldStop(): void
  SetProgress(value: number): void
}

declare interface KeyboardHoldIndicatorGameController extends HoldIndicatorGameController {

  HoldProgress(value: number): void
  HoldStart(): void
  HoldFinish(): void
  HoldStop(): void
}

declare interface InventoryUtils extends IScriptable {

  /** @noSelf **/
  IsPart(attachmentSlotID: TweakDBID): Bool
  /** @noSelf **/
  GetMods(itemData: InventoryItemData, onlyGeneric?: Bool): InventoryItemAttachments[]
  /** @noSelf **/
  GetParts(itemData: InventoryItemData): InventoryItemAttachments[]
  /** @noSelf **/
  GetPartType(attachmentData: InventoryItemAttachments): WeaponPartType
}

declare interface gameuiDynamicIconLogicController extends inkLogicController {

  SetIcon(icon: TweakDBID): void
}

declare interface JournalEntriesListController extends ListController {

  PushEntries(data: JournalEntry[]): void
  PushEntriesEx(data: JournalEntry[], extraData: IScriptable[]): void
}

declare interface ProgressBarAnimationChunkController extends inkLogicController {

  SetAnimation(widght: number, height: number, fullbarSize: number, isNegative: Bool): void
  OnAnimationEnd(e: inkAnimProxy): Bool
  IsProgressAnimationPlaying(): Bool
}

declare interface OnProgressBarAnimFinish extends Event {

}

declare interface SlotMachineController extends inkLogicController {

  OnInitialize(): Bool
  SetupBarellSlots(): void
  PerformBarellCycle(): void
  RandomizeBarell(): void
  OnBarellAnimationFinished(anim: inkAnimProxy): Bool
  OnOutcomeAnimationFinished(anim: inkAnimProxy): Bool
}

declare interface SlotMachineSlot extends inkLogicController {

  OnInitialize(): Bool
  SetImagesPresets(imagePresets: CName[]): void
  RandomiseUpperImages(): void
  RandomiseLowerImages(): void
  RandomiseImages(isWinning: Bool): void
  SetWinningRow(): void
}

declare interface InitializationSoundController extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
}

declare interface StatsProgressController extends inkLogicController {

  OnInitialize(): Bool
  SetProgress(currentXp: number, maxXp: number): void
  SetLevel(level: number): void
  SetProfiencyLevel(proficiency: ProficiencyDisplayData): void
}

declare interface ProficiencyDisplayData extends IDisplayData {

  CreateTooltipData(manager: PlayerDevelopmentDataManager): BasePerksMenuTooltipData
}

declare interface SkillTooltipData extends BasePerksMenuTooltipData {

  RefreshRuntimeData(): void
}

declare interface PlayerDevelopmentDataManager extends IScriptable {

  Initialize(player: PlayerPuppet, parentGameCtrl: inkGameController): void
  GetPlayerDevelopmentSystem(): PlayerDevelopmentSystem
  GetPlayerDevelopmentData(): PlayerDevelopmentData
  GetPlayer(): PlayerPuppet
  GetPerkDisplayData(perkType: gamedataPerkType, perkArea: gamedataPerkArea, proficiency: gamedataProficiencyType, attributeId: TweakDBID, playerDevelopmentData?: PlayerDevelopmentData): PerkDisplayData
  GetPerkDisplayData(perkType: gamedataPerkType, perkArea: gamedataPerkArea, proficiency: gamedataProficiencyType, attributeRecord: Attribute_Record, playerDevelopmentData?: PlayerDevelopmentData): PerkDisplayData
  GetTraitDisplayData(traitType: gamedataTraitType, attributeId: TweakDBID, proficiency: gamedataProficiencyType, playerDevelopmentData?: PlayerDevelopmentData): TraitDisplayData
  GetTraitDisplayData(traitRecordId: TweakDBID, attributeId: TweakDBID, proficiency: gamedataProficiencyType, playerDevelopmentData?: PlayerDevelopmentData): TraitDisplayData
  GetTraitDisplayData(traitRecord: Trait_Record, attributeRecord: Attribute_Record, proficiency: gamedataProficiencyType, playerDevelopmentData?: PlayerDevelopmentData): TraitDisplayData
  GetAreaDisplayData(perkArea: gamedataPerkArea, proficiency: gamedataProficiencyType, attributeId: TweakDBID, playerDevelopmentData?: PlayerDevelopmentData): AreaDisplayData
  GetAreaDisplayData(perkArea: gamedataPerkArea, proficiency: gamedataProficiencyType, attributeRecord: Attribute_Record, playerDevelopmentData?: PlayerDevelopmentData): AreaDisplayData
  GetProficiencyDisplayData(proficiency: gamedataProficiencyType, attributeId: TweakDBID): ProficiencyDisplayData
  GetProficiencyDisplayData(proficiency: gamedataProficiencyType, attributeRecord: Attribute_Record): ProficiencyDisplayData
  GetPassiveBonusDisplayData(proficiencyRecord: Proficiency_Record): LevelRewardDisplayData[]
  GetAttributeRecordFromProficiency(proficiency: gamedataProficiencyType): Attribute_Record
  GetProficiencyRecord(attributeRecord: Attribute_Record, proficiency: gamedataProficiencyType): Proficiency_Record
  GetProficiencyRecord(proficiency: gamedataProficiencyType): Proficiency_Record
  GetProficiencyWithData(proficiency: gamedataProficiencyType): ProficiencyDisplayData
  GetAttributeData(attributeId: TweakDBID): AttributeDisplayData
  GetAttributes(): AttributeData[]
  GetAttributeFromType(attributeType: gamedataStatType): AttributeData
  GetAttribute(attributeID: TweakDBID): AttributeData
  GetAttributeRecordIDFromEnum(attribute: PerkMenuAttribute): TweakDBID
  GetAttributeEnumFromRecordID(recordID: TweakDBID): PerkMenuAttribute
  FillAttributeData(attribute: SAttribute, outData: AttributeData): void
  GetPerkPoints(): number
  GetAttributePoints(): number
  GetPerkLevel(type: gamedataPerkType): number
  /** @noSelf **/
  PerkUtilityToString(utility: gamedataPerkUtility): string
  UpdateData(): void
  NotifyAttributeUpdate(attributeId: TweakDBID): void
  UpgradePerk(data: PerkDisplayData): void
  UpgradeTrait(data: TraitDisplayData): void
  UpgradeAttribute(data: AttributeData): void
  UpgradeAttribute(type: gamedataStatType): void
  IsPerkUpgradeable(data: BasePerkDisplayData, showNotification?: Bool): Bool
  HasAvailableAttributePoints(showNotification?: Bool): Bool
}

declare interface PerkDisplayData extends BasePerkDisplayData {

  CreateTooltipData(manager: PlayerDevelopmentDataManager): BasePerksMenuTooltipData
}

declare interface PerkTooltipData extends BasePerksMenuTooltipData {

  RefreshRuntimeData(): void
}

declare interface AttributeData extends IDisplayData {

  CreateTooltipData(manager: PlayerDevelopmentDataManager): BasePerksMenuTooltipData
}

declare interface AttributeTooltipData extends BasePerksMenuTooltipData {

  RefreshRuntimeData(): void
}

declare interface AttributeDisplayData extends IDisplayData {

  CreateTooltipData(manager: PlayerDevelopmentDataManager): BasePerksMenuTooltipData
}

declare interface TraitDisplayData extends BasePerkDisplayData {

  CreateTooltipData(manager: PlayerDevelopmentDataManager): BasePerksMenuTooltipData
}

declare interface TraitTooltipData extends BasePerksMenuTooltipData {

  RefreshRuntimeData(): void
}

declare interface LevelRewardDisplayData extends IDisplayData {

}

declare interface AreaDisplayData extends IDisplayData {

}

declare interface PlayerDevUpdateDataEvent extends Event {

}

declare interface AttributeUpdatedEvent extends Event {

}

declare interface RefreshPerkAreas extends PlayerScriptableSystemRequest {

  Set(_owner: GameObject): void
}

declare interface TooltipAnimationController extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnAxisInput(evt: inkPointerEvent): Bool
  OnHidden(proxy: inkAnimProxy): Bool
  OnShown(proxy: inkAnimProxy): Bool
}

declare interface TutorialMainController extends inkGameController {

  OnInitialize(): Bool
  OnUnitialize(): Bool
  StartTutorial(): void
  UpdateTutorialStep(step: TutorialStep): void
  CompleteTutorial(): void
  IsTutorialActive(): Bool
}

declare interface TutorialStep {

}

declare interface StreetSignSelector extends TweakDBIDSelector {

}

declare interface LCDScreenSelector extends TweakDBIDSelector {

  GetCustomMessageID(): TweakDBID
  HasCustomNumber(): Bool
  GetCustomNumber(): number
}

declare interface CityFluffScreenSelector extends LCDScreenSelector {

  GetRecordID(): TweakDBID
  SetRecordID(recordID: TweakDBID): void
}

declare interface NumberPlateSelector extends LCDScreenSelector {

  GetRecordID(): TweakDBID
  SetRecordID(recordID: TweakDBID): void
}

declare interface GenericStreetSignSelector extends StreetSignSelector {

  GetRecordID(): TweakDBID
  SetRecordID(recordID: TweakDBID): void
}

declare interface StreetNameSelector extends StreetSignSelector {

  GetRecordID(): TweakDBID
  SetRecordID(recordID: TweakDBID): void
}

declare interface MetroSignSelector extends StreetSignSelector {

  GetRecordID(): TweakDBID
  SetRecordID(recordID: TweakDBID): void
}

declare interface HighwaySignSelector extends StreetSignSelector {

  GetRecordID(): TweakDBID
  SetRecordID(recordID: TweakDBID): void
}

declare interface RaceCheckpointSelector extends StreetSignSelector {

  GetRecordID(): TweakDBID
  SetRecordID(recordID: TweakDBID): void
}

declare interface CityFluffMessageSelector extends ScreenMessageSelector {

  GetRecordID(): TweakDBID
  SetRecordID(recordID: TweakDBID): void
}

declare interface QuestMessageSelector extends ScreenMessageSelector {

  GetRecordID(): TweakDBID
  SetRecordID(recordID: TweakDBID): void
}

declare interface WeaponsUtils extends IScriptable {

  /** @noSelf **/
  GetDamageTypeIcon(damageType: gamedataDamageType): CName
}

declare interface CyberwareSlot extends BaseButtonView {

  OnInitialize(): Bool
  Setup(equipArea: gamedataEquipmentArea, numSlots: number): void
  GetEquipmentArea(): gamedataEquipmentArea
  GetNumSlots(): number
}

declare interface PostponedCursorContext {

  /** @noSelf **/
  Set(self: PostponedCursorContext, c: CName, d: inkUserData): void
  /** @noSelf **/
  Reset(self: PostponedCursorContext): void
}

declare interface CursorGameController extends inkGameController {

  OnInitialize(): Bool
  OnUnitialize(): Bool
  OnSetCursorVisibility(isVisible: Bool): Bool
  OnSetCursorPosition(pos: Vector2): Bool
  OnSetCursorContext(context: CName, data: inkUserData): Bool
  OnHold(evt: inkPointerEvent): Bool
  OnRelease(evt: inkPointerEvent): Bool
  UpdateFillPercent(percent: number): void
  ProcessCursorContext(context: CName, data: inkUserData, skipAnim?: Bool): void
  ProcessNextContext(skipAnim: Bool): void
  PlayAnim(skipAnim: Bool, animation: CName, animationOverride: CName, animOptions?: inkAnimOptions): void
  OnAnimationFinished(proxy: inkAnimProxy): void
  DoesActionMatch(evt: inkPointerEvent, actionsList: CName[]): Bool
}

declare interface MenuCursorUserData extends inkUserData {

  SetAnimationOverride(anim: CName): void
  GetAnimationOverride(): CName
  AddAction(action: CName): void
  GetActions(): CName[]
  GetActionsListSize(): number
}

declare interface UIBuffInfo extends BuffInfo {

}

declare interface ChatBoxText {

}

declare interface NarrationEvent {

}

declare interface NarrativePlateData {

}

declare interface ActionDisplayData {

}

declare interface ContextDisplayData {

}

declare interface PinInfo {

}

declare interface QuicksortTemplate extends IScriptable {

  /** @noSelf **/
  Sort(items: Variant[], comparator: SortComparatorTemplate, leftIndex: number, rightIndex: number): void
  /** @noSelf **/
  Partition(items: Variant[], comparator: SortComparatorTemplate, leftIndex: number, rightIndex: number): number
}

declare interface SortComparatorTemplate extends IScriptable {

  Compare(left: Variant, right: Variant): Bool
}

declare interface QuicksortInt extends IScriptable {

  /** @noSelf **/
  Sort(items: number[], comparator: IntComparator, leftIndex: number, rightIndex: number): void
  /** @noSelf **/
  Partition(items: number[], comparator: IntComparator, leftIndex: number, rightIndex: number): number
}

declare interface IntComparator extends IScriptable {

  Compare(left: number, right: number): number
}

declare interface QuicksortInventoryItemData extends IScriptable {

  /** @noSelf **/
  Sort(items: InventoryItemData[], comparator: InventoryItemDataComparator, leftIndex: number, rightIndex: number): void
  /** @noSelf **/
  Partition(items: InventoryItemData[], comparator: InventoryItemDataComparator, leftIndex: number, rightIndex: number): number
}

declare interface InventoryItemDataComparator extends IScriptable {

  Compare(left: InventoryItemData, right: InventoryItemData): number
}

declare interface LootingInventoryItemDataComparator extends InventoryItemDataComparator {

  Compare(left: InventoryItemData, right: InventoryItemData): number
}

declare interface VendorDataManager extends IScriptable {

  Initialize(vendor: GameObject, vendingTerminalSetup: VendingTerminalSetup): void
  Initialize(owner: GameObject, entityID: EntityID): void
  UpdateOpenTime(gameInstance: GameInstance): void
  GetOpenTime(): GameTime
  GetVendorInstance(): GameObject
  GetVendorID(): TweakDBID
  GetLocalPlayer(): PlayerPuppet
  GetVendorName(): string
  GetVendorDescription(): string
  GetLocalPlayerCurrencyAmount(): number
  GetSpecialOffers(): gameItemData[]
  GetVendorSpecialOffers(): VendorGameItemData[]
  GetVendorInventoryItems(): VendorGameItemData[]
  GetRipperDocItems(): VendorGameItemData[]
  GetItemsPlayerCanSell(): gameItemData[]
  CanPlayerSellItem(itemID: ItemID): Bool
  GetStorageItems(): gameItemData[]
  BuyItemFromVendor(itemData: gameItemData, amount: number): void
  BuybackItemFromVendor(itemData: gameItemData, amount: number): void
  SellItemToVendor(itemData: gameItemData, amount: number): void
  SellItemsToVendor(itemsData: gameItemData[], amounts: number[]): void
  TransferItem(source: GameObject, target: GameObject, itemData: gameItemData, amount: number): void
  GetBuyingPrice(itemID: ItemID): number
  GetSellingPrice(itemID: ItemID): number
  Checkout(andEquip: Bool): Bool
  ClearCart(): void
  ClearBuyingCart(): void
  ClearSellingCart(): void
  NumItemsInBuyingCart(): number
  NumItemsInSellingCart(): number
  NumItemsInAllCarts(): number
  TotalNumItemsInAllCarts(): number
  AddToBuyingCart(itemToAdd: gameItemData): ECartOperationResult
  AddToSellingCart(itemToAdd: gameItemData): ECartOperationResult
  RemoveFromBuyingCart(itemToRemove: gameItemData): ECartOperationResult
  RemoveFromSellingCart(itemToRemove: gameItemData): ECartOperationResult
  CanAddToBuyingCart(itemToAdd: gameItemData): ECartOperationResult
  CanAddToSellingCart(itemToAdd: gameItemData): ECartOperationResult
  GetAmountInBuiyngCart(item: gameItemData): number
  GetAmountInSellingCart(item: gameItemData): number
  GetItemDataFromBuyingCart(items: gameItemData[]): void
  GetItemDataFromSellingCart(items: gameItemData[]): void
  GetTimeToCompletePurchase(): number
  GetPriceInBuyingCart(): number
  GetPriceInSellingCart(): number
  AddToCart(itemToAdd: gameItemData, cart: VendorShoppingCartItem[]): void
  RemoveFromCart(itemToAdd: gameItemData, cart: VendorShoppingCartItem[]): Bool
  GetTotalAmountInCart(cart: VendorShoppingCartItem[]): number
  GetAmountInCart(itemToAdd: gameItemData, cart: VendorShoppingCartItem[]): number
  GetItemDataFromCart(items: gameItemData[], cart: VendorShoppingCartItem[]): void
  GetItemIDsFromCart(itemIds: ItemID[], cart: VendorShoppingCartItem[]): void
  ProcessTooltipsData(vendorMode: EVendorMode, tooltipsData: ATooltipData[]): void
}

declare interface VendingTerminalSetup {

}

declare interface VendorGameItemData extends IScriptable {

}

declare interface BuybackRequest extends TransactionRequest {

}

declare interface SellRequest extends TransactionRequest {

}

declare interface VendorShoppingCartItem {

}

declare interface AccumulatedDamageDigitsNode {

}

declare interface DamageEntry {

}

declare interface DamageDigitsGameController extends inkProjectedHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPlayerAttach(player: GameObject): Bool
  CreateDigitsQueue(): void
  CreateAccumulatedDamageDigitsArray(): void
  ShowDamageFloater(damageInfo: DamageInfo): Bool
  IsDamageOverTime(damageInfo: DamageInfo): Bool
  OnDamageAdded(value: Variant): Bool
  OnWeaponDataChanged(value: Variant): Bool
  OnDamageDigitsModeChanged(value: Variant): Bool
  UpdateDamageDigitsMode(): void
  OnDigitsStickingModeChanged(value: Variant): Bool
  UpdateDamageDigitsStickingMode(): void
  OnHideDigit(digitWidget: inkWidget): Bool
  OnHideAccumulatedDigit(digitWidget: inkWidget): Bool
  IsPlayingMultiplayer(): Bool
  IsUsingAutoWeapon(): Bool
}

declare interface DamageDigitLogicController extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  SetProjection(projection: inkScreenProjection, gameController: DamageDigitsGameController): void
  SetActive(active: Bool): void
  Show(damageInfo: DamageInfo, showingBothDigits: Bool, forceStickToTarget: Bool): void
  CalculateDistanceModifier(fromVec: Vector4, toVec: Vector4): void
  UpdatePositionAndScale(showingBothDigits: Bool): void
  UpdateDuration(showingBothDigits: Bool): void
  OnScreenProjectionUpdate(projection: inkScreenProjection): Bool
  OnHide(anim: inkAnimProxy): Bool
  GenerateRandomMarginInterpolator(positive: Bool, isCritical: Bool, showingBothDigits: Bool): void
  CreateShowAnimation(): void
  BuildStateName(damageType: gamedataDamageType, hitType: gameuiHitType): CName
}

declare interface AccumulatedDamageDigitLogicController extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  IsProjectedEntity(entity: GameObject): Bool
  SetProjection(projection: inkScreenProjection, gameController: DamageDigitsGameController): void
  SetActive(active: Bool): void
  Show(damageInfo: DamageInfo, showingBothDigits: Bool, oneInstance: Bool, forceStickToTarget: Bool): void
  CalculateDistanceModifier(fromVec: Vector4, toVec: Vector4): void
  UpdatePositionAndScale(showingBothDigits: Bool): void
  UpdateDuration(showingBothDigits: Bool): void
  UpdateDamageInfo(damageInfo: DamageInfo, showingBothDigits: Bool): void
  OnScreenProjectionUpdate(projection: inkScreenProjection): Bool
  OnHide(anim: inkAnimProxy): Bool
  CreateShowAnimation(): void
  BuildStateName(damageType: gamedataDamageType, hitType: gameuiHitType, showingBothDigits: Bool): CName
}

declare interface WeaponRosterInfo {

}

declare interface HolocallStartEvent extends Event {

  GetVideoPath(): string
  ShouldForceFrameRate(): Bool
}

declare interface BackpackEquipSlotChooserPopup extends inkGameController {

  OnInitialize(): Bool
  SpawnWeaponSlots(inventoryManager: InventoryDataManagerV2): void
  OnSlotHoverOut(e: inkPointerEvent): Bool
  OnSlotHoverOver(e: inkPointerEvent): Bool
  OnSlotClick(e: inkPointerEvent): Bool
  OnUninitialize(): Bool
  SetButtonHints(): void
  AddButtonHints(actionName: CName, label: string): void
  OnHandlePressInput(evt: inkPointerEvent): Bool
  OnOkClick(controller: inkButtonController): Bool
  OnCancelClick(controller: inkButtonController): Bool
  Close(success: Bool): void
  OnCloseAnimationFinished(proxy: inkAnimProxy): Bool
}

declare interface BackpackEquipSlotChooserData extends inkGameNotificationData {

}

declare interface ItemPreferredComparisonResolver extends IScriptable {

  /** @noSelf **/
  Make(inventoryDataManager: InventoryDataManagerV2): ItemPreferredComparisonResolver
  GetAreaItems(equipmentArea: gamedataEquipmentArea): ItemPreferredAreaItems
  IsAreaSelfComparable(item: InventoryItemData): Bool
  CacheComparableType(item: InventoryItemData): ItemComparableTypesCache
  GetComparableTypes(item: InventoryItemData): ItemComparableTypesCache
  GetTypeComparableItems(item: InventoryItemData): TypeComparableItemsCache
  GetComparableItems(item: InventoryItemData): InventoryItemData[]
  IsBetterComparableNewItem(uiScriptableSystem: UIScriptableSystem, item: InventoryItemData): Bool
  GetPreferredComparisonItem(item: InventoryItemData): InventoryItemData
  GetItemComparisonState(item: InventoryItemData): ItemComparisonState
  IsComparable(item: InventoryItemData): Bool
  IsTypeComparable(baseItem: InventoryItemData, comparedType: gamedataItemType): Bool
  DisableForceComparedItem(): void
  ForceComparedItem(item: InventoryItemData): void
}

declare interface ItemPreferredAreaItems extends IScriptable {

}

declare interface ItemComparableTypesCache extends IScriptable {

}

declare interface TypeComparableItemsCache extends IScriptable {

}

declare interface BackpackEquipSlotChooserCloseData extends inkGameNotificationData {

}

declare interface BackpackFilterButtonController extends inkLogicController {

  OnInitialize(): Bool
  OnHoverOver(evt: inkPointerEvent): Bool
  OnHoverOut(evt: inkPointerEvent): Bool
  Setup(filterType: ItemFilterCategory): void
  GetFilterType(): ItemFilterCategory
  SetActive(value: Bool): void
  GetLabelKey(): CName
  /** @noSelf **/
  GetLabelKey(filterType: ItemFilterCategory): CName
  /** @noSelf **/
  GetIcon(filterType: ItemFilterCategory): string
}

declare interface ItemFilterCategories extends IScriptable {

  /** @noSelf **/
  GetLabelKey(filterType: number): CName
  /** @noSelf **/
  GetLabelKey(filterType: ItemFilterCategory): CName
  /** @noSelf **/
  GetIcon(filterType: number): string
  /** @noSelf **/
  GetIcon(filterType: ItemFilterCategory): string
}

declare interface ItemFilters extends IScriptable {

  /** @noSelf **/
  GetLabelKey(filterType: number): CName
  /** @noSelf **/
  GetLabelKey(filterType: ItemFilterType): CName
  /** @noSelf **/
  GetIcon(filterType: number): string
  /** @noSelf **/
  GetIcon(filterType: ItemFilterType): string
}

declare interface ItemCategoryFliterManager extends IScriptable {

  /** @noSelf **/
  Make(skipDefaultFilters?: Bool): ItemCategoryFliterManager
  AddItem(itemData: gameItemData): void
  GetAt(index: number): ItemFilterCategory
  GetFiltersList(): ItemFilterCategory[]
  SortFiltersList(): void
  GetSortedFiltersList(): ItemFilterCategory[]
  GetIntFiltersList(): number[]
  GetSortedIntFiltersList(): number[]
  InsertFilter(position: number, filter: ItemFilterCategory): void
  Clear(skipDefaultFilters?: Bool): void
  AddFilter(filter: ItemFilterCategory): void
  AddFilterToCheck(filter: ItemFilterCategory): void
  RemvoeFilterToCheck(filter: ItemFilterCategory): void
}

declare interface CrafringMaterialItemController extends BaseButtonView {

  OnInitialize(): Bool
  OnCraftingMaterialHoverOver(evt: inkPointerEvent): Bool
  OnCraftingMaterialHoverOut(evt: inkPointerEvent): Bool
  Setup(itemData: InventoryItemData): void
  RefreshUI(): void
  SetHighlighted(type: CrafringMaterialItemHighlight, quantityChanged?: number): void
  SetHighlighted(quantityChanged?: number): void
  GetItemID(): ItemID
  GetQuantity(): number
  GetMateialDisplayName(): string
}

declare interface DropdownButtonController extends inkLogicController {

  OnInitialize(): Bool
  SetData(data: DropdownItemData): void
  SetOpened(opened: Bool): void
  OnHoverOut(evt: inkPointerEvent): Bool
  OnHoverOver(evt: inkPointerEvent): Bool
}

declare interface DropdownItemData extends IScriptable {

}

declare interface DropdownItemController extends BaseButtonView {

  OnInitialize(): Bool
}

declare interface BriefingScreen extends inkHUDGameController {

  OnInitialize(): Bool
  OnBriefingOpenerCalled(value: string): Bool
  OnBriefingSizeCalled(value: Variant): Bool
  OnBriefingAlignmentCalled(value: Variant): Bool
  FindEntry(toFind: string, entries: JournalEntry[]): JournalEntry
  OnUninitialize(): Bool
}

declare interface BriefingScreenLogic extends inkLogicController {

  OnInitialize(): Bool
  ShowBriefing(briefingToOpen: JournalEntry): void
  SetBriefing(): void
  OnFadeInEnd(proxy: inkAnimProxy): Bool
  OnFadeOutEnd(proxy: inkAnimProxy): Bool
  ProcessMap(toProcess: JournalBriefingMapSection): void
  ProcessVideo(toProcess: JournalBriefingVideoSection): void
  ProcessPaperdoll(toProcess: JournalBriefingPaperDollSection): void
  Fade(startValue: number, endValue: number, callbackName: CName): void
  SetSize(sizeToSet: questJournalSizeEventType): void
  SetAlignment(alignmentToSet: questJournalAlignmentEventType): void
  HideAll(): void
}

declare interface ButtonHelpBarMenuGameController extends inkLogicController {

  OnInitialize(): Bool
  OnUnitialize(): Bool
}

declare interface BackpackMainGameController extends gameuiMenuGameController {

  IsItemPreviewable(itemData: gameItemData, isGarment: Bool): Bool
  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  OnPostOnRelease(evt: inkPointerEvent): Bool
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
  OnCloseMenu(userData: IScriptable): Bool
  OnBack(userData: IScriptable): Bool
  RegisterToBB(): void
  UnregisterFromBB(): void
  SetupVirtualGrid(): void
  ResetVirtualGrid(): void
  SetupDropdown(): void
  OnDropdownItemClickedEvent(evt: DropdownItemClickedEvent): Bool
  OnDisassembleComplete(value: Variant): Bool
  OnItemEquipped(value: Variant): Bool
  UpdateQuantites(): void
  RefreshUI(): void
  AddToDropQueue(item: ItemModParams): void
  PopulateInventory(): void
  GetComparisonState(item: InventoryItemData): ItemComparisonState
  ClearCraftingMaterials(): void
  PopulateCraftingMaterials(): void
  CreateCraftingMaterialItem(data: InventoryItemData, gridList: inkCompoundRef): void
  UpdateCraftingMaterials(skipAnim?: Bool): void
  RefreshFilterButtons(filters: ItemFilterCategory[]): void
  OnItemDisplayHoverOver(evt: ItemDisplayHoverOverEvent): Bool
  RequestItemInspected(itemID: ItemID): void
  OnItemDisplayHoverOut(evt: ItemDisplayHoverOutEvent): Bool
  HighlightDisassemblyResults(item: InventoryItemData): void
  HideDisassemblyHighlight(): void
  GetDisassemblyResult(itemData: InventoryItemData): IngredientData[]
  OnSortingButtonClicked(evt: inkPointerEvent): Bool
  OnItemDisplayClick(evt: ItemDisplayClickEvent): Bool
  DetermineUIMenuNotificationType(): UIMenuNotificationType
  OpenQuantityPicker(itemData: InventoryItemData, actionType: QuantityPickerActionType): void
  OnQuantityPickerPopupClosed(data: inkGameNotificationData): Bool
  OnQuantityPickerDrop(data: QuantityPickerPopupCloseData): void
  OnQuantityPickerDisassembly(data: QuantityPickerPopupCloseData): void
  IsEquippable(itemData: gameItemData): Bool
  EquipItem(itemData: InventoryItemData, display?: InventoryItemDisplayController): void
  ShowNotification(gameInstance: GameInstance, type: UIMenuNotificationType): void
  OpenBackpackEquipSlotChooser(itemData: InventoryItemData): void
  OnBackpacEquipSlotChooserClosed(data: inkGameNotificationData): Bool
  OnItemPreviewPopup(data: inkGameNotificationData): Bool
  OnItemFilterClick(evt: inkPointerEvent): Bool
  OnItemFilterHoverOver(evt: inkPointerEvent): Bool
  OnItemFilterHoverOut(evt: inkPointerEvent): Bool
  OnCraftingMaterialHoverOver(evt: inkPointerEvent): Bool
  OnCraftingMaterialHoverOut(evt: inkPointerEvent): Bool
  OnItemDisplayHold(evt: ItemDisplayHoldEvent): Bool
  OnInventoryRequestTooltip(displayingData: InventoryItemData, widget: inkWidget, iconErrorInfo: DEBUG_IconErrorInfo): void
  SetInventoryItemButtonHintsHoverOver(displayingData: InventoryItemData): void
  SetInventoryItemButtonHintsHoverOut(): void
  SetWarningMessage(message: string): void
}

declare interface BackpackInventoryListenerCallback extends InventoryScriptCallback {

  Setup(backpackInstance: BackpackMainGameController): void
  OnItemRemoved(itemID: ItemID, difference: number, currentQuantity: number): void
  OnItemQuantityChanged(itemID: ItemID, diff: number, total: number, flaggedAsSilent: Bool): void
}

declare interface ItemDisplayTemplateClassifier extends inkVirtualItemTemplateClassifier {

  ClassifyItem(data: Variant): number
}

declare interface ItemPositionProvider extends inkItemPositionProvider {

  GetItemPosition(data: Variant): number
  SaveItemPosition(data: Variant, position: number): void
}

declare interface DropdownListController extends inkLogicController {

  OnInitialize(): Bool
  OnRelease(evt: inkPointerEvent): Bool
  OnHoverOut(evt: inkPointerEvent): Bool
  Setup(owner: inkLogicController, data: DropdownItemData[], triggerButton?: DropdownButtonController): void
  Setup(owner: inkGameController, data: DropdownItemData[], triggerButton?: DropdownButtonController): void
  Setup(owner: inkLogicController, displayContext: DropdownDisplayContext, triggerButton?: DropdownButtonController): void
  Setup(owner: inkGameController, displayContext: DropdownDisplayContext, triggerButton?: DropdownButtonController): void
  SetupData(data: DropdownItemData[]): void
  GetDisplayContext(): DropdownDisplayContext
  GetData(): DropdownItemData[]
  SetTriggerButton(triggerButton: DropdownButtonController): void
  Open(): void
  Close(): void
  Toggle(): void
  IsOpened(): Bool
  OnDropdownItemClicked(evt: inkPointerEvent): Bool
}

declare interface DropdownElementController extends BaseButtonView {

  OnInitialize(): Bool
  Setup(data: DropdownItemData): void
  GetIdentifier(): Variant
  SetHighlighted(highlighted: Bool): void
  SetActive(active: Bool): void
  OnHoverOver(evt: inkPointerEvent): Bool
  OnHoverOut(evt: inkPointerEvent): Bool
}

declare interface SortingDropdownData extends IScriptable {

  /** @noSelf **/
  GetDropdownOption(options: DropdownItemData[], identifier: ItemSortMode): DropdownItemData
  /** @noSelf **/
  GetDropdownItemData(identifier: Variant, labelKey: CName, direction: DropdownItemDirection): DropdownItemData
  /** @noSelf **/
  GetDefaultDropdownOptions(): DropdownItemData[]
  /** @noSelf **/
  GetItemChooserWeaponDropdownOptions(): DropdownItemData[]
  /** @noSelf **/
  GetContextDropdownOptions(context: DropdownDisplayContext): DropdownItemData[]
}

declare interface DropdownItemClickedEvent extends Event {

}

declare interface DropQueueUpdatedEvent extends Event {

}

declare interface QuantityPickerPopupData extends inkGameNotificationData {

}

declare interface QuantityPickerPopupCloseData extends inkGameNotificationData {

}

declare interface CodexGameController extends gameuiMenuGameController {

  OnInitialize(): Bool
  SetupFilterButtons(): void
  RefreshButtonHints(): void
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  OnSetUserData(userData: IScriptable): Bool
  SelectEntry(): void
  FindItem(hash: number): number
  OnUninitialize(): Bool
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
  OnBack(userData: IScriptable): Bool
  OnEntryVisitedUpdate(entryHash: number, className: CName, notifyOption: JournalNotifyOption, changeType: JournalChangeType): Bool
  OnEntryActivated(evt: CodexSelectedEvent): Bool
  OnCodexForceSelectionEvent(evt: CodexForceSelectionEvent): Bool
  ForceSelectIndex(idx: number): void
  PopulateData(): void
  ShowNodataWarning(): void
  HideNodataWarning(): void
  OnCodexFilterButtonClicked(e: CodexFilterButtonClicked): Bool
}

declare interface CodexEntryViewController extends inkLogicController {

  OnInitialize(): Bool
  ShowEntry(data: GenericCodexEntryData): void
  OnIconCallback(e: iconAtlasCallbackData): Bool
}

declare interface CodexListVirtualNestedListController extends VirtualNestedListController {

  SetFilter(filterType: CodexCategoryType): void
  GetDataView(): VirtualNestedListDataView
}

declare interface CodexListVirtualNestedDataView extends VirtualNestedListDataView {

  SetFilter(filterType: CodexCategoryType): void
  FilterItems(data: VirutalNestedListData): Bool
}

declare interface CodexEntryData extends GenericCodexEntryData {

}

declare interface CodexListSyncData extends IScriptable {

}

declare interface CodexFilterButtonController extends inkLogicController {

  OnInitialize(): Bool
  Setup(category: CodexCategoryType): void
  UpdateSelectedCategory(selectedCategory: CodexCategoryType): void
  OnHoverOut(e: inkPointerEvent): Bool
  OnHoverOver(e: inkPointerEvent): Bool
  OnClicked(e: inkPointerEvent): Bool
  UpdateState(): void
}

declare interface CodexUtils extends IScriptable {

  /** @noSelf **/
  GetShardsDataArray(journal: JournalManager, activeDataSync: CodexListSyncData): VirutalNestedListData[]
  /** @noSelf **/
  GetCodexDataArray(journal: JournalManager, activeDataSync: CodexListSyncData, useFallbackImages?: Bool): VirutalNestedListData[]
  /** @noSelf **/
  GetTutorialsData(journal: JournalManager, activeDataSync: CodexListSyncData, offset: number): VirutalNestedListData[]
  /** @noSelf **/
  AppendTutorialEntries(journal: JournalManager, path: string, output: JournalEntry[]): Bool
  /** @noSelf **/
  SetCodexData(journal: JournalManager, codexList: JournalEntry[]): void
  /** @noSelf **/
  JournalToRepresentationArray(journal: JournalManager, entries: JournalEntry[]): JournalRepresentationData[]
  /** @noSelf **/
  GetLocalizedTag(tag: CName): string
  /** @noSelf **/
  GetShardTitleString(isCrypted: Bool, titleString: string): string
  /** @noSelf **/
  GetShardTextString(isCrypted: Bool, textString: string): string
  /** @noSelf **/
  GetCategoryTypeFromId(id: string): CodexCategoryType
  /** @noSelf **/
  GetCodexFilterIcon(category: CodexCategoryType): string
}

declare interface ShardEntryData extends GenericCodexEntryData {

}

declare interface CodexFilterButtonClicked extends Event {

}

declare interface CodexForceSelectionEvent extends Event {

}

declare interface CodexEntrySelectedEvent extends Event {

}

declare interface CodexSelectedEvent extends Event {

}

declare interface CodexSyncBackEvent extends Event {

}

declare interface CodexUserData extends IScriptable {

  /** @noSelf **/
  Make(dataSource: CodexDataSource): CodexUserData
}

declare interface OnOpenCodexAtEntryEvent extends Event {

}

declare interface OnVisitedJournalEntryEvent extends Event {

}

declare interface OnscreenDisplayManager extends inkLogicController {

  ShowEntry(entry: JournalOnscreen): void
}

declare interface CodexBaseGameController extends gameuiMenuGameController {

}

declare interface BackgroundDisplayVirtualController extends inkVirtualCompoundBackgroundController {

  OnInitialize(): Bool
}

declare interface ItemDisplayVirtualController extends inkVirtualCompoundItemController {

  OnInitialize(): Bool
  OnSelected(itemController: inkVirtualCompoundItemController, discreteNav: Bool): Bool
  OnDataChanged(value: Variant): Bool
}

declare interface ShardsNestedListDataView extends VirtualNestedListDataView {

  SortItems(compareBuilder: CompareBuilder, left: VirutalNestedListData, right: VirutalNestedListData): void
}

declare interface ShardsVirtualNestedListController extends VirtualNestedListController {

  GetDataView(): VirtualNestedListDataView
}

declare interface ShardItemVirtualController extends inkVirtualCompoundItemController {

  OnInitialize(): Bool
  OnDataChanged(value: Variant): void
  OnContactSyncData(evt: ShardSyncBackEvent): Bool
  OnEntrySelected(evt: ShardEntrySelectedEvent): Bool
  OnToggledOn(itemController: inkVirtualCompoundItemController): Bool
  OnToggledOff(itemController: inkVirtualCompoundItemController): Bool
  OnSelected(itemController: inkVirtualCompoundItemController, discreteNav: Bool): Bool
  OnDeselected(itemController: inkVirtualCompoundItemController): Bool
  UpdateState(): void
}

declare interface ShardEntrySelectedEvent extends Event {

}

declare interface ShardSelectedEvent extends Event {

}

declare interface CodexListVirtualEntry extends inkVirtualCompoundItemController {

  OnInitialize(): Bool
  OnDataChanged(value: Variant): void
  OnContactSyncData(evt: CodexSyncBackEvent): Bool
  OnEntrySelected(evt: CodexEntrySelectedEvent): Bool
  OnToggledOn(itemController: inkVirtualCompoundItemController): Bool
  OnToggledOff(itemController: inkVirtualCompoundItemController): Bool
  OnSelected(itemController: inkVirtualCompoundItemController, discreteNav: Bool): Bool
  OnDeselected(itemController: inkVirtualCompoundItemController): Bool
  UpdateState(): void
}

declare interface ShardSyncBackEvent extends Event {

}

declare interface CodexListVirtualGroup extends inkVirtualCompoundItemController {

  OnInitialize(): Bool
  OnDataChanged(value: Variant): void
  OnContactSyncData(evt: CodexSyncBackEvent): Bool
  OnEntrySelected(evt: CodexEntrySelectedEvent): Bool
  OnToggledOn(itemController: inkVirtualCompoundItemController): Bool
  OnToggledOff(itemController: inkVirtualCompoundItemController): Bool
  OnSelected(itemController: inkVirtualCompoundItemController, discreteNav: Bool): Bool
  OnDeselected(itemController: inkVirtualCompoundItemController): Bool
  UpdateState(): void
}

declare interface ShardsMenuGameController extends gameuiMenuGameController {

  OnInitialize(): Bool
  RefreshButtonHints(): void
  PlayAnim(animName: CName): void
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  OnButtonRelease(e: inkPointerEvent): Bool
  OnSetUserData(userData: IScriptable): Bool
  SelectEntry(): void
  FindItem(hash: number): number
  OnUninitialize(): Bool
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
  OnBack(userData: IScriptable): Bool
  OnEntryVisitedUpdate(entryHash: number, className: CName, notifyOption: JournalNotifyOption, changeType: JournalChangeType): Bool
  OnContactActivated(evt: ShardSelectedEvent): Bool
  OnShardForceSelectionEvent(evt: ShardForceSelectionEvent): Bool
  ForceSelectIndex(idx: number): void
  PopulateData(): void
  ProcessItem(item: InventoryItemData, data: VirutalNestedListData[], level: number, newEntries?: number[]): Bool
  GetVirtualDataForCrypted(item: InventoryItemData, curShard: JournalOnscreen, level: number, newEntries?: number[]): VirutalNestedListData
  ShowNodataWarning(): void
  HideNodataWarning(): void
}

declare interface ItemPreviewGameController extends inkItemPreviewGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnGlobalPress(e: inkPointerEvent): Bool
  OnGlobalRelease(e: inkPointerEvent): Bool
  HandleAxisInput(e: inkPointerEvent): void
  OnAxisInput(e: inkPointerEvent): Bool
  OnRelativeInput(e: inkPointerEvent): Bool
}

declare interface InventoryItemPreviewData extends inkGameNotificationData {

}

declare interface inkCooldownGameController extends inkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  ParseBuffList(buffList: UIBuffInfo[]): void
  GetInstance(): GameInstance
  OnEffectUpdate(v: Variant): Bool
  GetBuffs(buffs: BuffInfo[]): void
  GetDebuffs(debuffs: BuffInfo[]): void
  OnCooldownUpdate(buffList: BuffInfo[]): Bool
  RequestCooldownVisualization(buffData: UIBuffInfo): void
}

declare interface SingleCooldownManager extends inkLogicController {

  Init(pool: inkCompoundRef, grid: inkCompoundRef): void
  ActivateCooldown(buffData: UIBuffInfo): void
  Update(timeLeft: number, stackCount: number): void
  SetStackCount(count: number): void
  SetTimeRemaining(time: number): void
  ConvertFloatToTime(f: number, time: GameTime, totalSeconds: number, fraction: number): void
  FillIntroAnimationStart(): void
  OnFillIntroAnimationOver(proxy: inkAnimProxy): Bool
  FillOutroAnimationStart(): void
  OnFillOutroAnimationOver(proxy: inkAnimProxy): Bool
  HideCooldownWidget(): void
  GetState(): ECooldownIndicatorState
  RemoveCooldown(): void
  IsIDMatch(id: TweakDBID): Bool
}

declare interface ItemCraftingPreviewGameController extends inkItemPreviewGameController {

  OnCrafrtingPreview(evt: CraftingItemPreviewEvent): Bool
}

declare interface CraftingItemPreviewEvent extends Event {

}

declare interface GarmentItemPreviewGameController extends inkInventoryPuppetPreviewGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnGlobalRelease(evt: inkPointerEvent): Bool
  OnPuppetAttached(): Bool
}

declare interface ItemPreviewHelper extends IScriptable {

  /** @noSelf **/
  ShowPreviewItem(controller: inkGameController, itemData: InventoryItemData, isGarment: Bool, callbackName: CName): inkGameNotificationToken
  /** @noSelf **/
  ShowPreviewItem(controller: inkGameController, itemData: InventoryItemData, isPreviewable: Bool, isGarment: Bool, callbackName: CName): inkGameNotificationToken
  /** @noSelf **/
  GetPreviewData(controller: IScriptable, itemData: InventoryItemData, isPreviewable: Bool, isGarment: Bool): InventoryItemPreviewData
}

declare interface InventoryItemPreviewPopupEvent extends Event {

}

declare interface CraftingItemTemplateClassifier extends inkVirtualItemTemplateClassifier {

  ClassifyItem(data: Variant): number
  /** @noSelf **/
  IsSmall(data: Variant): Bool
  /** @noSelf **/
  GetIconPosition(data: Variant): ECraftingIconPositioning
}

declare interface ItemCraftingData extends IScriptable {

}

declare interface CraftingDataView extends ScriptableDataView {

  BindUIScriptableSystem(uiScriptableSystem: UIScriptableSystem): void
  SetFilterType(type: ItemFilterCategory): void
  GetFilterType(): ItemFilterCategory
  SetSortMode(mode: ItemSortMode): void
  GetSortMode(): ItemSortMode
  PreSortingInjection(builder: ItemCompareBuilder): ItemCompareBuilder
  SortItem(left: IScriptable, right: IScriptable): Bool
  FilterItem(item: IScriptable): Bool
  FilterWeapons(itemData: InventoryItemData): Bool
  FilterClothes(itemData: InventoryItemData): Bool
  FilterConsumable(itemData: InventoryItemData): Bool
  FilterGrenade(itemData: InventoryItemData): Bool
  FilterCyberware(itemData: InventoryItemData): Bool
  FilterAttachments(itemData: InventoryItemData): Bool
  FilterQuestItems(itemData: InventoryItemData): Bool
  FilterHackItems(itemData: InventoryItemData): Bool
  FilterCyberwareByItemType(itemType: gamedataItemType): Bool
  FilterCyberwareByEquipmentArea(equipmentArea: gamedataEquipmentArea): Bool
}

declare interface CraftingPopupController extends inkGameController {

  OnInitialize(): Bool
  AddButtonHint(): void
  OnHandlePressInput(evt: inkPointerEvent): Bool
  SetPopupData(tooltipsData: InventoryTooltipData, command: CraftingCommands): void
  OnOkClick(controller: inkButtonController): Bool
  OnUninitialize(): Bool
}

declare interface CraftingPopupData extends inkGameNotificationData {

}

declare interface ProgressBarsController extends inkLogicController {

  OnInitialize(): Bool
  SetBarProgress(progress: number): void
}

declare interface CraftingSkillWidget extends inkGameController {

  OnInitialize(): Bool
  OnCharacterProficiencyUpdated(evt: ProficiencyProgressEvent): Bool
  OnCharacterLevelUpdated(value: Variant): Bool
  SetLevel(): void
  SetProgress(): void
  SetFill(amount: number): void
  AddPerk(toAdd: gamedataPerkType): void
  OnUninitialize(): Bool
}

declare interface BinkResource {

  /** @noSelf **/
  IsValid(self: BinkResource): Bool
  /** @noSelf **/
  GetPath(self: BinkResource): ResRef
}

declare interface gameuiCreditsController extends inkGameController {

}

declare interface CreditsData extends inkUserData {

}

declare interface CreditsGameController extends gameuiCreditsController {

  OnInitialize(): Bool
  OnUpdate(timeDelta: number): Bool
  OnUninitialize(): Bool
  OnSetUserData(data: IScriptable): Bool
  InitializeCredits(): void
  PlayNextVideo(): void
}

declare interface CyberEquipGameController extends ArmorEquipGameController {

  OnInitialize(): Bool
  CreateButton(title: string, btnPath: string, area: gamedataEquipmentArea, numSlots: number): void
  GetPartialViewData(itemID: ItemID): ItemViewData
  RefreshInventoryList(): void
  RemovedEverythingButCyberware(items: gameItemData[]): gameItemData[]
}

declare interface CyberwareAttributes_ContainersStruct {

}

declare interface CyberwareAttributes_ResistancesStruct {

}

declare interface CyberwareAttributesSkills extends inkGameController {

  OnInitialize(): Bool
  SyncWithPlayerDevSystem(): void
  SyncProficiencies(): void
  HelperGetStatText(currStatType: gamedataStatType, statsSystem: StatsSystem): string
  SyncStats(): void
  OnSomeResistanceChanged(value: number): Bool
  SyncDevPoints(): void
  OnResistancesHover(controller: inkButtonController, oldState: inkEButtonState, newState: inkEButtonState): Bool
  OnSpendPoints(e: inkPointerEvent): void
  OnAttributesChange(value: Variant): Bool
  OnDevelopmentPointsChange(value: Variant): Bool
  OnProficiencyChange(value: Variant): Bool
}

declare interface CyberwareAttributes_Logic extends inkLogicController {

  OnInitialize(): Bool
  OnButtonHoverOver(e: inkPointerEvent): Bool
  OnButtonHoverOut(e: inkPointerEvent): Bool
  SetAttributeValue(value: string): void
}

declare interface RequestStats extends Event {

}

declare interface DisassembleManager extends gameuiMenuGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  SetupBB(): void
  UnregisterFromBB(): void
  ManagePopups(): void
  CreatePopup(): void
  CreatePopupDelay(): void
  OnDisassembleComplete(value: Variant): Bool
  OnRemovePopup(widget: inkWidget): Bool
  OnDelayComplete(anim: inkAnimProxy): Bool
}

declare interface DisassemblePopupLogicController extends inkLogicController {

  OnInitialize(): Bool
  SetupData(itemData: InventoryItemData): void
  OnAddPopupComplete(anim: inkAnimProxy): Bool
  OnPopupDurationComplete(anim: inkAnimProxy): Bool
}

declare interface EngagementScreenGameController extends gameuiMenuGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
}

declare interface FastTravelButtonLogicController extends inkButtonController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  Initialize(data: FastTravelPointData): void
  IsInitialized(): Bool
  SetDescription(data: FastTravelPointData): void
  GetFastTravelPointData(): FastTravelPointData
  RegisterAudioCallbacks(gameController: inkGameController): void
  GetWidgetAudioName(): CName
  GetOnPressKey(): CName
  GetOnReleaseKey(): CName
  GetOnHoverOverKey(): CName
  GetOnHoverOutKey(): CName
}

declare interface CraftingMainGameController extends gameuiMenuGameController {

  OnInitialize(): Bool
  OnHoldFinished(evt: ProgressBarFinishedProccess): Bool
  RegisterTabButtons(): void
  OnValueChanged(controller: inkRadioGroupController, selectedIndex: number): Bool
  OnUninitialize(): Bool
  SetupBB(): void
  RemoveBB(): void
  SetFilters(init: Bool): void
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
  OnSetUserData(userData: IScriptable): Bool
  SetupDropdown(): void
  OnSortingButtonClicked(evt: inkPointerEvent): Bool
  OnDropdownItemClickedEvent(evt: DropdownItemClickedEvent): Bool
  OnButtonClick(evt: inkPointerEvent): Bool
  /** @noSelf **/
  GetDropdownOption(identifier: ItemSortMode): DropdownItemData
  RefreshUI(): void
  SetupRecipesList(): void
  SetupUpgradableList(): void
  SetQualityHeader(): void
  SetIngredientList(): void
  SetupIngredients(ingredient: IngredientData[]): void
  OnItemIngredientHoverOut(evt: ItemDisplayHoverOverEvent): Bool
  OnBack(userData: IScriptable): Bool
  OnTransferToPerkSreen(evt: inkPointerEvent): Bool
  OnCraftingComplete(value: Variant): Bool
  OnFilterChange(controller: inkRadioGroupController, selectedIndex: number): Bool
  OnRecipeSelect(previous: inkVirtualCompoundItemController, next: inkVirtualCompoundItemController): Bool
  UpdateItemPreview(craftableController: CraftableItemLogicController, useDataFromController: Bool): void
  SetPerkNotification(): void
  SetTooltip(craftableController: CraftableItemLogicController): void
  ChangeMode(mode: CraftingMode): void
  OpenCraftingMode(): void
  OpenUpgradeMode(): void
  SetCraftingButton(): void
  SelectRecipe(controller: CraftableItemLogicController): void
  SelectItem(controller: CraftableItemLogicController): void
  ShowItemTooltip(oldData: InventoryItemData): void
  ShowRecipeTooltip(controller: CraftableItemLogicController): void
  UpdateTooltipData(tooltipsData: InventoryTooltipData[], targetInfoType: CraftingInfoType): void
  DryMakeItem(): void
  DryUpgradeItem(itemData: gameItemData): void
  CraftItem(): void
  UpgradeItem(): void
  SetItemButtonHintsHoverOver(evt: inkPointerEvent): void
  SetItemButtonHintsHoverOut(evt: inkPointerEvent): void
  FillInventoryData(itemDataHolder: InventoryItemData[], itemArrayHolder: IScriptable[]): void
  FindStatData(toFind: gamedataStatType, statsPrediction: gameStatDetailedData[]): gameStatDetailedData
  IsWeapon(type: gamedataEquipmentArea): Bool
}

declare interface TabRadioGroup extends inkRadioGroupController {

  SetData(enumCount: number, tooltipsManager?: gameuiTooltipsManager, labelList?: string[], iconList?: string[]): void
  OnHoverOver(evt: inkPointerEvent): Bool
  OnHoverOut(evt: inkPointerEvent): Bool
}

declare interface IngredientListItemLogicController extends inkButtonController {

  OnInitialize(): Bool
  SetupData(data: IngredientData, tooltipsManager: gameuiTooltipsManager): void
  SetUnusedState(): void
  OnDisplayHoverOver(evt: inkPointerEvent): Bool
  OnDisplayHoverOut(evt: inkPointerEvent): Bool
  GetData(): IngredientData
}

declare interface MaterialTooltipData extends ATooltipData {

}

declare interface ProgressBarButton extends inkLogicController {

  OnInitialize(): Bool
  OnCraftingHoldButton(evt: inkPointerEvent): Bool
  OnReleaseButton(evt: inkPointerEvent): Bool
  SetupProgressButton(label: string, progressController: ProgressBarsController): void
  SetAvaibility(available: Bool): void
  OnUnitialize(): Bool
}

declare interface ProgressBarFinishedProccess extends Event {

}

declare interface VendorUserData extends IScriptable {

}

declare interface CraftingUserData extends IScriptable {

  /** @noSelf **/
  Make(mode: CraftingMode): CraftingUserData
}

declare interface CraftableItemLogicController extends inkVirtualCompoundItemController {

  OnDataChanged(value: Variant): void
  IsWeapon(type: gamedataEquipmentArea): Bool
  SelectSlot(select: Bool): void
}

declare interface FastTravelGameController extends inkGameController {

  OnInitialize(): Bool
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
  Initialize(): void
  GetFastTravelSystem(): FastTravelSystem
  GetOwner(): GameObject
  PerformFastTravel(pointData: FastTravelPointData, player: GameObject): void
  OnPerformFastTravel(e: inkPointerEvent): Bool
}

declare interface BaseHubMenuController extends inkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
  OnBack(userData: IScriptable): Bool
}

declare interface MenuItemData extends IScriptable {

}

declare interface PreviousMenuData extends IScriptable {

}

declare interface OpenMenuRequest extends Event {

}

declare interface SelectMenuRequest extends Event {

}

declare interface MenuHubLogicController extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnSelectByCursor(evt: SelectMenuRequest): Bool
  SetMenusData(menuData: MenuDataBuilder, tarotIsBlocked: Bool, mapIsBlocked: Bool, perkPoints: number, attrPoints: number): void
  SetActive(isActive: Bool): void
  SelectMenuExternally(menuName: CName, submenuName?: CName, userData?: IScriptable): void
}

declare interface MenuItemController extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  Init(menuData: MenuData): void
  SetHyperlink(value: Bool): void
  IsHyperlink(): Bool
  SetHoverPanel(hoverPanel: inkWidgetRef): void
  OnMenuChangeRelease(e: inkPointerEvent): Bool
  OnHoverPanelOver(evt: inkPointerEvent): Bool
  OnHoverPanelOut(evt: inkPointerEvent): Bool
  OnItemHoverOver(evt: inkPointerEvent): Bool
  OnItemHoverOut(evt: inkPointerEvent): Bool
  UpdateState(): void
  UpdateDim(value: Bool): void
  OnMenuItemDimRequest(evt: MenuItemDimRequest): Bool
  OnMenuItemDelayedUpdate(evt: MenuItemDelayedUpdate): Bool
  OnOutroFinished(anim: inkAnimProxy): Bool
}

declare interface MenuItemDelayedUpdate extends Event {

}

declare interface MenuItemDimRequest extends Event {

}

declare interface HubMenuUtils extends IScriptable {

  /** @noSelf **/
  SetMenuData(menuButton: inkWidgetRef, identifier: HubMenuItems, parentIdentifier: HubMenuItems, fullscreenName: CName, icon: CName, labelKey: CName, userData?: IScriptable): MenuItemController
  /** @noSelf **/
  SetMenuData(menuButton: inkWidgetRef, data: MenuData): MenuItemController
  /** @noSelf **/
  SetMenuHyperlinkData(menuButton: inkWidgetRef, identifier: HubMenuItems, parentIdentifier: HubMenuItems, fullscreenName: CName, icon: CName, labelKey: CName, userData?: IScriptable): MenuItemController
}

declare interface MenuDataBuilder extends IScriptable {

  /** @noSelf **/
  Make(): MenuDataBuilder
  AddIf(condition: Bool, identifier: number, fullscreenName: CName, icon: CName, labelKey: CName, userData?: IScriptable): MenuDataBuilder
  Add(identifier: number, fullscreenName: CName, icon: CName, labelKey: CName, userData?: IScriptable): MenuDataBuilder
  Add(identifier: HubMenuItems, parentIdentifier: HubMenuItems, fullscreenName: CName, icon: CName, labelKey: CName, userData?: IScriptable, disabled?: Bool): MenuDataBuilder
  AddWithSubmenu(identifier: number, fullscreenName: CName, icon: CName, labelKey: CName, userData?: IScriptable, disabled?: Bool): SubmenuDataBuilder
  Get(): MenuData[]
  GetMainMenus(): MenuData[]
  GetData(identifier: number): MenuData
  GetData(fullscreenName: CName): MenuData
}

declare interface SubmenuDataBuilder extends IScriptable {

  /** @noSelf **/
  Make(menuBuilder: MenuDataBuilder, menuDataIndex: number): SubmenuDataBuilder
  AddSubmenu(identifier: number, fullscreenName: CName, labelKey: CName, userData?: IScriptable): SubmenuDataBuilder
  AddSubmenuIf(condition: Bool, identifier: number, fullscreenName: CName, labelKey: CName, userData?: IScriptable): SubmenuDataBuilder
  GetMenuBuilder(): MenuDataBuilder
}

declare interface MenuScenario_BaseMenu extends inkMenuScenario {

  OnLeaveScenario(nextScenario: CName): Bool
  OnBack(): Bool
  SwitchMenu(menuName: CName, userData?: IScriptable): void
  CloseMenu(): void
  OpenSubMenu(menuName: CName, userData?: IScriptable): void
  CloseSubMenu(): void
  GotoIdleState(): void
}

declare interface MenuScenario_HubMenu extends MenuScenario_BaseMenu {

  GotoIdleState(): void
  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnNetworkBreachBegin(): Bool
  OnSwitchToTimeManager(): Bool
  OnSelectMenuItem(userData: IScriptable): Bool
  OnOpenMenu(menuName: CName, userData?: IScriptable): Bool
  OnCloseHubMenu(): Bool
  OnRequestHubMenu(): Bool
  OnCloseHubMenuRequest(): Bool
}

declare interface MenuHubGameController extends gameuiMenuGameController {

  OnInitialize(): Bool
  SetupBlackboards(): void
  OnMetaQuestStatusUpdated(value: Variant): Bool
  OnCharacterLevelUpdated(value: number): Bool
  OnCharacterLevelCurrentXPUpdated(value: number): Bool
  OnCharacterStreetCredLevelUpdated(value: number): Bool
  OnDropQueueUpdatedEvent(evt: DropQueueUpdatedEvent): Bool
  OnCharacterStreetCredPointsUpdated(value: number): Bool
  OnPlayerMaxWeightUpdated(value: number): Bool
  OnPlayerWeightUpdated(value: number): Bool
  HandlePlayerWeightUpdated(dropQueueWeight?: number): void
  OnSubmenuHiddenUpdated(value: Bool): Bool
  InitMenusData(): void
  OnCyberwareModsRequest(evt: CyberwareTabModsRequest): Bool
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
  OnBackActionCallback(evt: BackActionCallback): Bool
  OnOpenMenuRequest(evt: OpenMenuRequest): Bool
  OnButtonRelease(evt: inkPointerEvent): Bool
  OnUninitialize(): Bool
  UpdateTimeDisplay(): void
}

declare interface SubMenuPanelLogicController extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnOpenMenuRequest(evt: OpenMenuRequest): Bool
  SetMenusData(menuData: MenuDataBuilder): void
  GetActive(): Bool
  HideName(val: Bool): void
  SetRepacerMode(): void
  SetActive(isActive: Bool, hideSubmenu?: Bool): void
  OnButtonRelease(evt: inkPointerEvent): Bool
  OnMenuChanged(index: number, value: string): Bool
  OpenModsTabExternal(request: CyberwareTabModsRequest): void
  AddMenus(selectedMenu: MenuData, menuDataArray: MenuData[], subMenuData?: MenuData, forceRefreshLines?: Bool): void
  HandleCharacterLevelUpdated(value: number): void
  HandleCharacterLevelCurrentXPUpdated(value: number, remainingXP: number): void
  HandleCharacterStreetCredLevelUpdated(value: number): void
  HandleCharacterStreetCredPointsUpdated(value: number, remainingXP: number): void
  HandlePlayerMaxWeightUpdated(value: number, curInventoryWeight: number): void
  HandlePlayerWeightUpdated(value: number, maxWeight: number): void
  HandleCharacterCurrencyUpdated(value: number): void
}

declare interface CyberwareTabModsRequest extends Event {

}

declare interface MetaQuestLogicController extends inkLogicController {

  OnInitialize(): Bool
  InitMetaQuestControlls(): void
  SetMetaQuests(status: MetaQuestStatus): void
  OnItem1HoverOver(evt: inkPointerEvent): Bool
  OnItem2HoverOver(evt: inkPointerEvent): Bool
  OnItem3HoverOver(evt: inkPointerEvent): Bool
  OnHoverOut(evt: inkPointerEvent): Bool
}

declare interface MetaQuestStatus {

}

declare interface HubTimeSkipController extends inkLogicController {

  Init(isEnabled: Bool, timeSystem: TimeSystem, gameController: gameuiMenuGameController): void
  UpdateGameTime(): void
  OnTimeSkipButtonHoverOver(evt: inkPointerEvent): Bool
  OnTimeSkipButtonHoverOut(evt: inkPointerEvent): Bool
  OnTimeSkipButtonPressed(e: inkPointerEvent): Bool
  OnTimeSkipPopupClosed(data: inkGameNotificationData): Bool
  SetCursorVisibility(visible: Bool): void
}

declare interface GameTimeUtils {

  /** @noSelf **/
  CanPlayerTimeSkip(playerPuppet: PlayerPuppet): Bool
  /** @noSelf **/
  IsTimeDisplayGlitched(playerPuppet: PlayerPuppet): Bool
  /** @noSelf **/
  UpdateGameTimeText(timeSystem: TimeSystem, textWidgetRef: inkTextRef, textParamsRef: inkTextParams): void
}

declare interface TimeSkipPopupData extends inkGameNotificationData {

}

declare interface TimeSkipPopupCloseData extends inkGameNotificationData {

}

declare interface gameuiTimeDisplayLogicController extends inkLogicController {

  UpdateTime(glitchEnabled: Bool, gameTime: GameTime): void
}

declare interface DeathMenuGameController extends gameuiMenuItemListGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnSetUserData(userData: IScriptable): Bool
  ShouldAllowExitGameMenuItem(): Bool
  PopulateMenuItemList(): void
  HandleMenuItemActivate(data: PauseMenuListItemData): Bool
  OnListRelease(e: inkPointerEvent): Bool
  OnGlobalRelease(e: inkPointerEvent): Bool
  OnSavesReady(saves: string[]): Bool
}

declare interface DeathMenuUserData extends IScriptable {

}

declare interface MenuScenario_DeathMenu extends MenuScenario_BaseMenu {

  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnSwitchToLoadGame(): Bool
  OnSwitchToSettings(): Bool
  OnCloseDeathMenu(): Bool
  OnMainMenuBack(): Bool
  OnCloseSettingsScreen(): Bool
  OnBack(): Bool
  OnSwitchToBrightnessSettings(): Bool
  OnSwitchToHDRSettings(): Bool
  OnSwitchToControllerPanel(): Bool
  GoBack(forceCloseSettings: Bool): void
  GotoIdleState(): void
}

declare interface MenuScenario_E3EndMenu extends MenuScenario_BaseMenu {

  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnSwitchToLoadGame(): Bool
  OnCloseDeathMenu(): Bool
  OnMainMenuBack(): Bool
  GotoIdleState(): void
}

declare interface E3EndMenuGameController extends gameuiMenuItemListGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnAnyKeyPress(e: inkPointerEvent): Bool
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
}

declare interface gameuiFinalBoardsGoToMainMenu extends Event {

}

declare interface MenuScenario_FinalBoards extends MenuScenario_BaseMenu {

  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnLeaveScenario(nextScenario: CName): Bool
  OnBack(): Bool
}

declare interface DebugHubMenuGameController extends gameuiMenuGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
  OnButtonRelease(evt: inkPointerEvent): Bool
  OnMenuChanged(index: number, value: string): Bool
}

declare interface DebugHubMenuLogicController extends inkLogicController {

  OnInitialize(): Bool
  GetSelectorController(): hubSelectorController
  SetDefaultMenu(defaultMenu: CName): void
  GetEventNameByIndex(index: number): CName
  AddMenuItem(menuLabel: string, eventName: CName, menuName: CName): void
}

declare interface hubSelectorController extends SelectorController {

  OnInitialize(): Bool
  AddMenuTab(data: MenuData): void
  RemoveOldTabs(): void
  RegisterToMenuTabCallback(eventName: CName, object: IScriptable, functionName: CName): void
  CycleInRange(index: number, range: number): number
  GetNearestWidgetsData(index: number): MenuData[]
  OnUpdateValue(value: string, index: number, changeDirection: inkSelectorChangeDirection): Bool
  OnLeft(e: inkPointerEvent): Bool
  OnRight(e: inkPointerEvent): Bool
  OnMenuLabelClick(e: inkPointerEvent): Bool
  FindLabel(label: string): HubMenuLabelController
  DetermineIndex(controller: HubMenuLabelController): number
}

declare interface HubMenuLabelController extends inkLogicController {

  OnInitialize(): Bool
  SetData(data: MenuData): void
  SetTargetData(data: MenuData, direction: number): void
  SetActive(active: Bool): void
  OnArrangeChildrenComplete(): Bool
  OnSwipeCompleted(anim: inkAnimProxy): Bool
  SwipeAnimation(targetWidget: inkWidget, startTranslation: number, endTranslation: number): inkAnimDef
  ResizeAnimation(targetWidget: inkWidget, width: number): inkAnimDef
}

declare interface HubExperienceBarController extends inkLogicController {

  SetValue(value: number, maxValue: number): void
  SetValueF(value: number, maxValue: number): void
}

declare interface DebugMenuScenario_HubMenu extends MenuScenario_BaseMenu {

  SetDefaultMenu(menuName: CName): void
  GetDefaultMenu(): CName
  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnLeaveScenario(nextScenario: CName): Bool
  OnOpenBaseMenu(menuName: CName): Bool
  OnSwitchToCyberware(): Bool
  OnSwitchToBuilds(): Bool
  OnSwitchToFastTravel(): Bool
  OnBack(): Bool
  OnSwitchToCpoCharacterSelection(): Bool
  OnSwitchToCpoMuppetLoadoutSelection(): Bool
}

declare interface ForceCloseHubMenuEvent extends Event {

}

declare interface MenuScenario_Idle extends inkMenuScenario {

  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnBlockHub(): Bool
  OnUnlockHub(): Bool
  OnLeaveScenario(nextScenario: CName): Bool
  OnOpenPauseMenu(): Bool
  OnOpenHubMenu(): Bool
  OnOpenHubMenu_InitData(userData: IScriptable): Bool
  OnNetworkBreachBegin(): Bool
  OnShowDeathMenu(): Bool
  OnShowStorageMenu(): Bool
  OnOpenFastTravel(): Bool
}

declare interface DeathMenuDelayEvent extends Event {

}

declare interface SetZoomLevelEvent extends Event {

  SetZoom(zoomValue: number): void
}

declare interface DelayedRegisterToGlobalInputCallbackEvent extends Event {

}

declare interface gameuiInGameMenuGameController extends gameuiBaseMenuGameController {

  RegisterItemSwitch(sceneName: CName, itemId: ItemID): void
  OnInitialize(): Bool
  OnDelayedRegisterToGlobalInputCallbackEvent(evt: DelayedRegisterToGlobalInputCallbackEvent): Bool
  OnUninitialize(): Bool
  RegisterGlobalBlackboards(): void
  UnregisterGlobalBlackboards(): void
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  RegisterPSMListeners(playerPuppet: GameObject): void
  UnregisterPSMListeners(playerPuppet: GameObject): void
  RegisterInputListenersForPlayer(playerPuppet: GameObject): void
  UnregisterInputListenersForPlayer(playerPuppet: GameObject): void
  RegisterInventoryListener(): void
  UnregisterInventoryListener(): void
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
  OnHandleMenuInput(evt: inkPointerEvent): Bool
  OnRequestHubMenu(evt: StartHubMenuEvent): Bool
  OnForceCloseHubMenuEvent(evt: ForceCloseHubMenuEvent): Bool
  OnBreachingNetwork(value: string): Bool
  OnOpenStorage(value: Variant): Bool
  OnTriggerMenuEvent(value: CName): Bool
  OnDisplayDeathMenu(value: Bool): Bool
  OnDeathScreenDelayEvent(evt: DeathMenuDelayEvent): Bool
  OnPuppetReady(sceneName: CName, puppet: gamePuppet): Bool
  OnEquipmentChanged(value: Variant): Bool
  /** @noSelf **/
  SetAnimWrapperBasedOnItemFriendlyName(puppet: gamePuppet, itemID: ItemID, value: number): void
  OpenShortcutMenu(actionName: CName): void
  OnSavingComplete(success: Bool, locks: gameSaveLock[]): Bool
  HandleQuickSave(): void
}

declare interface ItemInPaperdollSlotCallback extends AttachmentSlotsScriptCallback {

  SetPuppetRef(puppet: gamePuppet): void
  OnItemEquipped(slotID: TweakDBID, itemID: ItemID): void
  OnItemUnequipped(slotID: TweakDBID, itemID: ItemID): void
}

declare interface hubSelectorSingleSmallCarouselController extends hubSelectorSingleCarouselController {

}

declare interface MenuScenario_NetworkBreach extends MenuScenario_BaseMenu {

  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnBack(): Bool
  OnCloseHubMenuRequest(): Bool
  OnNetworkBreachEnd(): Bool
}

declare interface PauseMenuBackgroundGameController extends inkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
}

declare interface PauseMenuGameController extends gameuiMenuItemListGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  PopulateMenuItemList(): void
  OnUnitialize(): Bool
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
  HandlePressToSaveGame(target: inkWidget): void
  HandlePressToQuickSaveGame(): void
  OnMenuItemActivated(index: number, target: ListItemController): Bool
  OnSavingComplete(success: Bool, locks: gameSaveLock[]): Bool
  OnListRelease(e: inkPointerEvent): Bool
  OnGlobalRelease(e: inkPointerEvent): Bool
}

declare interface inkSetNextLoadingScreenEvent extends Event {

  SetNextLoadingScreenType(newType: inkLoadingScreenType): void
  GetNextLoadingScreenType(): inkLoadingScreenType
}

declare interface MenuScenario_PauseMenu extends MenuScenario_BaseMenu {

  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnSwitchToPauseMenu(): Bool
  OnSwitchToSaveGame(): Bool
  OnSwitchToLoadGame(): Bool
  OnSwitchToCredits(): Bool
  OnSwitchToSettings(): Bool
  OnSwitchToBrightnessSettings(): Bool
  OnSwitchToHDRSettings(): Bool
  OnSwitchToControllerPanel(): Bool
  OnOpenDebugHubMenu(): Bool
  OnRequestPauseMenu(): Bool
  OnClosePauseMenu(): Bool
  OnCloseHubMenuRequest(): Bool
  OnCloseSettingsScreen(): Bool
  OnBack(): Bool
  GoBack(forceCloseSettings: Bool): void
}

declare interface InitializeUserScreenGameController extends gameuiMenuGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
}

declare interface PauseMenuButtonItem extends AnimatedListItemController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnAddedToList(target: ListItemController): Bool
  OnHoverOver(e: inkPointerEvent): Bool
  OnHoverOut(e: inkPointerEvent): Bool
}

declare interface ILoadingLogicController extends inkLogicController {

}

declare interface DefaultLoadingScreenLogicController extends ILoadingLogicController {

  OnInitialize(): Bool
  SetProgressIndicatorVisibility(visible: Bool): void
  SetSpinnerVisiblility(visible: Bool): void
  SetLoadProgress(progress: number): void
}

declare interface LoadingScreenProgressBarController extends inkLogicController {

  OnInitialize(): Bool
  SetSpinnerVisibility(visible: Bool): void
  SetProgressBarVisiblity(visible: Bool): void
  SetProgress(progress: number): void
}

declare interface InitialLoadingScreenLogicController extends ILoadingLogicController {

  OnInitialize(): Bool
  SetProgressIndicatorVisibility(visible: Bool): void
  SetSpinnerVisiblility(visible: Bool): void
  SetLoadProgress(progress: number): void
}

declare interface LoadingScreenLogicController extends ILoadingLogicController {

  OnInitialize(): Bool
  SetProgressIndicatorVisibility(visible: Bool): void
  SetSpinnerVisiblility(visible: Bool): void
  SetLoadProgress(progress: number): void
}

declare interface MenuScenario_FastTravel extends MenuScenario_BaseMenu {

  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnBack(): Bool
}

declare interface SmartBulletDeflectedEvent extends Event {

}

declare interface MinimapContainerController extends MappinsContainerController {

  OnInitialize(): Bool
  OnUnitialize(): Bool
  OnPlayerAttach(playerGameObject: GameObject): Bool
  InitializePlayer(playerPuppet: GameObject): void
  OnPlayerDetach(playerGameObject: GameObject): Bool
  OnLocationUpdated(value: string): Bool
  OnPSMCombatChanged(psmCombat: gamePSMCombat): Bool
  OnSecurityDataChange(value: Variant): Bool
  SecurityZoneUpdate(zone: ESecurityAreaType): void
  OnPlayerEnterArea(controller: MinimapSecurityAreaMappinController): Bool
  OnPlayerExitArea(controller: MinimapSecurityAreaMappinController): Bool
  CreateMappinUIProfile(mappin: IMappin, mappinVariant: gamedataMappinVariant, customData: MappinControllerCustomData): MappinUIProfile
  ZoneToState(zone: ESecurityAreaType): CName
  ZoneToTextKey(zone: ESecurityAreaType): CName
}

declare interface MinimapQuestAreaInitData extends MappinControllerCustomData {

}

declare interface TrackedMappinControllerCustomData extends MappinControllerCustomData {

}

declare interface WorldMapFloorPlanController extends MinimapContainerController {

}

declare interface WorldMapTooltipData {

}

declare interface WorldMapTooltipContainer extends inkLogicController {

  OnInitialize(): Bool
  Show(target: WorldMapTooltipType): void
  Hide(target: WorldMapTooltipType): void
  HideAll(force?: Bool): void
  SetData(target: WorldMapTooltipType, data: WorldMapTooltipData, menu: WorldMapMenuGameController): void
  GetTooltipController(type: WorldMapTooltipType): WorldMapTooltipBaseController
  GetControllerPriorityIndex(controller: WorldMapTooltipBaseController): number
}

declare interface WorldMapTooltipBaseController extends inkLogicController {

  GetShowAnimation(): CName
  GetHideAnimation(): CName
  Show(): void
  HideInstant(force?: Bool): void
  Hide(): void
  SetData(data: WorldMapTooltipData, menu: WorldMapMenuGameController): void
}

declare interface WorldMapTooltipController extends WorldMapTooltipBaseController {

  OnInitialize(): Bool
  SetData(data: WorldMapTooltipData, menu: WorldMapMenuGameController): void
  GetLevelState(playerLevel: number, recommendedLvl: number): CName
  Reset(): void
}

declare interface WorldMapMenuGameController extends MappinsContainerController {

  IsEntityAttachedAndSetup(): Bool
  GetSettings(): WorldMapSettings_Record
  GetEntityPreview(): inkWorldMapPreviewGameController
  SetSelectedMappin(mappinController: BaseWorldMapMappinController): void
  GetCustomFilter(): gamedataWorldMapFilter
  SetCustomFilter(filter: gamedataWorldMapFilter): void
  SetMapCursorEnabled(enabled: Bool): void
  SetFloorPlanVisible(visible: Bool): void
  TrackMappin(mappinController: BaseMappinBaseController): void
  UntrackMappin(): void
  TrackCustomPositionMappin(): void
  UntrackCustomPositionMappin(): void
  SetMappinVisited(mappinController: BaseWorldMapMappinController): void
  MoveToPlayer(): void
  ZoomToMappin(mappinController: BaseWorldMapMappinController): void
  ZoomWithMouse(zoomIn: Bool): void
  SetMousePanEnabled(enabled: Bool): void
  SetMouseRotateEnabled(enabled: Bool): void
  AreDistrictsVisible(): Bool
  GetCurrentZoom(): number
  CanDebugTeleport(): Bool
  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnTrackedEntryChanges(hash: number, className: CName, notifyOption: JournalNotifyOption, changeType: JournalChangeType): Bool
  UpdateTrackedQuest(): void
  OnSetUserData(userData: IScriptable): Bool
  OnEntityAttached(): Bool
  OnMapNavigationDelay(evt: MapNavigationDelay): Bool
  OnEntityDetached(): Bool
  OnZoomLevelChanged(oldLevel: number, newLevel: number): Bool
  OnZoomTransitionFinished(): Bool
  OnZoomToMappinEnabledChanged(flag: Bool): Bool
  OnCanChangeCustomFilterChanged(flag: Bool): Bool
  OnSelectedMappinChanged(oldController: BaseWorldMapMappinController, newController: BaseWorldMapMappinController): Bool
  OnSetZoomLevelEvent(eventData: SetZoomLevelEvent): Bool
  OnHoverOverMappin(e: inkPointerEvent): Bool
  OnHoverOutMappin(e: inkPointerEvent): Bool
  GetDistrictAnimation(view: gameuiEWorldMapDistrictView, show: Bool): CName
  OnDistrictViewChanged(oldView: gameuiEWorldMapDistrictView, newView: gameuiEWorldMapDistrictView): Bool
  OnUpdateHoveredDistricts(district: gamedataDistrict, subdistrict: gamedataDistrict): Bool
  OnSelectedDistrictChanged(oldDistrict: gamedataDistrict, newDistrict: gamedataDistrict): Bool
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
  OnBack(userData: IScriptable): Bool
  CycleCameraMode(): void
  CycleCustomFilterPrev(): void
  CycleCustomFilterNext(): void
  OpenSelectedQuest(): void
  OpenTrackedQuest(): void
  OpenQuestInJournal(questEntry: JournalEntry): void
  UpdateCustomFilter(filter: gamedataWorldMapFilter): void
  OnCustomFilterChanged(oldFilter: gamedataWorldMapFilter, newFilter: gamedataWorldMapFilter): Bool
  SetMappinIconsVisible(visible: Bool): void
  ToggleFloorPlan(): void
  ToggleTimeSkip(): void
  ToggleLegend(): void
  TransitionMapView(newView: EWorldMapView): void
  SetMapView(newView: EWorldMapView): void
  OpenFloorPlan(): void
  CloseFloorPlan(): void
  OpenLegend(): void
  CloseLegend(): void
  OpenTimeSkip(): void
  CloseTimeSkip(): void
  OnTimeSkipPopupClosed(data: inkGameNotificationData): Bool
  UpdateGameTime(): void
  TryFastTravel(): void
  TryTrackQuestOrSetWaypoint(): void
  TrackQuestMappin(controller: BaseMappinBaseController): void
  FastTravel(): void
  DisableFastTravel(): void
  DEBUG_Teleport(): void
  HandleAxisInput(e: inkPointerEvent): void
  HandleAxisZoom(e: inkPointerEvent): void
  HandlePressInput(e: inkPointerEvent): void
  HandleReleaseInput(e: inkPointerEvent): void
  HandleHoldInput(e: inkPointerEvent): void
  HandlePressInput_FloorPlan(e: inkPointerEvent): void
  HandlePressInput_TimeSkip(e: inkPointerEvent): void
  OnPressInput(e: inkPointerEvent): Bool
  OnReleaseInput(e: inkPointerEvent): Bool
  OnHoldInput(e: inkPointerEvent): Bool
  OnAxisInput(e: inkPointerEvent): Bool
  OnPressTimeSkip(e: inkPointerEvent): Bool
  IsPoliceTooltip(mappinVariant: gamedataMappinVariant): Bool
  ShouldDisplayInHud(mappinVariant: gamedataMappinVariant): Bool
  GetTooltipType(mappinVariant: gamedataMappinVariant): WorldMapTooltipType
  ShowMappinTooltip(controller: BaseWorldMapMappinController): void
  HideMappinTooltip(controller: BaseWorldMapMappinController): void
  ShowDistrictTooltip(district: gamedataDistrict): void
  HideDistrictTooltip(): void
  HideAllTooltips(): void
  UpdateTooltip(tooltipType: WorldMapTooltipType, controller: BaseWorldMapMappinController): void
  UpdateSelectedMappinTooltip(): void
  CanOpenJournalForMappin(mappin: IMappin): Bool
  RefreshButtonHints(): void
  UpdateHoveredMappinButtonHints(): void
  UpdateCursor(): void
  CreateMappinUIProfile(mappin: IMappin, mappinVariant: gamedataMappinVariant, customData: MappinControllerCustomData): MappinUIProfile
  GetPlayer(): GameObject
  GetJournalManager(): JournalManager
  GetTotalZoomLevels(): number
  GetFastTravelSystem(): FastTravelSystem
  IsFastTravelEnabled(): Bool
  IsLegendVisible(): Bool
  GetOwner(): GameObject
  HasSelectedMappin(): Bool
  GetMappinJournalEntry(mappin: IMappin): JournalEntry
  GetMappinJournalPathHash(mappin: IMappin): number
  CanQuestTrackMappin(mappin: IMappin): Bool
  CanQuestTrackMappin(controller: BaseWorldMapMappinController): Bool
  IsMappinQuestTracked(mappin: IMappin): Bool
  IsMappinQuestTracked(controller: BaseWorldMapMappinController): Bool
  CanPlayerTrackMappin(mappin: IMappin): Bool
  CanPlayerTrackMappin(controller: BaseWorldMapMappinController): Bool
  CanZoomToMappin(controller: BaseWorldMapMappinController): Bool
}

declare interface WorldMapLegendController extends inkLogicController {

  Show(): void
  Hide(instant?: Bool): void
  IsVisible(): Bool
  PopulateList(): void
  SpawnListItem(): WorldMapLegendListItemController
  AddFilterGroup(recordID: TweakDBID): void
  AddUndiscoveredItem(): void
}

declare interface WorldMapLegendListItemController extends inkLogicController {

  SetData(variant: gamedataMappinVariant, widgetState: CName): void
  SetData(iconTexturePart: CName, mappinName: CName, widgetState: CName): void
}

declare interface WorldMapPlayerMappinController extends BaseWorldMapMappinController {

  OnInitialize(): Bool
  OnFiltersChanged(): Bool
  UpdateIcon(): void
  ComputeRootState(): CName
  CanSelectMappin(): Bool
}

declare interface MapMenuUserData extends IScriptable {

}

declare interface inkWorldMapPreviewGameController extends gameuiMenuGameController {

  GetCameraMode(): gameuiEWorldMapCameraMode
  SetCameraMode(cameraMode: gameuiEWorldMapCameraMode): void
  JumpToZoomLevel(zoomLevel: number): void
  ZoomIn(strength?: number): void
  ZoomOut(strength?: number): void
  RotateYaw(strength: number): void
  RotatePitch(strength: number): void
  Move(direction: Vector4, strength: number): void
  MoveTo(direction: Vector3): void
}

declare interface MapNavigationDelay extends Event {

}

declare interface PointOfInterestMappin extends IMappin {

  GetJournalPathHash(): number
  IsInsideSecurityAreaTrigger(): Bool
  GetJournalQuestPathHash(): number
}

declare interface questLogGameController extends gameuiMenuGameController {

  OnInitialize(): Bool
  OnSelectByCursor(evt: SelectMenuRequest): Bool
  OnUninitialize(): Bool
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
  OnBack(userData: IScriptable): Bool
  OnJournalReady(entryHash: number, className: CName, notifyOption: JournalNotifyOption, changeType: JournalChangeType): Bool
  GetListedCategories(): gameJournalQuestType[]
  GetDisplayedCategory(category: gameJournalQuestType): gameJournalQuestType
  OnSetUserData(userData: IScriptable): Bool
  BuildQuestList(): void
  /** @noSelf **/
  GetTopQuestEntry(journalManager: JournalManager, entry: JournalEntry): JournalQuest
  GetQuestListHeaderData(type: gameJournalQuestType): QuestListHeaderData
  GetQuestListItemData(questEntry: JournalQuest, trackedQuest?: JournalQuest, overrideType?: Bool, forcedType?: number): QuestListItemData
  OnQuestListHeaderClicked(evt: QuestListHeaderClicked): Bool
  OnQuestListItemClicked(e: QuestlListItemClicked): Bool
  GetFirstObjectiveFromQuest(journalQuest: JournalQuest): JournalQuestObjective
  OnRequestChangeTrackedObjective(e: RequestChangeTrackedObjective): Bool
  OnQuestListItemHoverOver(e: QuestListItemHoverOverEvent): Bool
  OnQuestObjectiveHoverOver(e: QuestObjectiveHoverOverEvent): Bool
  OnQuestListItemHoverOut(e: QuestListItemHoverOutEvent): Bool
  OnQuestObjectiveHoverOut(e: QuestObjectiveHoverOutEvent): Bool
}

declare interface RequestChangeTrackedObjective extends Event {

}

declare interface QuestListHeaderData extends IScriptable {

}

declare interface QuestListItemData extends IScriptable {

  GetDistances(): QuestListDistanceData[]
  GetNearestDistance(): QuestListDistanceData
  GetTrackedOrNearest(): QuestListDistanceData
}

declare interface QuestListDistanceData extends IScriptable {

}

declare interface QuestListVirtualNestedListController extends VirtualNestedListController {

  GetDataView(): VirtualNestedListDataView
}

declare interface QuestListVirtualNestedDataView extends VirtualNestedListDataView {

  SortItems(compareBuilder: CompareBuilder, left: VirutalNestedListData, right: VirutalNestedListData): void
}

declare interface QuestlListItemClicked extends Event {

}

declare interface MessageMenuAttachmentData extends IScriptable {

}

declare interface QuestListHeaderClicked extends Event {

}

declare interface UpdateOpenedQuestEvent extends Event {

}

declare interface QuestDetailsPanelController extends inkLogicController {

  OnInitialize(): Bool
  Setup(questData: JournalQuest, journalManager: JournalManager, phoneSystem: PhoneSystem, mappinSystem: MappinSystem, game: GameInstance, skipAnimation?: Bool): void
  PopulateObjectives(): void
  OnUpdateTrackedObjectiveEvent(e: UpdateTrackedObjectiveEvent): Bool
  PopulateCodexLinks(trackedObjective: JournalQuestObjective): void
  SpawnMappinLink(mappinEntry: JournalQuestMapPinBase, jumpTo: Vector3): void
  SpawnCodexLink(codexEntry: JournalCodexEntry): void
  SpawnContactLink(contactEntry: JournalContact): void
}

declare interface QuestDetailsObjectiveController extends inkLogicController {

  OnInitialize(): Bool
  Setup(objective: JournalQuestObjective, currentCounter: number, totalCounter: number, isTracked?: Bool): void
  OnUpdateTrackedObjectiveEvent(e: UpdateTrackedObjectiveEvent): Bool
  OnRelease(e: inkPointerEvent): Bool
  UpdateState(): void
  OnHoverOver(e: inkPointerEvent): Bool
  OnHoverOut(e: inkPointerEvent): Bool
}

declare interface UpdateTrackedObjectiveEvent extends Event {

}

declare interface QuestObjectiveHoverOverEvent extends Event {

}

declare interface QuestObjectiveHoverOutEvent extends Event {

}

declare interface QuestCodexLinkController extends BaseCodexLinkController {

  Setup(journalEntry: JournalEntry): void
  Activate(): void
}

declare interface OpenCodexPopupEvent extends Event {

}

declare interface QuestContactLinkController extends BaseCodexLinkController {

  Setup(journalEntry: JournalEntry, journalManager: JournalManager, phoneSystem: PhoneSystem): void
  Activate(): void
  ActivateSecondary(): void
  CloseHubMenu(): void
  ShowMessenger(): void
  CallSelectedContact(): void
}

declare interface MessengerUtils extends IScriptable {

  /** @noSelf **/
  GetContactDataArray(journal: JournalManager, includeUnknown: Bool, skipEmpty: Bool, activeDataSync: MessengerContactSyncData): VirutalNestedListData[]
  /** @noSelf **/
  GetContactMessageData(contactData: ContactData, journal: JournalManager, messagesReceived: JournalEntry[], playerReplies: JournalEntry[]): void
  /** @noSelf **/
  HasPhoneObjective(journal: JournalManager): Bool
  /** @noSelf **/
  GetUnreadMessagesCount(journal: JournalManager, contactEntry: JournalContact): number
}

declare interface PhoneMessagePopupEvent extends Event {

}

declare interface JournalNotificationData extends inkGameNotificationData {

}

declare interface QuestMappinLinkController extends BaseCodexLinkController {

  Setup(mappinEntry: JournalQuestMapPinBase, jumpTo: Vector3): void
  Activate(): void
}

declare interface QuestListItemHoverOverEvent extends Event {

}

declare interface WorldMapUtils {

  /** @noSelf **/
  CycleWorldMapFilter(currentFilter: gamedataWorldMapFilter, cycleNext: Bool): gamedataWorldMapFilter
}

declare interface FastTravelMappin extends RuntimeMappin {

  GetPointData(): FastTravelPointData
}

declare interface VehicleMappin extends RuntimeMappin {

  GetVehicle(): VehicleObject
  SetActive(active: Bool): void
}

declare interface AuthorisationNotificationViewData extends GenericNotificationViewData {

}

declare interface AuthorisationNotificationQueue extends gameuiGenericNotificationGameController {

  OnAuthorisationNotification(evt: AuthorisationNotificationEvent): Bool
}

declare interface AuthorisationNotification extends GenericNotificationController {

  SetNotificationData(notificationData: GenericNotificationViewData): void
}

declare interface BountyCollectedNotificationQueue extends gameuiGenericNotificationGameController {

  PushNotification(): void
  OnBountyCompletionEvent(evt: BountyCompletionEvent): Bool
}

declare interface BountyCollectedNotificationViewData extends GenericNotificationViewData {

  CanMerge(data: GenericNotificationViewData): Bool
}

declare interface BountyCollectedNotification extends GenericNotificationController {

  SetNotificationData(notificationData: GenericNotificationViewData): void
}

declare interface CodexPopupData extends inkGameNotificationData {

}

declare interface CodexPopupGameController extends inkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnRelease(evt: inkPointerEvent): Bool
  SetupData(): void
  AddButtonHints(actionName: CName, label: string): void
}

declare interface CraftingNotificationViewData extends GenericNotificationViewData {

  CanMerge(data: GenericNotificationViewData): Bool
}

declare interface CraftingNotificationQueue extends gameuiGenericNotificationGameController {

  GetShouldSaveState(): Bool
  GetID(): number
  OnCraftingNotification(evt: CraftingNotificationEvent): Bool
}

declare interface CraftingNotificationEvent extends Event {

}

declare interface CraftingNotification extends GenericNotificationController {

  OnInitialize(): Bool
  OnUnitialize(): Bool
}

declare interface CurrencyChangeInventoryCallback extends InventoryScriptCallback {

  OnItemQuantityChanged(itemID: ItemID, diff: number, total: number, flaggedAsSilent: Bool): void
}

declare interface ItemsNotificationQueue extends gameuiGenericNotificationGameController {

  GetShouldSaveState(): Bool
  GetID(): number
  OnCombatStateChanged(value: number): Bool
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  OnUILootedItemEvent(evt: UILootedItemEvent): Bool
  NeedsNotification(type: gamedataEquipmentArea): Bool
  OnVendorBoughtItemEvent(evt: VendorBoughtItemEvent): Bool
  OnCharacterProficiencyUpdated(evt: ProficiencyProgressEvent): Bool
  OnNewTarotCardAdded(evt: TarotCardAdded): Bool
  PushXPNotification(value: number, remainingPointsToLevelUp: number, delta: number, notificationColorTheme: CName, notificationName: string, type: gamedataProficiencyType, currentLevel: number, isLevelMaxed: Bool): void
  PushCurrencyNotification(diff: number, total: number): void
  PushItemNotification(itemID: ItemID, itemRarity: CName): void
  RegisterPSMListeners(playerObject: GameObject): void
  UnregisterPSMListeners(playerObject: GameObject): void
  GetComparisonState(item: InventoryItemData): ItemComparisonState
}

declare interface ItemAddedInventoryCallback extends InventoryScriptCallback {

  OnItemNotification(itemID: ItemID, itemData: gameItemData): void
  GetItemRarity(data: gameItemData): CName
}

declare interface ItemAddedNotificationViewData extends GenericNotificationViewData {

  CanMerge(data: GenericNotificationViewData): Bool
}

declare interface ProgressionViewData extends GenericNotificationViewData {

  CanMerge(data: GenericNotificationViewData): Bool
}

declare interface TarotCardAddedNotificationViewData extends GenericNotificationViewData {

}

declare interface TarotCardAdded extends Event {

}

declare interface OpenTarotCollectionNotificationAction extends GenericNotificationBaseAction {

  Execute(data: IScriptable): Bool
  GetLabel(): string
  ShowTarotCollection(): void
}

declare interface CurrencyUpdateNotificationViewData extends GenericNotificationViewData {

  CanMerge(data: GenericNotificationViewData): Bool
}

declare interface WorldMapPoliceTooltipController extends WorldMapTooltipController {

  GetShowAnimation(): CName
  GetHideAnimation(): CName
  SetData(data: WorldMapTooltipData, menu: WorldMapMenuGameController): void
}

declare interface CurrencyNotification extends GenericNotificationController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnDataUpdate(): Bool
  OnMenuUpdate(value: Bool): Bool
  SetNotificationData(notificationData: GenericNotificationViewData): void
  UpdateData(): void
  OnIntroOver(e: inkAnimProxy): Bool
}

declare interface UIInGameNotificationViewData extends GenericNotificationViewData {

  CanMerge(data: GenericNotificationViewData): Bool
  OnRemoveNotification(data: IScriptable): Bool
}

declare interface UIInGameNotificationQueue extends gameuiGenericNotificationGameController {

  GetShouldSaveState(): Bool
  OnUINotification(evt: UIInGameNotificationEvent): Bool
  OnUINotificationRemove(evt: UIInGameNotificationRemoveEvent): Bool
}

declare interface UIInGameNotification extends GenericNotificationController {

  SetNotificationData(notificationData: GenericNotificationViewData): void
}

declare interface WorldMapDistrictTooltipController extends WorldMapTooltipBaseController {

  OnInitialize(): Bool
  SetData(data: WorldMapTooltipData, menu: WorldMapMenuGameController): void
  Reset(): void
}

declare interface WorldMapGangItemController extends inkLogicController {

  SetData(affiliationRecord: Affiliation_Record): void
}

declare interface ItemLog extends gameuiMenuGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  ManagePopups(): void
  CreatePopup(): void
  CreatePopupDelay(): void
  OnItemAdded(data: inkGameNotificationData): Bool
  OnRemovePopup(widget: inkWidget): Bool
  OnDelayComplete(anim: inkAnimProxy): Bool
}

declare interface ItemLogUserData extends inkGameNotificationData {

}

declare interface ItemLogPopupLogicController extends inkLogicController {

  OnInitialize(): Bool
  SetupData(itemData: InventoryItemData): void
  OnAddPopupComplete(anim: inkAnimProxy): Bool
  OnPopupDurationComplete(anim: inkAnimProxy): Bool
}

declare interface LevelUpNotificationViewData extends GenericNotificationViewData {

  CanMerge(data: GenericNotificationViewData): Bool
}

declare interface LevelUpNotificationQueue extends gameuiGenericNotificationGameController {

  GetShouldSaveState(): Bool
  GetID(): number
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerGameObject: GameObject): Bool
  OnInitialize(): Bool
  OnUninitialize(): Bool
  RegisterPSMListeners(playerObject: GameObject): void
  UnregisterPSMListeners(playerObject: GameObject): void
  OnCombatStateChanged(value: number): Bool
  OnCharacterLevelUpdated(value: Variant): void
}

declare interface OpenPerksNotificationAction extends GenericNotificationBaseAction {

  Execute(data: IScriptable): Bool
  GetLabel(): string
  ShowPerks(): void
}

declare interface OpenWorldMapNotificationAction extends GenericNotificationBaseAction {

  Execute(data: IScriptable): Bool
  GetLabel(): string
  ShowWorldMap(): void
}

declare interface LevelUpNotification extends GenericNotificationController {

  SetNotificationData(notificationData: GenericNotificationViewData): void
}

declare interface ItemAddedNotification extends GenericNotificationController {

  SetNotificationData(notificationData: GenericNotificationViewData): void
  OnPlayerAttach(playerPuppet: GameObject): Bool
  SetIcon(itemID: TweakDBID, rarity: CName): void
  OnIconCallback(e: iconAtlasCallbackData): Bool
  UpdateRarity(rarity: CName): void
}

declare interface PhoneMessagePopupGameController extends inkGameController {

  OnInitialize(): Bool
  SetupData(): void
  OnUninitialize(): Bool
  OnDelayedJournalUpdate(evt: DelayedJournalUpdate): Bool
  OnPopupHidden(evt: inkAnimProxy): Bool
  OnHandleMenuInput(evt: inkPointerEvent): Bool
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
  HandleCommonInputActions(actionName: CName): Bool
  ClosePopup(): void
  TrackQuest(): void
  GetFirstObjectiveFromQuest(journalQuest: JournalQuest): JournalQuestObjective
  GotoJournalMenu(): void
  GotoMessengerMenu(): void
  GotoHubMenu(menuName: CName, userData?: IScriptable): void
  NavigateChoices(isUp: Bool): void
  ActivateChoice(): void
  SetTimeDilatation(enable: Bool): void
}

declare interface MessengerDialogViewController extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  AttachJournalManager(journalManager: JournalManager): void
  DetachJournalManager(): void
  ShowDialog(contact: JournalEntry): void
  ShowThread(thread: JournalEntry): void
  UpdateData(animateLastMessage?: Bool): void
  OnJournalUpdate(entryHash: number, className: CName, notifyOption: JournalNotifyOption, changeType: JournalChangeType): Bool
  OnDelayedJournalUpdate(evt: DelayedJournalUpdate): Bool
  OnPlayerReplyActivated(index: number, target: ListItemController): Bool
  ActivateSelectedReplyOption(): void
  NavigateReplyOptions(isUp: Bool): void
  HasReplyOptions(): Bool
  ActivateReply(target: ListItemController): void
  SetVisited(records: JournalEntry[]): void
}

declare interface MessageThreadReadEvent extends Event {

}

declare interface DelayedJournalUpdate extends Event {

}

declare interface TarotCardAddedNotification extends GenericNotificationController {

  SetNotificationData(notificationData: GenericNotificationViewData): void
}

declare interface PhoneMessageNotificationViewData extends QuestUpdateNotificationViewData {

  GetPriority(): number
  CanMerge(data: GenericNotificationViewData): Bool
}

declare interface JournalNotificationQueue extends gameuiGenericNotificationGameController {

  GetShouldSaveState(): Bool
  GetID(): number
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPlayerMounted(value: Bool): Bool
  OnMenuUpdate(value: Bool): Bool
  OnTrackedMappinUpdated(value: Variant): Bool
  OnTutorialVisibilityUpdate(value: Bool): Bool
  OnTutorialDataUpdate(data: Variant): Bool
  OnCustomQuestNotificationUpdate(value: Variant): Bool
  OnNCPDJobDoneEvent(evt: NCPDJobDoneEvent): Bool
  OnNewLocationDiscovered(newLocation: Bool): Bool
  OnJournalEntryVisited(hash: number, className: CName, notifyOption: JournalNotifyOption, changeType: JournalChangeType): Bool
  OnJournalUpdate(hash: number, className: CName, notifyOption: JournalNotifyOption, changeType: JournalChangeType): Bool
  OnCustomNotification(evt: CustomNotificationEvent): Bool
  OnHackingRewardNotification(evt: HackingRewardNotificationEvent): Bool
  ShowContactUpdate(entry: JournalEntry, state: gameJournalEntryState): void
  ShowNewMessage(entry: JournalEntry, state: gameJournalEntryState): void
  PushQuestNotification(questEntry: JournalQuest, state: gameJournalEntryState): void
  PushObjectiveQuestNotification(entry: JournalEntry): void
  PushNotification(title: string, text: string, widget: CName, animation: CName, action?: GenericNotificationBaseAction): void
  PushNewContactNotification(title: string, text: string, widget: CName, animation: CName, action?: GenericNotificationBaseAction): void
  PushSMSNotification(msgEntry: JournalPhoneMessage, action?: GenericNotificationBaseAction): void
  PushNotification(entry: JournalOnscreen): void
  GetShardNotificationData(entry: JournalOnscreen): ShardCollectedNotificationViewData
  PushCrackableNotification(itemID: ItemID, entry: JournalOnscreen): void
  ProcessCrackableShardTutorial(): void
}

declare interface ShardCollectedInventoryCallback extends InventoryScriptCallback {

  OnItemQuantityChanged(itemID: ItemID, diff: number, total: number, flaggedAsSilent: Bool): void
  OpenShardPopup(entry: JournalOnscreen, itemID: ItemID, isCrypted: Bool): void
}

declare interface ShardCollectedNotificationViewData extends GenericNotificationViewData {

  CanMerge(data: GenericNotificationViewData): Bool
}

declare interface OpenShardNotificationAction extends GenericNotificationBaseAction {

  GetLabel(): string
}

declare interface CustomQuestNotificationData {

}

declare interface TrackQuestNotificationAction extends GenericNotificationBaseAction {

  Execute(data: IScriptable): Bool
  GetLabel(): string
  TrackFirstObjective(questEntry: JournalEntry): Bool
}

declare interface OpenMessengerNotificationAction extends GenericNotificationBaseAction {

  Execute(data: IScriptable): Bool
  GetLabel(): string
  ShowMessenger(): void
}

declare interface CustomNotificationEvent extends Event {

}

declare interface ItemNotificationAction extends GenericNotificationBaseAction {

  Execute(data: IScriptable): Bool
  GetLabel(): string
  ShowInventory(): void
}

declare interface LevelUpUserData extends inkGameNotificationData {

}

declare interface NewAreaDiscoveredUserData extends inkGameNotificationData {

}

declare interface QuestUpdateUserData extends inkGameNotificationData {

}

declare interface NewCodexEntryUserData extends inkGameNotificationData {

}

declare interface CustomQuestNotificationUserData extends inkGameNotificationData {

}

declare interface PopupsManager extends inkGameController {

  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  OnUpdateVisibility(value: Bool): Bool
  OnMenuUpdate(value: Bool): Bool
  OnUpdateData(value: Variant): Bool
  OnPopupCloseRequest(data: inkGameNotificationData): Bool
  ShowTutorial(): void
  ChangeTutorialOverlaysVisibility(visible: Bool): void
  OnCodexPopupRequest(evt: OpenCodexPopupEvent): Bool
  OnCodexPopupCloseRequest(data: inkGameNotificationData): Bool
  OnPhoneMessageShowRequest(evt: PhoneMessagePopupEvent): Bool
  OnPhoneMessageHideRequest(evt: PhoneMessageHidePopupEvent): Bool
  OnMessagePopupUseCloseRequest(data: inkGameNotificationData): Bool
  OnShardRead(evt: NotifyShardRead): Bool
  ProcessCrackableShardTutorial(): void
  OnShardReadClosed(data: inkGameNotificationData): Bool
  OnQuickSlotButtonHoldStartEvent(evt: QuickSlotButtonHoldStartEvent): Bool
  SpawnVehiclesManagerPopup(): void
  OnVehiclesManagerCloseRequest(data: inkGameNotificationData): Bool
  SpawnVehicleRadioPopup(): void
  OnVehicleRadioCloseRequest(data: inkGameNotificationData): Bool
}

declare interface TutorialPopupData extends inkGameNotificationData {

}

declare interface ShardReadPopupData extends inkGameNotificationData {

}

declare interface ShardCollectedNotification extends GenericNotificationController {

  SetNotificationData(notificationData: GenericNotificationViewData): void
}

declare interface WorldMapDistrictLogicController extends inkLogicController {

  OnInitDistrict(): Bool
  OnSetSelected(inSelected: Bool): Bool
  GetParentDistrictRecord(): District_Record
  IsSubDistrict(): Bool
}

declare interface ShardNotificationController extends inkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnRelease(evt: inkPointerEvent): Bool
  OnCloseClick(controller: inkButtonController): Bool
  OnCrackClick(controller: inkButtonController): Bool
  OnIntroComplete(anim: inkAnimProxy): Bool
  Close(): void
  SetButtonHints(): void
  LaunchMinigame(): void
  AddButtonHints(actionName: CName, label: CName, buttonHintRef: inkWidgetRef, clickCallback: CName): void
  PlayAnim(animName: CName, callBack?: CName): void
}

declare interface UIMenuNotificationViewData extends GenericNotificationViewData {

  CanMerge(data: GenericNotificationViewData): Bool
}

declare interface UIMenuNotificationQueue extends gameuiGenericNotificationGameController {

  GetShouldSaveState(): Bool
  GetID(): number
  OnUINotification(evt: UIMenuNotificationEvent): Bool
}

declare interface VendorRequirementsNotMetNotificationData extends IScriptable {

}

declare interface UINotification extends GenericNotificationController {

  SetNotificationData(notificationData: GenericNotificationViewData): void
}

declare interface QuestMappinHighlightEvent extends Event {

}

declare interface MessengerNotification extends GenericNotificationController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnInteractionUpdate(value: Bool): Bool
  SetNotificationData(notificationData: GenericNotificationViewData): void
  OnNotificationShown(anim: inkAnimProxy): Bool
  OnActionTriggered(): void
  SetNotificationShown(): void
}

declare interface JournalNotification extends GenericNotificationController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnInteractionUpdate(value: Bool): Bool
  SetNotificationData(notificationData: GenericNotificationViewData): void
}

declare interface NewLocationNotification extends JournalNotification {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnInteractionUpdate(value: Bool): Bool
  SetNotificationData(notificationData: GenericNotificationViewData): void
}

declare interface NCPDJobDoneNotification extends JournalNotification {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnInteractionUpdate(value: Bool): Bool
  SetNotificationData(notificationData: GenericNotificationViewData): void
}

declare interface ZoneAlertNotificationRemoveRequestData extends IScriptable {

}

declare interface ZoneAlertNotificationViewData extends GenericNotificationViewData {

  CanMerge(data: GenericNotificationViewData): Bool
  OnRemoveNotification(data: IScriptable): Bool
}

declare interface VehicleAlertNotificationViewData extends GenericNotificationViewData {

  CanMerge(data: GenericNotificationViewData): Bool
}

declare interface AwacsAlertNotificationViewData extends GenericNotificationViewData {

  CanMerge(data: GenericNotificationViewData): Bool
}

declare interface PreventionBountyViewData extends GenericNotificationViewData {

}

declare interface ZoneAlertNotificationQueue extends gameuiGenericNotificationGameController {

  GetShouldSaveState(): Bool
  GetID(): number
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  OnCombatChange(value: number): Bool
  OnFact(val: number): void
  OnVehicleZone(arg: number): Bool
  OnSecurityDataChange(arg: Variant): Bool
  OnPlayerBountyChange(wantedLevel: number): Bool
  OnPlayerBountyAmountChange(arg: number): Bool
}

declare interface PerkDisplayController extends inkButtonController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  Setup(displayData: BasePerkDisplayData, dataManager: PlayerDevelopmentDataManager, index?: number): void
  CheckRevealAnimation(newDisplayData: BasePerkDisplayData, oldDisplayData: BasePerkDisplayData): void
  UpdateLayout(data: BasePerkDisplayData): void
  UpdateLayout(data: PerkDisplayData): void
  UpdateLayout(data: TraitDisplayData): void
  GetFluffRand(perkData: PerkDisplayData, offset?: number): number
  GetFluffRand(traitData: TraitDisplayData, offset?: number): number
  Upgrade(): void
  OnUnlimitedUnlocked(evt: UnlimitedUnlocked): Bool
  OnPerkItemHoverOver(evt: inkPointerEvent): Bool
  OnPerkItemHoverOut(evt: inkPointerEvent): Bool
  StopHoverAnimations(): void
  OnPerkDisplayClick(evt: inkPointerEvent): Bool
  OnPerkDisplayHold(evt: inkPointerEvent): Bool
  IsActionNameCompatible(evt: inkPointerEvent): Bool
}

declare interface UnlimitedUnlocked extends Event {

}

declare interface PerkHoverOverEvent extends Event {

}

declare interface PerkHoverOutEvent extends Event {

}

declare interface PerksItemHoldStart extends Event {

}

declare interface ZoneAlertNotification extends GenericNotificationController {

  SetNotificationData(notificationData: GenericNotificationViewData): void
}

declare interface PerkScreenController extends inkLogicController {

  OnInitialize(): Bool
  RegisterProficiencyButtons(attributeDisplayData: AttributeDisplayData, startingIndex: number): void
  OnUninitialize(): Bool
  OnSetUserData(userData: IScriptable): Bool
  GetMenuData(data: ProficiencyDisplayData): MenuData
  Setup(displayData: AttributeDisplayData, dataManager: PlayerDevelopmentDataManager, startingIndex: number): void
  RebuildPerks(index: number): void
  OnUnlimitedUnlocked(evt: UnlimitedUnlocked): Bool
  ProcessTutorialFact(): void
  SpawnConnectionGradiantMask(controller: PerkDisplayContainerController): void
  ShowLineWidget(lineContainer: inkCompoundRef, show: Bool, lineNumber: number): void
  OnValueChanged(controller: inkRadioGroupController, selectedIndex: number): Bool
  OnPerkBoughtEvent(evt: PerkBoughtEvent): Bool
  OnTraitBoughtEvent(evt: TraitBoughtEvent): Bool
  OnPerkDisplayContainerCreated(evt: PerkDisplayContainerCreatedEvent): Bool
  GetProficiencyDisplayData(): ProficiencyDisplayData
  GetHubSelectorWidget(): inkWidget
}

declare interface StatsStreetCredReward extends inkLogicController {

  SetData(rewardData: LevelRewardDisplayData[], tooltipsManager: gameuiTooltipsManager, currentLevel: number, tooltipIndex: number): void
  OnHoverOver(evt: inkPointerEvent): Bool
  OnHoverOut(evt: inkPointerEvent): Bool
  OnRewardsHoverOver(evt: inkPointerEvent): Bool
  OnRewardsHoverOut(evt: inkPointerEvent): Bool
}

declare interface StatsStreetCredRewardItem extends inkButtonController {

  SetData(data: LevelRewardDisplayData, state?: CName): void
  GetDescription(): string
  GetDescriptionLocalizationPackage(): UILocalizationDataPackage
}

declare interface PerksScreenStaticData extends IScriptable {

  /** @noSelf **/
  GetPerksConnectionLines(): number[]
}

declare interface PerkDisplayContainerController extends inkLogicController {

  OnInitialize(): Bool
  SpawnController(): void
  SetData(perkData: BasePerkDisplayData, dataManager: PlayerDevelopmentDataManager): void
  GetPerkDisplayData(): BasePerkDisplayData
  GetPerkIndex(): number
}

declare interface PerkDisplayContainerCreatedEvent extends Event {

}

declare interface VehicleAlertNotification extends GenericNotificationController {

  SetNotificationData(notificationData: GenericNotificationViewData): void
}

declare interface AwacsAlertNotification extends GenericNotificationController {

  SetNotificationData(notificationData: GenericNotificationViewData): void
}

declare interface PreventionNotification extends GenericNotificationController {

  SetNotificationData(notificationData: GenericNotificationViewData): void
}

declare interface PerksLevelBarController extends inkLogicController {

  SetProgress(progress: number): void
}

declare interface PerksSkillLabelController extends HubMenuLabelController {

  SetTargetData(data: MenuData, direction: number): void
  SetActive(active: Bool): void
}

declare interface PerksSkillLabelContentContainer extends HubMenuLabelContentContainer {

  SetData(data: MenuData): void
  RefreshSkillData(skill: ProficiencyDisplayData): void
  OnPerkPurchased(evt: PerkBoughtEvent): Bool
}

declare interface ProficiencyTabButtonController extends TabButtonController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnToggleChanged(controller: inkToggleController, isToggled: Bool): Bool
}

declare interface PerksMainGameController extends gameuiMenuGameController {

  OnInitialize(): Bool
  OnUnitialize(): Bool
  OnCharacterLevelUpdated(value: number): Bool
  ResetHighlightPartsVisibility(): void
  HandleEventQueue(): void
  OnPlayerAttach(playerPuppet: GameObject): Bool
  CheckJohnnyFact(): void
  OnPerksMenuAttributeItemCreated(evt: PerksMenuAttributeItemCreated): Bool
  OnUninitialize(): Bool
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
  OnBack(userData: IScriptable): Bool
  SetupLayout(): void
  OnAttributeHoverOver(evt: PerksMenuAttributeItemHoverOver): Bool
  OnAttributeHoverOut(evt: PerksMenuAttributeItemHoverOut): Bool
  OnAttributeHoldStart(evt: PerksMenuAttributeItemHoldStart): Bool
  OnAttributeClicked(evt: PerksMenuAttributeItemClicked): Bool
  OnProficiencyClicked(evt: PerksMenuProficiencyItemClicked): Bool
  OnAttributePurchaseRequest(evt: AttributeUpgradePurchased): Bool
  OnAttributePurchased(evt: AttributeBoughtEvent): Bool
  OnPerkHoverOver(evt: PerkHoverOverEvent): Bool
  OnPerkHoverOut(evt: PerkHoverOutEvent): Bool
  OnPerkHoldStart(evt: PerksItemHoldStart): Bool
  OnPerkPurchased(evt: PerkBoughtEvent): Bool
  OnPlayerDevUpdateData(evt: PlayerDevUpdateDataEvent): Bool
  OnActiveSkillScreenChanged(e: ActiveSkillScreenChangedEvent): Bool
  OnBackClick(controller: inkButtonController): Bool
  ResetData(): void
  SetActiveScreen(screenType: CharacterScreenType): void
  UpdateAvailablePoints(): void
  PrepareTooltips(): void
  ShowTooltip(widget: inkWidget, data: IDisplayData, placement?: gameuiETooltipPlacement): void
  HideTooltip(): void
  SetAttributeHintsHoverOver(): void
  SetAttributeHintsHoverOut(): void
  SetPerksButtonHintHoverOver(data: BasePerkDisplayData): void
  SetPerksButtonHintHoverOut(): void
  SetAttributeBuyButtonHintHoverOver(data: AttributeData): void
  SetAttributeBuyButtonHintHoverOut(): void
  PlayHoverAnimation(value: Bool): void
}

declare interface PerksPointsDisplayController extends inkLogicController {

  OnInitialize(): Bool
  Setup(type: CharacterScreenType): void
  SetValues(value1: number, value2: number): void
  SetDescriptions(desc1: string, desc2: string): void
  SetIcons(part1: CName, part2: CName): void
}

declare interface PerksMenuAttributeItemController extends inkLogicController {

  OnInitialize(): Bool
  Setup(dataManager: PlayerDevelopmentDataManager): void
  GetStatType(): gamedataStatType
  GetAttributeType(): PerkMenuAttribute
  UpdateData(attributeData: AttributeData): void
  SetupProficiencyButtons(attributeData: AttributeData): void
  OnAttributeItemClicked(evt: inkPointerEvent): Bool
  OnProficiencyClicked(controller: inkButtonController): Bool
  OnAttributeItemHold(evt: inkPointerEvent): Bool
  OnContainerHoverOver(evt: inkPointerEvent): Bool
  OnContainerHoverOut(evt: inkPointerEvent): Bool
  OnAttributeItemHoverOver(evt: inkPointerEvent): Bool
  OnAttributeItemHoverOut(evt: inkPointerEvent): Bool
  PlayConnectionAnimation(value: Bool): void
  StopHoverAnimations(): void
  ShowProficiencyButton(value: Bool): void
}

declare interface ProficiencyButtonController extends inkButtonController {

  OnInitialize(): Bool
  SetLabel(value: string): void
  SetLevel(value: number): void
  SetIndex(value: number): void
  GetIndex(): number
  OnButtonStateChanged(controller: inkButtonController, oldState: inkEButtonState, newState: inkEButtonState): Bool
  PlaySelectionAnimation(value: Bool): void
}

declare interface PerksMenuAttributeDisplayController extends BaseButtonView {

  OnInitialize(): Bool
  Setup(attribute: PerkMenuAttribute, dataManager: PlayerDevelopmentDataManager): void
  UpdateData(attributeData: AttributeData): void
  GetStatType(): gamedataStatType
  SetHovered(value: Bool): void
  GetAttributeData(): AttributeData
  Update(): void
  UpdateIcon(): void
  UpdateName(): void
  UpdateLevel(): void
  UpdateConnections(): void
  GetTopConnectionState(attribute: PerkMenuAttribute): CName
  GetBottomConnectionState(attribute: PerkMenuAttribute): CName
  GetName(attribute: PerkMenuAttribute): string
  GetIconAtlasPart(attribute: PerkMenuAttribute): CName
  PlayHoverAnimation(value: Bool): void
  PlayAnimation(animation: CName): inkAnimProxy
  ResetHoverOpacity(): void
}

declare interface PerksMenuAttributeItemCreated extends Event {

}

declare interface PerksMenuProficiencyItemClicked extends PerksMenuAttributeItemClicked {

}

declare interface PerksMenuAttributeItemHoldStart extends Event {

}

declare interface AttributeUpgradePurchased extends Event {

}

declare interface PerksMenuAttributeItemHoverOver extends Event {

}

declare interface PerksMenuAttributeItemHoverOut extends Event {

}

declare interface ActiveSkillScreenChangedEvent extends Event {

}

declare interface PerksSkillsLevelsContainerController extends inkLogicController {

  Setup(proficiencyDisplayData: ProficiencyDisplayData): void
  UpdateLevelsIndicators(): void
  UpdateLevelBar(): void
}

declare interface PerksSkillsLevelDisplayController extends inkLogicController {

  Setup(data: AreaDisplayData): void
}

declare interface PerkDisplayTooltipController extends AGenericTooltipController {

  Refresh(): void
  SetData(tooltipData: ATooltipData): void
  GetUiLocalizationData(levelDataRecord: PerkLevelData_Record): UILocalizationDataPackage
  GetLevelDescription(perkData: PerkDisplayData, levelDataRecord: PerkLevelData_Record): string
  RefreshTooltip(data: PerkTooltipData): void
  RefreshTooltip(data: TraitTooltipData): void
  UpdateType(perkRecord?: Perk_Record): void
  UpdateState(basePerkData: BasePerkDisplayData): void
  UpdatePerkDescriptions(data: PerkTooltipData, perkPackages: PerkLevelData_Record[]): void
  UpdateTraitDescriptions(data: TraitTooltipData): void
  UpdateName(data: BasePerkDisplayData): void
  UpdateVideo(data: PerkTooltipData): void
  UpdateVideo(data: TraitTooltipData): void
  CommonUpdateVideo(data: BasePerkDisplayData): void
  UpdateTooltipHints(data: BasePerksMenuTooltipData, perkData: BasePerkDisplayData): void
  UpdateRequirements(playerDevelopmentData: PlayerDevelopmentData, data: PerkTooltipData): void
  UpdateRequirements(playerDevelopmentData: PlayerDevelopmentData, data: TraitTooltipData): void
}

declare interface MessengerContactDataView extends VirtualNestedListDataView {

  SortItems(compareBuilder: CompareBuilder, left: VirutalNestedListData, right: VirutalNestedListData): void
}

declare interface MessengerContactItemVirtualController extends inkVirtualCompoundItemController {

  OnInitialize(): Bool
  OnDataChanged(value: Variant): void
  OnContactSyncData(evt: MessengerContactSyncBackEvent): Bool
  OnMessengerThreadSelectedEvent(evt: MessengerThreadSelectedEvent): Bool
  OnToggledOn(itemController: inkVirtualCompoundItemController): Bool
  OnToggledOff(itemController: inkVirtualCompoundItemController): Bool
  OnSelected(itemController: inkVirtualCompoundItemController, discreteNav: Bool): Bool
  OnDeselected(itemController: inkVirtualCompoundItemController): Bool
  UpdateState(): void
}

declare interface MessengerContactSyncData extends IScriptable {

}

declare interface MessengerThreadSelectedEvent extends Event {

}

declare interface MessengerContactSelectedEvent extends Event {

}

declare interface MessengerContactSyncBackEvent extends Event {

}

declare interface MessengerForceSelectionEvent extends Event {

}

declare interface MessengerContactsVirtualNestedListController extends VirtualNestedListController {

  OnInitialize(): Bool
  GetDataView(): VirtualNestedListDataView
  GetIndexByJournalHash(hash: number): number
}

declare interface MessengerGameController extends gameuiMenuGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
  OnJournalUpdate(entryHash: number, className: CName, notifyOption: JournalNotifyOption, changeType: JournalChangeType): Bool
  OnBack(userData: IScriptable): Bool
  OnMessengerGameControllerDelayInit(evt: MessengerForceSelectionEvent): Bool
  OnSetUserData(userData: IScriptable): Bool
  ForceSelectIndex(idx: number): void
  ForceSelectEntry(hash: number): void
  PopulateData(): void
  OnContactActivated(evt: MessengerContactSelectedEvent): Bool
  SyncActiveData(evt: MessengerContactSelectedEvent): void
}

declare interface MessangerReplyItemRenderer extends JournalEntryListItemController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnButtonStateChanged(controller: inkButtonController, oldState: inkEButtonState, newState: inkEButtonState): Bool
  OnSelected(parent: ListItemController): Bool
  OnDeselected(parent: ListItemController): Bool
  OnJournalEntryUpdated(entry: JournalEntry, extraData: IScriptable): void
  AnimateSelection(): void
}

declare interface PerkMenuTooltipController extends AGenericTooltipController {

  Refresh(): void
  SetData(tooltipData: ATooltipData): void
  SetupShared(data: BasePerksMenuTooltipData): void
  PlayVideo(data: BasePerksMenuTooltipData): void
  SetupCustom(data: AttributeTooltipData): void
  SetupCustom(data: SkillTooltipData): void
  SetTitle(value: string): void
  SetType(value: string): void
  SetDesc1(value: string): void
  SetDesc2(value: string): void
  SetCanUpgrade(value: Bool): void
  SetCanOpenPerks(value: Bool): void
  AppendLine(outString: string, line: string): void
  AppendNewLine(outString: string): void
}

declare interface MessangerItemRenderer extends JournalEntryListItemController {

  OnJournalEntryUpdated(entry: JournalEntry, extraData: IScriptable): void
  SetMessageView(txt: string, type: MessageViewType, contactName: string): void
}

declare interface PhotoModeCameraLocation extends inkLogicController {

  RefreshValue(photoModeSystem: PhotoModeSystem): void
}

declare interface PhotoModeFrame extends inkLogicController {

  SetupScale(rootSize: Vector2): void
  SetAtlas(atlasPath: ResRef): void
  SetImages(imageParts: CName[]): void
  SetColor(color: Color): void
  SetFlip(horizontal: Bool, vertical: Bool): void
  Update(timeDelta: number): void
}

declare interface PhotoModeListController extends ListController {

  SetReversedUI(isReversed: Bool): void
  PlayFadeAnimation(fadeIn: Bool): void
  PlayFadeElementAnimation(fadeIn: Bool): void
  SetAllItemsOpacity(opacity: number): void
  ShowAnimated(delay: number): void
  HideAnimated(delay: number): void
  Update(timeDelta: number): void
  PostInitItems(): void
  HandleInputWithVisibilityCheck(e: inkPointerEvent, gameCtrl?: inkGameController): void
  GetFirstVisibleIndex(): number
  SelectPriorVisible(currentIndex: number): Bool
  SelectNextVisible(currentIndex: number): Bool
}

declare interface PhotoModeMenuListItem extends ListItemController {

  OnInitialize(): Bool
  SetReversedUI(isRevesed: Bool): void
  PlayFadeAnimation(widget: inkWidgetRef, opacity: number): void
  SetSelectedVisualState(isSelected: Bool): void
  OnSelected(target: ListItemController): Bool
  OnDeselected(parent: ListItemController): Bool
  OnAddedToList(target: ListItemController): Bool
  SetInteractive(interactive: Bool): void
  SetIsEnabled(enabled: Bool): void
  ForceValue(value: number): void
  SetupScrollBar(startValue: number, minValue: number, maxValue: number, step: number, showPercents: Bool): void
  SetupOptionSelector(values: PhotoModeOptionSelectorData[], startData: number): void
  SetupOptionButton(value: PhotoModeOptionSelectorData): void
  GetSliderValue(): number
  GetSelectedOptionIndex(): number
  SetHoldProgress(progress: number): void
  HandleHoldInput(e: inkPointerEvent, gameCtrl?: inkGameController): void
  HandleReleasedInput(e: inkPointerEvent, gameCtrl?: inkGameController): void
  OnScrollBarValueChanged(controller: inkSliderController, progress: number, newValue: number): Bool
  OnOptionLeft(e: inkPointerEvent): Bool
  OnOptionRight(e: inkPointerEvent): Bool
  StartArrowClickedEffect(widget: inkWidgetRef): void
  ResetInputHold(): void
  Update(timeDelta: number): void
}

declare interface PhotoModeMenuListItemData extends ListItemData {

}

declare interface gameuiPhotoModeMenuController extends inkGameController {

  OnHoverStateChanged(hover: Bool): void
  OnAttributeUpdated(attributeKey: number, attributeValue: number): void
  OnAttributeSelected(attributeKey: number): void
  OnEditCategoryChanged(editCategory: number): void
  OnHoldComplete(attributeKey: number, actionName: CName): void
  OnAnimationEnded(animationType: number): void
  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnIntroAnimEnded(e: inkAnimProxy): Bool
  OnOutroAnimEnded(e: inkAnimProxy): Bool
  OnShow(reversedUI: Bool): Bool
  CloseWeaponsWheelAndStopEffects(): void
  OnHide(): Bool
  OnSetScreenshotEnabled(screenshotVersion: number): Bool
  OnUpdate(timeDelta: number): Bool
  OnSetCurrentMenuPage(page: number): Bool
  OnTopBarValueChanged(controller: inkRadioGroupController, selectedIndex: number): Bool
  OnAddMenuItem(labelText: string, attributeKey: number, page: number): Bool
  AddConsoleScreenshotInput(screenshotVersion: number): void
  OnAddingMenuItemsFinished(): Bool
  OnForceAttributeVaulue(attribute: number, value: number): Bool
  OnFadeVisibility(opacity: number): Bool
  OnSetupScrollBar(attribute: number, startValue: number, minValue: number, maxValue: number, step: number, showPercents: Bool): Bool
  OnSetupOptionSelector(attribute: number, values: PhotoModeOptionSelectorData[], startData: number): Bool
  OnSetupOptionButton(attribute: number, value: PhotoModeOptionSelectorData): Bool
  OnSetAttributeOptionEnabled(attributeKey: number, enabled: Bool): Bool
  OnSetCategoryEnabled(category: number, enabled: Bool): Bool
  OnPhotoModeFailedToOpenEvent(): Bool
  OnPhotoModeFailedToOpenComplete(data: inkGameNotificationData): Bool
  OnPhotoModeLastInputDeviceEvent(wasKeyboardMouse: Bool): Bool
  OnSetInteractive(interactive: Bool): Bool
  GetMenuItem(attributeKey: number): PhotoModeMenuListItem
  AddMenuPage(): ListController
  GetMenuPage(pageIndex: number): ListController
  AddMenuItem(label: string, attributeKey: number, page: number): void
  GetCurrentSelectedMenuListItem(): PhotoModeMenuListItem
  OnPMButtonRelease(evt: inkPointerEvent): Bool
  OnPMButtonHold(evt: inkPointerEvent): Bool
  OnMenuItemSelected(index: number, target: ListItemController): Bool
  OnMenuHovered(e: inkPointerEvent): Bool
  OnMenuHoverOut(e: inkPointerEvent): Bool
  OnOptionHold(evt: inkPointerEvent): Bool
  OnOptionHoldRelease(evt: inkPointerEvent): Bool
}

declare interface PhotoModeTopBarController extends inkRadioGroupController {

  OnInitialize(): Bool
  SetInteractive(interactive: Bool): void
  SelectToggle(toggleToSelect: PhotoModeToggle): void
  SetToggleEnabled(index: number, enabled: Bool): void
  SelectNextToggle(currentIndex: number): Bool
  SelectPreviousToggle(currentIndex: number): Bool
  HandleInput(e: inkPointerEvent, gameCtrl?: inkGameController): void
}

declare interface PhotoModeToggle extends inkToggleController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  PlayFadeAnimation(widget: inkWidgetRef, opacity: number): inkAnimProxy
  OnToggleChanged(controller: inkToggleController, isToggled: Bool): Bool
  OnToggleClick(e: inkPointerEvent): Bool
  SetEnabledOnTopBar(enabled: Bool): void
  GetEnabledOnTopBar(): Bool
}

declare interface PhotoModeOptionSelectorData {

}

declare interface PhotoModeSticker extends inkLogicController {

  OnInitialize(): Bool
  SetAtlas(atlasPath: ResRef): void
  SetImage(imagePart: CName): void
  OnStickerHovered(e: inkPointerEvent): Bool
  OnStickerHoverOut(e: inkPointerEvent): Bool
}

declare interface gameuiPhotoModeStickersController extends inkGameController {

  OnStickerTransformChanged(stickerIndex: number, stickerPosition: Vector2, stickerScale: number, stickerRotation: number): void
  OnMouseHover(stickerIndex: number): void
  OnInitialize(): Bool
  ResetState(): void
  OnUninitialize(): Bool
  OnEnterPhotoMode(): Bool
  OnExitPhotoMode(): Bool
  OnEnableStickerEditor(): Bool
  OnDisableStickerEditor(): Bool
  ResetStickerCursorState(): void
  OnCursorInputEnabled(enable: Bool): Bool
  OnStickersButtonRelease(e: inkPointerEvent): Bool
  OnStickersButtonHold(e: inkPointerEvent): Bool
  OnStickersButtonPress(e: inkPointerEvent): Bool
  OnStickersAxisInput(e: inkPointerEvent): Bool
  DiffAngle(a: number, b: number): number
  RotateScaleSticker(sticker: inkWidget): void
  OnForceStickerTransform(stickerIndex: number, position: Vector2, scale: number, rotation: number): Bool
  OnUpdateStickers(timeDelta: number): Bool
  OnSetSetSelectedSticker(stickerIndex: number): Bool
  OnSetStickerImage(stickerIndex: number, atlasPath: ResRef, imagePart: CName): Bool
  OnResetStickers(): Bool
  OnSetFrameImage(atlasPath: ResRef, imageParts: CName[], libraryItemName: CName, color: Color, flipHorizontal: Bool, flipVertical: Bool): Bool
  OnSetBackground(enabled: Bool): Bool
  AddSticker(): void
  AddFrame(libraryItem: CName): inkWidget
  StickerHoveredOutByMouse(sticker: inkWidget): void
  StickerHoveredByMouse(sticker: inkWidget): void
}

declare interface BoothModeGameController extends inkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPlay(evt: inkPointerEvent): Bool
}

declare interface characterCreationBodyMorphImageThumbnail extends inkButtonAnimatedController {

  OnInitialize(): Bool
  Refresh(selected: Bool, color: Color, index: number): void
  RefreshSelectionState(selected: Bool): void
  OnHoverOver(e: inkPointerEvent): Bool
  OnHoverOut(e: inkPointerEvent): Bool
}

declare interface characterCreationGenderBackstoryBtn extends inkButtonController {

  OnInitialize(): Bool
  Refresh(newName: string, gender: Bool): void
  OnHoverOver(e: inkPointerEvent): Bool
  OnHoverOut(e: inkPointerEvent): Bool
}

declare interface characterCreationLifePathBtn extends inkButtonController {

  OnInitialize(): Bool
  SetDescription(desc: CName, imagePath: CName, videoPath: ResRef, label: CName): void
  OnHoverOver(e: inkPointerEvent): Bool
  OnHoverOut(e: inkPointerEvent): Bool
  PlayAnim(animName: CName, callBack?: CName): void
}

declare interface MorphMenuUserData extends IScriptable {

}

declare interface characterCreationBodyMorphMenu extends BaseCharacterCreationController {

  OnSetUserData(userData: IScriptable): Bool
  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnInitializeOptionsList(evt: gameuiCharacterCustomizationSystem_OnInitializeOptionsListEvent): Bool
  OnReInitializeOptionsList(evt: gameuiCharacterCustomizationSystem_OnPresetAppliedEvent): Bool
  RefreshList(): void
  UpdateVoiceOverWidget(): Bool
  OnRandomizeComplete(evt: gameuiCharacterCustomizationSystem_OnRandomizeCompleteEvent): Bool
  OnAppearanceSwitched(evt: gameuiCharacterCustomizationSystem_OnAppearanceSwitchedEvent): Bool
  OnOptionUpdated(evt: gameuiCharacterCustomizationSystem_OnOptionUpdatedEvent): Bool
  UpdateOption(i: number, lookupOption: CharacterCustomizationOption, newOption: CharacterCustomizationOption): Bool
  OnNextFrame(evt: NextFrameEvent): Bool
  OnSliderChange(widget: inkWidget): Bool
  OnColorPickerTriggered(widget: inkWidget): Bool
  OnPreset1(e: inkPointerEvent): Bool
  OnPreset2(e: inkPointerEvent): Bool
  OnPreset3(e: inkPointerEvent): Bool
  OnRandomize(e: inkPointerEvent): Bool
  OnHoverOverPreset1(e: inkPointerEvent): Bool
  OnHoverOverPreset2(e: inkPointerEvent): Bool
  OnHoverOverPreset3(e: inkPointerEvent): Bool
  OnHoverOverRandomize(e: inkPointerEvent): Bool
  OnHoverOutPreset1(e: inkPointerEvent): Bool
  OnHoverOutPreset2(e: inkPointerEvent): Bool
  OnHoverOutPreset3(e: inkPointerEvent): Bool
  OnHoverOutRandomize(e: inkPointerEvent): Bool
  OnColorPickerClose(e: inkPointerEvent): Bool
  OnConfirmationClose(e: inkPointerEvent): Bool
  OnConfirmationConfirm(e: inkPointerEvent): Bool
  OnPrevious(e: inkPointerEvent): Bool
  OnListRelease(e: inkPointerEvent): Bool
  OnHoverOutPreviousPageBtn(e: inkPointerEvent): Bool
  OnHoverOverPreviousPageBtn(e: inkPointerEvent): Bool
  OnHoverOutNextPageBtn(e: inkPointerEvent): Bool
  OnHoverOverNextPageBtn(e: inkPointerEvent): Bool
  OnHoverOverColorPickerOwner(e: inkPointerEvent): Bool
  OnButtonRelease(evt: inkPointerEvent): Bool
  OnHoverOverColorPicker(e: inkPointerEvent): Bool
  OnColorSelected(widget: inkWidget): Bool
  OnColorChange(widget: inkWidget): Bool
  OnVoiceOverSwitched(widget: inkWidget): Bool
  OnHoverOverOption(e: inkPointerEvent): Bool
  InitializeList(): void
  CreateVoiceOverSwitcher(): void
  CreateEntry(option: CharacterCustomizationOption): inkWidget
  HideColorPicker(index: number): void
  OnIntro(): void
  OnIntroComplete(anim: inkAnimProxy): Bool
  OnOutro(): void
  ShowConfirmation(): void
  HideConfirmation(): void
  PriorMenu(): void
  NextMenu(): void
  PlayAnim(animName: CName, callBack?: CName, animProxy?: inkAnimProxy): void
  GetSlotName(option: CharacterCustomizationOption): CName
}

declare interface characterCreationVoiceOverSwitcher extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnSwitch(e: inkPointerEvent): Bool
  Switch(): void
  OnShortcutPress(e: inkPointerEvent): Bool
  OnHoverOverWidget(e: inkPointerEvent): Bool
  OnHoverOutWidget(e: inkPointerEvent): Bool
  OnHoverOverNext(e: inkPointerEvent): Bool
  OnHoverOutNext(e: inkPointerEvent): Bool
  OnHoverOverPrev(e: inkPointerEvent): Bool
  OnHoverOutPrev(e: inkPointerEvent): Bool
  SetIsBrainGenderMale(isMale: Bool): void
  IsBrainGenderMale(): Bool
}

declare interface CharacterCustomizationOption extends IScriptable {

}

declare interface gameuiAppearanceInfo extends gameuiCharacterCustomizationInfo {

}

declare interface characterCreationBodyMorphColorOption extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnNext(e: inkPointerEvent): Bool
  OnPrev(e: inkPointerEvent): Bool
  Previous(): void
  Next(): void
  OnShortcutPress(e: inkPointerEvent): Bool
  OnHoverOverWidget(e: inkPointerEvent): Bool
  OnHoverOutWidget(e: inkPointerEvent): Bool
  OnHoverOverNext(e: inkPointerEvent): Bool
  OnHoverOutNext(e: inkPointerEvent): Bool
  OnHoverOverPrev(e: inkPointerEvent): Bool
  OnHoverOutPrev(e: inkPointerEvent): Bool
  OnHoverOverColorPicker(e: inkPointerEvent): Bool
  OnHoverOutColorPicker(e: inkPointerEvent): Bool
  OnColorPickerTriggered(widget: inkWidget): Bool
  GetColorPickerOption(): CharacterCustomizationOption
  GetColorIndex(): number
  IsColorPickerTriggered(): Bool
  RefreshColorPicker(index: number, isTriggered: Bool): void
  SetOption(option: CharacterCustomizationOption): void
  ResetOption(): void
  RefreshView(): void
  SetColorPickerOption(appearanceInfo: gameuiAppearanceInfo, option: CharacterCustomizationOption): void
  SetSelectedAppearanceDefinitionColor(appearanceInfo: gameuiAppearanceInfo, currIndex: number, force?: Bool): void
  Circle(v: number, min: number, max: number): number
}

declare interface characterCreationBodyMorphOptionColorPickerButton extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnHoverOver(e: inkPointerEvent): Bool
  OnHoverOut(e: inkPointerEvent): Bool
  OnTrigger(e: inkPointerEvent): Bool
  SetTintColor(color: Color, icon: TweakDBID): void
  IsTriggered(): Bool
  Trigger(enable: Bool): void
}

declare interface gameuiIndexedAppearanceDefinition {

}

declare interface characterCreationBodyMorphOption extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnHoverOverNext(e: inkPointerEvent): Bool
  OnHoverOutNext(e: inkPointerEvent): Bool
  OnHoverOverPrev(e: inkPointerEvent): Bool
  OnHoverOutPrev(e: inkPointerEvent): Bool
  OnNext(e: inkPointerEvent): Bool
  OnPrev(e: inkPointerEvent): Bool
  OnShortcutPress(e: inkPointerEvent): Bool
  OnHoverOverWidget(e: inkPointerEvent): Bool
  OnHoverOutWidget(e: inkPointerEvent): Bool
  Previous(): void
  Next(): void
  GetSelectorOption(): CharacterCustomizationOption
  GetSelectorIndex(): number
  SetOption(option: CharacterCustomizationOption): void
  ResetOption(): void
  RefreshView(): void
  SetSelectorOption(option: CharacterCustomizationOption): void
  SetSelectedMorphName(morphInfo: gameuiMorphInfo, currIndex: number, force?: Bool): void
  SetSelectedAppearanceDefinition(appearanceInfo: gameuiAppearanceInfo, currIndex: number, force?: Bool): void
  SetSelectedSwitcherOption(switcherInfo: gameuiSwitcherInfo, currIndex: number, force?: Bool): void
  Circle(v: number, min: number, max: number): number
}

declare interface gameuiMorphInfo extends gameuiCharacterCustomizationInfo {

}

declare interface gameuiIndexedMorphName {

}

declare interface gameuiSwitcherInfo extends gameuiCharacterCustomizationInfo {

}

declare interface gameuiSwitcherOption {

}

declare interface gameuiCharacterCustomizationSystem_OnAppearanceSwitchedEvent extends Event {

}

declare interface gameuiSwitchPair {

}

declare interface gameuiCharacterCustomizationSystem_OnOptionUpdatedEvent extends Event {

}

declare interface characterCreationBodyMorphOptionColorPicker extends inkLogicController {

  OnColorSelected(widget: inkWidget): Bool
  GetOption(): CharacterCustomizationOption
  SetTitle(title: string): void
  GetSelectedIndex(): number
  FillGrid(option: CharacterCustomizationOption): void
}

declare interface characterCreationBodyMorphOptionColorPickerItem extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnHoverOver(e: inkPointerEvent): Bool
  OnHoverOut(e: inkPointerEvent): Bool
  OnSelect(e: inkPointerEvent): Bool
  SetTintColor(color: Color, icon: TweakDBID): void
  SetSelected(selected: Bool): void
}

declare interface NextFrameEvent extends Event {

}

declare interface CharacterCreationBackstorySelectionMenu extends BaseCharacterCreationController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  SetupLifePathButtons(): void
  SetupLifePathButton(widget: inkWidget, desc: CName, imagePath: CName, videoPath: ResRef, label: CName, onPressEvent: CName, onReleaseEvent: CName): void
  OnReleaseNomad(e: inkPointerEvent): Bool
  OnReleaseStreet(e: inkPointerEvent): Bool
  OnReleaseCorpo(e: inkPointerEvent): Bool
  OnPressNomad(e: inkPointerEvent): Bool
  OnPressStreet(e: inkPointerEvent): Bool
  OnPressCorpo(e: inkPointerEvent): Bool
  PriorMenu(): void
  PlayAnim(animName: CName, callBack?: CName): void
  OnIntro(): void
  OnOutro(): void
  OnIntroComplete(anim: inkAnimProxy): Bool
}

declare interface CharacterCreationGenderSelectionMenu extends BaseCharacterCreationController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPuppetReadyToBeDisplayed(evt: gameuiPuppetPreview_ReadyToBeDisplayed): Bool
  OnHoverOverMale(e: inkPointerEvent): Bool
  OnHoverOutMale(e: inkPointerEvent): Bool
  OnHoverOverFemale(e: inkPointerEvent): Bool
  OnHoverOutFemale(e: inkPointerEvent): Bool
  OnReleaseMale(e: inkPointerEvent): Bool
  OnReleaseFemale(e: inkPointerEvent): Bool
  OnPressMale(e: inkPointerEvent): Bool
  OnPressFemale(e: inkPointerEvent): Bool
  PlayAnim(animName: CName, animProxy?: inkAnimProxy, callBack?: CName): void
  SetAttributePreset(lifePath: TweakDBID): void
  OnIntro(): void
  OnOutro(): void
}

declare interface characterCreationBodyMorphOptionSelectorButton extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnHoverOver(e: inkPointerEvent): Bool
  OnHoverOut(e: inkPointerEvent): Bool
}

declare interface CharacterCreationGenderBackstoryPathHeader extends inkLogicController {

  OnInitialize(): Bool
  Select(): void
  UnSelect(): void
  SetData(title: string, desc: string): void
}

declare interface gameuiCharacterCustomizationSystem_OnInitializeOptionsListEvent extends Event {

}

declare interface gameuiCharacterCustomizationSystem_OnPresetAppliedEvent extends Event {

}

declare interface gameuiCharacterCustomizationSystem_OnRandomizeCompleteEvent extends Event {

}

declare interface characterCreationNavigationBtn extends inkButtonController {

  OnInitialize(): Bool
  OnHoverOver(e: inkPointerEvent): Bool
  OnHoverOut(e: inkPointerEvent): Bool
}

declare interface CharacterCreationAttributeData extends IScriptable {

  SetValue(val: number): void
  SetMaxed(val: Bool): void
  SetAtMinimum(val: Bool): void
}

declare interface characterCreationStatsAttributeBtn extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  Refresh(): void
  Increment(): void
  Decrement(): void
  SetData(attribute: gamedataStatType, value: number): void
  RefreshVisibility(): void
  OnMinus(e: inkPointerEvent): Bool
  OnAdd(e: inkPointerEvent): Bool
  OnHitAreaOnHoverOver(e: inkPointerEvent): Bool
  OnHitAreaOnHoverOut(e: inkPointerEvent): Bool
  ManageBtnVisibility(addEnabled: Bool, minusEnabled: Bool): void
  ManageLabel(atMin: Bool, atMax: Bool): void
}

declare interface CharacterCreationSummaryListItemData extends IScriptable {

}

declare interface characterCreationSummaryListItem extends ListItemController {

  OnInitialize(): Bool
  Refresh(newData: IScriptable): void
}

declare interface characterCreationSummaryMenu extends BaseCharacterCreationController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPreviousButton(e: inkPointerEvent): Bool
  OnGlitchButton(e: inkPointerEvent): Bool
  OnButtonRelease(evt: inkPointerEvent): Bool
  SetUpLifePath(): void
  SetUpAttribiutes(): void
  PriorMenu(): void
  NextMenu(): void
  OnIntro(): void
  OnOutro(): void
  OnOutroComplete(anim: inkAnimProxy): Bool
  OnIntroComplete(anim: inkAnimProxy): Bool
  OnLoadingComplete(anim: inkAnimProxy): Bool
  PlayAnim(animName: CName, callBack?: CName, animProxy?: inkAnimProxy): void
}

declare interface CharacterCreationPersistantElements extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  ChangeSelectedHeader(selectedIndex: number): void
  ChangeNavigationButtonVisibility(previousBtnAvailable: Bool, nextBtnAvailable: Bool): void
  CreateHeader(label: string, icon: CName): void
  OnChangeToHeader_00(e: inkWidget): Bool
  OnAxisInput(e: inkPointerEvent): Bool
  OnRelativeInput(e: inkPointerEvent): Bool
  SetFluff(e: inkPointerEvent): void
}

declare interface CharacterCreationTopBarHeader extends inkButtonController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  SetData(label: string, icon: CName): void
  Select(): void
  Unselect(): void
  PlayAnim(animName: CName): void
}

declare interface DifficultySelectionMenu extends BaseCharacterCreationController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnHoverOverDifficulty0(e: inkPointerEvent): Bool
  OnHoverOverDifficulty1(e: inkPointerEvent): Bool
  OnHoverOverDifficulty2(e: inkPointerEvent): Bool
  OnHoverOverDifficulty3(e: inkPointerEvent): Bool
  OnButtonRelease(evt: inkPointerEvent): Bool
  OnRelease(e: inkPointerEvent): Bool
  PriorMenu(): void
  NextMenu(): void
  OnIntro(): void
  OnOutro(): void
  OnOutroComplete(anim: inkAnimProxy): Bool
  OnIntroComplete(anim: inkAnimProxy): Bool
  PlayAnim(animName: CName, callBack?: CName): void
}

declare interface CharacterCreationStatsMenu extends BaseCharacterCreationController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  RefreshControllers(): void
  RandomizeAttributes(): void
  ResetAllBtnBackToBaseline(): void
  SaveChanges(): void
  ShowConfirmation(): void
  HideConfirmation(): void
  OnButtonRelease(evt: inkPointerEvent): Bool
  PriorMenu(): void
  NextMenu(): void
  OnConfirmationClose(e: inkPointerEvent): Bool
  OnConfirmationConfirm(e: inkPointerEvent): Bool
  OnPreviousButton(e: inkPointerEvent): Bool
  OnRelease(e: inkPointerEvent): Bool
  OnValueIncremented(e: inkWidget): Bool
  OnValueDecremented(e: inkWidget): Bool
  OnShortcutPress(e: inkPointerEvent): Bool
  Add(targetWidget: inkWidget): void
  Subtract(targetWidget: inkWidget): void
  OnHoverOverWidget(e: inkPointerEvent): Bool
  OnHoverOutWidget(e: inkPointerEvent): Bool
  ManageAllButtonsVisibility(): void
  CanBeIncremented(currValue: number): Bool
  ReachedLimit(currValue: number): Bool
  CanBeDecremented(currValue: number): Bool
  FillAttributeData(label: string, value: number, desc: string): CharacterCreationAttributeData
  PrepareTooltips(): void
  OnBtnHoverOver(e: inkWidget): Bool
  OnBtnHoverOut(e: inkWidget): Bool
  SetDefaultTooltip(): void
  SetUpTooltipData(attribiuteController: characterCreationStatsAttributeBtn): void
  PlayAnim(animName: CName, callBack?: CName): void
  RefreshPointsLabel(): void
  OnIntro(): void
  OnOutro(): void
  OnOutroComplete(anim: inkAnimProxy): Bool
}

declare interface CharacterCreationTooltipData extends MessageTooltipData {

}

declare interface FindServersMenuGameController extends PreGameSubMenuGameController {

  OnInitialize(): Bool
  InitializeMenuName(menuName: inkText): void
  InitializeButtons(buttonsList: inkVerticalPanel): void
  UpdateNetworkStatus(): void
  OnCloudQuickmatch(e: inkPointerEvent): Bool
  OnJoin(e: inkPointerEvent): Bool
  OnLANServers(e: inkPointerEvent): Bool
  OnInternetServers(e: inkPointerEvent): Bool
  OnBack(e: inkPointerEvent): Bool
  OnServersSearchResult(servers: ServerInfo[]): Bool
  OnServerChoosen(e: inkPointerEvent): Bool
  GetServerInfoController(i: number): ServerInfoController
  GetChoosenServerId(omitItem: number): number
  ClearButtons(): void
  ReInitializeButtons(): void
  AddButtons(buttonsList: inkVerticalPanel): void
  Deactivate(widget: inkWidget): void
  GetButton(buttonsList: inkVerticalPanel, name: string): inkWidget
}

declare interface ServerInfoController extends ListItemController {

  OnInitialize(): Bool
  OnDataChanged(data: IScriptable): Bool
  SetMarked(value: Bool): void
  IsMarked(): Bool
  OnSelected(parent: ListItemController): Bool
  OnDeselected(parent: ListItemController): Bool
  OnRelease(e: inkPointerEvent): Bool
  OnHoverOver(e: inkPointerEvent): Bool
  OnHoverOut(e: inkPointerEvent): Bool
}

declare interface ServerInfo extends IScriptable {

}

declare interface RefreshGOGState extends Event {

}

declare interface GOGProfileGameController extends BaseGOGProfileController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnRetry(e: inkPointerEvent): Bool
  OnButtonRelease(evt: inkPointerEvent): Bool
  HandleClose(): void
  HandleRetry(): void
  HidePreviousWidget(): void
  OnRefreshGOGState(evt: RefreshGOGState): Bool
  OnLinkClicked(evt: LinkClickedEvent): Bool
  IsErrorRetryable(error: GOGRewardsSystemErrors): Bool
  ShowError(error: GOGRewardsSystemErrors): void
  ShowThanks(): void
  ShowLoading(): void
  ShowRewards(): void
  ShowRegister(registerUrl: string, qrCodePNGBlob: number[]): void
  ShowRetryButton(show: Bool): void
}

declare interface GogRewardsController extends inkLogicController {

  UpdateRewardsList(): void
}

declare interface GogRewardEntryController extends inkLogicController {

  UpdateRewardDetails(rewardTitle: string, rewardDescription: string, iconSlot: CName): void
}

declare interface GogErrorNotificationController extends inkLogicController {

  ShowErrorMessage(error: GOGRewardsSystemErrors): void
}

declare interface GogRegisterController extends BaseGOGRegisterController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnLinkClicked(evt: inkPointerEvent): Bool
  UpdateRegistrationData(registerUrl: string, qrCodePNGBlob: number[]): void
}

declare interface LinkClickedEvent extends Event {

}

declare interface SaveMetadataInfo extends IScriptable {

}

declare interface MenuAccountLogicController extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnButtonRelease(evt: inkPointerEvent): Bool
  SetChangeAccountEnabled(enabled: Bool): void
  SetPlayerName(playerName: string): void
  ChangeAccountRequest(): void
}

declare interface LoadGameMenuGameController extends gameuiSaveHandlingController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnButtonRelease(evt: inkPointerEvent): Bool
  SetupLoadItems(saves: string[]): void
  CreateLoadItem(index: number, label: string): void
  OnRelease(e: inkPointerEvent): Bool
  OnSaveDeleted(result: Bool, idx: number): Bool
  OnSavesReady(saves: string[]): Bool
  OnSaveMetadataReady(info: SaveMetadataInfo): Bool
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
}

declare interface LoadListItem extends AnimatedListItemController {

  OnInitialize(): Bool
  SetMetadata(metadata: SaveMetadataInfo): void
  SetInvalid(label: string): void
  SetData(index: number, emptySlot?: Bool): void
  OnHoverOver(e: inkPointerEvent): Bool
  OnHoverOut(e: inkPointerEvent): Bool
  Index(): number
  EmptySlot(): Bool
  ValidSlot(): Bool
  GetInitialLoadingID(): number
  GetPreviewImageWidget(): inkImage
}

declare interface MultiplayerMenuGameController extends PreGameSubMenuGameController {

  InitializeMenuName(menuName: inkText): void
  InitializeButtons(buttonsList: inkVerticalPanel): void
  OnFindServers(e: inkPointerEvent): Bool
  OnPlayRecordedSession(e: inkPointerEvent): Bool
  OnExit(e: inkPointerEvent): Bool
}

declare interface MessageTooltip extends AGenericTooltipController {

  SetData(tooltipData: ATooltipData): void
  Show(): void
  PlayAnim(animName: CName, callback: CName, forceVisible?: Bool): void
  OnIntroComplete(proxy: inkAnimProxy): Bool
  OnOutroComplete(proxy: inkAnimProxy): Bool
}

declare interface CharacterCreationTooltip extends MessageTooltip {

  SetData(tooltipData: ATooltipData): void
}

declare interface NewGameMenuGameController extends PreGameSubMenuGameController {

  OnInitialize(): Bool
  OnRunFunctionalTestMap(e: inkPointerEvent): Bool
  OnStartDefinition(e: inkPointerEvent): Bool
  OnCategoryChanged(index: number, value: string): Bool
  OnBack(e: inkPointerEvent): Bool
  InitDynamicButtons(): void
  InitSelectors(): void
}

declare interface PlayRecordedSessionMenuGameController extends PreGameSubMenuGameController {

  OnInitialize(): Bool
  InitializeMenuName(menuName: inkText): void
  InitializeButtons(buttonsList: inkVerticalPanel): void
  OnPlay(e: inkPointerEvent): Bool
  OnBack(e: inkPointerEvent): Bool
}

declare interface gameuiPreGameMenuGameController extends gameuiBaseMenuGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPuppetReady(sceneName: CName, puppet: gamePuppet): Bool
  OnCensorFlagsChanged(sceneName: CName, puppet: gamePuppet): Bool
  UpdateCensorshipItems(puppet: gamePuppet, transactionSystem: TransactionSystem, gender: CName): void
  OnBackAction(evt: inkPointerEvent): Bool
}

declare interface SaveGameMenuGameController extends gameuiSaveHandlingController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  TryToCreateEmptySlot(): void
  SetupLoadItems(saves: string[]): void
  CreateLoadItem(index: number, label: string): void
  OnSaveFile(e: inkPointerEvent): Bool
  OnSaveDeleted(result: Bool, idx: number): Bool
  OnOverrideSaveAccepted(): Bool
  OnSavingComplete(success: Bool, locks: gameSaveLock[]): Bool
  OnSavesReady(saves: string[]): Bool
  OnSaveMetadataReady(info: SaveMetadataInfo): Bool
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
}

declare interface ShowEngagementScreen extends IScriptable {

}

declare interface ShowInitializeUserScreen extends IScriptable {

}

declare interface SingleplayerMenuGameController extends MainMenuGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  PopulateMenuItemList(): void
  OnListRelease(e: inkPointerEvent): Bool
  OnGlobalRelease(e: inkPointerEvent): Bool
  OnSavesReady(saves: string[]): Bool
  OnGogPressed(evt: inkPointerEvent): Bool
  HandleMenuItemActivate(data: PauseMenuListItemData): Bool
}

declare interface MenuScenario_PreGameSubMenu extends inkMenuScenario {

  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnLeaveScenario(nextScenario: CName): Bool
  OpenSubMenu(menuName: CName, userData?: IScriptable): void
  OnSubmenuOpen(): void
  CloseSubMenu(): void
  OnBack(): Bool
  OnHandleEngagementScreen(evt: ShowEngagementScreen): Bool
  OnSwitchToEngagementScreen(): Bool
  OnHandleInitializeUserScreen(evt: ShowInitializeUserScreen): Bool
  DisplayGog(): void
  OnSwitchToInitializeUserScreen(): Bool
  OnCloseInitializeUserScreen(): Bool
}

declare interface MenuScenario_SingleplayerMenu extends MenuScenario_PreGameSubMenu {

  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnLeaveScenario(nextScenario: CName): Bool
  OnLoadGame(): Bool
  OnSwitchToSettings(): Bool
  OnSwitchToCredits(): Bool
  DisplayGog(): void
  OnGOGProfile(): Bool
  OnCloseSettings(): Bool
  OnDebug(): Bool
  OnNewGame(): Bool
  OnSubmenuOpen(): void
  OnMainMenuBack(): Bool
}

declare interface MenuScenario_Settings extends MenuScenario_PreGameSubMenu {

  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnLeaveScenario(nextScenario: CName): Bool
  OnSwitchToBrightnessSettings(): Bool
  OnSwitchToHDRSettings(): Bool
  OnSwitchToControllerPanel(): Bool
  OnSubmenuOpen(): void
  OnSettingsBack(): Bool
  OnCloseSettingsScreen(): Bool
  CloseSettings(forceCloseSettings: Bool): void
  OnMainMenuBack(): Bool
}

declare interface MenuScenario_Credits extends MenuScenario_PreGameSubMenu {

  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnLeaveScenario(nextScenario: CName): Bool
  OnSettingsBack(): Bool
}

declare interface MenuScenario_NewGame extends MenuScenario_PreGameSubMenu {

  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnLeaveScenario(nextScenario: CName): Bool
}

declare interface MenuScenario_LoadGame extends MenuScenario_PreGameSubMenu {

  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnLeaveScenario(nextScenario: CName): Bool
}

declare interface MenuScenario_MultiplayerMenu extends MenuScenario_PreGameSubMenu {

  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnLeaveScenario(nextScenario: CName): Bool
  OnFindServers(): Bool
  OnPlayRecordedSession(): Bool
  OnBoothMode(): Bool
}

declare interface MenuScenario_FindServers extends MenuScenario_PreGameSubMenu {

  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnLeaveScenario(nextScenario: CName): Bool
}

declare interface MenuScenario_PlayRecordedSession extends MenuScenario_PreGameSubMenu {

  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnLeaveScenario(nextScenario: CName): Bool
}

declare interface MenuScenario_BoothMode extends MenuScenario_PreGameSubMenu {

  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnLeaveScenario(nextScenario: CName): Bool
}

declare interface MenuScenario_LifePathSelection extends MenuScenario_PreGameSubMenu {

  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnLeaveScenario(nextScenario: CName): Bool
  OnAccept(): Bool
}

declare interface MenuScenario_BodyTypeSelection extends MenuScenario_PreGameSubMenu {

  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnLeaveScenario(nextScenario: CName): Bool
  OnAccept(): Bool
}

declare interface QuestTrackingEvent extends Event {

}

declare interface MenuScenario_CharacterCustomization extends MenuScenario_PreGameSubMenu {

  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnLeaveScenario(nextScenario: CName): Bool
  OnAccept(): Bool
}

declare interface QuestListController extends inkLogicController {

  Setup(questType: gameJournalQuestType, questTypeLocTag: string): void
  CanAddQuest(questData: QuestDataWrapper): Bool
  AddQuest(questData: QuestDataWrapper, active: Bool): void
  OnButtonRelease(e: inkPointerEvent): Bool
  OnQuestItemClick(controller: inkButtonController): Bool
  GetLastQuestData(): QuestDataWrapper
  Clear(): void
}

declare interface QuestDataWrapper extends AJournalEntryWrapper {

  Init(currQuest: JournalQuest, title: string, description: string, links: JournalEntry[], questObjectives: QuestObjectiveWrapper[], questStatus: gameJournalEntryState, isTracked: Bool, uniqueId: number, recommendedLevel: number, isNew: Bool, district: District_Record): void
  GetDistrict(): gamedataDistrict
  GetType(): gameJournalQuestType
  GetId(): string
  GetQuest(): JournalQuest
  GetStatus(): gameJournalEntryState
  GetDescription(): string
  GetLinks(): JournalEntry[]
  GetObjectives(): QuestObjectiveWrapper[]
  GetTitle(): string
  GetLevel(): number
  HasBriefing(): Bool
  ToString(): string
  Equals(questData: QuestDataWrapper): Bool
  Equals(questUniqueId: number): Bool
  IsTracked(): Bool
  IsTrackedInHierarchy(): Bool
  IsOptional(): Bool
  IsNew(): Bool
  UpdateIsNew(value: Bool): void
}

declare interface QuestObjectiveWrapper extends ABaseQuestObjectiveWrapper {

  AddSubObjective(questSubObjective: JournalQuestSubObjective, subObjectiveStatus: gameJournalEntryState, isTracked: Bool, uniqueId: number): void
  GetSubObjectives(): QuestSubObjectiveWrapper[]
  IsTrackedInHierarchy(): Bool
  IsOptional(): Bool
}

declare interface QuestSubObjectiveWrapper extends ABaseQuestObjectiveWrapper {

  ToString(): string
}

declare interface QuestItemController extends inkButtonController {

  OnInitialize(): Bool
  GetQuestData(): QuestDataWrapper
  RefreshTrackedStyle(force?: Bool): void
  SetQuestData(currQuest: QuestDataWrapper): void
  MarkAsActive(): void
  GetQuestStatus(): string
  HideNewIcon(): void
  GetObjectiveData(): ABaseQuestObjectiveWrapper
}

declare interface MenuScenario_StatsAdjustment extends MenuScenario_PreGameSubMenu {

  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnLeaveScenario(nextScenario: CName): Bool
  OnAccept(): Bool
}

declare interface MenuScenario_Summary extends MenuScenario_PreGameSubMenu {

  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnLeaveScenario(nextScenario: CName): Bool
  OnAccept(): Bool
}

declare interface MenuScenario_Difficulty extends MenuScenario_PreGameSubMenu {

  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnLeaveScenario(nextScenario: CName): Bool
  OnAccept(): Bool
}

declare interface questLogV2GameController extends gameuiMenuGameController {

  OnInitialize(): Bool
  OnPlayerAttach(playerPuppet: GameObject): Bool
  RefreshUI(): void
  CreateQuestGroup(questType: gameJournalQuestType, questLOCKey: string): void
  BuildQuestList(): void
  BuildQuestDetails(): void
  CreateQuestObjectives(currQuestData: QuestDataWrapper): void
  RemoveQuestObjective(index: number): void
  AddQuestObjective(): void
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
  OnBack(userData: IScriptable): Bool
  OnUninitialize(): Bool
  OnActiveQuestChanged(widget: inkWidget): Bool
  OnTrackingRequestEvent(evt: QuestTrackingEvent): Bool
  OnTrackingRequest(widget: inkWidget): Bool
  OnQuestHover(evt: inkPointerEvent): Bool
  OnObjectiveHover(evt: inkPointerEvent): Bool
  OnHoverOut(evt: inkPointerEvent): Bool
  OnCodexLinkClicked(index: number, target: ListItemController): Bool
  OnCodexOpenButtonClicked(e: inkPointerEvent): Bool
  OpenEntry(entry: JournalCodexEntry): void
}

declare interface JournalWrapper extends ABaseWrapper {

  Init(gameInstance: GameInstance): void
  GetJournalManager(): JournalManager
  GetQuests(entries: JournalEntry[]): void
  BuildQuestData_Recursive(currEntity: JournalEntry, description: string, questObjectives: QuestObjectiveWrapper[], links: JournalEntry[], foundTracked: Bool): void
  BuildQuestData(currQuest: JournalQuest): QuestDataWrapper
  GetTrackedEntry(): JournalEntry
  GetTrackingStatus(entry: JournalEntry): Bool
  SetTracking(entry: JournalEntry): void
  SetVisited(entry: JournalEntry): void
  IsVisited(entry: JournalEntry): Bool
  UpdateQuestData(toUpdate: QuestDataWrapper): QuestDataWrapper
  GetDescriptionForCodexEntry(entry: JournalCodexEntry, result: JournalEntry[]): void
  GetEntryHash(entry: JournalEntry): number
}

declare interface ObjectiveController extends inkButtonController {

  OnInitialize(): Bool
  SetState(val: CName): void
  RefreshTrackedStyle(): void
  Setup(data: ABaseQuestObjectiveWrapper, isOptional: Bool): void
  GetObjectiveData(): ABaseQuestObjectiveWrapper
  GetObjectiveStatus(isOptional: Bool): string
  OnObjectiveClicked(controller: inkButtonController): Bool
  GetToTrack(): ABaseQuestObjectiveWrapper
}

declare interface CyberwareInventoryMiniGrid extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  SetOrientation(orientation: inkEOrientation): void
  SetupData(equipArea: gamedataEquipmentArea, playerEquipAreaInventory: InventoryItemData[], count: number, parent: IScriptable, onRealeaseCallbackName: CName, screen: CyberwareScreenType, hasMods: Bool): void
  OnStateChanged(widget: inkWidget, oldState: CName, newState: CName): Bool
  SelectSlot(index: number): void
  GetSelectedSlotData(): InventoryItemData
  GetSlotToEquipe(): number
  SetNextEmptySlotToEquipe(): void
  GetEquipementArea(): gamedataEquipmentArea
  UpdateData(equipArea: gamedataEquipmentArea, playerEquipAreaInventory: InventoryItemData[], count?: number, screen?: CyberwareScreenType): void
  OnSlotSpawned(widget: inkWidget, userData: IScriptable): Bool
  UpdateTitles(count: number, screen: CyberwareScreenType, hasMods?: Bool): void
  UpdateTitle(label: string): void
  GetInventoryItemDisplays(): InventoryItemDisplayController[]
  RemoveElements(limit: number): void
  GetAreaHeader(area: gamedataEquipmentArea): string
}

declare interface SlotUserData extends IScriptable {

}

declare interface GridUserData extends IScriptable {

}

declare interface CodexLinkQuestLog extends CodexImageButton {

  OnInitialize(): Bool
  OnDataChanged(value: IScriptable): Bool
}

declare interface ShoppingCartListItem extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  SetupData(data: InventoryItemData): void
  OnHoverOver(): void
  OnHoverOut(): void
  GetData(): InventoryItemData
}

declare interface BrightnessSettingsVarListener extends ConfigVarListener {

  RegisterController(ctrl: BrightnessSettingsGameController): void
  OnVarModified(groupPath: CName, varName: CName, varType: ConfigVarType, reason: ConfigChangeReason): void
}

declare interface BrightnessSettingsGameController extends gameuiMenuGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  PopulateSettings(): void
  OnVarModified(groupPath: CName, varName: CName, varType: ConfigVarType, reason: ConfigChangeReason): void
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
}

declare interface HDRSettingsVarListener extends ConfigVarListener {

  RegisterController(ctrl: HDRSettingsGameController): void
  OnVarModified(groupPath: CName, varName: CName, varType: ConfigVarType, reason: ConfigChangeReason): void
}

declare interface HDRSettingsGameController extends gameuiMenuGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  SetOptionSelector(optionName: CName): void
  OnVarModified(groupPath: CName, varName: CName, varType: ConfigVarType, reason: ConfigChangeReason): void
  PrepareHDRCycleAnimations(): void
  OnCalibrationImageAnimStart(anim: inkAnimProxy): Bool
  OnCalibrationImageEndLoop(anim: inkAnimProxy): Bool
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
  SetTexturePart(partName: CName): void
  SetHDRCalibrationScreen(enabled: Bool): void
  SetRenderGameInBackground(enabled: Bool): void
}

declare interface ControllerSettingsGameController extends gameuiMenuGameController {

  OnInitialize(): Bool
}

declare interface SettingControllerScheme extends inkLogicController {

  OnInitialize(): Bool
  OnValueChanged(controller: inkRadioGroupController, selectedIndex: number): Bool
}

declare interface SettingsCategoryItemData extends ListItemData {

}

declare interface SettingsCategoryItem extends ListItemController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnToggledOn(itemController: ListItemController): Bool
  OnToggledOff(itemController: ListItemController): Bool
  OnDataChanged(value: IScriptable): Bool
}

declare interface SettingsListItem extends ListItemController {

  OnInitialize(): Bool
  OnDataChanged(value: IScriptable): Bool
  OnSelected(target: ListItemController): Bool
}

declare interface SocialPanelContactsDetails extends inkLogicController {

  ShowContact(contactToShow: JournalContact, journalManager: IJournalManager): void
}

declare interface SocialPanelContactsList extends inkLogicController {

  RefreshContactsList(contacts: SocialPanelContactInfo[]): void
  AddContactItem(contactInfo: SocialPanelContactInfo, currentItem: number): void
  ChooseContact(contactToShowHash: number): Bool
  OnListItemClicked(e: inkPointerEvent): void
  GetClickedContact(): JournalContact
}

declare interface SocialPanelContactInfo {

}

declare interface SocialPanelContactsListItem extends inkToggleController {

  Setup(contactInfo: SocialPanelContactInfo): void
  GetHash(): number
  GetContact(): JournalContact
}

declare interface RipperDocItemBoughtCallback extends InventoryScriptCallback {

  Bind(eventTarget: RipperDocGameController): void
  OnItemAdded(itemID: ItemID, itemData: gameItemData, flaggedAsSilent: Bool): void
}

declare interface RipperDocGameController extends gameuiMenuGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnVendorHubMenuChanged(evt: VendorHubMenuChanged): Bool
  SetFilters(): void
  OnFilterChange(controller: inkRadioGroupController, selectedIndex: number): Bool
  StopAllAnimations(): void
  SetupSorting(): void
  OnDropdownItemClickedEvent(evt: DropdownItemClickedEvent): Bool
  OnSortingButtonClicked(evt: inkPointerEvent): Bool
  OnSetUserData(userData: IScriptable): Bool
  UpdateVendorMoney(): void
  UpdatePlayerMoney(): void
  RegisterInventoryListener(player: GameObject): void
  UnregisterInventoryListener(player: GameObject): void
  OnItemBought(itemID: ItemID, itemData: gameItemData): void
  EquipCyberware(itemData: gameItemData): void
  Init(): void
  RegisterBlackboard(player: GameObject): void
  UnregisterBlackboard(): void
  PlayIntroAnimation(area: gamedataEquipmentArea, female: Bool): void
  PlayOutroAnimation(area: gamedataEquipmentArea, female: Bool): void
  GetHoverAnimationTarget(area: gamedataEquipmentArea, female: Bool): inkWidget
  PlayHoverAnimation(area: gamedataEquipmentArea): void
  PlayHoverOverAnimation(area: gamedataEquipmentArea): void
  PrepareCyberwareSlots(): void
  SpawnCWAreaGrid(equipArea: gamedataEquipmentArea, parentRef: inkCompoundRef, align: inkEHorizontalAlign): void
  OnGridSpawned(widget: inkWidget, userData: IScriptable): Bool
  UpdateCWAreaGrid(selectedArea: gamedataEquipmentArea): void
  SelectSlot(newSlotIndex: number): void
  UpdateTooltipData(itemData: InventoryItemData): void
  GetAmountOfAvailableItems(equipArea: gamedataEquipmentArea): number
  GetAmountOfMods(itemData: InventoryItemData): number
  IsGenderFemale(): Bool
  OnVendorUpdated(value: Variant): Bool
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
  OnBack(userData: IScriptable): Bool
  RefreshUI(): void
  SwapMode(mode: RipperdocModes): void
  CloseVendor(): void
  OnItemEquiped(value: Variant): Bool
  OnPreviewCyberwareClick(evt: inkPointerEvent): Bool
  OnEquipmentSlotClick(evt: inkPointerEvent): Bool
  OpenDefaultMode(): void
  HideDefaultMode(): void
  OnDefaultTabOutroAnimFinished(anim: inkAnimProxy): Bool
  ReadUICondition(condition: gamedataUICondition): Bool
  OpenItemMode(): void
  ProcessRipperdocSlotsModeTutorial(): void
  ProcessRipperdocItemModeTutorial(): void
  HideItemMode(): void
  SetEquipmentGrid(indexToSelect: number): void
  PlayAnim(animName: CName, callBack?: CName, playbackOptions?: inkAnimOptions): void
  SetInventoryCWList(): void
  GetEquipRequirements(itemData: gameItemData): SItemStackRequirementData
  OnSlotClick(evt: ItemDisplayClickEvent): Bool
  OnCyberwareSlotHoverOver(evt: ItemDisplayHoverOverEvent): Bool
  OnCyberwareSlotHoverOut(evt: ItemDisplayHoverOutEvent): Bool
  InventoryItemHoverOver(itemData: InventoryItemData): void
  IsCyberdeck(itemData: InventoryItemData): Bool
  HideTooltips(): void
  SetDefaultModeButtonHints(): void
  SetItemModeButtonHints(): void
  SetInventoryItemButtonHintsHoverOver(displayingData: InventoryItemData): void
  SetInventoryItemButtonHintsHoverOut(): void
  OnIntro(): void
  OnOutro(): void
  GetCyberwareSlotControllerFromTarget(evt: inkPointerEvent): InventoryItemDisplayController
  GetRipperdocItemsForEquipmentArea(equipArea: gamedataEquipmentArea): InventoryItemData[]
}

declare interface RipperdocIdPanel extends inkLogicController {

  SetName(vendorName: string): void
  SetMoney(money: number): void
  PlayIntoAnimation(): void
}

declare interface CyberwareDataView extends ScriptableDataView {

  BindUIScriptableSystem(uiScriptableSystem: UIScriptableSystem): void
  SetFilterType(type: RipperdocFilter): void
  FilterItem(data: IScriptable): Bool
  SetSortMode(mode: ItemSortMode): void
  PreSortingInjection(builder: ItemCompareBuilder): ItemCompareBuilder
  SortItem(left: IScriptable, right: IScriptable): Bool
}

declare interface CyberwareDataWrapper extends IScriptable {

}

declare interface CyberwareTemplateClassifier extends inkVirtualItemTemplateClassifier {

  ClassifyItem(data: Variant): number
}

declare interface VendorHubMenuChanged extends Event {

}

declare interface CyberwareDisplayWrapper extends IScriptable {

}

declare interface QuestListItemHoverOutEvent extends Event {

}

declare interface SocialPanelGameController extends gameuiMenuGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  RefreshView(): void
  OnContactChangedRequest(e: inkWidget): Bool
  DisplayContact(contactToShow: JournalContact): void
}

declare interface SettingsCategory {

}

declare interface CheckSettingsEvent extends Event {

}

declare interface SettingsCategoryController extends inkLogicController {

  Setup(label: CName): void
}

declare interface QuestListHeaderController extends inkLogicController {

  OnInitialize(): Bool
  OnRelease(e: inkPointerEvent): Bool
  Setup(titleLocKey: CName, questType: number): void
  ToggleArrow(open: Bool): void
  UpdateState(): void
  OnHoverOver(e: inkPointerEvent): Bool
  OnHoverOut(e: inkPointerEvent): Bool
}

declare interface SettingsVarListener extends ConfigVarListener {

  RegisterController(ctrl: SettingsMainGameController): void
  OnVarModified(groupPath: CName, varName: CName, varType: ConfigVarType, reason: ConfigChangeReason): void
}

declare interface SettingsMainGameController extends gameuiMenuGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  EnableApplyButton(): void
  DisableApplyButton(): void
  IsApplyButtonEnabled(): Bool
  EnableResetButton(): void
  DisableResetButton(): void
  IsResetButtonEnabled(): Bool
  CheckButtons(): void
  OnVarModified(groupPath: CName, varName: CName, varType: ConfigVarType, reason: ConfigChangeReason): void
  OnSettingsNotify(status: ConfigNotificationType): void
  CheckHDRSettingVisibility(): void
  AddSettingsGroup(settingsGroup: ConfigGroup): void
  PopulateSettingsData(): void
  PopulateCategories(idx: number): void
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
  OnBack(userData: IScriptable): Bool
  RequestCheckSettings(): void
  RequestClose(): void
  RequestRestoreDefaults(): void
  CheckSettings(): void
  OnCheckSettingsEvent(evt: CheckSettingsEvent): Bool
  OnMenuChanged(index: number, target: ListItemController): Bool
  OnApplyButtonReleased(controller: inkButtonController): Bool
  OnResetButtonReleased(controller: inkButtonController): Bool
  OnBrightnessButtonReleased(controller: inkButtonController): Bool
  OnHDRButtonReleased(controller: inkButtonController): Bool
  OnControllerButtonReleased(controller: inkButtonController): Bool
  OnDefaultButtonReleased(controller: inkButtonController): Bool
  OnLocalizationChanged(evt: inkLocalizationChangedEvent): Bool
  PopulateHints(): void
  OnApplyButton(): void
  OnResetButton(): void
  ShowBrightnessScreen(): void
  ShowHDRScreen(): void
  ShowControllerScreen(): void
  OnButtonRelease(evt: inkPointerEvent): Bool
  OnSettingHoverOver(evt: inkPointerEvent): Bool
  OnSettingHoverOut(evt: inkPointerEvent): Bool
  PopulateOptions(options: ConfigVar[]): void
  PopulateCategorySettingsOptions(idx: number): void
}

declare interface SettingsNotificationListener extends ConfigNotificationListener {

  RegisterController(ctrl: SettingsMainGameController): void
  OnNotify(status: ConfigNotificationType): void
}

declare interface QuestListItemController extends inkLogicController {

  Setup(data: QuestListItemData): void
  UpdateDistance(): void
  OnInitialize(): Bool
  OnRelease(e: inkPointerEvent): Bool
  OnUpdateTrackedObjectiveEvent(e: UpdateTrackedObjectiveEvent): Bool
  OnUpdateOpenedQuestEvent(e: UpdateOpenedQuestEvent): Bool
  UpdateState(forceActive?: Bool): void
  OnHoverOver(e: inkPointerEvent): Bool
  OnHoverOut(e: inkPointerEvent): Bool
}

declare interface CyberwareMainGameController extends inkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  SetupBB(): void
  RemoveBB(): void
  PrepareCyberwareSlots(): void
  PopulateStats(): void
  AddStat(statType: gamedataStatType, list: inkCompoundRef, viewElement?: CName): void
  AddCyberwareSlot(equipArea: gamedataEquipmentArea, parentRef: inkCompoundRef): void
  OnCyberwareSlotHoverOver(evt: inkPointerEvent): Bool
  OnCyberwareSlotHoverOut(evt: inkPointerEvent): Bool
  PrepareTooltips(): void
  OnCyberwareRequestTooltip(slot: CyberwareSlot): void
  HideTooltips(): void
  OnIntro(): void
  GetCyberwareSlotControllerFromTarget(evt: inkPointerEvent): CyberwareSlot
  RequestStat(stat: gamedataStatType): StatViewData
}

declare interface StatsViewController extends inkLogicController {

  OnInitialize(): Bool
  Setup(stat: StatViewData): void
  OnButtonClick(controller: inkButtonController): Bool
  OnUninitialize(): Bool
}

declare interface CategoryClickedEvent extends Event {

}

declare interface CyberwareTooltipData extends ATooltipData {

  AddCyberwareSlotItemData(itemData: InventoryItemData): void
}

declare interface CyberwareSlotTooltipData extends ATooltipData {

}

declare interface VirtualQuestListController extends inkVirtualCompoundItemController {

  OnInitialize(): Bool
  GetListController(): QuestListHeaderController
  OnDataChanged(value: Variant): Bool
  OnSelected(itemController: inkVirtualCompoundItemController, discreteNav: Bool): Bool
}

declare interface VirtualQuestItemController extends inkVirtualCompoundItemController {

  OnInitialize(): Bool
  GetItemController(): QuestListItemController
  OnDataChanged(value: Variant): Bool
  OnSelected(itemController: inkVirtualCompoundItemController, discreteNav: Bool): Bool
}

declare interface StatsMainGameController extends gameuiMenuGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnSetUserData(userData: IScriptable): Bool
  OnCharacterLevelUpdated(value: number): Bool
  OnCharacterLevelCurrentXPUpdated(value: number): Bool
  OnCharacterStreetCredLevelUpdated(value: number): Bool
  OnCharacterStreetCredPointsUpdated(value: number): Bool
  PopulateStats(): void
  AddStat(statType: gamedataStatType, datalist: StatViewData[]): void
  OnIntro(): void
  RequestStat(stat: gamedataStatType, datalist: StatViewData[]): StatViewData
  OnCategoryClicked(evt: CategoryClickedEvent): Bool
}

declare interface StatsDetailListController extends inkLogicController {

  SetData(categoryData: StatViewData, detailsData: StatViewData[]): void
}

declare interface StatsDetailViewController extends inkLogicController {

  Setup(stat: StatViewData): void
}

declare interface StatsPlayTimeController extends inkLogicController {

  Set(playTime: number, lifePath: gamedataLifePath): void
}

declare interface SteetCredDataHelper extends IScriptable {

  /** @noSelf **/
  GetData(): LevelRewardDisplayData[]
}

declare interface MenuScenario_Storage extends MenuScenario_BaseMenu {

  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnVendorClose(): Bool
  GotoIdleState(): void
  OnCloseHubMenuRequest(): Bool
}

declare interface TarotPreviewGameController extends inkGameController {

  OnInitialize(): Bool
  Show(data: TarotCardData): void
  OnGlobalRelease(evt: inkPointerEvent): Bool
}

declare interface TarotCardPreviewData extends inkGameNotificationData {

}

declare interface TarotCardData {

}

declare interface TarotCardPreviewPopupEvent extends Event {

}

declare interface TarotMainGameController extends gameuiMenuGameController {

  OnInitialize(): Bool
  OnUninitalize(): Bool
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
  OnTarotCardPreviewShowRequest(evt: TarotCardPreviewPopupEvent): Bool
  OnTarotPreviewPopup(data: inkGameNotificationData): Bool
  OnBack(userData: IScriptable): Bool
  OnJournalReady(entryHash: number, className: CName, notifyOption: JournalNotifyOption, changeType: JournalChangeType): Bool
  PushCodexData(): void
  OnUninitialize(): Bool
  CreateTarotCards(data: TarotCardData[]): void
  OnElementClick(evt: inkPointerEvent): Bool
  OnElementHoverOver(evt: inkPointerEvent): Bool
  OnElementHoverOut(evt: inkPointerEvent): Bool
  PrepareTooltips(): void
  RequestTooltip(data: TarotCardData): void
  HideTooltips(): void
  GetTarotCardControllerFromTarget(evt: inkPointerEvent): tarotCardLogicController
}

declare interface tarotCardLogicController extends inkLogicController {

  OnInitialize(): Bool
  SetupData(data: TarotCardData): void
  HoverOver(): void
  HoverOut(): void
  GetData(): TarotCardData
}

declare interface CyberwareItemLogicController extends inkVirtualCompoundItemController {

  OnDataChanged(value: Variant): void
}

declare interface ItemFilterToggleController extends ToggleController {

  GetLabelKey(): string
  GetIcon(): string
}

declare interface TimeMenuGameController extends inkGameController {

  OnInitialize(): Bool
  ToggleTimeSkip(enableTimeSkip: Bool): void
  OnUninitialize(): Bool
  SetupSelector(): void
  OnHoursChanged(index: number, value: string): Bool
  OnPressApply(e: inkPointerEvent): Bool
  OnPressBack(e: inkPointerEvent): Bool
  OnGlobalInput(e: inkPointerEvent): Bool
  Apply(): void
  Cancel(): void
  FastForwardPlayerState(): void
  StopAnim(): void
  PlayIntroAnim(): void
  PlayLoopAnim(): void
  PlayOutroAnim(): void
  OnIntroAnimEnd(proxy: inkAnimProxy): Bool
  OnOutroAnimEnd(proxy: inkAnimProxy): Bool
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
  Close(): void
  UpdateTimeText(): void
}

declare interface VendorConfirmationPopupData extends inkGameNotificationData {

}

declare interface VendorConfirmationPopupCloseData extends inkGameNotificationData {

}

declare interface ItemQuantityPickerController extends inkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  SetButtonHints(): void
  AddButtonHints(actionName: CName, label: string): void
  SetData(): void
  UpdatePriceText(): void
  UpdateWeight(): void
  OnLessClick(controller: inkButtonController): Bool
  OnMoreClick(controller: inkButtonController): Bool
  OnHandlePressInput(evt: inkPointerEvent): Bool
  OnHandleRepeatInput(evt: inkPointerEvent): Bool
  OnAxisInput(evt: inkPointerEvent): Bool
  UpdateProgress(): void
  OnOkClick(controller: inkButtonController): Bool
  OnCancelClick(controller: inkButtonController): Bool
  OnSliderValueChanged(controller: inkSliderController, progress: number, value: number): Bool
  Close(success: Bool): void
  OnCloseAnimationFinished(proxy: inkAnimProxy): Bool
}

declare interface VendorConfirmationPopup extends inkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  SetButtonHints(): void
  AddButtonHints(actionName: CName, label: string): void
  OnHandlePressInput(evt: inkPointerEvent): Bool
  OnOkClick(evt: inkPointerEvent): Bool
  OnCancelClick(evt: inkPointerEvent): Bool
  Close(success: Bool): void
  OnCloseAnimationFinished(proxy: inkAnimProxy): Bool
}

declare interface MenuScenario_Vendor extends MenuScenario_BaseMenu {

  OnEnterScenario(prevScenario: CName, userData: IScriptable): Bool
  OnSwitchToVendor(userData?: IScriptable): Bool
  OnSwitchToRipperDoc(userData?: IScriptable): Bool
  OnSwitchToCrafting(userData?: IScriptable): Bool
  OnVendorClose(): Bool
  GotoIdleState(): void
  OnCloseHubMenuRequest(): Bool
}

declare interface VendorSellJunkPopup extends inkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  SetButtonHints(): void
  AddButtonHints(actionName: CName, label: string): void
  OnHandlePressInput(evt: inkPointerEvent): Bool
  OnOkClick(controller: inkButtonController): Bool
  OnCancelClick(controller: inkButtonController): Bool
  Close(success: Bool): void
  OnCloseAnimationFinished(proxy: inkAnimProxy): Bool
}

declare interface VendorSellJunkPopupData extends inkGameNotificationData {

}

declare interface VendorSellJunkPopupCloseData extends inkGameNotificationData {

}

declare interface VendorHubMenuGameController extends gameuiMenuGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnSetUserData(userData: IScriptable): Bool
  Init(): void
  SetupBB(): void
  RemoveBB(): void
  SetupTopBar(): void
  OnPlayerWeightUpdated(value: number): Bool
  OnCharacterLevelUpdated(value: number): Bool
  OnCharacterLevelCurrentXPUpdated(value: number): Bool
  OnCharacterStreetCredLevelUpdated(value: number): Bool
  OnCharacterStreetCredPointsUpdated(value: number): Bool
  OnCharacterCurrentHealthUpdated(value: number): Bool
  SetupMenuTabs(): void
  OnButtonRelease(evt: inkPointerEvent): Bool
  OnVendorUpdated(value: Variant): Bool
  OnMenuChanged(index: number, value: string): Bool
  NotifyActivePanel(item: HubVendorMenuItems): void
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
  CloseVendor(): void
}

declare interface hudCameraController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
  OnEndLoop(proxy: inkAnimProxy): Bool
  OnTakeControllOverDevice(value: Variant): Bool
  UpdateRulers(): void
  UpdateTime(): void
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  OnZoomChange(curZoom: number): Bool
  OnChangeControlledDevice(value: EntityID): Bool
  ChangeCameraName(): void
  GetEntityNameFromEntityID(obj: GameObject): string
  OnDelayedHUDInitializeEvent(evt: DelayedHUDInitializeEvent): Bool
  ResolveState(): void
}

declare interface DelayedHUDInitializeEvent extends Event {

}

declare interface hudCorpoController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnQ000_corpo_scrollbar_mirror(val: number): void
  OnQ000_corpo_scrollbar_office(val: number): void
  OnQ000_corpo_scrollbar_after_meeting(val: number): void
  OnQ000_corpo_scrollbar_disconnect(val: number): void
  OnQ000_var_arasaka_ui_on(val: number): void
}

declare interface hudDroneController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  OnZoomChange(evt: number): Bool
}

declare interface hudJohnnyController extends inkHUDGameController {

  OnPlayerAttach(playerPuppet: GameObject): Bool
}

declare interface hudMilitechWarningGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnFact(val: number): void
}

declare interface hudRecordingController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnFact(val: number): void
  OnOutroEnded(): void
}

declare interface TextAnimOnTextChange extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnChangeTextToInject(str: string): Bool
}

declare interface hudTurretController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
  OnMalfunction(anim: inkAnimProxy): Bool
  OnIntroComplete(anim: inkAnimProxy): Bool
  OnStatsChanged(value: Variant): Bool
  OnDelayedHUDInitializeEvent(evt: DelayedHUDInitializeEvent): Bool
  PlayAnim(animName: CName, callBack?: CName): void
}

declare interface OnscreenMessageGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUnitialize(): Bool
  OnScreenMessageUpdate(value: Variant): Bool
  UpdateWidgets(): void
  SetTimeout(value: number): void
  OnTimeout(anim: inkAnimProxy): Bool
  OnShown(anim: inkAnimProxy): Bool
  OnBlinkAnimation(anim: inkAnimProxy): Bool
  OnHidden(anim: inkAnimProxy): Bool
  TriggerBlinkAnimation(): void
  CreateAnimations(): void
}

declare interface FullscreenVendorGameController extends gameuiMenuGameController {

  InitializeVirtualLists(): void
  OnInitialize(): Bool
  OnUninitialize(): Bool
  SetTimeDilatation(enable: Bool): void
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
  OnBack(userData: IScriptable): Bool
  OnVendorHubMenuChanged(evt: VendorHubMenuChanged): Bool
  OnSetUserData(userData: IScriptable): Bool
  SetupDropdown(): void
  OnDropdownItemClickedEvent(evt: DropdownItemClickedEvent): Bool
  OnPlayerSortingButtonClicked(evt: inkPointerEvent): Bool
  OnVendorSortingButtonClicked(evt: inkPointerEvent): Bool
  SetFilters(root: inkWidgetRef, data: number[], callback: CName): void
  ToggleFilter(root: inkWidgetRef, data: number): void
  OnPlayerFilterChange(controller: inkRadioGroupController, selectedIndex: number): Bool
  OnVendorFilterChange(controller: inkRadioGroupController, selectedIndex: number): Bool
  Init(): void
  OnUIVendorItemSoldEvent(evt: UIVendorItemsSoldEvent): Bool
  OnUIVendorItemBoughtEvent(evt: UIVendorItemsBoughtEvent): Bool
  OnCraftingComplete(value: Variant): Bool
  SetupBB(): void
  RemoveBB(): void
  Update(): void
  UpdateVendorMoney(): void
  UpdatePlayerMoney(): void
  ShowHideVendorStock(): void
  OnInventoryClick(evt: ItemDisplayClickEvent): Bool
  OnHandleGlobalInput(evt: inkPointerEvent): Bool
  HandleVendorSlotInput(evt: ItemDisplayClickEvent, itemData: InventoryItemData): void
  HandleStorageSlotInput(evt: ItemDisplayClickEvent, itemData: InventoryItemData): void
  OpenSellJunkConfirmation(): void
  OnSellJunkPopupClosed(data: inkGameNotificationData): Bool
  OnItemPreviewPopup(data: inkGameNotificationData): Bool
  OpenQuantityPicker(itemData: InventoryItemData, actionType: QuantityPickerActionType, isBuyback?: Bool): void
  OnQuantityPickerPopupClosed(data: inkGameNotificationData): Bool
  GetPrice(item: gameItemData, actionType: QuantityPickerActionType, quantity: number): number
  OpenConfirmationPopup(itemData: InventoryItemData, quantity: number, actionType: QuantityPickerActionType, type?: VendorConfirmationPopupType): void
  OnConfirmationPopupClosed(data: inkGameNotificationData): Bool
  SellItem(itemData: gameItemData, quantity: number): void
  OnRefreshSellQueueEvent(evt: RefreshSellQueueEvent): Bool
  BuyItem(itemData: gameItemData, quantity: number, buyback?: Bool): void
  OnRefreshBuyQueueEvent(evt: RefreshBuyQueueEvent): Bool
  PopulateVendorInventory(): void
  GetAllSellable(): void
  GetSellableJunk(): gameItemData[]
  GetLimitedSellableItems(items: gameItemData[], moneyLimit: number): VendorJunkSellItem[]
  GetBulkSellPrice(items: gameItemData[]): number
  GetBulkSellPrice(items: VendorJunkSellItem[]): number
  PopulatePlayerInventory(): void
  GetComparisonState(item: InventoryItemData): ItemComparisonState
  PrepareTooltips(): void
  OnInventoryItemHoverOver(evt: ItemDisplayHoverOverEvent): Bool
  ShowTooltipsForItemController(targetWidget: inkWidget, equippedItem: InventoryItemData, inspectedItemData: InventoryItemData, iconErrorInfo: DEBUG_IconErrorInfo, isBuybackStack: Bool): void
  OnInventoryItemHoverOut(evt: ItemDisplayHoverOutEvent): Bool
  ConvertGameDataIntoInventoryData(data: VendorGameItemData[], owner?: GameObject, isVendorItem?: Bool): InventoryItemData[]
  ConvertGameDataIntoInventoryData(data: gameItemData[], owner?: GameObject, isVendorItem?: Bool): InventoryItemData[]
}

declare interface VendorDataView extends BackpackDataView {

  SetVendorGrid(value: Bool): void
  SetOpenTime(time: GameTime): void
  PreSortingInjection(builder: ItemCompareBuilder): ItemCompareBuilder
  PreFilterInjection(itemData: InventoryItemData): Bool
  DerivedFilterItem(data: IScriptable): DerivedFilterResult
}

declare interface VendorInventoryItemData extends WrappedInventoryItemData {

}

declare interface SoldItemsCache extends IScriptable {

  AddItem(itemID: ItemID, quantity: number, piecePrice: number): void
  AddItem(item: SoldItem): void
  AddItems(items: SoldItem[]): void
  RemoveItem(itemID: ItemID, quantity: number): void
  GetItem(itemID: ItemID): SoldItem
  GetItemPrice(itemID: ItemID): number
}

declare interface SoldItem extends IScriptable {

}

declare interface RefreshSellQueueEvent extends Event {

}

declare interface RefreshBuyQueueEvent extends Event {

}

declare interface VendorJunkSellItem extends IScriptable {

}

declare interface PanzerHUDGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnVehicleStateChanged(state: number): Bool
  OnPlayerVehicleStateChange(value: number): Bool
  EvaluateUIState(): void
  TurnOn(): void
  TurnOff(): void
  OnForwardVehicleQuestEnableUIEvent(evt: ForwardVehicleQuestEnableUIEvent): Bool
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
  TogglePanzerSpecificFX(toggle: Bool): void
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  OnZoomChange(evt: number): Bool
  OnRpmMaxChanged(rpmMax: number): Bool
  OnSpeedValueChanged(speedValue: number): Bool
  OnGearValueChanged(gearValue: number): Bool
  OnRpmValueChanged(rpmValue: number): Bool
  OnLeanAngleChanged(leanAngle: number): Bool
  OnCameraModeChanged(mode: Bool): Bool
  OnStatsChanged(value: Variant): Bool
  OnIsTargetingFriendly(isTargetingFriendly: Bool): Bool
  SpawnTargetIndicators(): void
  EnableTargetIndicator(indicatorEntry: TargetIndicatorEntry, targetData: smartGunUITargetParameters): void
  DisableTargetIndicator(indicatorEntry: TargetIndicatorEntry): void
  OnSmartGunParams(argParams: Variant): Bool
}

declare interface TargetIndicatorEntry {

}

declare interface smartGunUITargetParameters {

}

declare interface PanzerSmartWeaponTargetController extends inkLogicController {

  OnInitialize(): Bool
  SetData(data: smartGunUITargetParameters): void
  StopAnimation(): void
}

declare interface smartGunUIParameters extends IScriptable {

}

declare interface HudPhoneAvatarController extends HUDPhoneElement {

  OnInitialize(): Bool
  SetJournalManager(journalManager: IJournalManager): void
  SetHolder(holder: inkWidgetRef): void
  ShowIncomingContact(contactToShow: JournalContact): void
  ShowEndCallContact(contactToShow: JournalContact): void
  StartAudiocall(contactToShow: JournalContact): void
  StartHolocall(contactToShow: JournalContact): void
  ChangeMinimized(minimized: Bool): void
  SetStatusText(statusText: string): void
  OnStateChanged(widget: inkWidget, oldState: CName, newState: CName): Bool
  RefreshView(contact: JournalContact, mode: EHudAvatarMode): void
  StopRootAnimation(): void
  StopAudiocallAnimation(): void
  StopHolocallAnimation(): void
  PlayElementAnimations(): void
  AreElementAnimationsComplete(): Bool
  OnHolocallAnimationFinished(anim: inkAnimProxy): Bool
  OnAudiocallAnimationFinished(anim: inkAnimProxy): Bool
  OnElementAnimationsFinished(): void
  OnRootAnimationFinished(anim: inkAnimProxy): Bool
}

declare interface HudPhoneGameController extends inkProjectedHUDGameController {

  CreateTriggerCallRequestFromPhoneCallInformation(phoneCallInformation: PhoneCallInformation): questTriggerCallRequest
  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  CachePredefinedRestrictions(): void
  IsUsingPhonePrevented(): Bool
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
  DeductGameInputActionType(): gameinputActionType
  OnPhoneMinimize(value: Bool): Bool
  OnPhoneStatusChanged(phoneStatus: CName): Bool
  OnTriggerCall(data: Variant): Bool
  OnQuestTimer(value: number): Bool
  CancelQuestFailsafe(): void
  StartTimeoutFailsafe(): void
  CancelTimeoutFailsafe(): void
  SetTalkingTrigger(isPlayerCalling: Bool, state: questPhoneTalkingState): void
  GetIncomingContact(): JournalContact
  OnElementStateChanged(widget: inkWidget, oldState: CName, newState: CName): Bool
  SetPhoneFunction(newFunction: EHudPhoneFunction): void
}

declare interface PhoneTimeoutRequest extends ScriptableSystemRequest {

}

declare interface HudPhoneMessageController extends HUDPhoneElement {

  GetNumElementsInQueue(): number
  ClearQueue(): void
  Enqueue(element: JournalPhoneMessage): void
  Dequeue(): void
  ShowMessage(messageToShow: JournalPhoneMessage): void
  OnStateChanged(widget: inkWidget, oldState: CName, newState: CName): Bool
  CheckIfReadyToDequeue(): void
  OnDequeue(message: JournalPhoneMessage): void
  StopAllAnimations(): void
  OnAnimationFinished(anim: inkAnimProxy): Bool
  Dismiss(): void
  Pause(): void
  Unpause(): void
  GetCurrentMessage(): JournalPhoneMessage
}

declare interface IncomingCallGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  GetIncomingContact(phoneCallInfo: PhoneCallInformation): JournalContact
  OnPhoneCall(value: Variant): Bool
}

declare interface MessageCounterController extends inkGameController {

  OnInitialize(): Bool
  OnUnitialize(): Bool
  UpdateData(): void
  OnJournalUpdate(entryHash: number, className: CName, notifyOption: JournalNotifyOption, changeType: JournalChangeType): Bool
}

declare interface PhoneContactItemVirtualController extends inkVirtualCompoundItemController {

  GetContactData(): ContactData
  OnInitialize(): Bool
  OnDataChanged(value: Variant): Bool
  OnSelected(itemController: inkVirtualCompoundItemController, discreteNav: Bool): Bool
  OnDeselected(itemController: inkVirtualCompoundItemController): Bool
}

declare interface DialerContactDataView extends ScriptableDataView {

  Setup(): void
  SortItem(left: IScriptable, right: IScriptable): Bool
  FilterItem(data: IScriptable): Bool
}

declare interface DialerContactTemplateClassifier extends inkVirtualItemTemplateClassifier {

  ClassifyItem(data: Variant): number
}

declare interface PhoneDialerDelayedInit extends Event {

}

declare interface PhoneDialerGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnScrollChanged(value: Vector2): Bool
  OnPhoneStateChanged(value: Bool): Bool
  InitVirtualList(): void
  CleanVirtualList(): void
  OnItemSelected(previous: inkVirtualCompoundItemController, next: inkVirtualCompoundItemController): Bool
  Show(): void
  Hide(): void
  OnHideAnimFinished(proxy: inkAnimProxy): Bool
  PopulateData(): void
  OnPhoneDialerDelayedInit(evt: PhoneDialerDelayedInit): Bool
  CallSelectedContact(): void
  CloseContactList(): void
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
  GotoMessengerMenu(): void
}

declare interface scannerGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUnitialize(): Bool
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  OnBraindanceToggle(value: Bool): Bool
  ConnectToPlayerRelatedBlackboards(playerPuppet: GameObject): void
  DisconnectFromPlayerRelatedBlackboards(playerPuppet: GameObject): void
  OnWeaponSwap(value: Variant): Bool
  CreateAnimationTemplates(): void
  ShowScanBorder(val: Bool): void
  PlaySound(SoundEffect: CName): void
  ShowScanner(show: Bool): void
  OnScannedObjectChanged(val: EntityID): Bool
  OnStateChanged(val: Variant): Bool
  OnObjectData(val: Variant): Bool
  OnIsEnabledChange(val: number): Bool
  AddQuestData(cat: CName, entry: CName, recordID: TweakDBID): void
  OnProgressChange(val: number): void
  OnScannablesChange(val: Variant): void
}

declare interface scannerBorderLogicController extends inkLogicController {

  SetBraindanceMode(isBraindance: Bool): void
}

declare interface scannerQuestEntry {

}

declare interface scannerBorderGameController extends inkProjectedHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  PlayLockAnimation(showAnim: Bool): void
  ComputeVisibility(): void
  OnScreenProjectionUpdate(projections: gameuiScreenProjectionsData): Bool
  OnObjectPositionChange(pos: number): Bool
  OnPSMVisionStateChanged(value: number): Bool
  OnExclusiveFocus(isExclusiveFocus: Bool): Bool
  OnScannerZoom(argZoom: number): Bool
  OnProgressChange(val: number): Bool
  ShouldShowScanner(): Bool
  GetOwner(): GameObject
  OnProgressBarFluffTextChange(val: string): Bool
  OnStateChanged(val: Variant): Bool
  OnScannedObject(val: EntityID): Bool
  OnScannerObjectStats(val: Variant): Bool
  ShouldShowScanner(currentTargetObject: GameObject): Bool
  GetHudManager(): HUDManager
}

declare interface ScannerCrosshairLogicController extends inkLogicController {

  OnInitialize(): Bool
  CreateProjectionData(): inkScreenProjectionData
  GetProjection(): inkScreenProjection
  SetProjection(projection: inkScreenProjection): void
  SetEntity(entityObject: Entity): void
  UpdateProjection(): void
}

declare interface VendorItemVirtualController extends inkVirtualCompoundItemController {

  OnDataChanged(value: Variant): void
  OnSpawned(widget: inkWidget, userData: IScriptable): Bool
}

declare interface ScannerQuestClue extends inkLogicController {

  Setup(questEntry: scannerQuestEntry): void
}

declare interface ScannerWeakspot extends inkLogicController {

}

declare interface ScannerHintInkGameController extends inkGameController {

  OnInitialize(): Bool
  GetOwner(): GameObject
  RegisterBlackboardCallbacks(): void
  OnShowMessege(value: Bool): Bool
  OnMessegeUpdate(value: string): Bool
  OnVisionModeChanged(value: number): Bool
}

declare interface scannerDetailsGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUnitialize(): Bool
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnQuickhackStarted(value: Bool): Bool
  OnScannedObjectChanged(value: EntityID): Bool
  OnObjectTypeChanged(value: number): Bool
  OnQHDescriptionChanged(value: Bool): Bool
  OnStateChanged(val: Variant): Bool
  RefreshLayout(): void
  BreakAniamtions(): void
  PlayCloseScannerAnimation(): void
  ToggleDescriptionAnimation(value: Bool): void
  SetupToggleVisibility(): void
  OnScannerDetailsHidden(animationProxy: inkAnimProxy): Bool
  OnScannerDetailsShown(animationProxy: inkAnimProxy): Bool
  OnDescriptionTransitionFinish(animationProxy: inkAnimProxy): Bool
  OnFitToContentRest(evt: FitToContetDelay): Bool
  ConvertActorTypeToObjectType(actorType: HUDActorType): ScannerObjectType
}

declare interface FitToContetDelay extends Event {

}

declare interface NPCAbility {

}

declare interface ScannerSkillCheckLogicController extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  Setup(skillCheckInfo: UIInteractionSkillCheck[]): void
  CreateSkillCheckObject(): inkWidget
}

declare interface ScannerSkillCheckItemLogicController extends inkLogicController {

  OnUninitialize(): Bool
  Setup(skillCheck: UIInteractionSkillCheck): void
  CreateConditionDataObject(): inkWidget
  ConstructName(skillCheck: UIInteractionSkillCheck): void
}

declare interface ScannerSkillCheckConditionDataItemLogicController extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  Setup(conditionData: ConditionData, parentOperator: ELogicOperator): void
  CreateConditionDescriptionObject(): inkWidget
  ConstructTexts(ownOperator: ELogicOperator, parentOperator: ELogicOperator, passed: number, total: number): void
}

declare interface ScannerSkillCheckConditionDescriptionLogicController extends inkLogicController {

  Setup(condition: Condition): void
}

declare interface ScannerSquadInfo extends ScannerChunk {

  GetType(): ScannerDataType
}

declare interface QuickHackDataEvent extends Event {

}

declare interface ScannerDescription extends ScannerChunk {

  GetDefaultDescription(): string
  GetCustomDescriptions(): string[]
  Set(defaultDesc: string, customDesc?: string[]): void
  GetType(): ScannerDataType
}

declare interface VehicleListItemData extends IScriptable {

}

declare interface RadioStationsDataView extends ScriptableDataView {

  SortItem(left: IScriptable, right: IScriptable): Bool
  FilterItem(data: IScriptable): Bool
}

declare interface RadioListItemData extends IScriptable {

}

declare interface VehicleRadioPopupGameController extends BaseModalListPopupGameController {

  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnDelayInitPopupGameController(evt: DelayInitPopupGameController): Bool
  OnScrollChanged(value: Vector2): Bool
  Select(previous: inkVirtualCompoundItemController, next: inkVirtualCompoundItemController): void
  SetupVirtualList(): void
  CleanVirtualList(): void
  SetupData(): void
  Activate(): void
  OnClose(): void
}

declare interface RadioStationListItemController extends inkVirtualCompoundItemController {

  GetStationData(): RadioListItemData
  OnInitialize(): Bool
  OnDataChanged(value: Variant): Bool
  OnSelected(itemController: inkVirtualCompoundItemController, discreteNav: Bool): Bool
  OnDeselected(itemController: inkVirtualCompoundItemController): Bool
}

declare interface VehiclesManagerDataHelper extends IScriptable {

  /** @noSelf **/
  GetVehicles(player: GameObject): IScriptable[]
  /** @noSelf **/
  GetRadioStations(player: GameObject): IScriptable[]
  /** @noSelf **/
  PushRadioStationData(result: IScriptable[], record: RadioStation_Record): void
}

declare interface VehicleRadioLogicController extends inkLogicController {

  OnUninitialize(): Bool
  StopSound(): void
}

declare interface ScannerQuickHackDescription extends ScannerChunk {

  GetCurrrentQuickHackData(): QuickhackData
  Set(vehInfo: QuickhackData): void
  GetType(): ScannerDataType
}

declare interface VehiclesManagerDataView extends ScriptableDataView {

  SortItem(left: IScriptable, right: IScriptable): Bool
  FilterItem(data: IScriptable): Bool
}

declare interface VehiclesManagerPopupGameController extends BaseModalListPopupGameController {

  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnScrollChanged(value: Vector2): Bool
  Select(previous: inkVirtualCompoundItemController, next: inkVirtualCompoundItemController): void
  SetupVirtualList(): void
  CleanVirtualList(): void
  SetupData(): void
  Activate(): void
}

declare interface VehiclesManagerListItemController extends inkVirtualCompoundItemController {

  GetVehicleData(): VehicleListItemData
  OnInitialize(): Bool
  OnDataChanged(value: Variant): Bool
  OnSelected(itemController: inkVirtualCompoundItemController, discreteNav: Bool): Bool
  OnDeselected(itemController: inkVirtualCompoundItemController): Bool
}

declare interface WarningMessageGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUnitialize(): Bool
  OnWarningMessageUpdate(value: Variant): Bool
  UpdateWidgets(): void
  SetTimeout(value: number): void
  OnTimeout(anim: inkAnimProxy): Bool
  OnShown(anim: inkAnimProxy): Bool
  OnBlinkAnimation(anim: inkAnimProxy): Bool
  OnHidden(anim: inkAnimProxy): Bool
  TriggerBlinkAnimation(): void
  CreateAnimations(): void
}

declare interface ScannerNPCHeaderGameController extends BaseChunkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnNameChanged(value: Variant): Bool
  OnLevelChanged(value: Variant): Bool
  OnAttitudeChange(value: Variant): Bool
  OnArchetypeChanged(value: Variant): Bool
  UpdateGlobalVisibility(): void
}

declare interface ListChoiceData {

}

declare interface ListChoiceHubData {

}

declare interface ScannerDeviceHeaderGameController extends BaseChunkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnDeviceStatusChange(value: Variant): Bool
  OnNameChanged(value: Variant): Bool
  OnNetworkStatusChanged(value: Variant): Bool
  OnNetworkLevelChanged(value: Variant): Bool
  OnAttitudeChange(value: Variant): Bool
  UpdateGlobalVisibility(): void
}

declare interface DialogHubPostInitializeEvent extends Event {

}

declare interface InteractionChoiceData {

}

declare interface hudButtonReminderGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnPlayerAttach(playerGameObject: GameObject): Bool
  OnPlayerDetach(playerGameObject: GameObject): Bool
  RegisterPSMListeners(playerPuppet: GameObject): void
  UnregisterPSMListeners(playerPuppet: GameObject): void
  OnRedrawText_1(argValue: string): void
  OnRedrawIcon_1(argValue: CName): void
  OnRedrawText_2(argValue: string): void
  OnRedrawIcon_2(argValue: CName): void
  OnRedrawText_3(argValue: string): void
  OnRedrawIcon_3(argValue: CName): void
  OnInteractingWithDevice(value: Bool): Bool
}

declare interface VisualizersInfo {

}

declare interface ScannerNPCBodyGameController extends BaseChunkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnFactionChanged(value: Variant): Bool
  OnRarityChanged(value: Variant): Bool
  UpdateGlobalVisibility(): void
}

declare interface ScannerDeviceBodyGameController extends BaseChunkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnNetworkStatusChanged(value: Variant): Bool
  OnDeviceAuthorizationChanged(value: Variant): Bool
  UpdateGlobalVisibility(): void
}

declare interface ScannerBountySystemGameController extends BaseChunkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnBountySystemChanged(value: Variant): Bool
  ProcessBountyTutorial(): void
  OnHealthChanged(value: Variant): Bool
  OnObjectTypeChanged(value: number): Bool
  IsNPC(): Bool
  UpdateGlobalVisibility(): void
}

declare interface InteractionsHubGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnRefreshTooltipEvent(e: RefreshTooltipEvent): Bool
  OnTooltipRequest(e: inkWidget): Bool
}

declare interface TooltipProvider extends inkLogicController {

  ClearTooltipData(): void
  PushData(data: ATooltipData): void
  AddData(data: ATooltipData): void
  RefreshTooltips(): void
  HasTooltipData(index: number): Bool
  HasAnyTooltipData(): Bool
  GetTooltipData(index: number): ATooltipData
  GetTooltipsData(): ATooltipData[]
}

declare interface RefreshTooltipEvent extends Event {

}

declare interface InteractionsInputView extends inkLogicController {

  Setup(visible: Bool, currentNum: number, allItemsNum: number, hasAbove: Bool, hasBelow: Bool): void
  Setup(currentNum: number, allItemsNum: number, hasAbove: Bool, hasBelow: Bool): void
  SetVisible(visible: Bool): void
  ShowArrows(show: Bool): void
  RefreshView(): void
  SetInputButton(inputPartName: CName): void
  ResetInputButton(): void
}

declare interface ScannerVulnerabilitiesGameController extends BaseChunkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnVulnerabilitiesChanged(value: Variant): Bool
  UpdateGlobalVisibility(): void
}

declare interface ScannerVulnerabilityItemLogicController extends inkLogicController {

  Setup(val: Vulnerability): void
}

declare interface ScannerAbilitiesGameController extends BaseChunkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnAbilitiesChanged(value: Variant): Bool
  UpdateGlobalVisibility(): void
}

declare interface ScannerAbilityItemLogicController extends inkLogicController {

  Setup(val: GameplayAbility_Record): void
}

declare interface interactionWidgetGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnLastAttemptedChoice(value: Variant): Bool
  GetOwner(): GameObject
  OnUpdateInteraction(argValue: Variant): Bool
  GetSkillchecks(choiceHubData: InteractionChoiceHubData): UIInteractionSkillCheck[]
  GetSkillcheck(choice: InteractionChoiceData, skillcheck: UIInteractionSkillCheck): Bool
  OnZoneChange(value: number): Bool
  OnChangeActiveVisualizer(value: Variant): Bool
  UpdateVisibility(): void
}

declare interface interactionItemLogicController extends inkLogicController {

  OnInitialize(): Bool
  SetData(data: InteractionChoiceData, skillCheck?: UIInteractionSkillCheck): void
  SetButtonVisibility(argBool: Bool): void
  SetZoneChange(value: number): void
  SetLabel(data: InteractionChoiceData): void
  SetCaptionParts(argList: InteractionChoiceCaptionPart[]): void
  EmptyCaptionParts(): void
  SetIllegalActionOpacity(opacity: number): void
  PlayAnim(animName: CName): void
}

declare interface IVisualizerTimeProvider extends IScriptable {

  GetCurrentProgress(): number
  GetDuration(): number
}

declare interface DialogChoiceTimerController extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  StartProgressBarAnim(timeDuration: number, timedProgress?: number): void
  SetTime(): void
  OnTimerEndLoop(proxy: inkAnimProxy): Bool
  OnMenuVisibilityChange(isMenuVisible: Bool): void
  SetupAnimation(): void
}

declare interface ScannerResistancesGameController extends BaseChunkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnResistancesChanged(value: Variant): Bool
  UpdateGlobalVisibility(): void
}

declare interface ScannerDescriptionGameController extends BaseChunkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnDescriptionChanged(value: Variant): Bool
  UpdateGlobalVisibility(): void
}

declare interface ScannerRequirementsGameController extends BaseChunkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnRequirementsChanged(value: Variant): Bool
  UpdateGlobalVisibility(): void
}

declare interface ScannerRequirementItemLogicController extends inkLogicController {

  Setup(val: UIInteractionSkillCheck): void
}

declare interface dialogWidgetGameController extends InteractionUIBase {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  UpdateDialogsData(data: DialogChoiceHubs): void
  OnDialogsActivateHub(activeHubId: number): Bool
  OnDialogsSelectIndex(index: number): Bool
  OnInteractionsChanged(): void
  UpdateDialogFocusInputHint(show: Bool): void
  AdjustHubsCount(count: number): void
  CloseDelayed(hudController: DialogHubLogicController): void
  OnFinish(proxy: inkAnimProxy): Bool
  OnMenuVisibilityChange(isMenuVisible: Bool): Bool
}

declare interface DialogHubLogicController extends inkLogicController {

  OnInitialize(): Bool
  OnMenuVisibilityChange(isMenuVisible: Bool): void
  SetData(value: ListChoiceHubData, isSelected: Bool, selectedInd: number, hasAboveElements: Bool, hasBelowElements: Bool, currentNum: number, argTotalCountAcrossHubs: number): void
  FadeOutItems(fadeOutTime: number): void
  GetId(): number
  OverrideInputButton(overrideButton: Bool): void
  WasTimed(): Bool
  SetupTimeBar(isActive: Bool, timedDuration: number, timedProgress: number): void
  SetupTitle(title: string, isActive: Bool, isPossessed: Bool): void
}

declare interface DialogChoiceLogicController extends inkLogicController {

  OnInitialize(): Bool
  SetText(value: string, isFailed: Bool): void
  SetDedicatedInput(value: CName): void
  SetIsPhoneLockActive(value: Bool): void
  SetType(value: ChoiceTypeWrapper): void
  SetSelected(isSelected: Bool): void
  SetData(currentNum: number, allItemsNum: number, hasAbove: Bool, hasBelow: Bool): void
  OverrideInputButton(overrideButton: Bool): void
  FadeOut(fadeOutTime: number): void
  SetFadingState(isFading: Bool, timedDuration: number, timedProgress: number, progressBar: inkWidget): void
  Fade(startValue: number, endValue: number, fadeOutTime: number): void
  ResizeCaptionParts(newSize: number): void
  SetCaptionParts(argList: InteractionChoiceCaptionPart[]): void
  UpdateView(): void
  UpdateColors(): void
  SetDimmed(value: Bool): void
  SetButtonPromptTextureFromHub(value: CName): void
  AnimateSelection(): void
}

declare interface CaptionImageIconsLogicController extends inkLogicController {

  OnInitialize(): Bool
  ShouldShowFluffIcon(): Bool
  SetSelectedColor(backgroundColor: CName, iconColor: CName): void
  SetGenericIcon(iconRecord: ChoiceCaptionIconPart_Record): void
  SetLifePath(argData: LifePathBluelinePart): void
  SetSkillCheck(argData: BuildBluelinePart): void
  SetPaymentCheck(argData: PaymentBluelinePart): void
  HideAllHolders(): void
}

declare interface ScannerQuestCluesGameController extends BaseChunkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnScannerDataChange(val: Variant): Bool
  OnQuestCluesChanged(value: Variant): Bool
  Refresh(): void
  UpdateGlobalVisibility(): void
}

declare interface MinimalLootingListItemData extends IScriptable {

}

declare interface LootingListItemController extends inkLogicController {

  OnInitialize(): Bool
  SetData(tooltipData: ATooltipData): void
  SetData(tooltipData: ATooltipData, isSelected: Bool): void
  GetDPSDiff(tooltipData: InventoryTooltipData): number
  Setup(tooltipData: InventoryTooltipData, force?: Bool): void
  Setup(lootingData: MinimalLootingListItemData, force?: Bool): void
  SetData(data: MinimalLootingListItemData): void
  SetData(data: MinimalLootingListItemData, isSelected: Bool): void
  GetTooltipData(): InventoryTooltipData
  RefreshUI(): void
  UpdateIcon(): void
  UpdateItemName(): void
  UpdateRarity(): void
  UpdateQuantity(): void
  UpdateLootIcon(): void
  SetHighlighted(value: Bool): void
}

declare interface ScannervehicleGameController extends BaseChunkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnVehicleNameChanged(value: Variant): Bool
  OnVehicleManufacturerChanged(value: Variant): Bool
  OnVehicleProdYearsChanged(value: Variant): Bool
  OnVehicleeDriveLayoutChanged(value: Variant): Bool
  OnVehicleHorsepowerChanged(value: Variant): Bool
  OnVehicleMassChanged(value: Variant): Bool
  OnVehicleStateChanged(value: Variant): Bool
  OnVehicleInfoChanged(value: Variant): Bool
  UpdateGlobalVisibility(): void
}

declare interface QuickHackDescriptionGameController extends BaseChunkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnQuickHackDataChanged(value: Variant): Bool
  SetupTier(): void
  SetupDuration(): void
  SetupMaxCooldown(): void
  SetupUploadTime(): void
  SetupMemotyCost(): void
  SetupCategory(): void
  IsDamageStat(targetStat: gamedataStatType, valueStat: gamedataStatType): Bool
  SetupDamage(): void
}

declare interface NetRunnerChargesGameController extends inkGameController {

  OnInitialize(): Bool
  OnUnitialize(): Bool
  SetupBB(): void
  RemoveBB(): void
  OnNetrunnerChargesUpdated(value: number): Bool
  Show(): void
  Hide(): void
}

declare interface NetRunnerListItem extends inkLogicController {

  OnInitialize(): Bool
  ShowHighlight(): void
  HideHighlight(): void
}

declare interface InventoryCyberwareDisplayController extends InventoryItemDisplayController {

  Unselect(): void
  Select(): void
  SetAmountOfNewItem(amount: number): void
}

declare interface InventoryItemsList extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  PrepareInventory(player: PlayerPuppet): void
  PrepareInventory(player: PlayerPuppet, owner: GameObject): void
  ShowInventory(items: gameItemData[]): void
  CreateInventoryDisplay(): inkWidget
  SetupItemDisplay(itemDisplay: inkWidget, itemData: gameItemData): void
  DeleteItemDisplay(itemDisplay: inkWidget): void
  OnButtonClick(controller: inkButtonController): Bool
  OnItemClicked(e: inkWidget): void
  GetTooltipsData(): ATooltipData[]
  OnInventoryItemEnter(e: inkWidget): Bool
  RefreshTooltips(tooltipItemData: InventoryItemData, equippedItemData: InventoryItemData): void
  TooltipDataPostProcess(): void
  OnInventoryItemExit(e: inkWidget): Bool
}

declare interface InventoryItemDisplay extends BaseButtonView {

  OnInitialize(): Bool
  Setup(itemData: InventoryItemData, ownerEntity?: Entity): void
  RefreshUI(): void
  SetItemSize(): void
  SetRarity(quality: CName): void
  SetQuantity(itemQuantity: number): void
  GetShapeSize(shapeType: EInventoryItemShape): Vector2
  SetShape(shapeType: EInventoryItemShape): void
  UpdateIcon(): void
  ShowMods(attachements: InventoryItemAttachments[]): void
  SetEquippedState(equipped: Bool): void
  SelectItem(): void
  UnselectItem(): void
  ButtonStateChanged(oldState: inkEButtonState, newState: inkEButtonState): void
  OnButtonClick(controller: inkButtonController): Bool
  Mark(index: number): void
  PlayIntroAnimation(delay: number, duration: number): void
  GetItemData(): InventoryItemData
  GetWidgetForTooltip(): inkWidget
}

declare interface WidgetsPoolItemSpawnData extends IScriptable {

}

declare interface ItemsPoolItemSpawnData extends IScriptable {

}

declare interface ItemsPoolCachedData extends IScriptable {

}

declare interface LootingGameController extends inkGameController {

  OnInitialize(): Bool
  OnUnitialize(): Bool
  RegisterToBB(): void
  UnregisterFromBB(): void
  SetShouldHideClampedMappins(flag: Bool): void
  OnWeaponDataChanged(value: Variant): Bool
  IsUpdateRequired(newData: LootData): Bool
  OnUpdateData(value: Variant): Bool
  OnActivateHub(activeHubId: number): Bool
}

declare interface LootingController extends inkLogicController {

  OnInitialize(): Bool
  SetDataManager(dataManager: InventoryDataManagerV2): void
  SetGameInstance(gameInstance: GameInstance): void
  SetActiveWeapon(weapon: InventoryItemData): void
  CycleSelectedItem(): void
  Show(): void
  Hide(): void
  ShowLockedStatus(islokced: Bool): void
  IsShown(): Bool
  RefreshComparisonData(): void
  RefreshChoicesPool(choices: InteractionChoiceData[]): void
  OnWidgetsPoolItemSpawned(widget: inkWidget, userData: IScriptable): Bool
  RefreshItemsPool(totalItems: number, visibleItems: number): void
  OnItemsPoolItemSpawned(widget: inkWidget, userData: IScriptable): Bool
  RefreshItemsData(data: LootData, visibleItems: number, totalItems: number, lastIndex: number): void
  UpdateIndexedWidgetData(index: number): void
  GetMinimalLootingData(itemData: gameItemData, itemRecord: Item_Record, equipmentArea: gamedataEquipmentArea, comparisionItemData: gameItemData): MinimalLootingListItemData
  SetLootData(data: LootData): void
  GetShardData(itemTDBID: TweakDBID): JournalOnscreen
  GetShardData(itemRecord: Item_Record): JournalOnscreen
  FilterOutEmptyItems(items: InventoryItemData[]): InventoryItemData[]
  FilterComparableItems(itemToCompare: ItemID, items: InventoryItemData[]): InventoryItemData[]
  GetPrefferedComparisonItem(item: InventoryItemData): InventoryItemData
  GetCurrentlyEquippedComparisonItem(equipmentArea: gamedataEquipmentArea): InventoryItemData
  GetCurrentlyEquippedComparisonItemID(equipmentArea: gamedataEquipmentArea): ItemID
  GetComparisonTooltipData(inspectedItem: InventoryItemData, itemToCompareWith: InventoryItemData): InventoryTooltipData
  GetPrefferedComparisonTooltipData(item: InventoryItemData): InventoryTooltipData
  GetCurrentlyUsedComparisonTooltipData(item: InventoryItemData): InventoryTooltipData
  GetItemForComparison(inspectedItem: InventoryItemData): InventoryItemData
  GetItemIDForComparison(item: gameItemData, itemRecord: Item_Record, equipmentArea: gamedataEquipmentArea): ItemID
  GetPureItemForComparison(inspectedItem: InventoryItemData): InventoryItemData
  GetPureItemForComparison(item: gameItemData, itemRecord: Item_Record, equipmentArea: gamedataEquipmentArea): InventoryItemData
  RefreshTooltips(): void
  GetTooltipMinimalData(lootingOwner: GameObject): MinimalItemTooltipData
  SetDialogOpen(isDialogOpen: Bool): void
}

declare interface TooltipLootingCachedData extends IScriptable {

}

declare interface InventoryComboBoxContentController extends inkLogicController {

}

declare interface InventoryComboBoxData {

}

declare interface InventoryComboBoxItemsList extends inkLogicController {

}

declare interface InventoryCyberwareDetails extends inkLogicController {

}

declare interface InventoryCyberwareItemChooser extends InventoryGenericItemChooser {

  GetDisplayToSpawn(): CName
  GetIntroAnimation(): CName
  GetSlots(): InventoryItemAttachments[]
  RefreshSelectedItem(): void
  RequestClose(): Bool
  RebuildSlots(): void
  GetFirstEmptySlotIndex(slots: InventoryItemAttachments[]): number
  RefreshMainItem(): void
  GetModifiedItemData(): InventoryItemData
  GetModifiedItemID(): ItemID
}

declare interface InventoryEquipmentSlot extends inkLogicController {

  OnInitialize(): Bool
  SetDisableSlot(disableSlot: Bool): void
  Setup(itemData: InventoryItemData, equipmentArea: gamedataEquipmentArea, slotName?: string, slotIndex?: number, ownerEntity?: Entity): void
  Show(): void
  Clear(): void
  RefreshUI(): void
  SetShape(shapeType: EInventoryItemShape): void
  Select(): void
  Unselect(): void
  GetItemData(): InventoryItemData
  GetSlotWidget(): inkWidget
  GetCustomizeWidget(): inkWidget
  GetEquipmentArea(): gamedataEquipmentArea
  GetEquipmentAreaEnumToInt(): number
  GetSlotIndex(): number
  GetSlotName(): string
  IsEmpty(): Bool
}

declare interface InventoryFilterButton extends BaseButtonView {

  Setup(text: string, input: CName, framesDelay: number): void
  Setup(text: string, input: CName): void
  PlayIntroAnimation(framesDelay: number): void
}

declare interface LootingItemController extends inkLogicController {

  SetIcon(itemData: InventoryItemData): void
  SetData(itemData: ItemViewData, isCurrentlySelected: Bool): void
  SetText(text: string): void
}

declare interface LootingScrollBlockController extends IScriptable {

}

declare interface EquipmentAreaCategoryCreated extends Event {

}

declare interface InventoryItemDisplayCategoryArea extends inkLogicController {

  OnInitialize(): Bool
  SetNewItemsCounter(value: number): void
  GetAreasToHide(): inkWidgetRef[]
  GetCategoryAreas(): InventoryItemDisplayEquipmentArea[]
}

declare interface InventoryItemDisplayEquipmentArea extends inkLogicController {

  /** @noSelf **/
  GetEquipmentAreaByName(categoryName: string): gamedataEquipmentArea
  GetNumberOfSlots(): number
  GetEquipmentAreas(): gamedataEquipmentArea[]
}

declare interface EventEquipSlotSelectDelayedInventoryEvent extends Event {

}

declare interface EventInventorySlotSelectDelayedInventoryEvent extends Event {

}

declare interface gameuiInventoryGameController extends gameuiMenuGameController {

  OnInitialize(): Bool
  OnSetUserData(userData: IScriptable): Bool
  SetDeckData(): void
  OnCyberdeckClick(evt: inkPointerEvent): Bool
  OnItemChooserItemChanged(e: ItemChooserItemChanged): Bool
  HandlePostInitializeQueue(): void
  OnUninitialize(): Bool
  RegisterToBB(): void
  UnregisterFromBB(): void
  SetupPlayerStats(player: PlayerPuppet, game: GameInstance): void
  UpdateDropdownContext(context: DropdownDisplayContext): void
  OnDropdownItemClickedEvent(evt: DropdownItemClickedEvent): Bool
  OnSortingButtonClicked(evt: inkPointerEvent): Bool
  GetEquipmentAreas(iw: inkCompoundWidget, levels: number): inkCompoundWidget[]
  OnRefreshUI(value: Variant): Bool
  RefreshUI(): void
  RefreshedEquippedItemData(equippedItem: InventoryItemData): void
  OnDisassembleComplete(value: Variant): Bool
  SwapMode(mode: InventoryModes): void
  OpenDefaultMode(openingMenu?: Bool): void
  GetEquipementAreaDisplays(equipmentArea: gamedataEquipmentArea): EquipmentAreaDisplays
  GetEquipmentCategory(equipmentCategory: InventoryItemDisplayCategoryArea): EquipmentAreaCategory
  GetEquipmentCategoryByArea(equipmentArea: gamedataEquipmentArea): EquipmentAreaCategory
  GetEquipmentAreaDisplaysFromCategory(equipmentAreas: gamedataEquipmentArea[], categoryArea: EquipmentAreaCategory): EquipmentAreaDisplays
  GetSlotType(areaTypes: gamedataEquipmentArea[]): CName
  IsEquipmentAreaCyberware(itemData: InventoryItemData): Bool
  OnEquipmentAreaCategoryCreated(e: EquipmentAreaCategoryCreated): Bool
  CountNewItems(items: ItemID[]): number
  IsAreaLockedByOutfit(equipmentArea: gamedataEquipmentArea): Bool
  PopulateArea(targetRoot: inkCompoundWidget, container: EquipmentAreaDisplays, numberOfSlots: number, equipmentAreas: gamedataEquipmentArea[]): void
  OnBack(userData: IScriptable): Bool
  UpdateNewItemsIndicators(): void
  OnCloseMenu(userData: IScriptable): Bool
  IsUnequipBlocked(itemID: ItemID): Bool
  OnEquipmentClick(evt: inkPointerEvent): Bool
  NotifyItemUpdate(equipmentArea?: gamedataEquipmentArea, slotIndex?: number, hotkey?: EHotkey): void
  ShowNotification(gameInstance: GameInstance, type: UIMenuNotificationType): void
  OnInventoryClick(evt: inkPointerEvent): Bool
  OnInventoryHold(evt: inkPointerEvent): Bool
  OnOpenInventoryQuantityPickerRequest(request: OpenInventoryQuantityPickerRequest): Bool
  OpenQuantityPicker(itemData: InventoryItemData, actionType: QuantityPickerActionType, local?: Bool): void
  OnLocalQuantityPickerPopupClosed(data: inkGameNotificationData): Bool
  OnQuantityPickerDisassembly(data: QuantityPickerPopupCloseData): void
  OnQuantityPickerPopupClosed(data: inkGameNotificationData): Bool
  OpenItemMode(controller: InventoryItemDisplayController): void
  IsItemACyberdeck(controller: InventoryItemDisplayController): Bool
  OnInventoryItemHoverOver(evt: inkPointerEvent): Bool
  OnSelectedItemDelayedEvent(evt: EventInventorySlotSelectDelayedInventoryEvent): Bool
  OnInventoryItemHoverOut(evt: inkPointerEvent): Bool
  OnEquipmentSlotHoverOver(evt: inkPointerEvent): Bool
  OnSelectedSlotDelayedEvent(evt: EventEquipSlotSelectDelayedInventoryEvent): Bool
  OnEquipmentSlotHoverOut(evt: inkPointerEvent): Bool
  UnequipItem(controller: InventoryItemDisplayController, itemData: InventoryItemData): void
  EquipItem(itemData: InventoryItemData): void
  OnInventoryItemHoverOver(itemData: InventoryItemData, target: inkWidget): void
  ShowTooltipsForItemData(equippedItem: InventoryItemData, inspectedItemData: InventoryItemData, target: inkWidget): void
  HideTooltips(): void
  SetInventoryItemButtonHintsHoverOver(displayingData: InventoryItemData): void
  SetInventoryItemButtonHintsHoverOut(): void
  SetEquipmentSlotButtonHintsHoverOver(controller: InventoryItemDisplayController): void
  SetEquipmentSlotButtonHintsHoverOut(): void
  StartModeTransitionAnimation(controller?: InventoryItemDisplayController): void
  ZoomCamera(target: number): void
  GetVisibleSlots(slotToSkip?: InventoryItemDisplayController): InventoryItemDisplayController[]
  GetVisibleAdditionalWidgets(): inkWidget[]
  PlayGearToItemModeAnimation(moveAnimation: CName, hideAnimation: CName, target: InventoryItemDisplayController, itemToHide: InventoryItemDisplayController[]): void
  PlayMoveAnimation(target: InventoryItemDisplayController): void
  GetZoomArea(equipmentArea: gamedataEquipmentArea): InventoryPaperdollZoomArea
  GetEquipmentAreaPaperdollLocation(equipmentArea: gamedataEquipmentArea): PaperdollPositionAnimation
  PlayShowHideAnimation(visible: Bool, slotToShow?: InventoryItemDisplayController): void
  PlayShowHideItemChooserAnimation(visible: Bool): void
  PlaySlidePaperdollAnimation(position: PaperdollPositionAnimation, hide?: Bool): void
  OnItemModeItemChanged(e: ItemModeItemChanged): Bool
  InvlidateAllClothes(): void
  PlayAnim(anim: CName, callbackFunction: CName): void
  OnDefaultToItemModeComplete(anim: inkAnimProxy): Bool
  OnItemtoDefaultModeComplete(anim: inkAnimProxy): Bool
  OnItemModeFadeInComplete(anim: inkAnimProxy): Bool
  OnItemModeFadeOutComplete(anim: inkAnimProxy): Bool
  OnDefaultModeFadeInComplete(anim: inkAnimProxy): Bool
  OnDefaultModeFadeOutComplete(anim: inkAnimProxy): Bool
  GetAttachmentDataForInventoryItem(itemData: InventoryItemData, boxData: InventoryComboBoxData[], allowUnequip: Bool): void
  GetAttachmentDataForCustomizeFromInventory(inspectedItemData: InventoryItemData, equipmentData: InventoryItemData[], boxData: InventoryComboBoxData[]): void
  OnSetMenuEventDispatcher(menuEventDispatcher: inkMenuEventDispatcher): Bool
  GetSlotNameFromEqArea(area: gamedataEquipmentArea): string
  GetInventoryItemControllerFromTarget(evt: inkPointerEvent): InventoryItemDisplay
  GetEquipmentSlotControllerFromTarget(evt: inkPointerEvent): InventoryItemDisplayController
  IsAnEquipmentArea(equipmentArea: gamedataEquipmentArea): Bool
  GetFirstAvailableWeaponSlot(): number
  GetAssociatedCategory(controller: InventoryItemDisplayController): InventoryItemDisplayController[]
  GetSide(controller: InventoryItemDisplayController): Bool
  GetTooltipPlacement(controller: InventoryItemDisplayController): gameuiETooltipPlacement
  GetCategoryHeader(controller: InventoryItemDisplayController): string
}

declare interface InventoryItemModeLogicController extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  RegisterBlackboard(): void
  UnregisterBlackboard(): void
  SetSortMode(identifier: ItemSortMode): void
  OnItemEquiped(value: Variant): Bool
  OnItemModUpdatedEquiped(value: Variant): Bool
  OnItemChooserItemChanged(e: ItemChooserItemChanged): Bool
  SetEquipmentArea(equipmentArea: gamedataEquipmentArea): void
  SetupData(buttonHints: ButtonHints, tooltipsManager: gameuiTooltipsManager, inventoryManager: InventoryDataManagerV2, player: PlayerPuppet): void
  SetupMode(controller: InventoryItemDisplayController, dataSource: InventoryDataManagerV2, inventoryController?: gameuiInventoryGameController): void
  RequestClose(): Bool
  SetTranslation(translation: Vector2): void
  CreateItemChooser(controller: InventoryItemDisplayController, dataSource: InventoryDataManagerV2): InventoryGenericItemChooser
  SetupFiltersToCheck(equipmentArea: gamedataEquipmentArea): void
  CreateFilterButtons(targetWidget: inkCompoundRef, equipmentArea?: gamedataEquipmentArea): void
  SelectFilterButton(targetFilter: ItemFilterCategory): void
  GetFilterButtonIndex(targetFilter: ItemFilterCategory): number
  SelectFilterButtonByIndex(index: number): void
  OnItemFilterClick(evt: inkPointerEvent): Bool
  SetActiveFilterController(controller: BackpackFilterButtonController): void
  OnItemFilterHoverOver(evt: inkPointerEvent): Bool
  OnItemFilterHoverOut(evt: inkPointerEvent): Bool
  IsEquipmentAreaWeapon(equipmentAreas: gamedataEquipmentArea[]): Bool
  IsEquipmentAreaWeapon(equipmentArea: gamedataEquipmentArea): Bool
  IsEquipmentAreaClothing(equipmentAreas: gamedataEquipmentArea[]): Bool
  IsEquipmentAreaClothing(equipmentArea: gamedataEquipmentArea): Bool
  UpdateDisplayedItems(itemID: ItemID): void
  RefreshAvailableItems(viewMode?: ItemViewModes): void
  UpdateAvailableHotykeyItems(hotkey: EHotkey, itemsToSkip?: ItemID[]): void
  UpdateAvailableItems(viewMode: ItemViewModes, equipmentAreas: gamedataEquipmentArea[]): void
  UpdateAvailableItemsGrid(availableItems: InventoryItemData[]): void
  UnequipItem(controller: InventoryItemDisplayController, itemData: InventoryItemData): void
  UninstallMod(itemID: ItemID, slotID: TweakDBID): void
  EquipPart(itemData: InventoryItemData, slotID: TweakDBID): void
  SetPingTutorialFact(itemID: ItemID, isUnequip: Bool): void
  TelemetryLogPartInstalled(modifiedItem: InventoryItemData, itemPart: InventoryItemData, slotID: TweakDBID): void
  TelemetryLogPartInstalled(modifiedItem: TelemetryInventoryItem, itemPart: TelemetryInventoryItem, slotID: TweakDBID): void
  OnReplaceModNotificationClosed(data: inkGameNotificationData): Bool
  GetMatchingSlot(itemData: InventoryItemData, partItemData: InventoryItemData): TweakDBID
  IsMatchingSlot(itemData: InventoryItemData, partItemData: InventoryItemData, targetSlot: TweakDBID): Bool
  EquipItem(itemData: InventoryItemData, slotIndex: number): void
  NotifyItemUpdate(): void
  OnItemChooserUnequipMod(ev: ItemChooserUnequipMod): Bool
  IsUnequipBlocked(itemID: ItemID): Bool
  OnItemChooserUnequipItem(evt: ItemChooserUnequipItem): Bool
  OnItemChooserItemHoverOver(evt: ItemChooserItemHoverOver): Bool
  OnItemChooserItemHoverOut(evt: ItemChooserItemHoverOut): Bool
  OnItemDisplayHoverOver(evt: ItemDisplayHoverOverEvent): Bool
  OnItemDisplayHoverOut(evt: ItemDisplayHoverOutEvent): Bool
  OnInventoryItemHoverOver(evt: inkPointerEvent): Bool
  RequestItemInspected(itemID: ItemID): void
  OnInventoryItemHoverOut(evt: inkPointerEvent): Bool
  HandleItemHoverOver(itemData: InventoryItemData, target: inkWidget, iconErrorInfo: DEBUG_IconErrorInfo, skipCompare?: Bool, display?: InventoryItemDisplayController): void
  HandleItemHoverOut(): void
  OnItemDisplayClick(evt: ItemDisplayClickEvent): Bool
  ShowNotification(gameInstance: GameInstance, type: UIMenuNotificationType): void
  HandleItemClick(itemData: InventoryItemData, actionName: inkActionName, displayContext?: ItemDisplayContext): void
  OpenQuantityPicker(itemData: InventoryItemData, action: QuantityPickerActionType): void
  OnQuantityPickerPopupClosed(data: QuantityPickerPopupCloseData): void
  OnQuantityPickerDrop(data: QuantityPickerPopupCloseData): void
  OnQuantityPickerDisassembly(data: QuantityPickerPopupCloseData): void
  AddToDropQueue(item: ItemModParams): void
  OnItemDisplayHold(evt: ItemDisplayHoldEvent): Bool
  OnItemInventoryHold(evt: inkPointerEvent): Bool
  HandleItemHold(itemData: InventoryItemData, actionName: inkActionName): void
  DetermineUIMenuNotificationType(): UIMenuNotificationType
  SetInventoryItemTooltipHoverOver(itemData: InventoryItemData, target: inkWidget, skipCompare: Bool, iconErrorInfo: DEBUG_IconErrorInfo, display?: InventoryItemDisplayController): void
  ShowTooltipsForItemData(equippedItem: InventoryItemData, target: inkWidget, inspectedItemData: InventoryItemData, skipCompare: Bool, iconErrorInfo: DEBUG_IconErrorInfo, display?: InventoryItemDisplayController): void
  OnEquipRequestTooltip(itemData: InventoryItemData, target: inkWidget, slotName: string): void
  HideTooltips(): void
  SetInventoryItemButtonHintsHoverOver(displayingData: InventoryItemData, display?: InventoryItemDisplayController): void
  SetInventoryItemButtonHintsHoverOut(): void
  SetEquipmentSlotButtonHintsHoverOver(controller: InventoryItemDisplayController): void
  SetEquipmentSlotButtonHintsHoverOut(): void
  GetInventoryItemDisplayControllerFromTarget(evt: inkPointerEvent): InventoryItemDisplayController
  GetProgramByShardType(programs: InventoryItemAttachments[], targetShardType: CName): InventoryItemAttachments
}

declare interface ItemModeInventoryListenerCallback extends InventoryScriptCallback {

  Setup(itemModeInstance: InventoryItemModeLogicController): void
  OnItemRemoved(itemID: ItemID, difference: number, currentQuantity: number): void
  OnItemQuantityChanged(itemID: ItemID, diff: number, total: number, flaggedAsSilent: Bool): void
}

declare interface ItemModeGridContainer extends inkLogicController {

  GetItemsGrid(): inkWidgetRef
  GetItemsWidget(): inkWidget
  GetFiltersGrid(): inkCompoundRef
  SetPaperdollImage(area: gamedataEquipmentArea, female: Bool): void
}

declare interface ItemModeGridView extends ScriptableDataView {

  BindUIScriptableSystem(uiScriptableSystem: UIScriptableSystem): void
  SetFilterType(type: ItemFilterCategory): void
  GetFilterType(): ItemFilterCategory
  SetSortMode(mode: ItemSortMode): void
  GetSortMode(): ItemSortMode
  SortItem(left: IScriptable, right: IScriptable): Bool
  FilterItem(data: IScriptable): Bool
}

declare interface ItemModeGridClassifier extends inkVirtualItemTemplateClassifier {

  ClassifyItem(data: Variant): number
}

declare interface ItemModeItemChanged extends Event {

}

declare interface EquipmentAreaCategory extends IScriptable {

  GetDisplays(): InventoryItemDisplayController[]
}

declare interface EquipmentAreaDisplays extends IScriptable {

}

declare interface InstallModConfirmationData extends IScriptable {

}

declare interface OpenInventoryQuantityPickerRequest extends Event {

}

declare interface InventoryStatsController extends inkLogicController {

  OnInitialize(): Bool
  Setup(player: PlayerPuppet): void
  NotifyStatUpdate(statType: gamedataStatType, value: number): void
  SetupEntry(player: PlayerPuppet, stat: gamedataStatType, localizationKey: CName, icon: CName): InventoryStatsEntryController
  OnStatsButtonClicked(e: inkPointerEvent): Bool
}

declare interface InventoryStatsEntryController extends inkLogicController {

  Setup(icon: CName, label: string, value: number): void
  SetValue(value: number): void
}

declare interface InventoryStatsListener extends ScriptStatsListener {

  OnStatChanged(ownerID: StatsObjectID, statType: gamedataStatType, diff: number, total: number): void
}

declare interface InventoryWeaponDisplayController extends InventoryItemDisplayController {

  RefreshUI(): void
  UpdateWeaponParts(): void
  UpdateDamage(): void
  SetComparisonState(comparisonState: ItemComparisonState): void
  GetDPS(itemData: InventoryItemData): number
  GetDisplayType(): ItemDisplayType
}

declare interface InventoryItemPartDisplay extends inkLogicController {

  Setup(attachmentData: InventoryItemAttachments): void
  /** @noSelf **/
  GetCorrespondingTexturePartName(weaponPartType: WeaponPartType): CName
  UpdateTexture(): void
  UpdateMounted(): void
  SetRarity(): void
}

declare interface PaperdollGlitchController extends inkLogicController {

  OnInitialize(): Bool
}

declare interface InventoryQuickSlotsDisplay extends inkLogicController {

}

declare interface InventoryRipperdocDisplayController extends InventoryItemDisplayController {

  RefreshUI(): void
  UpdatePrice(): void
}

declare interface InventoryStatsDisplay extends inkLogicController {

  Setup(stats: StatViewData[]): void
}

declare interface InventoryStatItemV2 extends inkLogicController {

  Setup(statViewData: StatViewData, framesDelay: number): void
  Setup(statViewData: StatViewData): void
  Setup(scannerStatDetails: ScannerStatDetails): void
  Setup(statName: string, statValue: number, statType: gamedataStatType): void
  PlayIntroAnimation(framesDelay: number): void
}

declare interface InventoryWeaponItemChooser extends InventoryGenericItemChooser {

  GetSlots(): InventoryItemAttachments[]
  RebuildSlots(): void
  ForceDisplayLabel(): Bool
  UpdateModsLabel(parts: InventoryItemAttachments[]): void
  GetRootSlotContainerFromType(partType: WeaponPartType): inkCompoundRef
  GetSlotContainerFromType(partType: WeaponPartType): inkCompoundRef
  GetAtlasPartFromType(partType: WeaponPartType): CName
  GetAllPartsTypes(): WeaponPartType[]
  GetPartDataByType(parts: InventoryItemAttachments[], type: WeaponPartType): InventoryItemAttachments
  RebuildParts(): void
  GetDisplayToSpawn(): CName
  GetIntroAnimation(): CName
}

declare interface InventoryWeaponSlot extends InventoryEquipmentSlot {

  OnInitialize(): Bool
  Setup(itemData: InventoryItemData, equipmentArea: gamedataEquipmentArea, slotName?: string, slotIndex?: number, ownerEntity?: Entity): void
  PlayIntroAnimation(framesDelay: number): void
  RefreshUI(): void
}

declare interface InventoryWideItemDisplay extends InventoryItemDisplay {

  OnInitialize(): Bool
  SetAdditinalInfoType(infoType: ItemAdditionalInfoType): void
  GetPriceText(): string
  UpdateAdditionalInfo(): void
  RefreshUI(): void
  UpdateItemStats(): void
  GetDPS(data: InventoryItemData): number
  SetItemNameText(): void
  UpdateDamageType(): void
  SetShape(shapeType: EInventoryItemShape): void
  GetIconSize(shapeType: EInventoryItemShape): Vector2
}

declare interface RipperdocFilterToggleController extends ToggleController {

  GetLabelKey(): string
  GetIcon(): string
}

declare interface ItemDisplayInventoryMiniGrid extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  SetupData(label: string, playerEquipAreaInventory: InventoryItemData[], equipArea?: gamedataEquipmentArea, displayContext?: ItemDisplayContext): void
  GetInventoryItemDisplays(): InventoryItemDisplayController[]
  RemoveElement(): void
}

declare interface QuestMappinController extends BaseQuestMappinController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnIntro(): Bool
  OnUpdate(): Bool
  UpdateAboveBelowVerticalRelation(): void
  OnNameplate(isNameplateVisible: Bool, nameplateController: NpcNameplateGameController): Bool
  OnVehicleAreadySummoned(): void
  SetShouldHideWhenClamped(flag: Bool): void
  UpdateVisibility(): void
  UpdateIcon(): void
  ComputeRootState(): CName
  IsTagged(): Bool
  IsQuest(): Bool
  IsVisibleThruWalls(): Bool
  GetMappinVisualState(): EMappinVisualState
  GetQuality(): gamedataQuality
  IsIconic(): Bool
  GetVisualData(): GameplayRoleMappinData
  GetMappinVarient(): gamedataMappinVariant
}

declare interface VehicleMappinComponent extends IScriptable {

  OnInitialize(questMappinController: QuestMappinController, vehicleMappin: VehicleMappin): void
  OnUnitialize(): void
  VehicleIsLatestSummoned(): Bool
  SetActive(active: Bool): void
  TryScheduleDiscreteMode(): void
  SetDiscreteMode(discrete: Bool): void
  OnVehicleSummonStateChanged(value: number): Bool
  OnActiveVechicleDataChanged(vehPlayerStateData: Variant): Bool
}

declare interface VehicleMappinDelayedDiscreteModeCallback extends DelayCallback {

  Call(): void
}

declare interface InteractionMappin extends RuntimeMappin {

  GetIconRecordID(): TweakDBID
}

declare interface GameplayMappinController extends QuestMappinController {

  OnUpdate(): Bool
  UpdateTrackedState(): void
  UpdateVisibility(): void
  GetTexturePartForGameplayRole(gameplayRole: EGameplayRole): CName
  GetTexturePartForDeviceEffect(mappinVariant: gamedataMappinVariant, braindanceLayer: braindanceVisionMode): CName
  ComputeRootState(): CName
  UpdateVisibilityThroughWalls(): void
  UpdateIcon(): void
  GetGameplayRole(): EGameplayRole
  SetClampVisibility(): void
  ShouldBeClamped(): Bool
}

declare interface ItemInventoryMiniGrid extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  SetupData(label: string, playerEquipAreaInventory: InventoryItemData[], equipArea?: gamedataEquipmentArea): void
  SetGridWith(gridWidth: number): void
  GetInventoryItemDisplays(): InventoryItemDisplay[]
  RemoveElement(): void
}

declare interface EquipmentWidgets {

}

declare interface InteractionMappinController extends BaseInteractionMappinController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnIntro(): Bool
  OnUpdate(): Bool
  OnChoiceVisualizer(connected: Bool): Bool
  UpdateVisibility(): void
}

declare interface IArea extends IVisualObject {

  GetEntityID(): EntityID
  GetType(): CName
}

declare interface GrenadeMappin extends RuntimeMappin {

}

declare interface StealthMappin extends RuntimeMappin {

  GetGameObject(): GameObject
  GetDetectionProgress(): number
  DetectionProgressIncreases(): Bool
  DetectionProgressDecreases(): Bool
  GetThreatAccuracy(): number
  ThreatAccuracyIncreases(): Bool
  ThreatAccuracyDecreases(): Bool
  WasDetectionAboveZero(): Bool
  GetAttitudeTowardsPlayer(): EAIAttitude
  GetSenseCone(): gamemappinsSenseCone
  IsAlive(): Bool
  IsAggressive(): Bool
  IsScanned(): Bool
  IsTarget(): Bool
  IsTagged(): Bool
  IsPrevention(): Bool
  IsCrowdNPC(): Bool
  IsUsingSenseCone(): Bool
  HasItems(): Bool
  UpdateSenseCone(): void
  GetHighLevelState(): gamedataNPCHighLevelState
  SetVisibleOnMinimap(isVisible: Bool): void
  SetVisibleIn3D(isVisible: Bool): void
  UnregisterMappin(): void
  UpdateCombatantState(isCombatant: Bool): void
  GetNumberOfShotAttempts(): number
  GetIsDetectionGrowing(): Bool
  HasBeenSeen(): Bool
  SetIsPulsing(isPulsing: Bool): void
  CanSeePlayer(): Bool
  IsHighlighted(): Bool
  SetStealthAwarenessState(state: gameEnemyStealthAwarenessState): void
  GetStealthAwarenessState(): gameEnemyStealthAwarenessState
  IsSquadInCombat(): Bool
  GetNumberOfCombatants(): number
  GetHighestLootQuality(): number
  IsNetrunner(): Bool
  IsPlayerInHostileZone(): Bool
  WillReprimand(): Bool
  IsHiddenByQuestOnMinimap(): Bool
  IsHiddenByQuestIn3D(): Bool
  GetReprimandAnimationState(): gameReprimandMappinAnimationState
  GetNPCLevel(): number
  GetArchetype(): gamedataArchetypeType
  GetRarity(): gamedataNPCRarity
  GetStatusEffectCurrentPriority(): number
  GetStatusEffectTimeRemaining(): number
  GetStatusEffectIconPath(): string
  UpdateObjectMarkerVisibility(canHaveObjectMarker: Bool, isVisible: Bool): void
  IsFriendlyFromHack(): Bool
  HasHackingStatusEffect(): Bool
  UpdateObjectMarkerThreshold(threshold: number): void
}

declare interface CyberspaceMappinsContainerController extends MappinsContainerController {

  CreateMappinUIProfile(mappin: IMappin, mappinVariant: gamedataMappinVariant, customData: MappinControllerCustomData): MappinUIProfile
}

declare interface CyberspaceMappinController extends BaseQuestMappinController {

  OnIntro(): Bool
}

declare interface WorldMappinsContainerController extends MappinsContainerController {

  CreateMappinUIProfile(mappin: IMappin, mappinVariant: gamedataMappinVariant, customData: MappinControllerCustomData): MappinUIProfile
}

declare interface RemotePlayerMappin extends RuntimeMappin {

}

declare interface PingSystemMappin extends RuntimeMappin {

  ResolveIconState(): string
}

declare interface PingSystemMappinController extends BaseInteractionMappinController {

  OnIntro(): Bool
}

declare interface MapPinUtility extends IScriptable {

  /** @noSelf **/
  OnClampUpdates(argRoot: inkCompoundWidget, isClamped: Bool, isQuest?: Bool): void
}

declare interface QuickHackMappinController extends BaseInteractionMappinController {

  OnInitialize(): Bool
  OnIntro(): Bool
  OnNameplate(isNameplateVisible: Bool, nameplateController: NpcNameplateGameController): Bool
  OnStatsDataUpdated(progress: number): void
  UpdateView(): void
  GetVisualData(): GameplayRoleMappinData
  HelperSetIcon(currImage: inkImageRef, iconID: TweakDBID): void
}

declare interface RemotePlayerMappinController extends BaseInteractionMappinController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnIntro(): Bool
  OnUpdate(): Bool
}

declare interface QuestAnimationMappinController extends BaseQuestMappinController {

  OnInitialize(): Bool
  OnIntro(): Bool
  OnUpdate(): Bool
}

declare interface gamemappinsSenseCone {

}

declare interface StealthMappinGameController extends inkGameController {

  OnInitialize(): Bool
}

declare interface StealthMappinController extends BaseInteractionMappinController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnIntro(): Bool
  SetGameInstance(gameInstance: GameInstance): void
  OnUpdate(): Bool
  NotifyDroneAboutStartingDetection(): void
  NotifyDroneAboutStoppingDetection(): void
  ShouldDisableMappin(): Bool
  UpdateNameplatePart(): void
  UpdateNameplateIcon(): void
  UpdateArchetypeTexture(): void
  UpdateStatusEffectIcon(): void
  ShowStatusEffect(show: Bool): void
  UpdateObjectMarkerAndTagging(): void
  UpdateObjectMarkerVisibility(canHaveObjectMarker: Bool, objectMarkerVisible: Bool): void
  UpdateDeviceDetection(percent: number): void
  UpdateNPCDetection(percent: number): void
  UpdateCanvasOpacity(): void
  UpdateReprimandAnimation(percent: number, forceStop: Bool): void
  UpdateNameplateColor(isHostile: Bool): void
  IsObjectOffScreen(): Bool
  PlayAnim(animName: CName, callBack: CName): void
  PlayNameplateAnim(animName: CName, callBack: CName): void
  OnBasicAnimFinished(proxy: inkAnimProxy): Bool
  OnPotentialRelaxedAnimFinished(proxy: inkAnimProxy): Bool
  OnPotentialCombatAnimFinished(proxy: inkAnimProxy): Bool
  OnNameplateAnimFinished(proxy: inkAnimProxy): Bool
  GetWidgetForNameplateSlot(): inkWidget
  OnNameplate(isNameplateVisible: Bool, nameplateController: NpcNameplateGameController): Bool
}

declare interface NPCStartingDetectionEvent extends Event {

}

declare interface NPCStoppingDetectionEvent extends Event {

}

declare interface NpcNameplateGameController extends inkProjectedHUDGameController {

  GetNameplateVisible(): Bool
  SetNameplateVisible(visible: Bool): void
  SlotWidget(widgetToSlot: inkWidget, newParentWidget: inkWidget, index?: number): void
  UnslotWidget(widgetToUnslot: inkWidget): void
  IsWidgetSlotted(widget: inkWidget): Bool
  SetSlottedWidgets(widgetsToSlot: inkWidget[], newParentWidger: inkWidget): void
  ClearSlottedWidgets(): void
  OnInitialize(): Bool
  RegisterPSMListeners(playerPuppet: GameObject): void
  UnregisterPSMListeners(playerPuppet: GameObject): void
  OnUninitialize(): Bool
  OnPlayerAttach(playerGameObject: GameObject): Bool
  OnPlayerDetach(playerGameObject: GameObject): Bool
  OnScreenProjectionUpdate(projections: gameuiScreenProjectionsData): Bool
  OnZoomChanged(value: number): Bool
  OnNameplateDataChanged(value: Variant): Bool
  OnIsEnabledChange(val: number): Bool
  OnZoneChange(value: number): Bool
  OnAimStatusChange(value: number): Bool
  OnPlayerCombatChange(value: number): Bool
  OnBuffListChanged(value: Variant): Bool
  OnDeBuffListChanged(value: Variant): Bool
  OnDamagePreview(value: number): Bool
  UpdateHealthbarColor(isHostile: Bool): void
  UpdateMappinSlotMargin(newBottomMargin: number): void
  OnMappinsUpdated(mappinControllers: BaseMappinBaseController[]): Bool
  ResolveSlotAttachment(): void
  UpdateVisualControllerState(mappinControllers: BaseMappinBaseController[]): void
  UpdateSlotAttachment(mappinControllers: BaseMappinBaseController[]): void
  SetMainVisible(visible: Bool): void
  SetNameplateOwnerID(visible: Bool): void
  GetHUDManager(): HUDManager
  GetBufferedUINameplateRecord(): UINameplate_Record
  GetDistanceToEntity(entity: Entity): number
  HelperCheckDistance(entity: Entity): Bool
  SetNameplateProjectionEntity(entity: Entity): void
  ComputeTopMargin(projections: inkScreenProjection[]): number
}

declare interface NameplateVisualsLogicController extends inkLogicController {

  OnInitialize(): Bool
  SetVisualData(puppet: GameObject, incomingData: NPCNextToTheCrosshair, isNewNpc?: Bool): void
  PreviewDamage(value: number): void
  GetHeightOffser(): number
  UpdateBecauseOfMapPin(): void
  UpdatePlayerZone(zone: gamePSMZones, onlySetValue?: Bool): void
  UpdatePlayerAimStatus(state: gamePSMUpperBodyStates, onlySetValue?: Bool): void
  UpdatePlayerCombat(state: gamePSMCombat, onlySetValue?: Bool): void
  UpdateHealthbarColor(isHostile: Bool): void
  UpdateHealthbarVisibility(): void
  SetNPCType(puppet: ScriptedPuppet): void
  UpdateCenterIcon(texture: CName): void
  SetAttitudeColors(puppet: gamePuppetBase, incomingData: NPCNextToTheCrosshair): void
  SetElementVisibility(incomingData: NPCNextToTheCrosshair): void
  IsAnyElementVisible(): Bool
  SetCycleAnimation(isNewNPC: Bool, incomingData: NPCNextToTheCrosshair): void
  PlayPreventionAnim(): void
  StopPreventionAnim(): void
  OnPreventionAnimLoop(anim: inkAnimProxy): void
  UpdateBuffDebuffList(argData: Variant, argIsBuffList: Bool): void
  CheckStealthMappinVisibility(): void
  IsQuestTarget(): Bool
  SetQuestTarget(value: Bool): void
  SetForceHide(value: Bool): void
  OnFadeIn(): void
  OnFadeInComplete(anim: inkAnimProxy): Bool
  OnScreenDelay(): void
  OnScreenDelayComplete(anim: inkAnimProxy): Bool
  OnFadeOut(): void
  OnFadeOutComplete(anim: inkAnimProxy): Bool
}

declare interface UnitsLocalizationHelper extends IScriptable {

  /** @noSelf **/
  LocalizeDistance(distance: number): string
}

declare interface BuildButtonItemController extends inkButtonDpadSupportedController {

  OnInitialize(): Bool
  SetButtonDetails(argText: string, type: gamedataBuildType): void
  GetAssociatedBuild(): gamedataBuildType
}

declare interface MinimapStealthMappinController extends BaseMinimapMappinController {

  OnInitialize(): Bool
  OnIntro(): Bool
  OnUpdate(): Bool
  Intro(): void
  Update(): void
  UpdateClamping(): void
  UpdateAboveBelowVerticalRelation(): void
  Pulse(count: number): void
  PulseContinuous(enabled: Bool): void
  ComputeRootState(): CName
  FadeOut(): void
  GetStateForAttitude(attitude: EAIAttitude, canSeePlayer: Bool): CName
  PlayPreventionAnim(): void
  StopPreventionAnim(): void
  OnPreventionAnimLoop(anim: inkAnimProxy): Bool
  OnPulsingAnimFinished(proxy: inkAnimProxy): Bool
  OnFadeOutAnimFinished(proxy: inkAnimProxy): Bool
}

declare interface buildsWidgetGameController extends inkGameController {

  OnInitialize(): Bool
  IsProperDevBuild(type: gamedataBuildType): Bool
  CreateBuildButton(type: gamedataBuildType): void
  CreateCustomButton(type: CustomButtonType): void
  OnClickedCutonButton_UnlockAllVehicles(e: inkPointerEvent): void
  OnClickedCutonButton_ShowAllPoiMappins(e: inkPointerEvent): void
  OnClickedCutonButton_DiscoverAllPoiMappins(e: inkPointerEvent): void
  OnBuildsMenuSelectBuild(e: inkPointerEvent): void
  SetTooltip(type: gamedataBuildType): void
  ShowTooltip(val: Bool): void
  OnBuildMenuEnter(e: inkPointerEvent): void
  OnBuildMenuExit(e: inkPointerEvent): void
}

declare interface MinimapQuestMappinController extends BaseMinimapMappinController {

  ComputeRootState(): CName
  Intro(): void
  Update(): void
}

declare interface MinimapQuestAreaMappinController extends BaseMinimapMappinController {

  ComputeRootState(): CName
  Update(): void
}

declare interface MinimapDeviceMappinController extends BaseMinimapMappinController {

  SetEffectAreaRadius(radius: number): void
  Update(): void
  ComputeRootState(): CName
  GetVisualData(): GameplayRoleMappinData
  GetTexturePartForDeviceEffect(gameplayRole: EGameplayRole): CName
}

declare interface MinimapSecurityAreaInitData extends MappinControllerCustomData {

}

declare interface MinimapSecurityAreaMappinController extends BaseMinimapMappinController {

  Update(): void
  OnPlayerEnterArea(): Bool
  OnPlayerExitArea(): Bool
  AreaTypeToState(type: CName): CName
}

declare interface MinimapRemotePlayerMappinController extends BaseMinimapMappinController {

  OnInitialize(): Bool
  OnUpdate(): Bool
  Intro(): void
  Update(): void
}

declare interface MinimapPingSystemMappinController extends BaseMinimapMappinController {

  Intro(): void
}

declare interface CpoCharacterButtonItemController extends inkButtonDpadSupportedController {

  SetButtonDetails(text: string, characterRecordId: TweakDBID): void
  GetCharacterRecordId(): TweakDBID
}

declare interface MinimapPOIMappinController extends BaseMinimapMappinController {

  Initialize(): void
  Intro(): void
  OnUninitialize(): Bool
  Update(): void
  PlayPingAnimation(): void
  OnQuestMappinHighlight(evt: QuestMappinHighlightEvent): Bool
  OnPulseAnimLoop(anim: inkAnimProxy): Bool
  UpdateVisibility(): void
  UpdateIcon(): void
  ComputeRootState(): CName
  KeepIconOnClamping(): Bool
}

declare interface VehicleMinimapMappinComponent extends IScriptable {

  OnInitialize(minimapPOIMappinController: MinimapPOIMappinController, vehicleMappin: VehicleMappin): void
  OnUninitialize(): void
  VehicleIsLatestSummoned(): Bool
  OnVehicleSummonStateChanged(value: number): Bool
}

declare interface CpoCharacterSelectionWidgetGameController extends inkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  CreateCharacterButton(parent: inkHorizontalPanel, argText: string, characterRecordId: TweakDBID): void
  OnSelectCharacter(e: inkPointerEvent): void
  OnSelectCharacterEnter(e: inkPointerEvent): void
  OnSelectCharacterLeave(e: inkPointerEvent): void
  FillTooltip(characterRecordId: TweakDBID): void
  ShowTooltip(visible: Bool): void
  SetVisibilityInBlackboard(isVisible: Bool): void
}

declare interface MinimapDynamicEventMappinController extends BaseMinimapMappinController {

  PlayPulseAnimation(): void
  StopPulseAnimation(): void
  OnPulseAnimLoop(anim: inkAnimProxy): Bool
  OnPulseEnabledChanged(enabled: Bool): Bool
}

declare interface InventoryStatsList extends inkLogicController {

  OnInitialize(): Bool
  SetData(data: StatViewData[]): void
}

declare interface InventoryStatItem extends inkLogicController {

  OnInitialize(): Bool
  SetData(data: StatViewData): void
}

declare interface MinigameControllerAdvanced extends inkGameController {

  StartGame(): void
  OnGameFinishLogic(gameFinishEvent: GameFinishEventAdvanced): void
  OnGameFinish(gameFinishEvent: GameFinishEventAdvanced): Bool
}

declare interface MiniGameStateUpdateEventAdvanced extends Event {

}

declare interface GameFinishEventAdvanced extends Event {

}

declare interface MinigameStateAdvanced extends IScriptable {

  GetScore(): number
  SetMaxScore(score: number): void
}

declare interface SendScoreRequestAdvanced extends ScriptableSystemRequest {

}

declare interface SideScrollerMiniGameScoreSystemAdvanced extends ScriptableSystem {

  OnAttach(): void
  GetGameId(gameName: string): number
  OnSendScore(request: SendScoreRequestAdvanced): void
  GetMaxScore(gameName: string): number
}

declare interface GridNoiseGenRule extends MinigameGenerationRule {

}

declare interface MainProgramGenRule extends MinigameGenerationRule {

}

declare interface ProgramFromDataGenRule extends MinigameGenerationRule {

}

declare interface ProgramsGridGenRule extends MinigameGenerationRule {

}

declare interface TrapsGenRule extends MinigameGenerationRule {

}

declare interface MinigameGenerationRule_Test extends MinigameGenerationRule {

}

declare interface GridCell {

}

declare interface PanzerMiniGameController extends MinigameControllerAdvanced {

}

declare interface panzerGameController extends PanzerMiniGameController {

  OnGameFinishLogic(gameFinishEvent: GameFinishEventAdvanced): void
}

declare interface QuadRacerGameController extends MinigameController {

  OnInitialize(): Bool
  OpenScoreboard(playerScore: number): void
  OpenMenu(): void
  OnStartGameClick(e: inkPointerEvent): void
  OnGameFinishLogic(gameFinishEvent: GameFinishEvent): void
  SetEnableComponent(component: inkWidgetRef, isEnabled: Bool): void
  OpenGameplay(): void
  OnOpenMenuClick(e: inkPointerEvent): void
  GameStart(): void
}

declare interface ScoreboardLogicController extends inkLogicController {

  CleanGrid(): void
  FillGrid(playerScore: number): void
}

declare interface ScoreboardPlayer {

}

declare interface ScoreboardEntityLogicController extends inkLogicController {

  SetText(text: string): void
}

declare interface SideScrollerMiniGameScoreSystem extends ScriptableSystem {

  OnAttach(): void
  GetGameId(gameName: string): number
  OnSendScore(request: SendScoreRequest): void
  GetMaxScore(gameName: string): number
}

declare interface SendScoreRequest extends ScriptableSystemRequest {

}

declare interface QuadRacerGameState extends MinigameState {

}

declare interface MinigameLogicController extends inkLogicController {

  FinishGame(): void
  OnInitializeGameLogic(): void
  OnGameStateUpdateLogic(gameStateUpdateEvent: MiniGameStateUpdateEvent): void
  FinishGameLogic(): void
  OnInitializeGame(): Bool
  OnGameStateUpdate(gameStateUpdateEvent: MiniGameStateUpdateEvent): Bool
}

declare interface MiniGameStateUpdateEvent extends Event {

}

declare interface QuadRacerLogicController extends MinigameLogicController {

  OnInitializeGameLogic(): void
  OnGameStateUpdateLogic(gameStateUpdateEvent: MiniGameStateUpdateEvent): void
  PlayNotificationAnimation(text: string): void
  StopCurrentNotificationAnimation(): void
}

declare interface MinigameCollisionLogic extends inkLogicController {

  UpdateGameState(state: MinigameState): void
}

declare interface QuadRacerObstacleCollisionLogic extends MinigameCollisionLogic {

  OnHitPlayer(hitEvent: HitPlayerEvent): Bool
}

declare interface HitPlayerEvent extends Event {

}

declare interface QuadRacerBonusCollisionLogic extends MinigameCollisionLogic {

  OnInitialize(): Bool
  OnHitPlayer(hitEvent: HitPlayerEvent): Bool
  OnRecycle(): Bool
  ChangeGameState(gameState: QuadRacerGameState): void
}

declare interface NitroCollisionLogic extends QuadRacerBonusCollisionLogic {

  ChangeGameState(gameState: QuadRacerGameState): void
}

declare interface OneTimeCollisionLogic extends QuadRacerBonusCollisionLogic {

  ChangeGameState(gameState: QuadRacerGameState): void
}

declare interface BonusCollisionLogic extends MinigameCollisionLogic {

  OnInitialize(): Bool
  OnHitPlayer(hitEvent: HitPlayerEvent): Bool
  ChangeGameState(gameState: RoachRaceGameState): void
  OnRecycle(): Bool
  Reset(): void
}

declare interface RoachRaceGameState extends MinigameState {

}

declare interface HealthCollisionLogic extends BonusCollisionLogic {

  ChangeGameState(gameState: RoachRaceGameState): void
}

declare interface DoublePointsCollisionLogic extends BonusCollisionLogic {

  ChangeGameState(gameState: RoachRaceGameState): void
}

declare interface ObstacleCollisionLogic extends MinigameCollisionLogic {

  OnInitialize(): Bool
  OnHitPlayer(hitEvent: HitPlayerEvent): Bool
  OnRecycle(): Bool
}

declare interface InvincibilityCollisionLogic extends BonusCollisionLogic {

  ChangeGameState(gameState: RoachRaceGameState): void
}

declare interface RoachRaceLogicController extends MinigameLogicController {

  OnGameStateUpdateLogic(gameStateUpdateEvent: MiniGameStateUpdateEvent): void
}

declare interface RoachRaceGameController extends MinigameController {

  OnInitialize(): Bool
  OnGameFinishLogic(gameFinishEvent: GameFinishEvent): void
  OpenMenu(): void
  OpenScoreboard(playerScore: number): void
  OpenGameplay(): void
  SetEnableComponent(component: inkWidgetRef, isEnabled: Bool): void
  OnOpenMenuClick(e: inkPointerEvent): void
  OnStartGameClick(e: inkPointerEvent): void
  FinishCutscene(e: inkAnimProxy): void
  GameStart(e: inkAnimProxy): void
}

declare interface MinigamePlayerController extends inkLogicController {

}

declare interface RoachRacePlayerController extends MinigamePlayerController {

  Run(): void
  Jump(): void
  OnJumpStart(): Bool
  OnDie(): Bool
  OnJumpEnd(): Bool
  OnRun(): Bool
}

declare interface LoopAnimationLogicController extends inkLogicController {

  OnInitialize(): Bool
}

declare interface AnimationLogicController extends inkLogicController {

  OnChangeState(state: string): Bool
}

declare interface MinigameDynObject extends inkLogicController {

}

declare interface MinigameData {

}

declare interface MessagePopupDisplayController extends inkLogicController {

  SetData(data: PopupData, settings?: PopupSettings): void
}

declare interface CharactersChain {

}

declare interface UnlockableProgram {

}

declare interface Overlap {

}

declare interface MinigameTooltipShowRequest extends Event {

}

declare interface MinigameTooltipHideRequest extends Event {

}

declare interface TrapTooltipDisplayer extends inkLogicController {

  OnInitialize(): Bool
  OnHoverOver(e: inkPointerEvent): Bool
  OnDelayedTooltipRequest(e: inkAnimProxy): Bool
  OnHoverOut(e: inkPointerEvent): Bool
}

declare interface TutorialBracketData {

}

declare interface TutorialArea extends inkLogicController {

}

declare interface TutorialBracketLogicController extends inkLogicController {

  PlayShowAnimation(): inkAnimProxy
  PlayHideAnimation(): inkAnimProxy
  OnShowFinished(e: inkAnimProxy): Bool
}

declare interface HackingMinigameGameController extends inkGameController {

  GetProgramsChains(): CharactersChain[]
  GetUnlockablePrograms(): UnlockableProgram[]
  GetRarity(rarityValue: number): number
  GetTrapByProbability(probabilityValue: number): MiniGame_Trap_Record
  GetPlayerPrograms(): MinigameProgramData[]
  SetTrapIconAtCell(cellCoordinates: Vector2, trap: CName): void
  AddUnlockableProgram(program: UnlockableProgram, instruction: number[]): void
  PauseTheTimer(): void
  ResumeTheTimer(): void
  EnableWhitelist(enable: Bool): void
  IsWhitelistEnabled(): Bool
  WhitelistPosition(position: Vector2): void
  RemoveWhitelistedPosition(position: Vector2): void
  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnGameStateChanged(value: number): Bool
  OnHandleInput(evt: inkPointerEvent): Bool
  OnDisconnectController(isDisconnected: Bool): Bool
  OnPositionSelected(position: Vector2): Bool
  ToggleTutorialOverlay(value: Bool): void
  PrepareTooltips(): void
  OnShowTooltipRequest(request: MinigameTooltipShowRequest): Bool
  OnHideTooltipRequest(request: MinigameTooltipHideRequest): Bool
  OnGridCellPressed(wasHorizontalyActive: Bool): Bool
  ProcessMinigameGridClickTutorialFacts(horizontal: Bool): void
  ProcessMinigameTutorialFact(player: PlayerPuppet): Bool
  ScaleBoard(entity: Entity, size: number, powerLevel: number, symbolsToUse: MiniGame_AllSymbols_Record): void
  ScaleTraps(entity: Entity, player: PlayerPuppet, prob: number, powerLevel: number): void
  ScaleTimer(player: PlayerPuppet, entity: Entity, time: number, powerLevel: number, waitInteraction: Bool): void
  FilterTraps(trapList: MiniGame_Trap_Record[]): void
  ScaleBuffer(entity: Entity, size: number, powerLevel: number, player: PlayerPuppet): void
}

declare interface MinigameGenerationRulePredefinedBoardWithTraps extends MinigameGenerationRule {

  OnProcessRule(size: number, grid: GridCell[][]): Bool
}

declare interface MinigameGenerationRulePredefinedBoard extends MinigameGenerationRule {

  OnProcessRule(size: number, grid: GridCell[][]): Bool
}

declare interface MinigameGenerationRuleOverridePrograms extends MinigameGenerationRule {

  OnProcessRule(size: number, grid: GridCell[][]): Bool
  ConvertToUint(arr: number[]): number[]
}

declare interface MinigameGenerationRuleScalingPrograms extends MinigameGenerationRule {

  OnProcessRule(size: number, grid: GridCell[][]): Bool
  FilterPlayerPrograms(programs: MinigameProgramData[]): void
  GenerateRarities(length: number, overlap: Overlap[], id: number): number[]
  DefineLength(combinedPowerLevel: number, bufferSize: number, numPrograms: number): number
  SwapMode(b: Bool): void
  RandomMode(b: Bool): void
}

declare interface TutorialOverlayData {

}

declare interface TutorialPopupDisplayController extends inkLogicController {

  SetData(data: TutorialPopupData): void
  SetVideoData(videoType: VideoType, video: ResRef): void
  PlayVideo(videoWidget: inkVideoRef, video: ResRef): void
}

declare interface TutorialPopupGameController extends inkGameController {

  RequestVisualState(): void
  RestorePreviousVisualState(): void
  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnRelease(e: inkPointerEvent): Bool
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  BlockInput(value: Bool): void
  PauseGame(value: Bool): void
  SetupView(): void
  OnIntro(anim: inkAnimProxy): Bool
  OnOutro(anim: inkAnimProxy): Bool
}

declare interface TutorialOverlayUserData extends inkUserData {

}

declare interface TutorialOverlayLogicController extends inkLogicController {

  OnUninitialize(): Bool
  OnButtonRelease(evt: inkPointerEvent): Bool
  SetupTutorialOverlayLogicController(tutorialManager: questITutorialManager): void
  PlayShowAnimation(): inkAnimProxy
  PlayHideAnimation(): inkAnimProxy
  OnShowFinished(e: inkAnimProxy): Bool
}

declare interface CodexSystem extends ScriptableSystem {

  OnAttach(): void
  codexInit(): void
  IsRecordLocked(recordID: TweakDBID): Bool
  GetCodexRecordPartContent(recordID: TweakDBID, partName: CName): string
  IsRecordPartLocked(recordID: TweakDBID, partName: CName): Bool
  GetCodex(): SCodexRecord[]
  GetCodexRecordParts(recordTweak: TweakDBID): SCodexRecordPart[]
  GetCodexRecordIndex(recordTweak: TweakDBID): number
  AddCodexRecord(record: CodexRecord_Record): void
  UnlockRecord(recordTweak: TweakDBID): void
  UnlockCodexPart(recordTweak: TweakDBID, partName: CName): void
  LockRecord(recordTweak: TweakDBID): void
  SendCallback(): void
  OnCodexUnlockRecordRequest(request: CodexUnlockRecordRequest): void
  OnCodexLockRecordRequest(request: CodexLockRecordRequest): void
  OnAddCodexRecordRequest(request: CodexAddRecordRequest): void
  OnUnlockCodexPartRequest(request: UnlockCodexPartRequest): void
}

declare interface SCodexRecord {

}

declare interface SCodexRecordPart {

}

declare interface CodexUnlockRecordRequest extends ScriptableSystemRequest {

}

declare interface CodexLockRecordRequest extends ScriptableSystemRequest {

}

declare interface CodexAddRecordRequest extends ScriptableSystemRequest {

}

declare interface UnlockCodexPartRequest extends ScriptableSystemRequest {

}

declare interface gameJournalEntryStateChangeData {

}

declare interface gameJournalQuestTrackedData {

}

declare interface UIObjectiveEntryData {

}

declare interface ObjectiveEntryLogicController extends inkLogicController {

  OnInitialize(): Bool
  SetUpdated(updated: Bool): void
  IsUpdated(): Bool
  IsTracked(): Bool
  GetEntryType(): UIObjectiveEntryType
  GetEntryState(): gameJournalEntryState
  GetEntryId(): number
  SetEntryId(id: number): void
  SetEntryData(data: UIObjectiveEntryData): void
  GetStateIconTexturePart(state: gameJournalEntryState, isTracked: Bool): CName
  CreateAnimations(): void
  IsReadyToRemove(): Bool
  OnAnimationComplete(anim: inkAnimProxy): Bool
  NotifyForRemoval(): void
  Hide(): void
  StopFadeAnimation(): void
  Show(): void
  AttachToParent(parentEntry: ObjectiveEntryLogicController): void
  DetachFromParent(): void
  IncrementChildCount(): void
  DecrementChildCount(): void
}

declare interface QuestUIUtils {

  /** @noSelf **/
  GetJournalStateName(state: gameJournalEntryState, isTracked: Bool): CName
  /** @noSelf **/
  GetEntryTypeFromName(entryTypeName: CName): UIObjectiveEntryType
  /** @noSelf **/
  GetLibraryIDForEntryType(entryType: UIObjectiveEntryType): CName
}

declare interface CodexPrintRecordsRequest extends ScriptableSystemRequest {

}

declare interface QuestUpdateGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  Setup(): void
  OnButtonRelease(evt: inkPointerEvent): Bool
  OpenQuestMenu(): void
  PlayAnimation(animName: CName): void
  OnOutroAnimFinished(anim: inkAnimProxy): Bool
}

declare interface QuestListGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnStateChanges(hash: number, className: CName, notifyOption: JournalNotifyOption, changeType: JournalChangeType): Bool
  OnTrackedEntryChanges(hash: number, className: CName, notifyOption: JournalNotifyOption, changeType: JournalChangeType): Bool
  OnCounterChanged(hash: number, className: CName, notifyOption: JournalNotifyOption, changeType: JournalChangeType): Bool
  UpdateEntries(): void
  UpdateQuest(questData: QuestDataWrapper): Bool
  UpdateObjectives(questData: QuestDataWrapper, parent: ObjectiveEntryLogicController, isParentTracked: Bool): Bool
  UpdateObjective(objectiveData: QuestObjectiveWrapper, parent: ObjectiveEntryLogicController, isParentTracked: Bool): void
  UpdateSubObjectives(questData: QuestObjectiveWrapper, parent: ObjectiveEntryLogicController, isParentTracked: Bool): void
  UpdateSubObjective(subObjectiveData: QuestSubObjectiveWrapper, parent: ObjectiveEntryLogicController, isParentTracked: Bool): void
  FindEntry(entryId: number): ObjectiveEntryLogicController
  GetOrCreateEntry(id: number, entryType: UIObjectiveEntryType, parent: ObjectiveEntryLogicController, isOptional?: Bool): ObjectiveEntryLogicController
  FindNewEntryIndex(entryType: UIObjectiveEntryType, parent: ObjectiveEntryLogicController): number
  OnRemoveEntry(entryWidget: inkWidget): Bool
  RemoveEntry(entryWidget: inkWidget): void
  BuildEntryData(inData: ABaseWrapper): UIObjectiveEntryData
  ShouldDisplayEntry(entryType: UIObjectiveEntryType): Bool
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
}

declare interface QuestListHeaderLogicController extends inkLogicController {

  SetLabel(text: string): void
}

declare interface RadialPointerController extends inkLogicController {

  SetRotation(rawAngle: number, targetAngle: number): void
}

declare interface TrackedQuestPhaseUpdateRequest extends Event {

}

declare interface QuestTrackerGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnStateChanges(hash: number, className: CName, notifyOption: JournalNotifyOption, changeType: JournalChangeType): Bool
  OnTrackedEntryChanges(hash: number, className: CName, notifyOption: JournalNotifyOption, changeType: JournalChangeType): Bool
  OnCounterChanged(hash: number, className: CName, notifyOption: JournalNotifyOption, changeType: JournalChangeType): Bool
  OnMenuUpdate(value: Bool): Bool
  OnTrackedMappinUpdated(value: Variant): Bool
  SortObjectiveListByTimestamp(sortedObjectives: JournalEntry[]): void
  UpdateTrackerData(): void
  OnTrackedQuestPhaseUpdateRequest(evt: TrackedQuestPhaseUpdateRequest): Bool
}

declare interface QuestTrackerObjectiveLogicController extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  SetObjectiveState(state: CName): void
  PlayIntroAnim(): void
  IsReadyToRemove(): Bool
  IsObjectiveEntry(): Bool
  GetObjectiveEntry(): JournalQuestObjective
  SetData(objectiveTitle: string, isTracked: Bool, isOptional: Bool, currentCounter: number, totalCounter: number, objectiveEntry: JournalQuestObjective): void
  SetState(state: CName): void
  OnIntroAnimEnd(proxy: inkAnimProxy): Bool
  OnAnimEnd(proxy: inkAnimProxy): Bool
  SetFinished(): void
  SetFailed(): void
}

declare interface RadialStatusEffectController extends inkLogicController {

  OnInitialize(): Bool
}

declare interface PointerController extends inkLogicController {

  OnInitialize(): Bool
  Enable(): void
  UpdateCenterPiece(rawInputAngle: Vector4): void
  SetRotation(rawInputAngle: Vector4, angle: number, activeIndex: number): void
}

declare interface PointerSlot extends RadialSlot {

  GetController(): PointerController
}

declare interface StatusEffectSlot extends RadialSlot {

  GetController(): RadialStatusEffectController
}

declare interface CyclableRadialSlot extends WeaponRadialSlot {

  IsCyclable(): Bool
  CanCycle(): Bool
  GetHotkey(): EHotkey
  GetDebugInfo(info: string[]): void
  SetCanCycle(_canCycle: Bool): void
  CycleStart(right: Bool): void
  CycleStop(): void
}

declare interface ChatterKeyValuePair {

}

declare interface ChattersGameController extends BaseSubtitlesGameController {

  OnInitialize(): Bool
  OnPlayerAttach(playerGameObject: GameObject): Bool
  OnPlayerDetach(playerGameObject: GameObject): Bool
  OnSceneTierChange(argTier: number): Bool
  SetChattersVisibilitySetting(value: Bool): void
  OnSubCreated(controller: BaseSubtitleLineLogicController): void
  OnNameplateOffsetChanged(vrt: number): void
  OnNameplateEntityChanged(vrt: Variant): void
  OnNameplateVisibilityChanged(visibility: Bool): void
  OnNameplateChanged(): void
  OnDialogsData(value: Variant): Bool
  OnUninitialize(): Bool
  AddBroadcastBlockingLine(lineData: scnDialogLineData): void
  IsBroadcastBlockedByMainDialogue(): Bool
  IsLineTypeConditionFulfilled(lineData: scnDialogLineData): Bool
  IsDistanceConditionFulfilled(lineData: scnDialogLineData): Bool
  ShouldDisplayLine(lineData: scnDialogLineData): Bool
  OnRemovalFailure(lineId: CRUID): void
  CreateLine(lineSpawnData: LineSpawnData): void
  SetupLine(lineWidget: inkWidget, lineSpawnData: LineSpawnData): void
  OnHideLineByData(lineData: subtitleLineMapEntry): void
  OnHideLine(lineData: subtitleLineMapEntry): void
  StartScreenProjection(lineWidget: inkWidget, isDevice: Bool): void
  StopScreenProjection(lineWidget: inkWidget): void
  OnScreenProjectionUpdate(projections: gameuiScreenProjectionsData): Bool
  OnNameplateVisibleEvent(evt: NameplateVisibleEvent): Bool
  UpdateChattersNameplateData(entID: EntityID, isVisible: Bool): void
  OnScannerModeChanged(val: Variant): Bool
}

declare interface ChatterLineLogicController extends BaseSubtitleLineLogicController {

  OnInitialize(): Bool
  GetOwnerID(): EntityID
  ShowBackground(value: Bool): void
  SetLineData(lineData: scnDialogLineData): void
  CreateProjectionData(isDevice: Bool): inkScreenProjectionData
  GetProjection(): inkScreenProjection
  SetProjection(projection: inkScreenProjection): void
  UpdateProjection(targetedObject: EntityID, owner: ChattersGameController): void
  SetNameplateData(argNameplateVisible: Bool, argEntityId: EntityID): void
  SetNameplateOffsetValue(value: number): void
  SetNameplateEntity(blackboardVariant: Variant): void
  SetNameplateVisibility(isVisible: Bool): void
}

declare interface LateInit extends Event {

}

declare interface RadialWheelController extends inkHUDGameController {

  OnInitialize(): Bool
  OnLateInit(evt: LateInit): Bool
  OnUninitialize(): Bool
  RegisterBlackboards(shouldRegister: Bool): void
  Shutdown(): void
  SendPSMRadialCloseRequest(): void
  UpdateRequired(): void
  GetValidNeighbouringIndex(arr: InventoryItemData[], fromIndex: number, searchNext: Bool): number
  CacheData(): void
  CacheInputHintData(): void
  ConvertMarginToVector(margin: inkMargin): Vector2
  DetermineActiveSlot(angle: number): WeaponRadialSlot
  SetActiveSlot(newActiveSlot: WeaponRadialSlot): Bool
  ConvertVectorToAngle(input: Vector4): number
  SpawnRadialWeapons(): void
  SpawnSlotWidget(slot: RadialSlot): Bool
  RefreshSlots(): void
  RefreshWeapons(): void
  RefreshHotkeys(): void
  RefreshHotkey(slot: CyclableRadialSlot): void
  RefreshCyberware(): void
  BindItem(slot: CyclableRadialSlot, requestType: EHotkeyRequestType): Bool
  DrawItem(slot: RadialSlot): Bool
  ApplySlot(slot: RadialSlot): void
  DisarmPlayer(): void
  CycleSlot(cyclableSlot: CyclableRadialSlot, actionName: CName): void
  CycleHotkeys(cyclableSlot: CyclableRadialSlot, next: Bool): void
  CycleCyberware(cyclableSlot: CyclableRadialSlot): void
  UpdatePointer(rawInputVector: Vector4, rawAngle: number): void
  UpdateStatusEffects(): void
  UpdateActiveTooltip(): void
  RestoreCachedSlots(): void
  ClearInputHints(): void
  UpdateInputHints(): void
  AddInputHint(inputHint: InputHintData, add: Bool): void
  SendInputHintEvent(inputHint: InputHintData, show: Bool): void
  OnOpenWheelRequest(evt: QuickSlotButtonHoldStartEvent): Bool
  OnForceRadialWheelShutdown(evt: ForceRadialWheelShutdown): Bool
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
  OnRadialAngleChanged(v: Vector4): Bool
  OnIsInMenuChanged(param: Bool): Bool
  OnEquipmentChanged(value: Variant): Bool
  CanPlayerCycleCyberware(): Bool
  GetValidItemsForMiscSlot(cyclableSlot: CyclableRadialSlot): InventoryItemData[]
  CanPlayerCycleMisc(cyclableSlot: CyclableRadialSlot): Bool
  CanPlayerCycleSlot(slot: CyclableRadialSlot): Bool
  GetWeapons(): gameItemData[]
  GetValidCombatCyberware(): InventoryItemData
  GetBaseFists(): InventoryItemData
  GetEquipmentSystem(): EquipmentSystem
  GetItemData(itemID: ItemID): gameItemData
  GetInventoryItemData(slot: RadialSlot): InventoryItemData
  GetItemID(slot: RadialSlot): ItemID
  GetPlayer(): GameObject
  DrawDebug(id: number): void
  ClearDebug(): void
  ClearActiveSlotDebug(): void
  DrawActiveSlotDebug(): void
}

declare interface ItemTooltipController extends AGenericTooltipController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnGlobalPress(evt: inkPointerEvent): Bool
  OnGlobalRelease(evt: inkPointerEvent): Bool
  SetData(data: ItemViewData): void
  SetData(tooltipData: ATooltipData): void
  ForceNoEquipped(): void
  Show(): void
  UpdateLayout(): void
  UpdateItemType(): void
  UpdateName(): void
  UpdateIcon(): void
  UpdateRecipeIcon(): void
  OnIconCallback(e: iconAtlasCallbackData): Bool
  DEBUG_UpdateIconErrorInfo(): void
  UpdateEquipped(): void
  UpdateProgressBar(): void
  UpdateQuickhackState(): void
  UpdateGrenadeStats(): void
  GetGranadeDamageFromStats(): InventoryTooltipData_StatData
  GetArmorStatFromSecondaryStats(): InventoryTooltipData_StatData
  GetDamageStatsFromSecondayStats(): InventoryTooltipData_StatData[]
  ProcessDoTEffects(effects: StatusEffect_Record): DamageEffectUIEntry[]
  GetDoTEffects(attackRecord: Attack_Record): DamageEffectUIEntry[]
  UpdateGrenadeDamage(tweakRecord: Grenade_Record): void
  UpdateGrenadeRange(tweakRecord: Grenade_Record): void
  UpdateGrenadeDelivery(tweakRecord: Grenade_Record): void
  UpdateAmmo(): void
  UpdateDamageType(): void
  UpdateRarity(): void
  FixLines(): void
  UpdateHeader(): void
  GetArrowWrapperState(diffValue: number): CName
  UpdateParts(): void
  UpdateArmor(): void
  UpdateEvolutionDescription(): void
  UpdateDPS(): void
  UpdatePrimmaryStats(): void
  UpdatemRecipeDamageTypes(): void
  UpdatemRecipeProperties(): void
  GetSecondaryStatsData(data: InventoryTooltipData): InventoryTooltipData_StatData[]
  FilterStatsWithValue(stats: InventoryTooltipData_StatData[]): InventoryTooltipData_StatData[]
  IsDamageStat(stat: gamedataStatType): Bool
  ShouldDisplayGrenadeStat(stat: InventoryTooltipData_StatData): Bool
  FilterGrenadeStats(stats: InventoryTooltipData_StatData[]): InventoryTooltipData_StatData[]
  FilterArmorStat(stats: InventoryTooltipData_StatData[]): InventoryTooltipData_StatData[]
  UpdateSecondaryStats(): void
  UpdateAttachments(): void
  UpdateMods(mods: InventoryItemAttachments[]): void
  UpdateDedicatedMods(mods: InventoryItemAttachments[]): void
  UpdateRequirements(): void
  UpdateDescription(): void
  UpdateWeight(): void
  UpdateRequiredLevel(): void
  UpdatePrice(): void
  UpdateCraftedIcon(): void
  GetItemType(): gamedataItemType
}

declare interface ItemTooltipStatController extends inkLogicController {

  SetData(data: InventoryTooltipData_StatData): void
  SetData(data: MinimalItemTooltipStatData): void
  UpdateComparedValue(diff: number, isPercentage: Bool, displayPlus: Bool): void
}

declare interface ItemRandomizedStatsController extends inkLogicController {

  SetData(data: InventoryTooltipData_StatData[]): void
}

declare interface ItemTooltipModController extends inkLogicController {

  EntryWidgetToSpawn(): CName
  SetData(record: GameplayLogicPackageUIData_Record): void
  SetData(record: GameplayLogicPackageUIData_Record, itemData: gameItemData): void
  SetData(record: GameplayLogicPackageUIData_Record, innerItemData: InnerItemData): void
  SetData(ability: InventoryItemAbility): void
  SetData(attachment: InventoryItemAttachments): void
  SetData(data: MinimalItemTooltipModData): void
  SetData(data: MinimalItemTooltipModRecordData): void
  SetData(data: MinimalItemTooltipModAttachmentData): void
  SpawnController(): ItemTooltipModEntryController
  HideDotIndicator(): void
}

declare interface ItemTooltipModEntryController extends inkLogicController {

  Setup(text: string): void
  Setup(data: MinimalItemTooltipModRecordData): void
  Setup(record: GameplayLogicPackageUIData_Record): void
  Setup(record: GameplayLogicPackageUIData_Record, itemData: gameItemData): void
  Setup(record: GameplayLogicPackageUIData_Record, partItemData: InnerItemData): void
  Setup(ability: InventoryItemAbility): void
}

declare interface InventorySlotWrapperTooltip extends AGenericTooltipController {

  OnInitialize(): Bool
  SetData(itemData: InventoryItemData, isSelected: Bool): void
  SetData(tooltipData: ATooltipData, isSelected: Bool): void
  SetData(tooltipData: ATooltipData): void
}

declare interface SubtitlesGameController extends BaseSubtitlesGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnSubCreated(controller: BaseSubtitleLineLogicController): void
  SetSubsVisibilitySetting(value: Bool): void
  ShouldDisplayLine(lineData: scnDialogLineData): Bool
  CreateLine(lineSpawnData: LineSpawnData): void
  OnHideLine(lineData: subtitleLineMapEntry): void
  OnHideLineByData(lineData: subtitleLineMapEntry): void
  OnShowSceneComment(value: string): Bool
  OnHideSceneComment(value: Bool): Bool
}

declare interface SubtitleLineLogicController extends BaseSubtitleLineLogicController {

  OnInitialize(): Bool
  SetupSettings(textSize: number, backgroundOpacity: number): void
  ShowBackground(value: Bool): void
  SetLineData(lineData: scnDialogLineData): void
}

declare interface CyberdeckTooltip extends AGenericTooltipController {

  OnInitialize(): Bool
  SetData(data: ItemViewData): void
  SetData(tooltipData: ATooltipData): void
  Show(): void
  UpdateLayout(): void
  GetAbilities(): InventoryItemAbility[]
  UpdateAbilities(): void
  UpdateCyberdeckStats(): void
  SetupDeviceHacks(): void
  GetCyberdeckDeviceQuickhacks(): CyberdeckDeviceQuickhackData[]
  UpdateName(): void
  UpdateRarity(): void
  UpdateDescription(): void
  UpdateWeight(): void
  UpdateIcon(): void
  UpdatePrice(): void
  UpdateRequirements(): void
  FixLines(): void
}

declare interface LevelBarsController extends inkLogicController {

  OnInitialize(): Bool
  Update(quality: CName, qualityToCompare?: CName): void
  Update(quality: number): void
  GetBarWidget(index: number): inkWidgetRef
  Update(quality: number, qualityToCompare: number): void
}

declare interface CyberdeckStatController extends inkLogicController {

  Setup(ability: InventoryItemAbility): void
}

declare interface CyberdeckDeviceQuickhackData {

}

declare interface CyberdeckDeviceHackIcon extends inkLogicController {

  Setup(data: CyberdeckDeviceQuickhackData): void
}

declare interface CyberwareTooltip extends AGenericTooltipController {

  OnInitialize(): Bool
  SetData(tooltipData: ATooltipData): void
  SetData(data: CyberwareTooltipData): void
  UpdateLayout(): void
  OnOutro(): void
}

declare interface CyberwareTooltipSlotListItem extends AGenericTooltipController {

  OnInitialize(): Bool
  SetupData(data: CyberwareSlotTooltipData): void
}

declare interface MaterialTooltip extends AGenericTooltipController {

  SetData(tooltipData: ATooltipData): void
  Show(): void
  PlayAnim(animName: CName, callback: CName, forceVisible?: Bool): void
  OnIntroComplete(proxy: inkAnimProxy): Bool
  OnOutroComplete(proxy: inkAnimProxy): Bool
}

declare interface MessageDescTooltip extends MessageTooltip {

  SetData(tooltipData: ATooltipData): void
}

declare interface ProgramTooltipController extends AGenericTooltipController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnGlobalPress(evt: inkPointerEvent): Bool
  OnGlobalRelease(evt: inkPointerEvent): Bool
  SetData(tooltipData: ATooltipData): void
  UpdateDetail(targetWidget: inkWidgetRef, key: string, value: number, diff: number): void
  UpdateDescription(): void
  GetHackCategory(): HackCategory_Record
  UpdateCategory(): void
  UpdateRarity(): void
  RefreshUI(): void
  DEBUG_UpdateIconErrorInfo(): void
  IsDamageStat(targetStat: gamedataStatType, valueStat: gamedataStatType): Bool
  UpdateDamage(): void
  UpdateMods(): void
  UpdatePrice(): void
}

declare interface ProgramTooltipStatController extends inkLogicController {

  SetData(localizedKey: string, value: number, diff: number): void
  UpdateComparedValue(diffValue: number): void
}

declare interface ProgramTooltipEffectController extends ItemTooltipModController {

  EntryWidgetToSpawn(): CName
}

declare interface ItemTooltipCommonController extends AGenericTooltipController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnGlobalPress(evt: inkPointerEvent): Bool
  OnGlobalRelease(evt: inkPointerEvent): Bool
  SetData(data: ItemViewData): void
  SetData(tooltipData: ATooltipData): void
  UpdateData(tooltipData: InventoryTooltipData): void
  RequestModule(container: inkWidgetRef, moduleName: CName, callback: CName, data?: ItemTooltipModuleSpawnedCallbackData): Bool
  HandleModuleSpawned(widget: inkWidget, data: ItemTooltipModuleSpawnedCallbackData): void
  UpdateLayout(): void
  UpdateEquippedModule(): void
  OnEquippedModuleSpawned(widget: inkWidget, userData: IScriptable): Bool
  UpdateHeaderModule(): void
  OnHeaderModuleSpawned(widget: inkWidget, userData: IScriptable): Bool
  UpdateIconModule(): void
  OnIconModuleSpawned(widget: inkWidget, userData: IScriptable): Bool
  OnHideIconModuleEvent(evt: HideIconModuleEvent): Bool
  UpdateWeaponInfoModule(): void
  OnWeaponInfoModuleSpawned(widget: inkWidget, userData: IScriptable): Bool
  UpdateClothingInfoModule(): void
  OnClothingInfoModuleSpawned(widget: inkWidget, userData: IScriptable): Bool
  UpdateGrenadeInfoModule(): void
  OnGrenadeInfoModuleSpawned(widget: inkWidget, userData: IScriptable): Bool
  UpdateRequirementsModule(): void
  OnRequirementsModuleSpawned(widget: inkWidget, userData: IScriptable): Bool
  UpdateDetailsModule(): void
  OnDetailsModuleSpawned(widget: inkWidget, userData: IScriptable): Bool
  UpdateRecipeDataModule(): void
  OnRecipeDataModuleSpawned(widget: inkWidget, userData: IScriptable): Bool
  UpdateEvolutionModule(): void
  OnEvolutionModuleSpawned(widget: inkWidget, userData: IScriptable): Bool
  UpdateCraftedModule(): void
  OnCraftedModuleSpawned(widget: inkWidget, userData: IScriptable): Bool
  UpdateBottomModule(): void
  OnBottomModuleSpawned(widget: inkWidget, userData: IScriptable): Bool
  DEBUG_UpdateIconErrorInfo(): void
}

declare interface ItemTooltipModuleSpawnedCallbackData extends IScriptable {

}

declare interface ItemTooltipDetailsModule extends ItemTooltipModuleController {

  UpdateStats(data: MinimalItemTooltipData): void
  UpdateMods(data: MinimalItemTooltipData): void
  UpdateDedicatedMods(data: MinimalItemTooltipData): void
}

declare interface ItemTooltipEquippedModule extends ItemTooltipModuleController {

}

declare interface ItemTooltipHeaderController extends ItemTooltipModuleController {

  Update(data: MinimalItemTooltipData): void
  UpdateName(data: MinimalItemTooltipData): void
  UpdateRarity(data: MinimalItemTooltipData): void
}

declare interface ItemTooltipIconModule extends ItemTooltipModuleController {

  OnInitialize(): Bool
  Update(data: MinimalItemTooltipData): void
  OnIconCallback(e: iconAtlasCallbackData): Bool
  GetIconPath(data: MinimalItemTooltipData, itemRecord?: Item_Record): CName
  GetIconScale(data: MinimalItemTooltipData, equipmentArea: gamedataEquipmentArea): Vector2
}

declare interface HideIconModuleEvent extends Event {

}

declare interface ItemTooltipWeaponInfoModule extends ItemTooltipModuleController {

  Update(data: MinimalItemTooltipData): void
}

declare interface ItemTooltipClothingInfoModule extends ItemTooltipModuleController {

  Update(data: MinimalItemTooltipData): void
}

declare interface ItemTooltipGrenadeInfoModule extends ItemTooltipModuleController {

  Update(data: MinimalItemTooltipData): void
  UpdateGrenadeDeliveryMethod(deliveryMethod: gamedataGrenadeDeliveryMethodType): void
}

declare interface ItemTooltipRequirementsModule extends ItemTooltipModuleController {

  Update(data: MinimalItemTooltipData): void
}

declare interface ItemTooltipRecipeDataModule extends ItemTooltipModuleController {

  Update(data: MinimalItemTooltipData): void
  UpdatemRecipeDamageTypes(data: MinimalItemTooltipData): void
  UpdatemRecipeProperties(data: MinimalItemTooltipData): void
}

declare interface ItemTooltipEvolutionModule extends ItemTooltipModuleController {

  Update(data: MinimalItemTooltipData): void
}

declare interface ItemTooltipCraftedModule extends ItemTooltipModuleController {

  Update(data: MinimalItemTooltipData): void
}

declare interface ItemTooltipBottomModule extends ItemTooltipModuleController {

  Update(data: MinimalItemTooltipData): void
}

declare interface TooltipProgessBarController extends inkLogicController {

  SetProgressState(craftingMode: CraftingMode, isCraftable: Bool): void
  AddButtonHints(actionName: CName, label: string): void
  OnHold(evt: inkPointerEvent): Bool
  OnRelease(evt: inkPointerEvent): Bool
  OnUninitialize(): Bool
}

declare interface hudCarController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  OnMountingEvent(evt: MountingEvent): Bool
  OnUnmountingEvent(evt: UnmountingEvent): Bool
  RegisterToVehicle(register: Bool): void
  OnZoomChange(evt: number): Bool
  OnRpmMaxChanged(rpmMax: number): Bool
  OnSpeedValueChanged(speedValue: number): Bool
  OnGearValueChanged(gearValue: number): Bool
  OnRpmValueChanged(rpmValue: number): Bool
  Reset(): void
  drawRPMGaugeFull(rpmValue: number): void
  EvaluateRPMMeterWidget(currentAmountOfChunks: number): void
  UpdateChunkVisibility(): void
  OnLeanAngleChanged(leanAngle: number): Bool
  OnCameraModeChanged(mode: Bool): Bool
}

declare interface hudCarRaceController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnForwardVehicleRaceUIEvent(evt: ForwardVehicleRaceUIEvent): Bool
  Setup(on: Bool): void
  StartCountdown(): void
  SetupCounters(): void
  StartRace(): void
  EndRace(): void
  OnVehicleForwardRaceCheckpointFactEvent(evt: VehicleForwardRaceCheckpointFactEvent): Bool
  OnVehicleForwardRaceClockUpdateEvent(evt: VehicleForwardRaceClockUpdateEvent): Bool
}

declare interface inkDexLimoGameController extends inkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPlayerStateChanged(data: Variant): Bool
}

declare interface gameuiTooltipAttachmentSlot extends inkLogicController {

}

declare interface VehicleUIactivateEvent extends Event {

}

declare interface vehicleInteriorUIGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  RegisterBlackBoardCallbacks(): void
  UnregisterBlackBoardCallbacks(): void
  OnActivateUI(activate: Bool): Bool
  OnActivateUIEvent(evt: VehicleUIactivateEvent): Bool
  ActivateUI(): void
  DeactivateUI(): void
  IsUIactive(): Bool
  OnVehicleReady(ready: Bool): Bool
  OnVehicleStateChanged(state: number): Bool
  OnRpmMaxChanged(rpmMax: number): Bool
  OnSpeedValueChanged(speedValue: number): Bool
  OnGearValueChanged(gearValue: number): Bool
  OnRpmValueChanged(rpmValue: number): Bool
  drawRPMGaugeFull(rpmValue: number): void
  EvaluateRPMMeterWidget(currentAmountOfChunks: number): void
  RedrawRPM(currentAmountOfChunks: number): void
  AddChunk(): void
  RemoveChunk(): void
  OnAutopilotChanged(autopilotOn: Bool): Bool
  RefreshUI(): void
}

declare interface inkMotorcycleHUDGameController extends BaseVehicleHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnVehicleMounted(): Bool
  OnVehicleUnmounted(): Bool
  OnHudHideAnimFinished(proxy: inkAnimProxy): Bool
  OnHudShowAnimFinished(proxy: inkAnimProxy): Bool
  OnVehicleStateChanged(state: number): Bool
  OnPlayerStateChanged(data: Variant): Bool
  OnRpmMaxChanged(rpmMax: number): Bool
  OnSpeedValueChanged(speedValue: number): Bool
  OnGearValueChanged(gearValue: number): Bool
  OnRpmValueChanged(rpmValue: number): Bool
  drawRPMGaugeFull(rpmValue: number): void
  EvaluateRPMMeterWidget(currentAmountOfChunks: number): void
  RedrawRPM(currentAmountOfChunks: number): void
  AddChunk(): void
  RemoveChunk(): void
  OnLeanAngleChanged(leanAngle: number): Bool
  OnCameraModeChanged(mode: Bool): Bool
  CheckVehicleType(desiredType: string): Bool
}

declare interface vehicleDebugUIGameController extends BaseVehicleHUDGameController {

  OnInitialize(): Bool
  OnActivateTest(value: Bool): Bool
  OnUninitialize(): Bool
  OnVehicleMounted(): Bool
  OnVehicleUnmounted(): Bool
  OnVehicleStateChanged(state: number): Bool
  OnSpeedValueChanged(speedValue: number): Bool
  OnGearValueChanged(gearValue: number): Bool
  OnRpmValueChanged(rpmValue: number): Bool
  OnRpmMaxChanged(rpmMax: number): Bool
  OnAutopilotChanged(autopilotOn: Bool): Bool
  RefreshUI(): void
  OnRadioStateChanged(state: Bool): Bool
  OnRadioNameChanged(stationName: CName): Bool
}

declare interface vehicleUIGameController extends inkHUDGameController {

  SetupModule(widget: inkWidgetRef, vehicle: VehicleObject, vehBB: IBlackboard): void
  UnregisterModule(widget: inkWidgetRef): void
  OnInitialize(): Bool
  OnUninitialize(): Bool
  ActivateUI(): void
  DeactivateUI(): void
  OnActivateUI(activate: Bool): Bool
  OnActivateUIEvent(evt: VehicleUIactivateEvent): Bool
  OnVehicleReady(ready: Bool): Bool
  RegisterBlackBoardCallbacks(): void
  UnregisterBlackBoardCallbacks(): void
  IsUIactive(): Bool
  InitializeWidgetStyleSheet(veh: VehicleObject): void
  CheckIfVehicleShouldTurnOn(): void
  OnVehicleStateChanged(state: number): Bool
  TurnOn(): void
  TurnOff(): void
  OnStartAnimFinished(anim: inkAnimProxy): Bool
  PlayIdleLoop(): void
  OnEndAnimFinished(anim: inkAnimProxy): Bool
  PlayLibraryAnim(animName: CName): void
  EvaluateWidgetStyle(time: GameTime): void
  OnVehicleCollision(collision: Bool): Bool
  OnForwardVehicleQuestEnableUIEvent(evt: ForwardVehicleQuestEnableUIEvent): Bool
  OnVehiclePanzerBootupUIQuestEvent(evt: VehiclePanzerBootupUIQuestEvent): Bool
  KillBootupProxy(): void
  OnForwardVehicleQuestUIEffectEvent(evt: ForwardVehicleQuestUIEffectEvent): Bool
}

declare interface smartGunUISightParameters {

}

declare interface gameuiWeaponShootParams {

}

declare interface vehicleVcarRootLogicController extends inkLogicController {

  OnInitialize(): Bool
  OnMounted(): Bool
}

declare interface vehicleVcarGameController extends inkGameController {

  OnInitialize(): Bool
  OnActivateTest(value: Bool): Bool
  OnUninitialize(): Bool
  OnActiveVehicleChanged(isPlayerMounted: Bool): Bool
  OnSpeedValueChanegd(speedValue: number): Bool
  OnRpmValueChanged(rpmValue: number): Bool
  drawRPMGaugeFull(rpmValue: number): void
  OnRpmMaxChanged(rpmMax: number): Bool
  EvaluateRPMMeterWidget(currentAmountOfChunks: number): void
  AddChunk(): void
  RemoveChunk(): void
  PrepAnim(): void
  PrepFluffLoopAnim(): void
  OnAutopilotChanged(autopilotOn: Bool): Bool
  OnPlayerStateChanged(data: Variant): Bool
  OnAnimFadeOutFinshed(anim: inkAnimProxy): Bool
  OnAnimFluffFadeInFinshed(anim: inkAnimProxy): Bool
}

declare interface speedometerLogicController extends IVehicleModuleController {

  RegisterCallbacks(vehicle: VehicleObject, vehBB: IBlackboard, gameController: vehicleUIGameController): void
  UnregisterCallbacks(): void
  OnUninitialize(): Bool
  OnSpeedValueChanged(speed: number): void
}

declare interface tachometerLogicController extends IVehicleModuleController {

  RegisterCallbacks(vehicle: VehicleObject, vehBB: IBlackboard, gameController: vehicleUIGameController): void
  UnregisterCallbacks(): void
  OnUninitialize(): Bool
  SetupRPMDefaultState(): void
  OnRpmValueChanged(rpmValue: number): void
}

declare interface gametimeLogicController extends IVehicleModuleController {

  RegisterCallbacks(vehicle: VehicleObject, vehBB: IBlackboard, gameController: vehicleUIGameController): void
  UnregisterCallbacks(): void
  OnUninitialize(): Bool
  OnGameTimeChanged(time: string): void
}

declare interface instrumentPanelLogicController extends IVehicleModuleController {

  RegisterCallbacks(vehicle: VehicleObject, vehBB: IBlackboard, gameController: vehicleUIGameController): void
  UnregisterCallbacks(): void
  OnUninitialize(): Bool
  ForceUpdate(): void
  OnLightModeChanged(state: number): void
  OnCautionStateChanged(state: number): void
}

declare interface gearboxLogicController extends IVehicleModuleController {

  RegisterCallbacks(vehicle: VehicleObject, vehBB: IBlackboard, gameController: vehicleUIGameController): void
  UnregisterCallbacks(): void
  ForceUpdate(): void
  OnUninitialize(): Bool
  OnGearBoxChanged(gear: number): void
}

declare interface RadioLogicController extends IVehicleModuleController {

  RegisterCallbacks(vehicle: VehicleObject, vehBB: IBlackboard, gameController: vehicleUIGameController): void
  UnregisterCallbacks(): void
  OnUninitialize(): Bool
  OnRadioStateChanged(state: Bool): void
  OnRadioNameChanged(station: CName): void
}

declare interface gameuiCrosshairContainerController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPlayerAttach(playerGameObject: GameObject): Bool
  OnPlayerDetach(playerGameObject: GameObject): Bool
  RegisterPSMListeners(playerPuppet: GameObject): void
  UnregisterPSMListeners(playerPuppet: GameObject): void
  GetActiveCrosshairWidget(): inkWidget
  GetActiveCrosshairGameController(): gameuiCrosshairBaseGameController
  OnPSMCrosshairStateChanged(value: number): Bool
  OnMountChanged(mounted: Bool): Bool
  UpdateRootVisibility(): void
  OnInteractionStateChange(value: Variant): Bool
  OnWeaponSwap(value: Variant): Bool
  OnSceneTierChange(argTier: number): Bool
  CreateAnimations(): void
}

declare interface analogTachLogicController extends IVehicleModuleController {

  RegisterCallbacks(vehicle: VehicleObject, vehBB: IBlackboard, gameController: vehicleUIGameController): void
  UnregisterCallbacks(): void
  OnUninitialize(): Bool
  OnRpmValueChanged(rpmValue: number): void
}

declare interface analogSpeedometerLogicController extends IVehicleModuleController {

  RegisterCallbacks(vehicle: VehicleObject, vehBB: IBlackboard, gameController: vehicleUIGameController): void
  UnregisterCallbacks(): void
  OnUninitialize(): Bool
  OnSpeedValueChanged(speed: number): void
}

declare interface CrosshairGameController_Launcher extends gameuiCrosshairBaseGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  GetIntroAnimation(firstEquip: Bool): inkAnimDef
  GetOutroAnimation(): inkAnimDef
  OnPSMLeftHandCyberwareStateChanged(value: number): Bool
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  OnState_Equip(): void
  OnState_QuickLaunch(): void
  OnState_Aim(): void
  OnState_ChargeLaunch(): void
  OnState_Unequip(): void
}

declare interface CrosshairGameController_Mantis_Blade extends gameuiCrosshairBaseGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  OnPSMMeleeWeaponStateChanged(value: number): Bool
  OnMeleeWeaponStateChange(oldState: gamePSMMeleeWeapon, newState: gamePSMMeleeWeapon): void
  GetIntroAnimation(firstEquip: Bool): inkAnimDef
  ApplyCrosshairGUIState(state: CName, aimedAtEntity: Entity): void
  GetOutroAnimation(): inkAnimDef
  PlayAnimation(animName: CName): inkAnimProxy
  OnState_Hold(): void
  OnState_Default(): void
}

declare interface CrosshairGameController_Melee extends gameuiCrosshairBaseMelee {

  OnInitialize(): Bool
  OnPreIntro(): Bool
  OnPreOutro(): Bool
  ApplyCrosshairGUIState(state: CName, aimedAtEntity: Entity): void
  UpdateResourceValue(oldValue: number, newValue: number, percToPoints: number): void
  SetChargeScale(pct: number): void
  OnUninitialize(): Bool
  GetIntroAnimation(firstEquip: Bool): inkAnimDef
  GetOutroAnimation(): inkAnimDef
  ShowCrosshairFromState(show: Bool): void
  OnState_Safe(): void
  OnState_Scanning(): void
  OnState_GrenadeCharging(): void
  OnState_HipFire(): void
  OnState_Reload(): void
  OnState_Aim(): void
  OnState_Sprint(): void
  OnState_LeftHandCyberware(): void
}

declare interface MeleeResourcePoolListener extends ScriptStatPoolsListener {

  Bind(crosshair: CrosshairGameController_Melee): void
  OnStatPoolValueChanged(oldValue: number, newValue: number, percToPoints: number): void
}

declare interface CrosshairGameController_Basic extends gameuiCrosshairBaseGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPreIntro(): Bool
  OnPreOutro(): Bool
  OnTriggerModeChanged(value: Variant): void
  GetIntroAnimation(firstEquip: Bool): inkAnimDef
  GetOutroAnimation(): inkAnimDef
  OnBulletSpreadChanged(spread: Vector2): Bool
  ColapseCrosshair(full: Bool, duration: number): void
  ExpandCrosshair(full: Bool, duration: number): void
  ShowCenterPart(duration: number): void
  HideCenterPart(duration: number): void
  OnShow(): void
  OnHide(): void
  OnState_Safe(): void
  OnState_HipFire(): void
  OnState_Aim(): void
  OnState_Reload(): void
  OnState_Sprint(): void
  OnState_GrenadeCharging(): void
  OnState_Scanning(): void
  ApplyCrosshairGUIState(state: CName, aimedAtEntity: Entity): void
}

declare interface CrosshairGameController_NoWeapon extends gameuiCrosshairBaseGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  GetIntroAnimation(firstEquip: Bool): inkAnimDef
  GetOutroAnimation(): inkAnimDef
  OnState_HipFire(): void
  OnState_Aim(): void
  OnState_Sprint(): void
  OnState_Scanning(): void
  OnState_Safe(): void
  OnZoomLevel(argZoom: number): Bool
  OnPSMSceneTierChanged(value: number): Bool
}

declare interface CrosshairGameController_Simple extends gameuiCrosshairBaseGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPreIntro(): Bool
  OnPreOutro(): Bool
  GetIntroAnimation(firstEquip: Bool): inkAnimDef
  GetOutroAnimation(): inkAnimDef
  OnBulletSpreadChanged(spread: Vector2): Bool
  OnChargeChanged(argCharge: number): Bool
  ApplyCrosshairGUIState(state: CName, aimedAtEntity: Entity): void
  OnState_HipFire(): void
  OnState_Aim(): void
}

declare interface Crosshair_ChargeBar extends gameuiCrosshairBaseGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPreIntro(): Bool
  OnPreOutro(): Bool
  GetIntroAnimation(firstEquip: Bool): inkAnimDef
  GetOutroAnimation(): inkAnimDef
  OnBulletSpreadChanged(spread: Vector2): Bool
  OnChargeChanged(charge: number): void
  ApplyCrosshairGUIState(state: CName, aimedAtEntity: Entity): void
}

declare interface CrosshairGameController_Smart_Rifl extends gameuiCrosshairBaseGameController {

  OnInitialize(): Bool
  OnPreIntro(): Bool
  OnPreOutro(): Bool
  SetupLayout(): void
  OnSmartGunParams(argParams: Variant): Bool
  ApplyCrosshairGUIState(state: CName, aimedAtEntity: Entity): void
  GetIntroAnimation(firstEquip: Bool): inkAnimDef
  GetOutroAnimation(): inkAnimDef
  OnCrosshairStateChange(oldState: gamePSMCrosshairStates, newState: gamePSMCrosshairStates): void
  OnBulletSpreadChanged(spread: Vector2): Bool
  OnState_HipFire(): void
  OnState_Aim(): void
  OnState_Reload(): void
  OnState_Sprint(): void
  OnState_GrenadeCharging(): void
  OnState_Scanning(): void
  OnState_Safe(): void
}

declare interface Crosshair_Smart_Rifl_Bucket extends inkLogicController {

  OnInitialize(): Bool
  SetData(data: smartGunUITargetParameters): void
}

declare interface CrosshairGameController_Tech_Hex extends BaseTechCrosshairController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPreIntro(): Bool
  OnPreOutro(): Bool
  OnTriggerModeChanged(value: Variant): void
  OnAmmoCountChanged(value: number): void
  GetIntroAnimation(firstEquip: Bool): inkAnimDef
  GetOutroAnimation(): inkAnimDef
  OnBulletSpreadChanged(spread: Vector2): Bool
  OnChargeChanged(chargeValue: number): void
  UpdateSpread(): void
  UpdateChargeBar(): void
  CollapseCrosshair(duration: number): void
  ExpandCrosshair(duration: number): void
  ShowCenterPart(duration: number): void
  HideCenterPart(duration: number): void
  OnShow(): void
  OnHide(): void
  OnState_Safe(): void
  OnState_HipFire(): void
  OnState_Aim(): void
  OnState_Reload(): void
  OnState_Sprint(): void
  OnState_GrenadeCharging(): void
  OnState_Scanning(): void
  ApplyCrosshairGUIState(state: CName, aimedAtEntity: Entity): void
}

declare interface Crosshair_Custom_HMG extends gameuiCrosshairBaseGameController {

  OnInitialize(): Bool
  OnPreIntro(): Bool
  OnPreOutro(): Bool
  GetIntroAnimation(firstEquip: Bool): inkAnimDef
  GetOutroAnimation(): inkAnimDef
  OnBulletSpreadChanged(spread: Vector2): Bool
  ApplyCrosshairGUIState(state: CName, aimedAtEntity: Entity): void
  OnOverheatChanged(argValue: number): Bool
  OnIsInForcedOverheatCooldown(argValue: Bool): Bool
}

declare interface CrosshairGameController_Tech_Round extends BaseTechCrosshairController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPreIntro(): Bool
  OnPreOutro(): Bool
  OnTriggerModeChanged(value: Variant): void
  OnAmmoCountChanged(value: number): void
  OnAmmoCapacityChanged(value: number): void
  OnChargeChanged(charge: number): void
  GetIntroAnimation(firstEquip: Bool): inkAnimDef
  GetOutroAnimation(): inkAnimDef
  OnBulletSpreadChanged(spread: Vector2): Bool
  ColapseCrosshair(full: Bool, duration: number): void
  ExpandCrosshair(full: Bool, duration: number): void
  ShowCenterPart(duration: number): void
  HideCenterPart(duration: number): void
  OnShow(): void
  OnHide(): void
  OnState_Safe(): void
  OnState_HipFire(): void
  OnState_Aim(): void
  OnState_Reload(): void
  OnState_Sprint(): void
  OnState_GrenadeCharging(): void
  OnState_Scanning(): void
  OnCurrentAimTarget(entId: EntityID): Bool
  OnCurrentObstructedTarget(entId: EntityID): Bool
  OnTargetsChanged(): void
  ApplyCrosshairGUIState(state: CName, aimedAtEntity: Entity): void
  GetDistanceToTarget(): number
}

declare interface CrosshairGameController_Jailbreak_Power extends gameuiCrosshairBaseGameController {

}

declare interface CrosshairGameController_Jailbreak_Smart extends gameuiCrosshairBaseGameController {

}

declare interface CrosshairGameController_Jailbreak_Tech extends gameuiCrosshairBaseGameController {

}

declare interface KillMarkerGameController extends inkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnNPCNeutralized(value: Variant): Bool
  OnKillMarkerComplete(proxy: inkAnimProxy): Bool
}

declare interface Crosshair_Power_Defender extends gameuiCrosshairBaseGameController {

  OnInitialize(): Bool
  GetIntroAnimation(firstEquip: Bool): inkAnimDef
  GetOutroAnimation(): inkAnimDef
  OnBulletSpreadChanged(spread: Vector2): Bool
  ApplyCrosshairGUIState(state: CName, aimedAtEntity: Entity): void
}

declare interface Crosshair_Melee_Hammer extends gameuiCrosshairBaseGameController {

  OnInitialize(): Bool
  GetIntroAnimation(firstEquip: Bool): inkAnimDef
  GetOutroAnimation(): inkAnimDef
  ApplyCrosshairGUIState(state: CName, aimedAtEntity: Entity): void
}

declare interface Crosshair_Melee_Knife extends gameuiCrosshairBaseGameController {

  OnInitialize(): Bool
  GetIntroAnimation(firstEquip: Bool): inkAnimDef
  GetOutroAnimation(): inkAnimDef
  OnBulletSpreadChanged(spread: Vector2): Bool
  ApplyCrosshairGUIState(state: CName, aimedAtEntity: Entity): void
}

declare interface Crosshair_Melee_Misc extends gameuiCrosshairBaseGameController {

  OnInitialize(): Bool
  GetIntroAnimation(firstEquip: Bool): inkAnimDef
  GetOutroAnimation(): inkAnimDef
  ApplyCrosshairGUIState(state: CName, aimedAtEntity: Entity): void
}

declare interface Crosshair_Melee_Nano_Wire extends CrosshairGameController_Melee {

  OnInitialize(): Bool
  GetIntroAnimation(firstEquip: Bool): inkAnimDef
  GetOutroAnimation(): inkAnimDef
  ApplyCrosshairGUIState(state: CName, aimedAtEntity: Entity): void
  OnMeleeState_Update(value: gamePSMMeleeWeapon): void
}

declare interface Crosshair_Tech_Omaha extends gameuiCrosshairBaseGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPreIntro(): Bool
  OnPreOutro(): Bool
  GetIntroAnimation(firstEquip: Bool): inkAnimDef
  GetOutroAnimation(): inkAnimDef
  OnBulletSpreadChanged(spread: Vector2): Bool
  OnChargeChanged(charge: number): void
  ApplyCrosshairGUIState(state: CName, aimedAtEntity: Entity): void
}

declare interface Crosshair_Power_Overture extends gameuiCrosshairBaseGameController {

  OnInitialize(): Bool
  GetIntroAnimation(firstEquip: Bool): inkAnimDef
  GetOutroAnimation(): inkAnimDef
  OnBulletSpreadChanged(spread: Vector2): Bool
  ApplyCrosshairGUIState(state: CName, aimedAtEntity: Entity): void
}

declare interface Crosshair_Power_Tactician extends gameuiCrosshairBaseGameController {

  OnInitialize(): Bool
  GetIntroAnimation(firstEquip: Bool): inkAnimDef
  GetOutroAnimation(): inkAnimDef
  OnBulletSpreadChanged(spread: Vector2): Bool
  ApplyCrosshairGUIState(state: CName, aimedAtEntity: Entity): void
}

declare interface Crosshair_Power_Saratoga extends gameuiCrosshairBaseGameController {

  OnInitialize(): Bool
  GetIntroAnimation(firstEquip: Bool): inkAnimDef
  GetOutroAnimation(): inkAnimDef
  OnBulletSpreadChanged(spread: Vector2): Bool
  ApplyCrosshairGUIState(state: CName, aimedAtEntity: Entity): void
}

declare interface blunderbussWeaponController extends inkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnCharge(value: number): Bool
  OnTriggerMode(value: Variant): Bool
  OnMagazineAmmoCount(value: number): Bool
}

declare interface ChargebarStatsListener extends ScriptStatsListener {

  Init(controller: ChargebarController, stat: gamedataStatType): void
  OnStatChanged(ownerID: StatsObjectID, statType: gamedataStatType, diff: number, total: number): void
}

declare interface ChargebarController extends inkLogicController {

  OnPlayerAttach(player: GameObject): void
  OnPlayerDetach(player: GameObject): void
  OnStatChanged(ownerID: StatsObjectID, statType: gamedataStatType, diff: number, total: number): void
  OnTriggerModeChanged(value: Variant): void
  OnChargeValueChanged(value: number): void
  GetCurrentChargeLimit(): number
  SetBarsSize(value: number, threshold: number): void
  EvalChargeAnimation(value: number, threshold: number): void
}

declare interface TriggerModeLogicController extends inkLogicController {

  OnTriggerModeChanged(value: TriggerMode_Record): void
}

declare interface AmmoLogicController extends inkLogicController {

  OnMagazineAmmoCountChanged(value: number): void
  OnMagazineAmmoCapacityChanged(value: number): void
}

declare interface ChargeLogicController extends inkLogicController {

  OnChargeChanged(value: number): void
}

declare interface weaponIndicatorController extends inkHUDGameController {

  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnCharge(value: number): Bool
  OnTriggerMode(value: Variant): Bool
  OnMagazineAmmoCount(value: number): Bool
  OnMagazineAmmoCapacity(value: Variant): Bool
}

declare interface CrouchIndicatorGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  RegisterBB(): void
  UnregisterBB(): void
  OnUpdateData(value: Variant): Bool
  OnAmmoIndicatorHacked(value: Bool): Bool
  OnPSMVisionStateChanged(value: number): Bool
  OnPSMLocomotionStateChanged(value: number): Bool
  OnAmmoLooted(value: Bool): Bool
  OnSmartGunParams(argParams: Variant): Bool
  OnWeaponDataChanged(value: Variant): Bool
  PlayFold(): void
  PlayUnfold(): void
  SetRosterSlotData(isMelee: Bool): void
  LoadWeaponIcon(): void
  SetTriggerModeIcons(): void
  GetItemTypeIcon(): CName
  HelperFireModeIcon(type: gamedataTriggerMode): CName
  GetUnreservedAmmoQuantityByType(ammoID: ItemID): number
  GetAmmoText(ammoCount: number, textLength: number): string
}

declare interface AltimeterController extends inkLogicController {

  OnPlayerAttach(playerPuppet: GameObject): void
  OnPlayerDetach(playerPuppet: GameObject): void
  OnUpdate(): Bool
  Update(): void
}

declare interface megatronModeInfoController extends TriggerModeLogicController {

  OnInitialize(): Bool
  OnTriggerModeChanged(value: TriggerMode_Record): void
}

declare interface megatronFullAutoController extends AmmoLogicController {

  OnInitialize(): Bool
  OnMagazineAmmoCountChanged(value: number): void
  OnMagazineAmmoCapacityChanged(value: number): void
  UpdateAmmoCount(value: number): void
}

declare interface megatronChargeController extends ChargeLogicController {

  OnInitialize(): Bool
  OnChargeChanged(value: number): void
}

declare interface megatronCrosshairGameController extends inkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPlayerAttach(playerGameObject: GameObject): Bool
  OnPlayerDetach(playerGameObject: GameObject): Bool
  RegisterPSMListeners(playerPuppet: GameObject): void
  UnregisterPSMListeners(playerPuppet: GameObject): void
  OnBulletSpreadChanged(spread: Vector2): Bool
  OnPSMCrosshairStateChanged(value: number): Bool
  OnCrosshairStateChange(oldState: gamePSMCrosshairStates, newState: gamePSMCrosshairStates): void
  ColapseCrosshair(full: Bool, duration: number): void
  ExpandCrosshair(full: Bool, duration: number): void
  OnState_HipFire(): void
  OnState_Aim(): void
  OnState_Reload(): void
  OnState_Sprint(): void
  GetUIActiveWeaponBlackboard(): IBlackboard
}

declare interface TargetAttitudeAnimationController extends BasicAnimationController {

  OnPlayerAttach(playerPuppet: GameObject): void
  OnPlayerDetach(playerPuppet: GameObject): void
  PlayShowHostile(): void
  PlayHideHostile(): void
  PlayHideToHostile(): void
  PlayHideToFriendly(): void
  OnAttitudeChanged(arg: number): void
}

declare interface AimDownSightController extends BasicAnimationController {

  OnPlayerAttach(playerPuppet: GameObject): void
  OnPlayerDetach(playerPuppet: GameObject): void
  OnAim(isAiming: Bool): void
}

declare interface CompassController extends inkLogicController {

  OnPlayerAttach(playerPuppet: GameObject): void
  OnPlayerDetach(playerPuppet: GameObject): void
  Update(): void
}

declare interface IronsightTargetHealthUpdateEvent extends Event {

}

declare interface IronsightTargetHealthChangeListener extends ScriptStatPoolsListener {

  /** @noSelf **/
  Create(parentIronsight: IronsightGameController): IronsightTargetHealthChangeListener
  OnStatPoolValueChanged(oldValue: number, newValue: number, percToPoints: number): void
}

declare interface StealthZonesGameController extends inkHUDGameController {

}

declare interface IronsightGameController extends gameuiIronsightGameController {

  StopAnimation(anim: inkAnimProxy): void
  ResetTargetData(): void
  RegisterTargetCallbacks(register: Bool): void
  UpdateTargetAttitudeVisibility(): void
  RefreshTargetDistance(): void
  RefreshTargetHealth(): void
  /** @noSelf **/
  IsDead(obj: GameObject): Bool
  OnIronsightTargetHealthUpdateEvent(evt: IronsightTargetHealthUpdateEvent): Bool
  OnTargetDistanceChanged(distance: number): Bool
  OnTargetAcquired(targetID: EntityID): Bool
  OnTargetAttitudeChanged(attitude: number): Bool
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnAnimationIntroFinished(anim: inkAnimProxy): void
  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnCompassUpdate(): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  OnAmmoCountChanged(value: number): void
  OnReloadEndLoop(anim: inkAnimProxy): void
  OnWeaponDataChanged(value: Variant): Bool
  OnShoot(arg: Variant): Bool
  OnTargetHit(arg: Variant): Bool
  OnAmmoSpareCountChanged(): void
  SetRosterSlotData(): void
  OnChargeValueChanged(value: number): Bool
  OnTriggerModeChanged(triggerMode: Variant): Bool
  OnCrosshairStatStateeChanged(state: number): Bool
  OnUpperBodyChanged(state: number): Bool
}

declare interface weaponRosterGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  RegisterBB(): void
  UnregisterBB(): void
  OnUpdateData(value: Variant): Bool
  OnAmmoIndicatorHacked(value: Bool): Bool
  OnPSMVisionStateChanged(value: number): Bool
  OnPSMLocomotionStateChanged(value: number): Bool
  OnAmmoLooted(value: Bool): Bool
  OnSmartGunParams(argParams: Variant): Bool
  OnWeaponDataChanged(value: Variant): Bool
  PlayFold(): void
  PlayUnfold(): void
  SetRosterSlotData(isMelee: Bool): void
  LoadWeaponIcon(): void
  SetTriggerModeIcons(): void
  GetItemTypeIcon(): CName
  HelperFireModeIcon(type: gamedataTriggerMode): CName
  GetUnreservedAmmoQuantityByType(ammoID: ItemID): number
  GetAmmoText(ammoCount: number, textLength: number): string
}

declare interface RadialMenuGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnRadialAngleChanged(value: number): Bool
  OnOpenWheelRequest(evt: QuickSlotButtonHoldStartEvent): Bool
  OnCloseWheelRequest(evt: QuickSlotButtonHoldEndEvent): Bool
  PopulateData(): void
  ApplySelection(): void
  SetVisible(value: Bool): void
}

declare interface QuickSlotButtonHoldEndEvent extends Event {

}

declare interface RadialMenuHelper extends IScriptable {

  /** @noSelf **/
  IsWeaponsBlocked(target: GameObject): Bool
  /** @noSelf **/
  IsCombatGadgetsBlocked(target: GameObject): Bool
}

declare interface RadialMenuItem extends inkHUDGameController {

}

declare interface gameuiChatBoxGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnChatAdded(value: Variant): Bool
  DisplayChat(chatBoxText: ChatBoxText): void
  DisplayHistory(chatBoxText: ChatBoxText): void
  OnHideRecentChat(chatItem: inkWidget): Bool
  OnUninitialize(): Bool
  UpdateInputContext(isChatBoxContext: Bool): void
  SetMaxEnteredChars(enteredText: inkTextInput): void
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
  ShowChatBox(show: Bool): void
  ShowHistory(): void
  SendChat(): void
}

declare interface TextSectionLogicController extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  SetActive(active: Bool): void
  Show(chatBoxText: ChatBoxText): void
  StartFadeOut(): void
  OnHide(anim: inkAnimProxy): Bool
}

declare interface BraindanceGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUnInitialize(): Bool
  SetupBB(): void
  UnregisterFromBB(): void
  OnBraindanceInputChangeEvent(evt: BraindanceInputChangeEvent): Bool
  OnClueDataUpdated(value: Variant): Bool
  OnProgressUpdated(value: number): Bool
  OnSectionTimeUpdated(value: number): Bool
  OnIsActiveUpdated(value: Bool): Bool
  OnIsFPPUpdated(value: Bool): Bool
  OnPlaybackSpeedUpdated(value: Variant): Bool
  OnPlaybackDirectionUpdated(value: Variant): Bool
  UpdateSpeedIndicators(): void
  OnVisionModeUpdated(value: number): Bool
  OnExitEnabled(value: Bool): Bool
  UpdateBraindance(active: Bool): void
  SetBraindanceBaseInput(): void
  SetBraindanceProgress(): void
  AddClue(clueData: BraindanceClueData): void
  SetVisionMode(layer: gameuiEBraindanceLayer): void
  UpdateClues(): void
  GetStateName(stateEnum: gameuiEBraindanceLayer): CName
  GetLeftShoulderLocKey(): CName
  ShowInputHint(action: CName, label: CName): void
  HideInputHint(action: CName): void
  Intro(): void
  Outro(): void
  Hide(): void
  GetTimeMS(seconds: number): string
}

declare interface BraindanceBarLogicController extends inkLogicController {

  SetBarLayer(layer: gameuiEBraindanceLayer, stateLayerName: CName): void
  UpdateActiveLayer(layer: gameuiEBraindanceLayer): void
  UpdateOpacity(): void
}

declare interface BraindanceClueData {

}

declare interface BraindanceClueLogicController extends inkLogicController {

  OnInitialize(): Bool
  SetupData(width: number, data: BraindanceClueData): void
  UpdateLayer(layer: gameuiEBraindanceLayer): void
  UpdateTimeWindow(currentTime: number): void
  UpdateOpacity(): void
  HideClue(): void
  GetBraindanceClueId(): CName
  GetBraindanceClueState(): ClueState
}

declare interface SpeedIndicatorIconsManager extends inkLogicController {

  SetBraindanceSpeed(currentSpeed: scnPlaySpeed, currentDirection: scnPlayDirection): void
}

declare interface CpoHudRootGameController extends inkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
}

declare interface NarrationJournalGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnEventAdded(value: Variant): Bool
  AddEntry(entry: NarrationEvent): void
  OnEntryHidden(entryWidget: inkWidget): Bool
}

declare interface LogEntryLogicController extends inkLogicController {

  OnInitialize(): Bool
  SetValues(entry: NarrationEvent): void
  SetTimeout(value: number): void
  OnTimeout(anim: inkAnimProxy): Bool
  OnHide(anim: inkAnimProxy): Bool
}

declare interface NarrativePlateGameController extends inkProjectedHUDGameController {

  OnInitialize(): Bool
  OnUnitialize(): Bool
  OnScreenProjectionUpdate(projections: gameuiScreenProjectionsData): Bool
  OnNarrativePlateChanged(value: Variant): Bool
}

declare interface NarrativePlateLogicController extends inkLogicController {

  SetPlateText(text: string, caption: string): void
  SetVisible(visible: Bool): void
}

declare interface PlayerListEntryData {

}

declare interface gameuiPlayerListGameController extends inkHUDGameController {

  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnRemotePlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  OnRemotePlayerDetach(playerPuppet: GameObject): Bool
  AddPlayerToList(playerPuppet: GameObject): void
  RemovePlayerFromList(playerPuppet: GameObject): void
}

declare interface PlayerListEntryLogicController extends inkLogicController {

  GetPlayerClassName(playerPuppet: GameObject): CName
  SetEntryData(playerPuppet: GameObject): void
  SetEntryColorAndIcon(playerPuppet: GameObject): void
}

declare interface cursorDeviceGameController extends inkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPlayerAttach(playerGameObject: GameObject): Bool
  OnPlayerDetach(playerGameObject: GameObject): Bool
  RegisterPSMListeners(playerPuppet: GameObject): void
  UnregisterPSMListeners(playerPuppet: GameObject): void
  OnWeaponSwap(value: Variant): Bool
  OnSceneTierChange(argTier: number): Bool
  OnUpperBodyChange(state: number): Bool
  OnInteractionStateChange(value: Variant): Bool
  UpdateIsInteractingWithDevice(): void
  CreateAnimations(): void
}

declare interface TargetHitIndicatorGameController extends inkGameController {

  OnInitialize(): Bool
  OnPlayerAttach(player: GameObject): Bool
  OnUninitialize(): Bool
  OnPlayerDetach(player: GameObject): Bool
  SpawnIndicator(type: CName): TargetHitIndicatorLogicController
  OnDamageAdded(value: Variant): Bool
  OnKillAdded(value: Variant): Bool
  ShouldShowDamage(damageInfo: DamageInfo): Bool
  ShouldShowBonus(damageInfo: DamageInfo): Bool
  Show(entity: GameObject, isDead: Bool, killType?: gameKillType): void
  PlayAnimation(): void
  OnAnimFinished(anim: inkAnimProxy): Bool
  ShowBonus(): void
  OnBonusAnimFinished(anim: inkAnimProxy): Bool
  OnSway(pos: Vector2): Bool
  OnAimStatusChange(value: number): Bool
  OnZoomLevelChange(value: number): Bool
  UpdateWidgetPosition(): void
  OnWeaponChange(value: Variant): Bool
  OnHitIndicatorEnabledChanged(value: Bool): Bool
}

declare interface TargetHitIndicatorLogicController extends inkLogicController {

  OnInitialize(): Bool
}

declare interface HitIndicatorWeaponZoomListener extends ScriptStatsListener {

  OnStatChanged(ownerID: StatsObjectID, statType: gamedataStatType, diff: number, total: number): void
}

declare interface DamageIndicatorGameController extends inkHUDGameController {

  ShouldShowDamage(evt: gameDamageReceivedEvent): Bool
}

declare interface DamageIndicatorPartLogicController extends BaseDirectionalIndicatorPartLogicController {

  SetReadyToRemove(): void
  SetShowingDamage(showing: Bool): void
  SetContinuous(continuous: Bool): void
  SetMinimumOpacity(opacity: number): void
  ResetMinimumOpacity(): void
  OnInitialize(): Bool
  InitPart(): void
  AddIncomingDamage(evt: gameDamageReceivedEvent): void
  AddAttackAttempt(evt: AIAttackAttemptEvent): void
  StopContinuousEffect(): void
  Reset(): void
  PlayAnim(animName: CName, callback: CName): void
  OnOutroComplete(e: inkAnimProxy): Bool
}

declare interface gameuiDetectionParams {

}

declare interface StealthIndicatorGameController extends inkHUDGameController {

  OnInitialize(): Bool
}

declare interface StealthIndicatorPartLogicController extends BaseDirectionalIndicatorPartLogicController {

  OnInitialize(): Bool
  OnUpdateDetection(params: gameuiDetectionParams): Bool
  PlayAnim(animName: CName, callback: CName, forceVisible: Bool): void
  OnHideIndicator(): Bool
  OnIntroComplete(proxy: inkAnimProxy): Bool
  OnOutroComplete(proxy: inkAnimProxy): Bool
  OnScaleIn(): void
  OnScaleInComplete(anim: inkAnimProxy): Bool
  OnScreenDelay(): void
  OnScreenDelayComplete(anim: inkAnimProxy): Bool
  OnScaleOut(): void
  OnScaleOutComplete(anim: inkAnimProxy): Bool
  GetDetectionProgress(): Vector4
}

declare interface artist_test_area_r extends inkHUDGameController {

  OnInitialize(): Bool
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
}

declare interface CarRadioGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnRadioChange(value: Bool): Bool
  OnSongChange(value: CName): Bool
  PlayIntroAnimation(): void
  OnOutroAnimFinished(anim: inkAnimProxy): Bool
}

declare interface DebugNpcNameplateGameController extends inkProjectedHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnDebugNpcStats(): Bool
  OnNameplateDataChanged(value: Variant): Bool
  OnScreenProjectionUpdate(projections: gameuiScreenProjectionsData): Bool
  HelperUpdateText(argString1: string, argString2: string): void
  GetNPCDebugNameplateStats(obj: GameObject, str_1: string, str_2: string): void
}

declare interface HotkeysWidgetController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnConsumableTutorial(val: number): void
  OnGameStarted(val: number): void
  ResolveVisibility(): void
  GameStarted(): Bool
  TutorialActivated(): Bool
}

declare interface KeyboardHintItemController extends AHintItemController {

  Setup(itemNumber: number): void
  CacheAnimations(): void
  SetState(isEnabled: Bool, isSelected: Bool): void
  Animate(isEnabled: Bool): void
}

declare interface keyboardHintGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  AddKeyboardItem(index: number): void
  OnKeyboardCommand(value: Variant): void
  AnimateKeyboardIcons(choosenItemIndex: number, success: Bool): void
}

declare interface CompanionHealthStatListener extends ScriptStatPoolsListener {

  BindHealthbar(bar: CompanionHealthBarGameController): void
  OnStatPoolValueChanged(oldValue: number, newValue: number, percToPoints: number): void
}

declare interface CompanionHealthBarGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnFlatheadStatusChanged(value: Bool): Bool
  RegisterStatsListener(): void
  UpdateHealthValue(value: number): void
}

declare interface PhoneHotkeyController extends GenericHotkeyController {

  Initialize(): Bool
  Uninitialize(): void
  UpdateData(): void
  OnJournalUpdate(entryHash: number, className: CName, notifyOption: JournalNotifyOption, changeType: JournalChangeType): Bool
  OnJournalUpdateVisited(entryHash: number, className: CName, notifyOption: JournalNotifyOption, changeType: JournalChangeType): Bool
  OnMessagePromptFinished(proxy: inkAnimProxy): Bool
  IsAllowedByGameplay(): Bool
  NewMassagePrompt(): void
  RestoreDefaultIcon(): void
  OnDpadActionPerformed(evt: DPADActionPerformed): Bool
}

declare interface CarHotkeyController extends GenericHotkeyController {

  Initialize(): Bool
  Uninitialize(): void
  OnDpadActionPerformed(evt: DPADActionPerformed): Bool
  OnPlayerEnteredVehicle(value: number): Bool
  IsAllowedByGameplay(): Bool
}

declare interface HotkeyItemController extends GenericHotkeyController {

  Initialize(): Bool
  InitializeHotkeyItem(): void
  Uninitialize(): void
  IsAllowedByGameplay(): Bool
  OnDpadActionPerformed(evt: DPADActionPerformed): Bool
  OnHotkeyRefreshed(value: Variant): Bool
  OnQuestActivate(value: number): void
  GetEquipmentSystem(): EquipmentSystem
}

declare interface DpadWheelGameController extends gameuiMenuGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  SetupBB(): void
  RemoveBB(): void
  OnRadialAngleChanged(value: number): Bool
  OnWheelInteractionStarted(value: Variant): Bool
  InitSelection(): void
  OnWheelInteractionEnded(value: Variant): Bool
  OnCyberwareAssigned(value: Bool): Bool
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
  UpdateAxisIndicator(value: number, actionName: CName): void
  DelayUnselectAllItems(): void
  DelayUnselsecAllItemsCancel(): void
  OnUndelectAllItemsDelayedEvent(evt: UndelectAllItemsDelayedEvent): Bool
  UnselectAllItems(): void
  ShowDPadWheel(eventData: QuickWheelStartUIStructure): void
  RefreshRadial(): void
  GetAllDpadCommands(): void
  AddCommandsToList(originalList: QuickSlotCommand[], newList: QuickSlotCommand[]): QuickSlotCommand[]
  SetupCommandList(data: QuickSlotCommand[]): void
  CreateWheelItems(): void
  CreateHashMarks(): void
  SetupSelectorMask(): void
  UpdateRotation(angleFloat: number): void
  UpdateInformationPanel(item: DpadWheelItemController): void
  SendSelectedItemChangeEventToEntity(data: QuickSlotCommand, currentEmpty?: Bool): void
  CycleToAbility(dir: number): void
  HideDpadWheel(): void
  UpdateButtonHints(): void
  CalculatePosition(index: number, dist: number): inkMargin
  IsLeft(margin: inkMargin): Bool
  GetNextAbility(currentAbility: AbilityData, dir: number): AbilityData
  UpdateVirtualAbilitiesList(): void
  CheckIfAbilityIsAssigned(ability: AbilityData): Bool
}

declare interface DpadWheelItemController extends inkLogicController {

  OnInitialize(): Bool
  SetupData(data: QuickSlotCommand, rotation: number, numOfWheelItems: number, inventoryManager: InventoryDataManagerV2, isLeft: Bool): void
  SetIcon(rotation: number): void
  SetHighlight(numOfWheelItems: number): void
  SetHover(isHover: Bool): void
  AddAbility(abilityData: AbilityData): void
  GetData(): QuickSlotCommand
  GetItemData(): InventoryItemData
  GetAbilityData(): AbilityData
}

declare interface UndelectAllItemsDelayedEvent extends Event {

}

declare interface HUDButtonHints extends inkGameController {

}

declare interface HUDProgressBarController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUnInitialize(): Bool
  SetupBB(): void
  UnregisterFromBB(): void
  OnActivated(activated: Bool): Bool
  OnHeaderChanged(header: string): Bool
  OnProgressChanged(progress: number): Bool
  UpdateProgressBarActive(active: Bool): void
  UpdateTimerProgress(value: number): void
  UpdateTimerHeader(label: string): void
  Intro(): void
  Outro(): void
  IntroEnded(): void
  Hide(): void
}

declare interface NpcNameplateVisualData {

}

declare interface HUDSignalProgressBarController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUnInitialize(): Bool
  SetupBB(): void
  UnregisterFromBB(): void
  OnStateChanged(state: number): Bool
  OnProgressChanged(progress: number): Bool
  OnSignalStrengthChanged(signalStrength: number): Bool
  UpdateTimerProgress(value: number): void
  UpdateSignalProgress(value: number): void
  SignalLost(val: Bool): void
  Show(): void
  Completed(): void
  OnHide(proxy: inkAnimProxy): Bool
  Hide(): void
}

declare interface InputHintGroupData {

}

declare interface InputHintInitializedEvent extends Event {

}

declare interface LogTutorialHintActionEvent extends Event {

}

declare interface AddInputGroupEvent extends Event {

}

declare interface DeleteInputGroupEvent extends Event {

}

declare interface InputHintManagerGameController extends inkGameController {

}

declare interface CharacterLevelUpGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  Setup(): void
  PlayIntroAnimation(): void
  OnOutroAnimFinished(anim: inkAnimProxy): Bool
}

declare interface CustomQuestNotificationGameController extends inkHUDGameController {

  OnInitialize(): Bool
  Setup(): void
  PlayAnimation(animName: CName): void
  OnOutroAnimFinished(anim: inkAnimProxy): Bool
}

declare interface NewAreaGameController extends inkHUDGameController {

  OnInitialize(): Bool
  Setup(): void
  PlayIntroAnimation(): void
  OnOutroAnimFinished(anim: inkAnimProxy): Bool
}

declare interface LevelUpGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  Setup(): void
  PlayIntroAnimation(): void
  OnOutroAnimFinished(anim: inkAnimProxy): Bool
}

declare interface NewCodexEntryGameController extends inkGameController {

  OnInitialize(): Bool
  Setup(): void
  PlayIntroAnimation(): void
  OnOutroAnimFinished(anim: inkAnimProxy): Bool
}

declare interface PhoneMessageHidePopupEvent extends Event {

}

declare interface PhoneMessageNotificationsGameController extends inkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
  ShowPopup(): void
  ShowNotification(): void
  PlayIntroAnimation(): void
  OnOutroAnimFinished(anim: inkAnimProxy): Bool
}

declare interface stealthAlertGameController extends inkHUDGameController {

  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerPuppet: GameObject): Bool
  OnSecurityDataChange(arg: Variant): Bool
  PlayAnimation(animName: CName): void
  OnOutroAnimFinished(anim: inkAnimProxy): Bool
}

declare interface VehicleSummonWidgetGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnVehicleSummonStateChanged(value: number): Bool
  ShowNotification(): void
  HideNotification(): void
  OnIntroFinished(anim: inkAnimProxy): Bool
  OnEndLoop(anim: inkAnimProxy): Bool
  OnTimeOut(anim: inkAnimProxy): Bool
  PlayAnim(animName: CName, callBack?: CName): void
}

declare interface ProgressionWidgetGameController extends gameuiGenericNotificationGameController {

  GetShouldSaveState(): Bool
  GetID(): number
  OnPlayerAttach(playerPuppet: GameObject): Bool
  OnPlayerDetach(playerGameObject: GameObject): Bool
  RegisterPSMListeners(playerObject: GameObject): void
  UnregisterPSMListeners(playerObject: GameObject): void
  OnCombatStateChanged(value: number): Bool
  OnCharacterProficiencyUpdated(evt: ProficiencyProgressEvent): Bool
  AddToNotificationQueue(value: number, remainingPointsToLevelUp: number, delta: number, notificationColorTheme: CName, notificationName: string, type: gamedataProficiencyType, currentLevel: number, isLevelMaxed: Bool): void
}

declare interface QuickhackDescriptionUpdate extends Event {

}

declare interface QuickhacksListItemController extends ListItemController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnDataChanged(value: IScriptable): Bool
  OnQuickhackDescriptionUpdate(evt: QuickhackDescriptionUpdate): Bool
  OnSelected(itemController: ListItemController): Bool
  OnDeselected(itemController: ListItemController): Bool
  UpdateState(): void
  SetupTitleFromChunks(title: string, alternativeTitle: string): void
  OnUpdateAnimationState(e?: inkAnimProxy): Bool
  SetActionState(): void
  SetReductionArrowVisibility(): void
  UpdateCooldown(cooldown: number): void
  SetCooldownVisibility(isVisible: Bool): void
  Expand(value: Bool, force?: Bool): void
  OnResizingFinished(anim: inkAnimProxy): Bool
  ShowMemoryCell(value: number): void
  AdjustToTextDescriptionSize(value: Bool): void
  ChangeMargin(): void
  PlayChoiceAcceptedAnimation(): void
  IsChoiceAcceptedPlaying(): Bool
}

declare interface QuickhacksListGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnTargetDisplayNameChanged(value: Variant): Bool
  OnQuickhackStarted(value: RevealInteractionWheel): Bool
  OnItemSelected(index: number, itemController: ListItemController): Bool
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
  ToggleTutorialOverlay(): void
  ShowTutorialOverlay(value: Bool): void
  SelectData(data: QuickhackData): void
  SetupTier(): void
  SetupMaxCooldown(): void
  SetupDuration(): void
  SetupUploadTime(): void
  SetupMemoryCost(): void
  SetupMemoryCostDifferance(): void
  SetupNetworkBreach(): void
  SetupICE(): void
  SetupTargetName(): void
  UpdateRecompileTime(isVisible: Bool, value: number): void
  SetupVulnerabilities(): void
  ApplyQuickHack(): Bool
  LogQuickHack(): void
  PlayChoiceAnimation(): void
  IsIntroPlaying(): Bool
  ApplyQuickhackSelection(): void
  ResetQuickhackSelection(): void
  SetVisibility(value: Bool): void
  OnDelayedDescriptionIntro(evt: DelayedDescriptionIntro): Bool
  PlayDescritpionIntroAnimaton(): void
  RequestTimeDilation(requester: GameObject, eventId: CName, val: Bool): void
  SetupQuickhacksMemoryBar(): void
  UpdateQuickhacksMemoryBarSize(size: number): void
  OnMemoryPercentUpdate(value: number): Bool
  DeplenishMemoryCells(currentMemory: number): void
  OnDeplenishMemoryCells(e?: inkAnimProxy): Bool
  PopulateData(data: QuickhackData[]): void
  RegisterCooldownStatPoolUpdate(): Bool
  UnregisterCooldownStatPoolUpdate(): void
  OnCooldownStatPoolUpdate(value: Variant): Bool
  IsCurrentSelectionOnStatPoolIndexes(): Bool
  IsCurrentSelectionOnStatPoolIndexes(index: number): Bool
  /** @noSelf **/
  EActionInactivityResonToLocalizationString(value: EActionInactivityReson): string
  OnQuickHackScreenOpen(evt: QuickHackScreenOpen): Bool
  OnQuickHackTimeDilationOverride(evt: QuickHackTimeDilationOverride): Bool
  OnQuickHackLockHacks(evt: QuickHackLockHacks): Bool
}

declare interface DelayedDescriptionIntro extends Event {

}

declare interface QuickhacksVulnerabilityLogicController extends inkLogicController {

  SetText(locKey: CName): void
}

declare interface QuickHackTimeDilationOverride extends Event {

  GetFriendlyDescription(): string
}

declare interface QuickHackLockHacks extends Event {

  GetFriendlyDescription(): string
}

declare interface ProgressionNotification extends GenericNotificationController {

  SetNotificationData(notificationData: GenericNotificationViewData): void
  BarProgressAnim(animatingObject: inkWidgetRef, barStartSize: Vector2, barEndSize: Vector2): void
  PlayAnim(animName: CName, callBack?: CName): void
  OnBarAnimationFinished(anim: inkAnimProxy): Bool
}

declare interface TimerGameController extends inkHUDGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  SetupBB(): void
  UnregisterFromBB(): void
  OnTimerActiveUpdated(value: number): Bool
  OnTimerProgressUpdated(value: number): Bool
  UpdateTimerActive(value: number): void
  UpdateTimerProgress(time: number): void
  Intro(): void
  Outro(): void
  Hide(): void
}

declare interface AIAggressiveReactionPresetCondition extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface AIDeathConditions extends AIbehaviorconditionScript {

}

declare interface GlobalDeathCondition extends AIDeathConditions {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface PassiveGlobalDeathCondition extends AIbehaviorexpressionScript {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
  CalculateValue(context: ScriptExecutionContext): Variant
}

declare interface DeathWithoutRagdollCondition extends AIDeathConditions {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface DeathWithoutAnimationCondition extends AIDeathConditions {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface AnimationsLoadedCondition extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface AnimationsLoadedTask extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface CheckArguments extends AIbehaviorconditionScript {

}

declare interface CheckArgumentBoolean extends CheckArguments {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CheckArgumentInt extends CheckArguments {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CheckArgumentFloat extends CheckArguments {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CheckArgumentName extends CheckArguments {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CheckArgumentObjectSet extends CheckArguments {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CheckFreeWorkspot extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
  Deactivate(context: ScriptExecutionContext): void
}

declare interface HitConditions extends AIbehaviorconditionScript {

}

declare interface CheckLastHitReaction extends HitConditions {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CheckCurrentHitReaction extends HitConditions {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CheckStimID extends AIbehaviorconditionScript {

}

declare interface CheckHitReactionStimID extends CheckStimID {

  CheckOnEvent(context: ScriptExecutionContext, behaviorEvent: AIEvent): AIbehaviorConditionOutcomes
}

declare interface DelayPassiveConditionEvaluationEvent extends Event {

}

declare interface AINPCStateCheck extends AIbehaviorconditionScript {

}

declare interface AIAutonomousConditions extends AIbehaviorconditionScript {

  /** @noSelf **/
  HasHostileThreats(context: ScriptExecutionContext): Bool
  /** @noSelf **/
  HasCombatAICommand(context: ScriptExecutionContext): Bool
  HasUnknownThreats(context: ScriptExecutionContext): Bool
  /** @noSelf **/
  IsPlayerInCombat(context: ScriptExecutionContext): Bool
  /** @noSelf **/
  WaitForAnimationToFinish(context: ScriptExecutionContext): Bool
  /** @noSelf **/
  SchedulePassiveConditionEvaluation(puppet: ScriptedPuppet, delay: number): void
  /** @noSelf **/
  IsPlayerRecentlyDroppedThreat(owner: GameObject): Bool
  /** @noSelf **/
  AlertedCondition(context: ScriptExecutionContext): Bool
  /** @noSelf **/
  CombatCondition(context: ScriptExecutionContext): Bool
  /** @noSelf **/
  NoWeaponCombatConditions(context: ScriptExecutionContext): Bool
  /** @noSelf **/
  HasWeaponInInventory(context: ScriptExecutionContext): Bool
}

declare interface AINPCHighLevelStateCheck extends AINPCStateCheck {

  GetStateToCheck(): gamedataNPCHighLevelState
  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface IsDead extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface IsRagdolling extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CheckHighLevelState extends AINPCHighLevelStateCheck {

  GetStateToCheck(): gamedataNPCHighLevelState
}

declare interface InRelaxedHighLevelState extends AINPCHighLevelStateCheck {

  GetStateToCheck(): gamedataNPCHighLevelState
}

declare interface InAlertedHighLevelState extends AINPCHighLevelStateCheck {

  GetStateToCheck(): gamedataNPCHighLevelState
}

declare interface InCombatHighLevelState extends AINPCHighLevelStateCheck {

  GetStateToCheck(): gamedataNPCHighLevelState
}

declare interface InStealthHighLevelState extends AINPCHighLevelStateCheck {

  GetStateToCheck(): gamedataNPCHighLevelState
}

declare interface InUnconsciousHighLevelState extends AINPCHighLevelStateCheck {

  GetStateToCheck(): gamedataNPCHighLevelState
}

declare interface InDeadHighLevelState extends AINPCHighLevelStateCheck {

  GetStateToCheck(): gamedataNPCHighLevelState
}

declare interface AINPCUpperBodyStateCheck extends AINPCStateCheck {

  GetStateToCheck(): gamedataNPCUpperBodyState
  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CheckUpperBodyState extends AINPCUpperBodyStateCheck {

  GetStateToCheck(): gamedataNPCUpperBodyState
}

declare interface InNormalUpperBodyState extends AINPCUpperBodyStateCheck {

  GetStateToCheck(): gamedataNPCUpperBodyState
}

declare interface InShootUpperBodyState extends AINPCUpperBodyStateCheck {

  GetStateToCheck(): gamedataNPCUpperBodyState
}

declare interface InReloadUpperBodyState extends AINPCUpperBodyStateCheck {

  GetStateToCheck(): gamedataNPCUpperBodyState
}

declare interface InDefendUpperBodyState extends AINPCUpperBodyStateCheck {

  GetStateToCheck(): gamedataNPCUpperBodyState
}

declare interface InAttackUpperBodyState extends AINPCUpperBodyStateCheck {

  GetStateToCheck(): gamedataNPCUpperBodyState
}

declare interface InParryUpperBodyState extends AINPCUpperBodyStateCheck {

  GetStateToCheck(): gamedataNPCUpperBodyState
}

declare interface InTauntUpperBodyState extends AINPCUpperBodyStateCheck {

  GetStateToCheck(): gamedataNPCUpperBodyState
}

declare interface AINPCStanceStateCheck extends AINPCStateCheck {

  GetStateToCheck(): gamedataNPCStanceState
  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface NoWeaponCombatConditions extends AIAutonomousConditions {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CombatConditions extends AIAutonomousConditions {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CheckStanceState extends AINPCStanceStateCheck {

  GetStateToCheck(): gamedataNPCStanceState
}

declare interface InStandStanceState extends AINPCStanceStateCheck {

  GetStateToCheck(): gamedataNPCStanceState
}

declare interface AlertedConditions extends AIAutonomousConditions {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface InCrouchStanceState extends AINPCStanceStateCheck {

  GetStateToCheck(): gamedataNPCStanceState
}

declare interface InCoverStanceState extends AINPCStanceStateCheck {

  GetStateToCheck(): gamedataNPCStanceState
}

declare interface PassiveNoWeaponCombatConditions extends PassiveAutonomousCondition {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
  CalculateValue(context: ScriptExecutionContext): Variant
}

declare interface InSwimStanceState extends AINPCStanceStateCheck {

  GetStateToCheck(): gamedataNPCStanceState
}

declare interface PassiveCombatConditions extends PassiveAutonomousCondition {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
  CalculateValue(context: ScriptExecutionContext): Variant
}

declare interface CheckThreat extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface PassiveAlertedConditions extends PassiveAutonomousCondition {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
  CalculateValue(context: ScriptExecutionContext): Variant
}

declare interface PassiveRoleCondition extends AIbehaviorexpressionScript {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
  CalculateValue(context: ScriptExecutionContext): Variant
  GetEditorSubCaption(): string
}

declare interface CheckDroppedThreat extends CheckThreat {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CompareArguments extends AIbehaviorconditionScript {

}

declare interface CompareArgumentsBooleans extends CompareArguments {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CompareArgumentsInts extends CompareArguments {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface PassiveCommandCondition extends AIbehaviorexpressionScript {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
  CalculateValue(context: ScriptExecutionContext): Variant
  GetEditorSubCaption(): string
}

declare interface CompareArgumentsFloats extends CompareArguments {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CompareArgumentsNames extends CompareArguments {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface AIDebugConditions extends AIbehaviorconditionScript {

}

declare interface CheckIfCombatAllowed extends AIDebugConditions {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CompareArgumentsVectors extends CompareArguments {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface PassivePatrolConditions extends PassiveAutonomousCondition {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
  CalculateValue(context: ScriptExecutionContext): Variant
}

declare interface CheckIfSearchAllowed extends AIDebugConditions {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CompareArgumentsObjects extends CompareArguments {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CheckIfPatrolAllowed extends AIDebugConditions {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CompareArgumentsNodeRefs extends CompareArguments {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface Debug_CheckIfShouldReturnToSpawn extends AIDebugConditions {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface PassiveCoverSelectionConditions extends PassiveAutonomousCondition {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
  CalculateValue(context: ScriptExecutionContext): Variant
}

declare interface AIStatListener extends ScriptStatsListener {

  SetInitData(owner: ScriptedPuppet, m_behaviorCallbackName: CName): void
  OnStatChanged(ownerID: StatsObjectID, statType: gamedataStatType, diff: number, total: number): void
}

declare interface Debug_LookatTestEnabled extends AIDebugConditions {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface Debug_AimingLookatTestEnabled extends AIDebugConditions {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface Debug_RotationTestEnabled extends AIDebugConditions {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface IsConnectedToSecuritySystem extends AIAutonomousConditions {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface AISignalCondition extends AIbehaviorconditionScript {

  GetSignalName(): CName
  GetSignalEvaluationOutcome(): Bool
  GetEditorSubCaption(): string
  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
  CheckFlagRequirements(gateSignal: AIGateSignal, checkAgainst: AISignalFlags): Bool
  IsActivated(): Bool
  GetSignalHandler(context: ScriptExecutionContext): AISignalHandlerComponent
  GetSignalTable(context: ScriptExecutionContext): gameBoolSignalTable
  StartExecuting(context: ScriptExecutionContext): Bool
  KeepExecuting(context: ScriptExecutionContext): Bool
}

declare interface IsReprimandOngoing extends AIAutonomousConditions {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface IsTargetObjectPlayer extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface IsBoss extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface AIItemHandlingCondition extends AIbehaviorconditionScript {

}

declare interface CheckUnregisteredWeapon extends AIItemHandlingCondition {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface IsAggressive extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface PassiveCannotMoveConditions extends PassiveAutonomousCondition {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
  CalculateValue(context: ScriptExecutionContext): Variant
}

declare interface CustomEventCondition extends AISignalCondition {

  GetSignalName(): CName
  GetDescription(context: ScriptExecutionContext): string
}

declare interface PriorityCheckEventCondition extends AISignalCondition {

  GetSignalEvaluationOutcome(): Bool
}

declare interface HighestPrioritySignalCondition extends AIbehaviorexpressionScript {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
  CalculateValue(context: ScriptExecutionContext): Variant
  GetSignalHandler(context: ScriptExecutionContext): AISignalHandlerComponent
  GetEditorSubCaption(): string
}

declare interface CheckEquippedWeapon extends AIItemHandlingCondition {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface SimpleCombatConditon extends AIbehaviorconditionScript {

  Activate(context: ScriptExecutionContext): void
  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
  AnimationInProgress(puppet: ScriptedPuppet): Bool
  /** @noSelf **/
  HasAvailableCover(context: ScriptExecutionContext): Bool
}

declare interface CheckEquippedWeaponType extends AIItemHandlingCondition {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface SlotAnimationInProgress extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface AIStackSignalConditionData {

}

declare interface AIStackSignalCondition extends AIbehaviorStackScriptPassiveExpressionDefinition {

  OnActivate(context: ScriptExecutionContext, data: AIStackSignalConditionData): void
  OnDeactivate(context: ScriptExecutionContext, data: AIStackSignalConditionData): void
  CalculateValue(context: ScriptExecutionContext, data: AIStackSignalConditionData): Variant
  GetSignalHandler(context: ScriptExecutionContext): AISignalHandlerComponent
  /** @noSelf **/
  GetPuppet(context: ScriptExecutionContext): ScriptedPuppet
  GetEditorSubCaption(): string
}

declare interface AIStatusEffectCondition extends AIbehaviorconditionScript {

  GetShootingBlackboard(context: ScriptExecutionContext): IBlackboard
}

declare interface AIGateSignalSender extends AIbehaviortaskStackScript {

  GetInstanceTypeName(): CName
  OnActivate(context: ScriptExecutionContext, signalId: number): void
  OnDeactivate(context: ScriptExecutionContext, signalId: number): void
  GetSignalLifeTime(): number
  GetEditorSubCaption(): string
}

declare interface CheckCurrentStatusEffect extends AIStatusEffectCondition {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CheckStatusEffect extends AIStatusEffectCondition {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CheckAllStatusEffect extends AIStatusEffectCondition {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
  Activate(context: ScriptExecutionContext): void
}

declare interface CheckStatusEffectState extends AIStatusEffectCondition {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CheckWoundedStatusEffectState extends AIStatusEffectCondition {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface AITimeCondition extends AIbehaviorconditionScript {

}

declare interface AITimeoutCondition extends AITimeCondition {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
  Activate(context: ScriptExecutionContext): void
  UpdateTimeStamp(context: ScriptExecutionContext): void
  GetTimeoutValue(context: ScriptExecutionContext): number
}

declare interface CheckCurrentWoundedState extends AIStatusEffectCondition {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface SelectorTimeout extends AITimeoutCondition {

  GetTimeoutValue(context: ScriptExecutionContext): number
}

declare interface MappingTimeout extends AITimeoutCondition {

  GetTimeoutValue(context: ScriptExecutionContext): number
}

declare interface CustomValueTimeout extends AITimeoutCondition {

  GetTimeoutValue(context: ScriptExecutionContext): number
}

declare interface CustomValueFromMappingTimeout extends AITimeoutCondition {

  GetTimeoutValue(context: ScriptExecutionContext): number
}

declare interface CharParamTimeout extends AITimeoutCondition {

  GetTimeoutValue(context: ScriptExecutionContext): number
}

declare interface AICooldown extends AITimeCondition {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
  UpdateTimeStamp(context: ScriptExecutionContext): void
}

declare interface CooldownOnActivation extends AICooldown {

  Activate(context: ScriptExecutionContext): void
}

declare interface CooldownOnDeactivation extends AICooldown {

  Deactivate(context: ScriptExecutionContext): void
}

declare interface CheckReaction extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CheckReactionValueThreshold extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface InvestigateController extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CheckReactionStimType extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CheckStimTag extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface PassiveIsPlayerCompanionCondition extends PassiveAutonomousCondition {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
  CalculateValue(context: ScriptExecutionContext): Variant
}

declare interface PlayInitFearAnimation extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface IsWorkspotReaction extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface IsFollowTargetInCombat extends AIAutonomousConditions {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface IsValidCombatTarget extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface AIPatrolPathParameters extends IScriptable {

}

declare interface IsPlayerCompanion extends AIAutonomousConditions {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface IsPlayerAKiller extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface PatrolControllerTask extends AIbehaviortaskScript {

  GetBlackboardDef(): AIPatrolDef
  GetBlackboard(context: ScriptExecutionContext): IBlackboard
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface IsFriendlyToPlayer extends AIAutonomousConditions {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CheckStimRevealsInstigatorPosition extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface FollowerFindTeleportPositionAroundTarget extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface PatrolCommandHandler extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface CheckLastTriggeredStimuli extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface AIFollowerTakedownCommandHandler extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
  SelectBestTarget(context: ScriptExecutionContext, targetEntityIds: EntityID[], target: GameObject): Bool
}

declare interface CheckAnimSetTags extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface PatrolRoleHandler extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface AIPatrolRole extends AIRole {

  GetPathParams(): AIPatrolPathParameters
  GetAlertedPathParams(): AIPatrolPathParameters
  GetAlertedRadius(): number
  IsForceAlerted(): Bool
  GetAlertedSpots(): WorkspotList
  GetRoleEnum(): EAIRole
  GetTweakRecordId(): TweakDBID
  OnRoleSet(owner: GameObject): void
}

declare interface HasPositionFarFromThreat extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface PatrolAlertedControllerTask extends AIbehaviortaskScript {

  GetBlackboardDef(): AIAlertedPatrolDef
  GetBlackboard(context: ScriptExecutionContext): IBlackboard
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface CanNPCRun extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface AIDeathReactionsTask extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  IsFloorSteepEnoughToRagdoll(context: ScriptExecutionContext): Bool
  TurnOnRagdoll(context: ScriptExecutionContext): void
  CanSkipDeathAnimation(): Bool
  PlayHitReactionAction(context: ScriptExecutionContext): Bool
  StopMotionExtraction(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
  /** @noSelf **/
  ShouldUseRagdoll(owner: ScriptedPuppet): Bool
  GetDeathReactionType(context: ScriptExecutionContext): number
  ChangeHighLevelState(context: ScriptExecutionContext): void
  SpawnBloodPuddle(puppet: ScriptedPuppet): void
  AngleToAttackSource(context: ScriptExecutionContext, hitData: AnimFeature_HitReactionsData): number
  GetHitData(context: ScriptExecutionContext): AnimFeature_HitReactionsData
  ShouldFastForward(context: ScriptExecutionContext): Bool
  BrainMeltDeathData(context: ScriptExecutionContext): AnimFeature_HitReactionsData
}

declare interface ShouldNPCContinueInAlerted extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface PatrolAlertedCommandHandler extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface AIFollowerTakedownCommandDelegate extends ScriptBehaviorDelegate {

  OnActivate(context: ScriptExecutionContext): Bool
  OnDeactivate(context: ScriptExecutionContext): Bool
}

declare interface AIFollowerInterpolateFollowingSpeed extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  MakeActive(context: ScriptExecutionContext): void
  MakeInactive(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
}

declare interface IsInTrafficLane extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface AlertedRoleHandler extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface PreviousFearPhaseCheck extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface RegisterCommunityRunner extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface RegisterTrafficRunner extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CheckCurrentWorkspotTag extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface HearStimThreshold extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface GetCurrentPatrolSpotActionPath extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface StealthStimThreshold extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface AIFollowerBeforeTakedown extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface HasPatrolAction extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CanDoReactionAction extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface SendPatrolEndSignal extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface CheckTimestamp extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface EscalateProvoke extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface AIAlertedStateDelegate extends ScriptBehaviorDelegate {

  DoSetExplosionInstigatorPositionAsStimSource(context: ScriptExecutionContext): Bool
  DoSetRandomAimPointLeft(context: ScriptExecutionContext): Bool
  DoSetRandomAimPointRight(context: ScriptExecutionContext): Bool
  DoLowerWeapon(context: ScriptExecutionContext): Bool
  GetPositionAroundInstigator(context: ScriptExecutionContext, xOffset: number, yOffset: number, zOffset: number): Vector4
}

declare interface DeadOnInitTask extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface NormalDeathTask extends AIDeathReactionsTask {

}

declare interface DeathIsRagdollCondition extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface WithoutHitDataDeathTask extends AIDeathReactionsTask {

  GetHitData(context: ScriptExecutionContext): AnimFeature_HitReactionsData
  GetDeathReactionType(context: ScriptExecutionContext): number
  BleedingDeathData(context: ScriptExecutionContext): AnimFeature_HitReactionsData
  DebugDeathData(context: ScriptExecutionContext): AnimFeature_HitReactionsData
}

declare interface AlertedAnimWrapper extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface SyncAnimDeathTask extends WithoutHitDataDeathTask {

  Activate(context: ScriptExecutionContext): void
}

declare interface ForcedRagdollDeathTask extends AIDeathReactionsTask {

  Activate(context: ScriptExecutionContext): void
}

declare interface VehicleDeathTask extends AIDeathReactionsTask {

  Activate(context: ScriptExecutionContext): void
  CanSkipDeathAnimation(): Bool
  PlayHitReactionAction(context: ScriptExecutionContext): Bool
  Deactivate(context: ScriptExecutionContext): void
  GetVehicleDeathType(context: ScriptExecutionContext): number
  GetDeathReactionType(context: ScriptExecutionContext): number
  SendVehNPCDeathData(context: ScriptExecutionContext): void
  SendAIEventToMountedVehicle(context: ScriptExecutionContext, eventName: CName): Bool
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface ApplyAnimWrappersOnWeapon extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
}

declare interface AssignRestrictMovementAreaTask extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface SetSkipDeathAnimationTask extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface AssignRestrictMovementAreaHandler extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface FindClosestScavengeTarget extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  GetClosestTarget(context: ScriptExecutionContext, targets: GameObject[]): GameObject
}

declare interface ChangeNPCState extends AIbehaviortaskScript {

}

declare interface ChangeHighLevelStateAbstract extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
  GetDesiredHighLevelState(context: ScriptExecutionContext): gamedataNPCHighLevelState
  OnActivate(context: ScriptExecutionContext): void
  OnDeactivate(context: ScriptExecutionContext): void
}

declare interface MoveToScavengeTarget extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
}

declare interface RelaxedState extends ChangeHighLevelStateAbstract {

  GetDesiredHighLevelState(context: ScriptExecutionContext): gamedataNPCHighLevelState
}

declare interface AlertedState extends ChangeHighLevelStateAbstract {

  GetDesiredHighLevelState(context: ScriptExecutionContext): gamedataNPCHighLevelState
}

declare interface CombatState extends ChangeHighLevelStateAbstract {

  GetDesiredHighLevelState(context: ScriptExecutionContext): gamedataNPCHighLevelState
}

declare interface StealthState extends ChangeHighLevelStateAbstract {

  GetDesiredHighLevelState(context: ScriptExecutionContext): gamedataNPCHighLevelState
}

declare interface ScavengeTarget extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface DisassembleEvent extends Event {

}

declare interface UnconsciousState extends ChangeHighLevelStateAbstract {

  GetDesiredHighLevelState(context: ScriptExecutionContext): gamedataNPCHighLevelState
}

declare interface DeadState extends ChangeHighLevelStateAbstract {

  GetDesiredHighLevelState(context: ScriptExecutionContext): gamedataNPCHighLevelState
}

declare interface HaveScavengeTargets extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface HighLevelStateMapping extends ChangeHighLevelStateAbstract {

  GetDesiredHighLevelState(context: ScriptExecutionContext): gamedataNPCHighLevelState
}

declare interface StackChangeHighLevelStateAbstract extends AIbehaviortaskStackScript {

  OnActivate(context: ScriptExecutionContext): void
  GetDesiredHighLevelState(context: ScriptExecutionContext): gamedataNPCHighLevelState
}

declare interface AITakedownHandler extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
}

declare interface StackRelaxedState extends StackChangeHighLevelStateAbstract {

  GetDesiredHighLevelState(context: ScriptExecutionContext): gamedataNPCHighLevelState
}

declare interface StackAlertedState extends StackChangeHighLevelStateAbstract {

  GetDesiredHighLevelState(context: ScriptExecutionContext): gamedataNPCHighLevelState
}

declare interface ChangeUpperBodyStateAbstract extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
  GetDesiredUpperBodyState(context: ScriptExecutionContext): gamedataNPCUpperBodyState
  OnActivate(context: ScriptExecutionContext): void
  OnDeactivate(context: ScriptExecutionContext): void
}

declare interface AIHitReactionTask extends AIbehaviortaskScript {

  Dispose(): void
  OnActivate(context: ScriptExecutionContext): void
  OnDectivate(context: ScriptExecutionContext): void
  GetHitReactionType(): animHitReactionType
  GetDesiredHitReactionDuration(context: ScriptExecutionContext): number
  GetInterruptHitReaction(context: ScriptExecutionContext): number
  Activate(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
  CheckForReevaluation(context: ScriptExecutionContext): Bool
  AngleToAttackSource(context: ScriptExecutionContext, hitData: AnimFeature_HitReactionsData): number
  IsThisFrameActivationFrame(context: ScriptExecutionContext): Bool
  InitialiseReaction(context: ScriptExecutionContext): void
  SendDataToHitReactionComponent(context: ScriptExecutionContext): void
  SendDataToAnimationGraph(context: ScriptExecutionContext): void
  SpawnAttackGameEffect(context: ScriptExecutionContext, gameEffect: EffectRef, startPosition: Vector4, endPosition: Vector4, duration: number, colliderBoxSize: Vector4, statusEffect: string): void
  HasDismemberedLeg(context: ScriptExecutionContext): Bool
  GetBCVOName(context: ScriptExecutionContext): CName
}

declare interface AICommandDeviceHandler extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface ChangeUpperBodyState extends ChangeUpperBodyStateAbstract {

  GetDesiredUpperBodyState(context: ScriptExecutionContext): gamedataNPCUpperBodyState
}

declare interface AISetSoloModeHandler extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
}

declare interface ChangeStanceStateAbstract extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
  GetDesiredStanceState(context: ScriptExecutionContext): gamedataNPCStanceState
  OnActivate(context: ScriptExecutionContext): void
  OnDeactivate(context: ScriptExecutionContext): void
}

declare interface IsCombatModuleEquipped extends AIAutonomousConditions {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface AIPrepareTakedownData extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface ChangeStanceState extends ChangeStanceStateAbstract {

  GetDesiredStanceState(context: ScriptExecutionContext): gamedataNPCStanceState
}

declare interface StandState extends ChangeStanceStateAbstract {

  GetDesiredStanceState(context: ScriptExecutionContext): gamedataNPCStanceState
}

declare interface AIDeviceFeedbackData extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface SpiderbotOrderCompletedEvent extends Event {

}

declare interface VehicleState extends ChangeStanceStateAbstract {

  GetDesiredStanceState(context: ScriptExecutionContext): gamedataNPCStanceState
}

declare interface AIFindForwardPositionAround extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface AICoreTasks extends AIbehaviortaskScript {

}

declare interface VehicleWindowState extends ChangeStanceStateAbstract {

  GetDesiredStanceState(context: ScriptExecutionContext): gamedataNPCStanceState
}

declare interface InitialiseNPC extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  StoreScriptExecutionContext(scriptExecutionContext: ScriptExecutionContext): void
}

declare interface SelectorRevalutionBreak extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface AIFindPositionAroundSelf extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  AdditionalOutcomeVerification(context: ScriptExecutionContext): Bool
}

declare interface SetTopThreatToCombatTarget extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  CanSwitchTarget(context: ScriptExecutionContext, currentUpperBodyState: gamedataNPCUpperBodyState): Bool
  GetCommandCombatTarget(context: ScriptExecutionContext, target: GameObject): Bool
  SetCombatTarget(context: ScriptExecutionContext, target: GameObject): void
  IsCurrentTargetValid(context: ScriptExecutionContext, upperBodyState: gamedataNPCUpperBodyState): Bool
  IsSwitchingTargetsBlocked(upperBodyState: gamedataNPCUpperBodyState): Bool
  IsTargetValid(context: ScriptExecutionContext, target: GameObject): Bool
  IsTargetHostile(owner: GameObject, target: GameObject): Bool
  IsTargetLost(context: ScriptExecutionContext, trackedLocation: TrackedLocation): Bool
}

declare interface AICombatTargetHelper extends IScriptable {

  /** @noSelf **/
  SetNewCombatTarget(context: ScriptExecutionContext, target: GameObject): Bool
  /** @noSelf **/
  SetCombatTargetChangeSignal(context: ScriptExecutionContext): void
}

declare interface AISpiderbotFindBoredMovePosition extends AIFindPositionAroundSelf {

  Activate(context: ScriptExecutionContext): void
  AdditionalOutcomeVerification(context: ScriptExecutionContext): Bool
}

declare interface SetCustomShootPosition extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  SpawnLandVFXs(context: ScriptExecutionContext, fx: FxResource, fxposition: Vector4): void
  KillLandVFX(fxInstance: FxInstance): void
  CreateFxInstance(context: ScriptExecutionContext, resource: FxResource, transform: WorldTransform): FxInstance
  Deactivate(context: ScriptExecutionContext): void
}

declare interface AISpiderbotCheckIfFriendlyMoved extends AIAutonomousConditions {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface AIFindPositionAroundTarget extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface AISetHealthRegenerationState extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface AISetAutocraftingState extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface ImpactReactionTask extends AIHitReactionTask {

  Activate(context: ScriptExecutionContext): void
  GetHitReactionType(): animHitReactionType
  GetDesiredHitReactionDuration(context: ScriptExecutionContext): number
  RemoveCamoStatusEffect(context: ScriptExecutionContext): void
}

declare interface SelectClosestPlayerThreat extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface SetManouverPosition extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface IsAnyThreatClose extends AIAutonomousConditions {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface StaggerReactionTask extends AIHitReactionTask {

  Activate(context: ScriptExecutionContext): void
  GetHitReactionType(): animHitReactionType
  GetDesiredHitReactionDuration(context: ScriptExecutionContext): number
  RemoveCamoStatusEffect(context: ScriptExecutionContext): void
}

declare interface ClearCombatTarget extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface AISignalSenderTask extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
  QueueGateSignal(context: ScriptExecutionContext): void
  GetSignalLifeTime(): number
  GetSignalTable(context: ScriptExecutionContext): gameBoolSignalTable
}

declare interface StackClearCombatTarget extends AIbehaviortaskStackScript {

  OnActivate(context: ScriptExecutionContext): void
}

declare interface TempClearForcedCombatTarget extends AIbehaviortaskScript {

  Deactivate(context: ScriptExecutionContext): void
}

declare interface RemoveCommand extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface KnockdownReactionTask extends AIHitReactionTask {

  Activate(context: ScriptExecutionContext): void
  GetHitReactionType(): animHitReactionType
  GetDesiredHitReactionDuration(context: ScriptExecutionContext): number
  RemoveCamoStatusEffect(context: ScriptExecutionContext): void
}

declare interface CustomEventSender extends AISignalSenderTask {

  GetEditorSubCaption(): string
  GetSignalLifeTime(): number
}

declare interface ReactiveEventSender extends AISignalSenderTask {

  Activate(context: ScriptExecutionContext): void
  GetSignalLifeTime(): number
  GateSignalFlagsNameToEnum(FlagName: CName): EAIGateSignalFlags
}

declare interface SetDroppedThreatLastKnowPosition extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
}

declare interface PainReactionTask extends AIHitReactionTask {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
  GetHitReactionType(): animHitReactionType
  GetDesiredHitReactionDuration(context: ScriptExecutionContext): number
}

declare interface StopCallReinforcements extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface FollowVehicleTask extends AIbehaviortaskScript {

}

declare interface GetFollowTarget extends FollowVehicleTask {

  Activate(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
}

declare interface GuardbreakReactionTask extends AIHitReactionTask {

  GetHitReactionType(): animHitReactionType
  GetDesiredHitReactionDuration(context: ScriptExecutionContext): number
}

declare interface UpdateDyingStimSource extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface LeaveCoverImmediately extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
}

declare interface BlockReactionTask extends AIbehaviortaskScript {

  Deactivate(context: ScriptExecutionContext): void
}

declare interface AddWeapon extends AIbehaviortaskScript {

  /** @noSelf **/
  ExecuteForAllWeapons(puppet: ScriptedPuppet): void
  /** @noSelf **/
  Execute(puppet: ScriptedPuppet, weapon: EquipmentPriority): void
  Activate(context: ScriptExecutionContext): void
}

declare interface ParryReactionTask extends AIbehaviortaskScript {

  Deactivate(context: ScriptExecutionContext): void
}

declare interface DodgeReactionTask extends AIbehaviortaskScript {

  Deactivate(context: ScriptExecutionContext): void
}

declare interface InitCombatAfterHit extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
}

declare interface CheckFollowTarget extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CheckTargetInVehicle extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface LowFPSSelectCoverMode extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
}

declare interface RagdollTask extends AIbehaviortaskScript {

}

declare interface CacheAnimationForPotentialRagdoll extends RagdollTask {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
}

declare interface NPCInitTask extends AIbehaviortaskStackScript {

  OnActivate(context: ScriptExecutionContext): void
  NPCWasDeadOnInit(context: ScriptExecutionContext): Bool
  NPCWasAlertedOnInit(context: ScriptExecutionContext): Bool
  HasHLS(context: ScriptExecutionContext, state: gamedataNPCHighLevelState): Bool
  SendSignal(context: ScriptExecutionContext, tag1: CName, tag2: CName, flag: EAIGateSignalFlags, priority: number): void
  SendSetScriptExecutionContextEvent(context: ScriptExecutionContext): void
}

declare interface ForceRagdoll extends RagdollTask {

  Activate(context: ScriptExecutionContext): void
}

declare interface AIRandomTasks extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  RollInteger(Max: number, Min: number): number
}

declare interface SetRandomIntArgument extends AIRandomTasks {

  Activate(context: ScriptExecutionContext): void
  SetArgument(context: ScriptExecutionContext, argumentName: CName, intValue: number): void
}

declare interface GetRandomThreat extends AIRandomTasks {

  Activate(context: ScriptExecutionContext): void
}

declare interface RestrictedMovementAreaCondition extends AIbehaviorconditionScript {

  GetRestrictMovementAreaManager(context: ScriptExecutionContext): RestrictMovementAreaManager
  IsOwnerConnectedToRestirctMovementArea(areaManager: RestrictMovementAreaManager, owner: GameObject): Bool
  IsOwnerInRestirctMovementArea(areaManager: RestrictMovementAreaManager, owner: GameObject): Bool
}

declare interface GetRandomPositionAroundPoint extends AIRandomTasks {

  Activate(context: ScriptExecutionContext): void
}

declare interface AIReturnToRestrictMovementAreaCondition extends RestrictedMovementAreaCondition {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface SendEquipWeaponCommand extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface IsStimSourceInRestrictMovementArea extends RestrictedMovementAreaCondition {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface AIReturnToRestrictMovementArea extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface SetSearchInfluenceTask extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface SetArguments extends AIbehaviortaskScript {

}

declare interface SetArgumentBoolean extends SetArguments {

  Activate(context: ScriptExecutionContext): void
}

declare interface SetArgumentInt extends SetArguments {

  Activate(context: ScriptExecutionContext): void
}

declare interface SetArgumentFloat extends SetArguments {

  Activate(context: ScriptExecutionContext): void
}

declare interface SetArgumentName extends SetArguments {

  Activate(context: ScriptExecutionContext): void
}

declare interface SetArgumentVector extends SetArguments {

  Activate(context: ScriptExecutionContext): void
}

declare interface ClearArgumentObject extends SetArguments {

  Activate(context: ScriptExecutionContext): void
}

declare interface SquadTask extends AIbehaviortaskScript {

}

declare interface CallOffReactionAction extends SquadTask {

  Activate(context: ScriptExecutionContext): void
}

declare interface SquadAlertedSync extends SquadTask {

  Activate(context: ScriptExecutionContext): void
}

declare interface GetTargetLastKnownPosition extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface GetOwnPosition extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface TeleportFailsafeHelper extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface AIGenericLookatTask extends AILookatTask {

  GetSoftLimitDegreesType(): animLookAtLimitDegreesType
  GetHardLimitDegreesType(): animLookAtLimitDegreesType
  GetHardLimitDistanceType(): animLookAtLimitDistanceType
  GetBackLimitDegreesType(): animLookAtLimitDegreesType
  GetLookatStyle(): animLookAtStyle
  GetHasOutTransition(): Bool
  GetOutTransitionStyle(): animLookAtStyle
  GetLookAtSlotName(): CName
  GetLookActivationDelay(): number
  GetLookAtDeactivationDelay(): number
  ActivateLookat(context: ScriptExecutionContext): void
  DeactivateLookat(context: ScriptExecutionContext, instant?: Bool): void
  ShouldLookatBeActive(context: ScriptExecutionContext): Bool
  UpdateLookat(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
  DeactivateLookatInternal(context: ScriptExecutionContext, instant?: Bool): void
  GetLookAtEvent(): LookAtAddEvent
  SetLookAtEvent(lookAtEvent: LookAtAddEvent): void
}

declare interface AIGenericEntityLookatTask extends AIGenericLookatTask {

  GetLookAtEvent(): LookAtAddEvent
  SetLookAtEvent(lookAtEvent: LookAtAddEvent): void
  GetAimingLookatTarget(context: ScriptExecutionContext): GameObject
  ActivateLookat(context: ScriptExecutionContext): void
  DeactivateLookat(context: ScriptExecutionContext, instant?: Bool): void
  ShouldLookatBeActive(context: ScriptExecutionContext): Bool
  Activate(context: ScriptExecutionContext): void
}

declare interface AIGenericAdvancedLookatTask extends AIGenericLookatTask {

  GetAimingLookatTarget(context: ScriptExecutionContext): GameObject
  ActivateLookat(context: ScriptExecutionContext): void
  DeactivateLookat(context: ScriptExecutionContext, instant?: Bool): void
  ShouldLookatBeActive(context: ScriptExecutionContext): Bool
  Activate(context: ScriptExecutionContext): void
}

declare interface AIGenericStaticLookatTask extends AIGenericLookatTask {

  GetAimingLookatTarget(context: ScriptExecutionContext): Vector4
  ActivateLookat(context: ScriptExecutionContext): void
  DeactivateLookat(context: ScriptExecutionContext, instant?: Bool): void
  ShouldLookatBeActive(context: ScriptExecutionContext): Bool
  Activate(context: ScriptExecutionContext): void
}

declare interface AISearchingLookat extends AIGenericStaticLookatTask {

  InitializeMemberVariables(context: ScriptExecutionContext): Bool
  GetLookatTargetPosition(context: ScriptExecutionContext): Vector4
  GetHardLimitDegreesType(): animLookAtLimitDegreesType
  GetHardLimitDistanceType(): animLookAtLimitDistanceType
  GetSoftLimitDegreesType(): animLookAtLimitDegreesType
  GetBackLimitDegreesType(): animLookAtLimitDegreesType
  GetLookatStyle(): animLookAtStyle
  GetAimingLookatTarget(context: ScriptExecutionContext): Vector4
  SelectNewAimingLookatTarget(context: ScriptExecutionContext): Vector4
  LookatOffsetAngleLimit(context: ScriptExecutionContext, lastTargetPosition: Vector4, leftAngleCap: number, rightAngleCap: number): void
  GetSoftLookatLimitDegrees(): number
  GetAbsAngleToTarget(context: ScriptExecutionContext): number
}

declare interface StatusEffectActions extends AIbehaviortaskScript {

}

declare interface WeaponJammedAction extends StatusEffectActions {

}

declare interface StatusEffectTasks extends AIbehaviortaskScript {

}

declare interface ApplyStatusEffectOnOwner extends StatusEffectTasks {

  Activate(context: ScriptExecutionContext): void
}

declare interface RemoveStatusEffectOnOwner extends StatusEffectTasks {

  Activate(context: ScriptExecutionContext): void
}

declare interface LookatCompanion extends AIGenericAdvancedLookatTask {

  GetAimingLookatTarget(context: ScriptExecutionContext): GameObject
  GetHardLimitDegreesType(): animLookAtLimitDegreesType
  GetHardLimitDistanceType(): animLookAtLimitDistanceType
  GetSoftLimitDegreesType(): animLookAtLimitDegreesType
  GetBackLimitDegreesType(): animLookAtLimitDegreesType
  GetLookatStyle(): animLookAtStyle
  GetLookActivationDelay(): number
  GetLookAtDeactivationDelay(): number
}

declare interface MonitorStatusEffectBehavior extends StatusEffectTasks {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
}

declare interface UnconsciousManagerTask extends StatusEffectTasks {

  Activate(context: ScriptExecutionContext): void
  SetUnconsciousBodyVisibleComponent(puppet: NPCPuppet, state: Bool): void
  Deactivate(context: ScriptExecutionContext): void
}

declare interface AIVehicleTaskAbstract extends AIbehaviortaskScript {

  SendAIEventToMountedVehicle(context: ScriptExecutionContext, eventName: CName): Bool
  SendAICommandToMountedVehicle(context: ScriptExecutionContext, command: AIVehicleCommand): Bool
}

declare interface LookatCombatTarget extends AIGenericEntityLookatTask {

  GetAimingLookatTarget(context: ScriptExecutionContext): GameObject
  GetLookatStyle(): animLookAtStyle
}

declare interface HeadLookatCombatTarget extends LookatCombatTarget {

  GetLookAtSlotName(): CName
}

declare interface LookatCombatTarget_WithoutArms extends AIGenericEntityLookatTask {

  GetAimingLookatTarget(context: ScriptExecutionContext): GameObject
}

declare interface WoundedLookatController extends AIGenericEntityLookatTask {

  Activate(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
}

declare interface HeartAttackManagerTask extends StatusEffectTasks {

  Activate(context: ScriptExecutionContext): void
  SetHeartAttackBodyVisibleComponent(puppet: NPCPuppet, state: Bool): void
  Deactivate(context: ScriptExecutionContext): void
}

declare interface SetAnimWrappersFromMountData extends AIVehicleTaskAbstract {

  Activate(context: ScriptExecutionContext): void
}

declare interface SearchPatternMappingLookat extends AISearchingLookat {

  GetLookatTargetPosition(context: ScriptExecutionContext): Vector4
  InitializeMemberVariables(context: ScriptExecutionContext): Bool
}

declare interface EnterVehicle extends AIVehicleTaskAbstract {

  Deactivate(context: ScriptExecutionContext): void
}

declare interface ToggleVisibleObjectComponent extends StatusEffectTasks {

  Activate(context: ScriptExecutionContext): void
}

declare interface ExitFromVehicle extends AIVehicleTaskAbstract {

  Activate(context: ScriptExecutionContext): void
}

declare interface ReactionManagerTask extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
  UpdateArguments(context: ScriptExecutionContext): void
  SendBehaviorStatus(owner: GameObject, status: AIbehaviorUpdateOutcome): void
}

declare interface SearchInFrontPatternLookat extends AISearchingLookat {

  GetLookatTargetPosition(context: ScriptExecutionContext): Vector4
  InitializeMemberVariables(context: ScriptExecutionContext): Bool
}

declare interface SetPlayerAsKiller extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface SetPendingReactionBB extends StatusEffectTasks {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
}

declare interface CentaurShieldLookatController extends AILookatTask {

  Activate(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
  GetShieldState(context: ScriptExecutionContext): ECentaurShieldState
  UpdateActiveShield(context: ScriptExecutionContext): void
  ShouldLookatAtShieldTarget(context: ScriptExecutionContext): Bool
  ShouldLookatAtCombatTarget(context: ScriptExecutionContext): Bool
  ActivateMainShieldLookat(context: ScriptExecutionContext, lookatTarget: GameObject): void
  DeactivateMainShieldLookat(context: ScriptExecutionContext): void
  ReevaluateDesiredLookatTarget(context: ScriptExecutionContext): void
  IsShieldTargetValid(context: ScriptExecutionContext): Bool
  GetDistanceToShieldTarget(context: ScriptExecutionContext): number
}

declare interface ApproachVehicleDecorator extends AIVehicleTaskAbstract {

  Activate(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  UpdateComponionChecks(context: ScriptExecutionContext, ownerVehicle: VehicleObject): Bool
  Deactivate(context: ScriptExecutionContext): void
}

declare interface BlindManagerTask extends StatusEffectTasks {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
}

declare interface CacheFXOnDefeated extends StatusEffectTasks {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
}

declare interface UpdateStimSource extends ReactionManagerTask {

  Deactivate(context: ScriptExecutionContext): void
}

declare interface SetDesiredReaction extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface SetControllerStimSource extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface SetDeviceInvestigationData extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
  SetInvestigationStateOnListener(listener: GameObject, isInvestigated: Bool): void
  GetDistractionHighlightData(owner: ScriptedPuppet): FocusForcedHighlightData
  ForceVisionAppearance(owner: ScriptedPuppet, data: FocusForcedHighlightData): void
  CancelForcedVisionAppearance(owner: ScriptedPuppet, data: FocusForcedHighlightData): void
}

declare interface CacheStatusEffectAnimationTask extends StatusEffectTasks {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
  QueueStatusEffectAnimEvent(puppet: NPCPuppet, removeCachedStatusEffect: Bool): void
}

declare interface CheckFriendlyNPCAboutToBeHit extends StatusEffectTasks {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
}

declare interface SlotReservationDecorator extends AIVehicleTaskAbstract {

  Activate(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
}

declare interface GetOnWindowCombatDecorator extends AIVehicleTaskAbstract {

  Activate(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface SetDeviceControllerInvestigationData extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface CheckRagdollOutOfNavmeshTask extends StatusEffectTasks {

  Activate(context: ScriptExecutionContext): void
}

declare interface InVehicleDecorator extends AIVehicleTaskAbstract {

  Activate(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
}

declare interface TriggerCombatAgainstStimTarget extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface WaitIfEnteringOrLeavingCover extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface AIRagdollDelegate extends ScriptBehaviorDelegate {

  DoGetRagdollInstigator(context: ScriptExecutionContext): Bool
  DoCheckWaterLevel(context: ScriptExecutionContext): Bool
  DoCheckIfPoseAllowsRecovery(context: ScriptExecutionContext): Bool
  HasSpaceToRecover(owner: NPCPuppet, queryDimensions: number[], originTransform: WorldTransform): Bool
  TorsoAngleWithinParamters(maxAllowedAngle: number, hipsPosition: Vector4, chestPosition: Vector4, legsPosition: Vector4): Bool
  DoClearActiveStatusEffect(context: ScriptExecutionContext): Bool
  DoHandleDownedSignals(context: ScriptExecutionContext): Bool
  SendStatusEffectSignal(context: ScriptExecutionContext, puppet: ScriptedPuppet, seTypeTag: CName): void
  SendDownedSignal(context: ScriptExecutionContext, puppet: ScriptedPuppet, downedTypeTag: CName): void
  DoHandleRagdollReaction(context: ScriptExecutionContext): Bool
}

declare interface InVehicleCombatDecorator extends AIVehicleTaskAbstract {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
  ChaseNewTarget(context: ScriptExecutionContext, newTarget: GameObject): void
}

declare interface TriggerCombatReaction extends AIbehaviortaskScript {

  Deactivate(context: ScriptExecutionContext): void
}

declare interface GenerateHeatAroundLastTriggeredStimuli extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface WorkSpotTask extends AIbehaviortaskScript {

}

declare interface ReserveWorkSpotTask extends WorkSpotTask {

  Activate(context: ScriptExecutionContext): void
}

declare interface MountAssigendVehicle extends AIVehicleTaskAbstract {

  Activate(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface SetTrafficLaneMovementParams extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
}

declare interface ReleaseWorkSpotTask extends WorkSpotTask {

  Activate(context: ScriptExecutionContext): void
}

declare interface WaitBeforeExiting extends AIVehicleTaskAbstract {

  Activate(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface SetAvoidThreatDestination extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface AddActiveStimuli extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
}

declare interface AIVehicleConditionAbstract extends AIbehaviorconditionScript {

  IsVehicleOccupiedByHostile(context: ScriptExecutionContext, vehicleID: EntityID): Bool
}

declare interface HasVehicleAssigned extends AIVehicleConditionAbstract {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface CanMountVehicle extends AIVehicleConditionAbstract {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface UnregisterCommunityRunner extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
}

declare interface DoesVehicleSupportCombat extends AIVehicleConditionAbstract {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface UnregisterTrafficRunner extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
}

declare interface ExampleNavigationTask extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
}

declare interface IsNPCDriver extends AIVehicleConditionAbstract {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface SetExplosionInstigatorPositionAsStimSource extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface IsNPCAloneInVehicle extends AIVehicleConditionAbstract {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface InjectAttackInstigatorAsThreat extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface IsDriverActive extends AIVehicleConditionAbstract {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface FindNavmeshPointAroundThePlayer extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface RemoveStatusEffectsOnStoryTier extends StatusEffectTasks {

  Activate(context: ScriptExecutionContext): void
}

declare interface AdjustAnimWrappersForEscalatingFearPhase extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
}

declare interface HasNewMountRequest extends AIVehicleConditionAbstract {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface ForceAnimationOffScreen extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
}

declare interface AdjustAnimWrappersForDeescalatingFearPhase extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface ShouldExitVehicle extends AIVehicleConditionAbstract {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface AdjustAnimWrappersForEscalatingPanicPhase extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface IsInVehicle extends AIVehicleConditionAbstract {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface SetStressOnTrafficLane extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface SetPanicOnTrafficLane extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface AICommandHandlerBase extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  UpdateCommand(context: ScriptExecutionContext, command: AICommand): AIbehaviorUpdateOutcome
  CheckArgument(argument: AIArgumentMapping, argName: CName): Bool
}

declare interface AIPatrolCommandPrologue extends AICommandHandlerBase {

  UpdateCommand(context: ScriptExecutionContext, command: AICommand): AIbehaviorUpdateOutcome
}

declare interface TriggerFearRunningVO extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface ResetAllFearWrappers extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface ReprimandEscalation extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface ReprimandDeescalation extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface ResetReprimandEscalation extends AIbehaviortaskScript {

  Deactivate(context: ScriptExecutionContext): void
}

declare interface AimAtTargetCommandTask extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
  CancelCommand(context: ScriptExecutionContext): void
}

declare interface CommandCleanup extends AIbehaviortaskScript {

  Deactivate(context: ScriptExecutionContext): void
}

declare interface CompleteCommand extends AIbehaviortaskScript {

  Deactivate(context: ScriptExecutionContext): void
}

declare interface ReprimandStartAnimFeature extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface ReprimandResetAnimFeature extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface ReprimandEscalateAnimFeature extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface ReprimandDeescalateAnimFeature extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface AimAtTargetCommandCleanup extends AIbehaviortaskScript {

  Deactivate(context: ScriptExecutionContext): void
}

declare interface ReprimandToAlertedAnimFeature extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface AimAtTargetCommandHandler extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface ReprimandToCombatAnimFeature extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface AIBackgroundCombatCommand extends AICommand {

}

declare interface CallPolice extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface AIBackgroundCombatStep {

}

declare interface IncrimentStimThreshold extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface AIBackgroundCombatCommandParams extends ScriptedAICommandParams {

  GetCommandName(): string
  CreateCommand(): AICommand
}

declare interface IncrimentStealthStimThreshold extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface AIAnimationTask extends AIbehaviortaskScript {

  GetPhaseDuration(): number
  SendAnimData(context: ScriptExecutionContext, animData: AIActionAnimData_Record): void
  StartPhase(context: ScriptExecutionContext, newPhase: EAIActionPhase): void
  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  GetDescription(context: ScriptExecutionContext): string
}

declare interface SetTimestampToBehaviorAgrument extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface UnregisterReactionAction extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
}

declare interface EquipItemCommandDelegate extends ScriptBehaviorDelegate {

  GetFailIfItemNotFound(): Bool
  GetDurationOverride(): number
  GetUnequipDurationOverride(): number
  DoSetupEquipCommand(): Bool
  DoSetupUnequipCommand(): Bool
  DoEndCommand(): Bool
}

declare interface SetBackOffAnimFeature extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
}

declare interface SetBooleanArgumentWhenActive extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Deactivate(context: ScriptExecutionContext): void
}

declare interface BodyInvestigated extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface EquipPrimaryWeaponCommandDelegate extends ScriptBehaviorDelegate {

  DoSetupCommand(): Bool
  DoEndCommand(): Bool
}

declare interface TryStopMovingOnTrafficLane extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
}

declare interface AIDriveCommandsDelegate extends ScriptBehaviorDelegate {

  DoStartDriveOnSpline(context: ScriptExecutionContext): Bool
  DoEndDriveOnSpline(): Bool
  DoStartDriveFollow(context: ScriptExecutionContext): Bool
  DoUpdateDriveFollow(context: ScriptExecutionContext): Bool
  DoEndDriveFollow(context: ScriptExecutionContext): Bool
  DoStopDriveFollow(context: ScriptExecutionContext): Bool
  DoStartDriveToNode(context: ScriptExecutionContext): Bool
  DoEndDriveToNode(): Bool
  DoStartDriveRacing(context: ScriptExecutionContext): Bool
  DoEndDriveRacing(): Bool
  DoStartDriveJoinTraffic(context: ScriptExecutionContext): Bool
  DoEndDriveJoinTraffic(): Bool
}

declare interface EquipSecondaryWeaponCommandDelegate extends ScriptBehaviorDelegate {

  DoSetupCommand(): Bool
  DoEndCommand(): Bool
}

declare interface AIBackgroundCombatDelegate extends ScriptBehaviorDelegate {

  SetExecute(context: ScriptExecutionContext, value: Bool): void
  SetDesiredCover(context: ScriptExecutionContext, cover: NodeRef, exposureMethod: AICoverExposureMethod): void
  SetDesiredDestination(context: ScriptExecutionContext, destination: NodeRef): void
  SetDesiredTarget(context: ScriptExecutionContext, target: EntityReference): void
  DoStartCommand(context: ScriptExecutionContext): Bool
  DoEndCommand(context: ScriptExecutionContext): Bool
  DoExecuteCurrentStep(context: ScriptExecutionContext): Bool
  DoStartNextStep(context: ScriptExecutionContext): Bool
  DoAllowCoverChange(context: ScriptExecutionContext): Bool
  DoStartCoverChange(): Bool
  DoCompleteCoverChange(): Bool
  DoEnableShootingFromCover(context: ScriptExecutionContext): Bool
  DoDisableShootingFromCover(context: ScriptExecutionContext): Bool
  DoCompleteTargetChange(context: ScriptExecutionContext): Bool
}

declare interface HoldPositionCommandTask extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  CancelCommand(context: ScriptExecutionContext, typedCommand: AIHoldPositionCommand): void
}

declare interface ForceShootCommandTask extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
  CancelCommand(context: ScriptExecutionContext): void
}

declare interface AIDriveOnSplineCommandHandler extends AICommandHandlerBase {

  UpdateCommand(context: ScriptExecutionContext, command: AICommand): AIbehaviorUpdateOutcome
}

declare interface InjectCombatTargetCommandTask extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
  CancelCommand(context: ScriptExecutionContext): void
}

declare interface ForceShootCommandCleanup extends AIbehaviortaskScript {

  Deactivate(context: ScriptExecutionContext): void
}

declare interface ForceShootCommandHandler extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface AIDriveFollowCommandHandler extends AICommandHandlerBase {

  UpdateCommand(context: ScriptExecutionContext, command: AICommand): AIbehaviorUpdateOutcome
}

declare interface AIDriveToNodeCommandHandler extends AICommandHandlerBase {

  UpdateCommand(context: ScriptExecutionContext, command: AICommand): AIbehaviorUpdateOutcome
}

declare interface AIDriveRacingCommandHandler extends AICommandHandlerBase {

  UpdateCommand(context: ScriptExecutionContext, command: AICommand): AIbehaviorUpdateOutcome
}

declare interface AIJoinTargetsSquadTask extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  CancelCommand(context: ScriptExecutionContext, typedCommand: AIJoinTargetsSquad): void
}

declare interface InjectLookatTargetCommandTask extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
  CancelCommand(context: ScriptExecutionContext): void
}

declare interface InjectCombatThreatCommandTask extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
  CancelCommand(context: ScriptExecutionContext): void
}

declare interface AIDriveJoinTrafficCommandHandler extends AICommandHandlerBase {

  UpdateCommand(context: ScriptExecutionContext, command: AICommand): AIbehaviorUpdateOutcome
}

declare interface MeleeAttackCommandTask extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
  CancelCommand(context: ScriptExecutionContext, typedCommand: AIMeleeAttackCommand): void
}

declare interface RootMotionCommandHandler extends AICommandHandlerBase {

  UpdateCommand(context: ScriptExecutionContext, command: AICommand): AIbehaviorUpdateOutcome
}

declare interface MoveToCoverCommandTask extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
  ShouldInterrupt(context: ScriptExecutionContext): Bool
}

declare interface MoveToCoverCommandDelegate extends ScriptBehaviorDelegate {

  ResetVariables(context: ScriptExecutionContext): Bool
  OnActivate(context: ScriptExecutionContext): Bool
  GetCoverHeight(context: ScriptExecutionContext): gameCoverHeight
  GracefulInterruption(context: ScriptExecutionContext): Bool
  ResetGracefulInterruption(context: ScriptExecutionContext): Bool
  StopExecutingCommand(context: ScriptExecutionContext): Bool
  /** @noSelf **/
  SendGracefulInterruptionSignal(context: ScriptExecutionContext): void
  /** @noSelf **/
  ResetGracefulInterruptionSignal(context: ScriptExecutionContext): void
}

declare interface AIScanTargetTask extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  CancelCommand(context: ScriptExecutionContext, typedCommand: AIScanTargetCommand): void
}

declare interface MeleeAttackCommandCleanup extends AIbehaviortaskScript {

  Deactivate(context: ScriptExecutionContext): void
}

declare interface MeleeAttackCommandHandler extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface AISetCombatPresetTask extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  RemovePresets(owner: GameObject): Bool
  CancelCommand(context: ScriptExecutionContext, typedCommand: AISetCombatPresetCommand): void
}

declare interface ShootCommandTask extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
  CancelCommand(context: ScriptExecutionContext): void
}

declare interface TeleportCommandHandler extends AICommandHandlerBase {

  UpdateCommand(context: ScriptExecutionContext, command: AICommand): AIbehaviorUpdateOutcome
}

declare interface ShootCommandCleanup extends AIbehaviortaskScript {

  Deactivate(context: ScriptExecutionContext): void
}

declare interface ShootCommandHandler extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface ThrowGrenadeCommandTask extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
  CancelCommand(context: ScriptExecutionContext): void
}

declare interface UseWorkspotCommandDelegate extends ScriptBehaviorDelegate {

  DoSetupUseWorkspotCommand(context: ScriptExecutionContext): Bool
  DoCleanUp(): Bool
}

declare interface ThrowGrenadeCommandCleanup extends AIbehaviortaskScript {

  Deactivate(context: ScriptExecutionContext): void
}

declare interface ThrowGrenadeCommandHandler extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface UseWorkspotCommandHandler extends AICommandHandlerBase {

  UpdateCommand(context: ScriptExecutionContext, command: AICommand): AIbehaviorUpdateOutcome
}

declare interface UseCoverCommandTask extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  Deactivate(context: ScriptExecutionContext): void
  CancelCommand(context: ScriptExecutionContext, typedCommand: AIUseCoverCommand, aiComponent: AIHumanComponent): void
}

declare interface AIMoveToCommandHandler extends AICommandHandlerBase {

  UpdateCommand(context: ScriptExecutionContext, command: AICommand): AIbehaviorUpdateOutcome
}

declare interface UseCoverCommandHandler extends AIbehaviortaskScript {

  Activate(context: ScriptExecutionContext): void
  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
  WaitBeforeExit(context: ScriptExecutionContext): Bool
}

declare interface AIMoveOnSplineCommandHandler extends AICommandHandlerBase {

  UpdateCommand(context: ScriptExecutionContext, command: AICommand): AIbehaviorUpdateOutcome
}

declare interface AIBaseMountCommand extends AICommand {

}

declare interface AIMountCommand extends AIBaseMountCommand {

}

declare interface AIUnmountCommand extends AIBaseMountCommand {

}

declare interface MountCommandHandlerTask extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface MountRequestCondition extends AIbehaviorconditionScript {

  TestRequest(context: ScriptExecutionContext, argumentName: CName): AIbehaviorConditionOutcomes
  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface AIMoveRotateToCommandHandler extends AICommandHandlerBase {

  UpdateCommand(context: ScriptExecutionContext, command: AICommand): AIbehaviorUpdateOutcome
}

declare interface AIMoveCommandsDelegate extends ScriptBehaviorDelegate {

  DoStartAnimMoveOnSpline(): Bool
  DoEndAnimMoveOnSpline(): Bool
  GetRotateEntity(context: ScriptExecutionContext): Bool
  DoStartMoveOnSpline(context: ScriptExecutionContext): Bool
  DoEndMoveOnSpline(): Bool
  DoFindClosestPointOnSpline(context: ScriptExecutionContext): Bool
  DoFindStartOfTheSpline(context: ScriptExecutionContext): Bool
  DoFindEndOfTheSpline(context: ScriptExecutionContext): Bool
  GetIsMoveToSplineNeeded(context: ScriptExecutionContext): Bool
  OnWalkingOnSpline(context: ScriptExecutionContext, success: Bool, isCompanionProgressing: Bool): void
  ShouldBeWaitingDelayed(context: ScriptExecutionContext): Bool
  DoUpdateDistanceToCompanionOnSpline(context: ScriptExecutionContext): Bool
  DoUpdateSpeed(context: ScriptExecutionContext): void
  DoUpdateWaitForCompanionOnSpline(context: ScriptExecutionContext): Bool
  DontWaitToCompanionNearEnd(owner: ScriptedPuppet, distanceToDestination: number, companionDistance: number): Bool
  IsOnTheSpline(target: ScriptedPuppet, tolerance: number): Bool
  SetWaitForCompanion(owner: ScriptedPuppet, value: Bool): void
  DoEndTeleportToCompanionOnSpline(): Bool
  DoStartWaitForCompanion(): Bool
  DoEndWaitForCompanion(): Bool
  SelectSplineTeleportTarget(context: ScriptExecutionContext): Bool
  GetSprintSpeedDistance(context: ScriptExecutionContext): number
  GetRunSpeedDistance(context: ScriptExecutionContext): number
  GetTeleportDistance(context: ScriptExecutionContext): number
  DoStartFollowTarget(context: ScriptExecutionContext): Bool
  SelectFollowTeleportTarget(context: ScriptExecutionContext): Bool
}

declare interface MountRequestPassiveCondition extends AIbehaviorexpressionScript {

  GetCallbackName(): CName
  GetRequestArgumentName(): CName
  Activate(ctx: ScriptExecutionContext): void
  Deactivate(ctx: ScriptExecutionContext): void
  CalculateValue(ctx: ScriptExecutionContext): Variant
}

declare interface ShardCaseContainerPS extends gameLootContainerBasePS {

}

declare interface ShardCaseContainer extends ContainerObjectSingleItem {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnInteraction(choiceEvent: InteractionChoiceEvent): Bool
  OnShardCaseAnimationEnded(evt: ShardCaseAnimationEnded): Bool
  IsShardContainer(): Bool
}

declare interface ShardCaseAnimationEnded extends Event {

}

declare interface WorkspotList extends IScriptable {

}

declare interface PatrolRoleCommandDelegate extends ScriptBehaviorDelegate {

  ResetVariables(context: ScriptExecutionContext): Bool
  IsPatrolWithWeapon(context: ScriptExecutionContext): Bool
  IsForceAlerted(context: ScriptExecutionContext): Bool
}

declare interface Damage extends IScriptable {

  IsValid(): Bool
  GetType(): gamedataDamageType
  SetType(dmgType: gamedataDamageType): void
  GetValue(): number
  SetValue(value: number): void
}

declare interface AIRoleCondition extends AIbehaviorconditionScript {

  Check(context: ScriptExecutionContext): AIbehaviorConditionOutcomes
}

declare interface AIAssignRoleTask extends AIbehaviortaskScript {

  Update(context: ScriptExecutionContext): AIbehaviorUpdateOutcome
}

declare interface SStatPoolValue {

}

declare interface SCachedStat {

}

declare interface EffectPreAction_PreAttack extends EffectPreAction_Scripted {

  Process(ctx: EffectScriptContext): void
}

declare interface EffectPreAction_PreAttack_WithFriendlyFire extends EffectPreAction_PreAttack {

}

declare interface SDebugChoice {

}

declare interface DebugInteractionObject extends GameObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnInteractionChoice(choiceEvent: InteractionChoiceEvent): Bool
  InitializeChoices(): void
  CreateChoice(choiceName: string, data: number): InteractionChoice
  ResolveFact(factName: string): void
}

declare interface DebugTextDrawer extends GameObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
}

declare interface SFakeFeatureChoice {

}

declare interface DEBUG_ItemRebalancer extends GameObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnInteractionChoice(evt: InteractionChoiceEvent): Bool
  RebalanceItem(): void
}

declare interface DEBUG_RebalanceItemEvent extends Event {

}

declare interface FakeFeature extends GameObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnDetach(): Bool
  OnInteractionChoice(choiceEvent: InteractionChoiceEvent): Bool
  OnEnabledFactChangeTrigerred(evt: FactChangedEvent): Bool
  RefreshChoices(): void
  InitializeChoices(): void
  UnInitializeChoices(): void
  CreateChoice(choiceID: string, data: number): InteractionChoice
  ResolveChoice(choiceID: number): void
  ResolveFact(factData: SFactOperationData): void
  ResolveComponents(choiceID: number): void
  OnItemTooltip(evt: InteractionEvent): Bool
}

declare interface StrikeDuration_Debug extends EffectDurationModifier_Scripted {

}

declare interface StrikeDuration_Debug_VDB extends StrikeDuration_Debug {

  Process(ctx: EffectScriptContext, durationCtx: EffectDurationModifierScriptContext): number
}

declare interface StrikeExecutor_Debug extends EffectExecutor_Scripted {

}

declare interface StrikeExecutor_Debug_ModifyStatPool extends StrikeExecutor_Debug {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface StrikeExecutor_Debug_PrintStat extends StrikeExecutor_Debug {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface StrikeExecutor_Debug_ApplyStatusEffect extends StrikeExecutor_Debug {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface StrikeExecutor_Debug_PrintStats extends StrikeExecutor_Debug {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
  PrintStats(puppet: ScriptedPuppet): void
  PrintStatGroupHeader(str: string, spaceFillSize: number): void
  PrintStats(obj: GameObject, stats: gamedataStatType[], spaceFillSize: number): void
  PrintStat(obj: GameObject, stat: gamedataStatType, spaceFillSize: number): void
  PrintStatPool(obj: GameObject, statPool: gamedataStatPoolType, spaceFillSize: number): void
}

declare interface StrikeExecutor_Debug_VDB extends StrikeExecutor_Debug {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface DEBUG_VirtualShopkeeper extends GameObject {

  OnInteractionChoice(choiceEvent: InteractionChoiceEvent): Bool
}

declare interface NetworkMinigameData {

}

declare interface inkButtonTintController extends inkButtonController {

  OnButtonStateChanged(controller: inkButtonController, oldState: inkEButtonState, newState: inkEButtonState): Bool
}

declare interface NewTurnMinigameData {

}

declare interface NetworkMinigameVisualController extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  SetUp(data: NetworkMinigameData): void
  SetGridElementPicked(newData: NewTurnMinigameData): void
  SetProgramCompleted(id: string, revealLocalizedName: Bool): void
  ShowEndScreen(endData: EndScreenData): void
  OnGridOutroOver(e: inkAnimProxy): Bool
  GetLastCellSelected(): CellData
  Close(): void
  StartIntroAnimation(): void
  OnStartSidesAnimation(e: inkWidget): Bool
  OnStartMinigameBGIntroAnimation(e: inkWidget): Bool
  OnIntroAnimationFinished(e: inkWidget): Bool
  InitializeFluffLines(): void
  SetFluffVisibility(isVisible: Bool): void
  ClearContainer(toClear: inkCompoundWidget): void
  OnCellSelectCallback(e: inkWidget): Bool
  OnCloseClicked(e: inkPointerEvent): Bool
}

declare interface NetworkMinigameGridController extends inkLogicController {

  OnInitialize(): Bool
  Clear(): void
  SetUp(gridData: CellData[]): void
  SetGridData(gridData: CellData[]): void
  AddCell(toAdd: CellData): inkWidget
  SetCurrentActivePosition(position: Vector2, isHorizontal: Bool): void
  SetLastCellSelected(cell: CellData): void
  GetLastCellSelected(): CellData
  GetGrid(): CellData[]
  FindCellData(position: Vector2): CellData
  HighlightFromCellHover(position: Vector2): void
  IsOnCurrentCellSet(position: Vector2): Bool
  RemoveHighlightFromCellHover(): void
  HighlightCellSet(index: number, isHover: Bool, isHorizontal: Bool): void
  RefreshDimLevels(index: number, isHorizontal: Bool): void
}

declare interface CellData {

}

declare interface NetworkMinigameGridCellController extends inkButtonController {

  OnInitialize(): Bool
  Spawn(setUp: CellData, grid: NetworkMinigameGridController): void
  OnButtonStateChanged(controller: inkButtonController, oldState: inkEButtonState, newState: inkEButtonState): Bool
  SetHighlightStatus(isHighlighted: Bool): void
  OnReleaseContainer(e: inkPointerEvent): Bool
  Consume(): void
  IsConsumed(): Bool
  SetElementActive(isDimmed: Bool): void
}

declare interface NetworkMinigameProgramListController extends inkLogicController {

  Spawn(contents: ProgramData[]): void
  SpawnSlot(data: ProgramData): NetworkMinigameProgramController
  GetDesignatedParent(data: ProgramData): inkWidgetRef
  UpdatePartialCompletionState(progressList: ProgramProgressData[]): void
  ShowCompleted(id: string, revealLocalizedName: Bool): void
  PlaySideBarAnim(): void
  ProcessListModified(shouldModify: Bool, playerProgramsAdded: ProgramData[], playerProgramsRemoved: ProgramData[]): void
  FindSlotIndexByID(id: string): number
}

declare interface NetworkMinigameBufferController extends inkLogicController {

  Spawn(size: number): void
  SetEntries(toSet: ElementData[]): void
  OnEndLoop(proxy: inkAnimProxy): Bool
}

declare interface NetworkMinigameEndScreenController extends inkLogicController {

  SetUp(endData: EndScreenData): void
  GetCloseButtonRef(): inkWidgetRef
}

declare interface EndScreenData {

}

declare interface NetworkMinigameAnimationCallbacksTransmitter extends inkLogicController {

  OnStartSidesAnimation(): Bool
  OnStartMinigameBGIntroAnimation(): Bool
  OnIntroAnimationFinished(): Bool
}

declare interface NetworkMinigameBasicProgramController extends NetworkMinigameProgramController {

  ShowCompleted(revealLocalizedName: Bool): void
}

declare interface NetworkMinigameAnimationCallManager extends inkLogicController {

  StartReveal(): void
}

declare interface NetworkMinigameAnimatedElementController extends NetworkMinigameElementController {

  SetContent(toSet: ElementData): void
  SetHighlightStatus(doHighlight: Bool): void
  Consume(): void
}

declare interface SpecialProperties {

}

declare interface NetworkInkGameController extends inkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  GetBlackboard(): IBlackboard
  RegisterBlackboardCallbacks(): void
  UnregisterBlackboardCallbacks(): void
  SetPlayerBlackboardInformation(value: Bool): void
  GetBlackboardDef(): NetworkBlackboardDef
  StartMinigame(): void
  StartBreaching(networkName: string): void
  SetActiveMiniGameRecord(): void
  OnDevicesCountChanged(value: number): Bool
  OnStopBreaching(target: inkWidget): Bool
  PlayGame(): void
  ExecuteTurn(): void
  NewTurn(placementX: number, placementY: number, grid?: CellData[]): void
  CloseGame(): void
  GenerateGrid(grid: CellData[]): void
  RegenerateGrid(grid: CellData[], symbols: string[], symbolProbabilities: number[]): void
  SetSymbolProbabilities(prob: number[], arr: string[]): void
  ReserveSymbols(symbols: string[]): void
  GetPredefinedGrid(listCells: CellData[]): Bool
  GetPredefinedBasicAccess(program: ProgramData, programType: ProgramType, programEffect: ProgramEffect): Bool
  GetPredefinedProgram(programList: ProgramData[], programType: ProgramType, programEffect: ProgramEffect, cyberdeck: Bool): Bool
  MakeProgram(programName: string, num: number, symbols: string[], probabilities: number[], programType: ProgramType, programEffect: ProgramEffect): ProgramData
  InsertProgram(grid: CellData[], program: ProgramData, forceFirstRow: Bool): void
  GenerateTraps(grid: CellData[]): void
  GetRandomTraps(traps: ETrap[]): Bool
  ApplyRandomVirus(): ExtraEffect
  KeepTrackPrograms(programs: ProgramData[], enemy: Bool): void
  FeedbackProgramCompletion(program: ElementData[], buffer: ElementData[]): number
  CheckUploaded(program: ProgramData): Bool
  OnPressCell(e: inkWidget): Bool
  OnCloseGame(e: inkWidget): Bool
  GenerateHexNumber2(): string
  GridPositionToList(x: number, y: number, dimension: number): number
  CheckDirection(placementX: number, placementY: number): string
  AppendListPrograms(arr1: ProgramData[], arr2: ProgramData[]): ProgramData[]
  ChooseRandomOption(probabilities: number[]): number
  ArrayCellsToString(arr: ElementData[]): string
  ArrayCellsToString(arr: ElementData[], num: number, fromNumber: Bool): string
  ArrayCellsToString(arr: string[], num: number, fromNumber: Bool): string
  GetCellFromPosition(arr: CellData[], x: number, y: number): CellData
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
  OnPressSkip(e: inkPointerEvent): Bool
}

declare interface CallActionWidgetController extends DeviceActionWidgetControllerBase {

  Initialize(gameController: DeviceInkGameControllerBase, widgetData: SActionWidgetPackage): void
  FinalizeActionExecution(executor: GameObject, action: DeviceAction): void
  CallStarted(): void
  CallPickedUp(): void
  CallEnded(): void
  CallMissed(): void
  ResetIntercom(): void
  OnHoverOver(e: inkPointerEvent): Bool
  OnHoverOut(e: inkPointerEvent): Bool
}

declare interface StartCall extends ActionBool {

  SetProperties(): void
  GetTweakDBChoiceRecord(): string
  GetInkWidgetTweakDBID(): TweakDBID
}

declare interface PlayPauseActionWidgetController extends NextPreviousActionWidgetController {

  Initialize(gameController: DeviceInkGameControllerBase, widgetData: SActionWidgetPackage): void
  FinalizeActionExecution(executor: GameObject, action: DeviceAction): void
  Reset(): void
  DetermineState(): void
}

declare interface TogglePlay extends ActionBool {

  SetProperties(isPlaying: Bool): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetInkWidgetTweakDBID(): TweakDBID
}

declare interface PayActionWidgetController extends DeviceActionWidgetControllerBase {

  Initialize(gameController: DeviceInkGameControllerBase, widgetData: SActionWidgetPackage): void
  FinalizeActionExecution(executor: GameObject, action: DeviceAction): void
  ProcessPayment(action: Pay, executor: GameObject): void
  OnPaymentProcessed(e: inkAnimProxy): Bool
  OnNoMoneyShowed(e: inkAnimProxy): Bool
  CanExecuteAction(): Bool
}

declare interface VendorItemActionWidgetController extends DeviceActionWidgetControllerBase {

  Initialize(gameController: DeviceInkGameControllerBase, widgetData: SActionWidgetPackage): void
  FinalizeActionExecution(executor: GameObject, action: DeviceAction): void
  ProcessPayment(action: DispenceItemFromVendor, executor: GameObject): void
  OnPaymentProcessed(e: inkAnimProxy): Bool
  OnNoMoneyShowed(e: inkAnimProxy): Bool
}

declare interface WeaponVendorActionWidgetController extends DeviceActionWidgetControllerBase {

  Initialize(gameController: DeviceInkGameControllerBase, widgetData: SActionWidgetPackage): void
  FinalizeActionExecution(executor: GameObject, action: DeviceAction): void
  Processing(): void
  NoMoney(): void
  IsProcessing(): Bool
  ResetToDefault(): void
  OnProcessed(e: inkAnimProxy): Bool
  OnHoverOver(e: inkPointerEvent): Bool
  OnHoverOut(e: inkPointerEvent): Bool
}

declare interface LcdScreenInkGameController extends DeviceInkGameControllerBase {

  OnFillStreetSignData(selector: TweakDBIDSelector): Bool
  SetupWidgets(): void
  OnUninitialize(): Bool
  UpdateActionWidgets(widgetsData: SActionWidgetPackage[]): void
  Refresh(state: EDeviceStatus): void
  RegisterBlackboardCallbacks(blackboard: IBlackboard): void
  UnRegisterBlackboardCallbacks(blackboard: IBlackboard): void
  GetOwner(): LcdScreen
  OnActionWidgetsUpdate(value: Variant): Bool
  OnMessegeChanged(value: Variant): Bool
  StartGlitchingScreen(glitchData: GlitchData): void
  StopGlitchingScreen(): void
  PlayVideo(videoPath: ResRef, looped: Bool, audioEvent: CName): void
  StopVideo(): void
  TurnOff(): void
  TurnOn(): void
  InitializeCustomNumber(replaceTextWithCustomNumber: Bool, customNumber: number): void
  InitializeMessageRecord(messageRecord: ScreenMessageData_Record): void
  ResolveMessegeRecord(record: ScreenMessageData_Record): void
  GetColorFromArray(calorArray: number[]): Color
  SetBackgroundTexture(imageWidget: inkImage, textureID: TweakDBID): void
  SetBackgroundTexture(imageWidget: inkImage, textureRecord: UIIcon_Record): void
  SetBackgroundTexture(imageWidgetRef: inkImageRef, textureRecord: UIIcon_Record): void
}

declare interface ApartmentScreenInkGameController extends LcdScreenInkGameController {

  Refresh(state: EDeviceStatus): void
  SetupWidgets(): void
  RegisterBlackboardCallbacks(blackboard: IBlackboard): void
  GetOwner(): ApartmentScreen
  ResolveMessegeRecord(record: ScreenMessageData_Record): void
}

declare interface ApartmentScreen extends LcdScreen {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  ResavePersistentData(ps: PersistentState): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  OnDetach(): Bool
  GetController(): ApartmentScreenController
  GetDevicePS(): ApartmentScreenControllerPS
  RegisterDayUpdateCallback(): void
  UnregisterDayUpdateCallback(): void
  OnDayPassed(evt: DayPassedEvent): Bool
  GetCurrentRentStatus(): ERentStatus
  GetCurrentOverdueValue(): number
}

declare interface ApartmentScreenController extends LcdScreenController {

  GetPS(): ApartmentScreenControllerPS
}

declare interface ApartmentScreenControllerPS extends LcdScreenControllerPS {

  OnInstantiated(): Bool
  GameAttached(): void
  GetQuestActions(outActions: DeviceAction[], context: GetActionsContext): void
  UpdateRentState(): void
  InitializeRentState(): void
  GetInitialOverdueValue(): number
  SetCurrentRentStatus(status: ERentStatus): void
  UpdateCurrentOverdue(): void
  GetGameTime(): GameTime
  GetCurrentDay(): number
  GetDaysPassed(): number
  ReEvaluateRentStatus(): void
  GetStateChangeProbabilityValue(): number
  GetCurrentRentStatus(): ERentStatus
  GetCurrentOverdueValue(): number
  GetPaymentScheduleValue(): number
}

declare interface DayPassedEvent extends Event {

}

declare interface ArcadeMachineInkGameController extends DeviceInkGameControllerBase {

  OnUninitialize(): Bool
  SetupWidgets(): void
  UpdateActionWidgets(widgetsData: SActionWidgetPackage[]): void
  Refresh(state: EDeviceStatus): void
  RegisterBlackboardCallbacks(blackboard: IBlackboard): void
  UnRegisterBlackboardCallbacks(blackboard: IBlackboard): void
  GetOwner(): ArcadeMachine
  OnTimeToDepartChanged(value: string): Bool
  StartGlitchingScreen(glitchData: GlitchData): void
  StopGlitchingScreen(): void
  PlayVideo(videoPath: ResRef, looped: Bool, audioEvent: CName): void
  StopVideo(): void
  TurnOff(): void
  TurnOn(): void
}

declare interface BackdoorInkGameController extends MasterDeviceInkGameControllerBase {

  RegisterBlackboardCallbacks(blackboard: IBlackboard): void
  UnRegisterBlackboardCallbacks(blackboard: IBlackboard): void
  UpdateThumbnailWidgets(widgetsData: SThumbnailWidgetPackage[]): void
  UpdateDeviceWidgets(widgetsData: SDeviceWidgetPackage[]): void
  GetOwner(): AccessPoint
  Refresh(state: EDeviceStatus): void
  TurnOn(): void
  TurnOff(): void
  PlayIntroAnimation(): void
  OnIntroFinished(e: inkAnimProxy): Bool
  PlayAnimation(animName: CName): void
  StartGlitching(): void
  StopGlitching(): void
  OnGlitching(value: Bool): Bool
  OnIsInDefaultState(value: Bool): Bool
  OnShutdownModule(value: number): Bool
  OnBootModule(value: number): Bool
  ShutdownModule(module: number): void
  BootModule(module: number): void
  EnableHackedGroup(): void
}

declare interface BackdoorDataStreamController extends BackdoorInkGameController {

  StartGlitching(): void
  EnableHackedGroup(): void
  ShutdownModule(module: number): void
  BootModule(module: number): void
}

declare interface TextSpawnerController extends inkLogicController {

  OnInitialize(): Bool
}

declare interface DocumentCustomData extends IScriptable {

}

declare interface ConfessionalInkGameController extends DeviceInkGameControllerBase {

  OnUninitialize(): Bool
  SetupWidgets(): void
  UpdateActionWidgets(widgetsData: SActionWidgetPackage[]): void
  Refresh(state: EDeviceStatus): void
  RegisterBlackboardCallbacks(blackboard: IBlackboard): void
  UnRegisterBlackboardCallbacks(blackboard: IBlackboard): void
  GetOwner(): ConfessionBooth
  StartGlitchingScreen(glitchData: GlitchData): void
  StopGlitchingScreen(): void
  PlayVideo(videoPath: ResRef, looped: Bool, audioEvent: CName): void
  ResetConfessionState(): void
  PlayConfessMessegeAnimation(): void
  OnVideoFinished(target: inkVideo): Bool
  OnMessegeAnimFinished(e: inkAnimProxy): Bool
  StopVideo(): void
  TurnOff(): void
  TurnOn(): void
  OnConfess(value: Bool): Bool
  StartConfessing(): void
  StopConfessing(): void
}

declare interface ConfessionBooth extends BasicDistractionDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  ResavePersistentData(ps: PersistentState): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  CreateBlackboard(): void
  GetBlackboardDef(): ConfessionalBlackboardDef
  GetController(): ConfessionBoothController
  GetDevicePS(): ConfessionBoothControllerPS
  TurnOnDevice(): void
  TurnOffDevice(): void
  TurnOnLights(): void
  TurnOffLights(): void
  StartBlinking(): void
  StopBlinking(): void
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
  OnHitEvent(hit: gameHitEvent): Bool
  StartShortGlitch(): void
  OnStopShortGlitch(evt: StopShortGlitchEvent): Bool
  OnConfessionCompleted(evt: ConfessionCompletedEvent): Bool
  OnConfess(evt: Confess): Bool
  StartConfessing(): void
  StopConfessing(): void
}

declare interface ConfessionBoothController extends BasicDistractionDeviceController {

  GetPS(): ConfessionBoothControllerPS
}

declare interface ConfessionBoothControllerPS extends BasicDistractionDeviceControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(outActions: DeviceAction[], context: GetActionsContext): void
  GetQuestActions(outActions: DeviceAction[], context: GetActionsContext): void
  ActionConfess(): Confess
  OnConfess(evt: Confess): EntityNotificationType
  GetBlackboardDef(): ConfessionalBlackboardDef
}

declare interface Confess extends Pay {

  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetInkWidgetTweakDBID(): TweakDBID
}

declare interface ConfessionCompletedEvent extends Event {

}

declare interface DataTermInkGameController extends DeviceInkGameControllerBase {

  SetupWidgets(): void
  UpdateActionWidgets(widgetsData: SActionWidgetPackage[]): void
  RegisterBlackboardCallbacks(blackboard: IBlackboard): void
  UnRegisterBlackboardCallbacks(blackboard: IBlackboard): void
  GetOwner(): DataTerm
  Refresh(state: EDeviceStatus): void
  TurnOn(): void
  TurnOff(): void
  OnFastTravelPointUpdate(value: Variant): Bool
  UpdatePointText(): void
  OnActionWidgetSpawned(widget: inkWidget, userData: IScriptable): Bool
  GetFastTravelSystem(): FastTravelSystem
}

declare interface DataTerm extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  OnGameAttached(): Bool
  OnDetach(): Bool
  CreateBlackboard(): void
  GetBlackboardDef(): DataTermDeviceBlackboardDef
  GetController(): DataTermController
  GetDevicePS(): DataTermControllerPS
  DeactivateDevice(): void
  ActivateDevice(): void
  OnInteractionActivated(evt: InteractionEvent): Bool
  OnAreaEnter(evt: AreaEnteredEvent): Bool
  TeleportToExitNode(activator: GameObject): void
  ResolveGateApperance(): void
  IsMappinRegistered(): Bool
  RegisterMappin(): void
  UnregisterMappin(): void
  GetMappinSystem(): MappinSystem
  RegisterFastTravelPoints(): void
  OnFastTravelPointsUpdated(evt: FastTravelPointsUpdated): Bool
  OnOpenWorldMapAction(evt: OpenWorldMapDeviceAction): Bool
  ProcessFastTravelTutorial(): void
  EnableFastTravelOnMap(): void
  DeterminGameplayRole(): EGameplayRole
  IsGameplayRoleValid(role: EGameplayRole): Bool
  IsFastTravelPoint(): Bool
  OnHitEvent(hit: gameHitEvent): Bool
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
  StartShortGlitch(): void
  OnStopShortGlitch(evt: StopShortGlitchEvent): Bool
  GetFastravelPointData(): FastTravelPointData
}

declare interface DataTermController extends ScriptableDC {

  GetPS(): DataTermControllerPS
}

declare interface DataTermControllerPS extends ScriptableDeviceComponentPS {

  GetFastravelTriggerType(): EFastTravelTriggerType
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  GetBlackboardDef(): DataTermDeviceBlackboardDef
  ActionFastTravel(actionData: FastTravelPointData): FastTravelDeviceAction
  OnFastTravelAction(evt: FastTravelDeviceAction): EntityNotificationType
  ActionOpenWorldMap(): OpenWorldMapDeviceAction
  OnOpenWorldMapAction(evt: OpenWorldMapDeviceAction): EntityNotificationType
  SetLinkedFastTravelPoint(point: FastTravelPointData): void
  GetFastTravelSystem(): FastTravelSystem
}

declare interface OpenWorldMapDeviceAction extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface DoorInkGameController extends DeviceInkGameControllerBase {

  SetupWidgets(): void
  UpdateActionWidgets(widgetsData: SActionWidgetPackage[]): void
  Refresh(state: EDeviceStatus): void
  RegisterBlackboardCallbacks(blackboard: IBlackboard): void
  GetOwner(): Door
}

declare interface DoorTerminalMasterInkGameControllerBase extends MasterDeviceInkGameControllerBase {

  UpdateThumbnailWidgets(widgetsData: SThumbnailWidgetPackage[]): void
  UpdateDeviceWidgets(widgetsData: SDeviceWidgetPackage[]): void
  Refresh(state: EDeviceStatus): void
  ResolveBreadcrumbLevel(): void
  TurnOn(): void
  TurnOff(): void
}

declare interface DropPointTerminalInkGameController extends DeviceInkGameControllerBase {

  SetupWidgets(): void
  UpdateActionWidgets(widgetsData: SActionWidgetPackage[]): void
  Refresh(state: EDeviceStatus): void
  RegisterBlackboardCallbacks(blackboard: IBlackboard): void
  UnRegisterBlackboardCallbacks(blackboard: IBlackboard): void
  OnActionWidgetSpawned(widget: inkWidget, userData: IScriptable): Bool
  GetOwner(): DropPoint
  StopGlitchingScreen(): void
  TurnOff(): void
  TurnOn(): void
}

declare interface ImageButtonCustomData extends WidgetCustomData {

}

declare interface ElevatorArrowsLogicController extends DeviceInkLogicControllerBase {

  OnInitialize(): Bool
  CreateAnimations(): void
  PlayAnimations(): void
  PlayAltAnimations(): void
}

declare interface DoorWidgetCustomData extends WidgetCustomData {

  GetPasscode(): number
  SetPasscode(newCode: number): void
  GetCardName(): CName
  SetCardName(cardName: CName): void
  IsPasswordKnown(): Bool
  SetIsPasswordKnown(choice: Bool): void
}

declare interface InteractiveSignCustomData extends WidgetCustomData {

  SetMessege(text: string): void
  GetMessege(): string
  SetShape(shape: SignShape): void
  GetShape(): SignShape
}

declare interface InteractiveSignInkGameController extends DeviceInkGameControllerBase {

  UpdateDeviceWidgets(widgetsData: SDeviceWidgetPackage[]): void
  GetOwner(): InteractiveSign
  Refresh(state: EDeviceStatus): void
  TurnON(): void
  TurnOFF(): void
}

declare interface InteractiveSign extends Device {

  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
}

declare interface InteractiveSignController extends ScriptableDC {

  GetPS(): InteractiveSignControllerPS
}

declare interface InteractiveSignControllerPS extends ScriptableDeviceComponentPS {

}

declare interface InteractiveSignDeviceWidgetController extends DeviceWidgetControllerBase {

}

declare interface ElevatorInkGameController extends DeviceInkGameControllerBase {

  SetupWidgets(): void
  InitializeCurrentFloorName(): void
  UpdateActionWidgets(widgetsData: SActionWidgetPackage[]): void
  RefreshFloor(widget: inkWidget, widgetData: SActionWidgetPackage, floorNumber: number, maxFloors: number): void
  OnActionWidgetSpawned(widget: inkWidget, userData: IScriptable): Bool
  SetCurrentFloorOnUI(floorName: string): void
  GetOwner(): LiftDevice
  RegisterBlackboardCallbacks(blackboard: IBlackboard): void
  UnRegisterBlackboardCallbacks(blackboard: IBlackboard): void
  OnPlayerScanned(value: Bool): Bool
  OnPausedChange(value: Bool): Bool
  OnChangeFloor(value: string): Bool
  Refresh(state: EDeviceStatus): void
}

declare interface IntercomInkGameController extends DeviceInkGameControllerBase {

  OnUninitialize(): Bool
  SetupWidgets(): void
  RegisterBlackboardCallbacks(blackboard: IBlackboard): void
  UnRegisterBlackboardCallbacks(blackboard: IBlackboard): void
  OnUpdateStatus(value: Variant): Bool
  Refresh(state: EDeviceStatus): void
  UpdateActionWidgets(widgetsData: SActionWidgetPackage[]): void
  OnActionWidgetSpawned(widget: inkWidget, userData: IScriptable): Bool
  StartGlitchingScreen(glitchData: GlitchData): void
  StopGlitchingScreen(): void
  PlayVideo(videoPath: ResRef, looped: Bool, audioEvent: CName): void
  StopVideo(): void
  TurnOff(): void
  TurnOn(): void
  GetOwner(): Intercom
}

declare interface Intercom extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  OnVisibilityChanged(): void
  OnQuestPickUpCall(evt: QuestPickUpCall): Bool
  OnQuestHangUpCall(evt: QuestHangUpCall): Bool
  OnStartCall(evt: StartCall): Bool
  OnResetIntercom(evt: DelayEvent): Bool
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
  OnStopShortGlitch(evt: StopShortGlitchEvent): Bool
  StartShortGlitch(): void
  OnHitEvent(hit: gameHitEvent): Bool
  UpdateDisplayUI(status: IntercomStatus): void
  CreateBlackboard(): void
  GetBlackboardDef(): IntercomBlackboardDef
  GetDevicePS(): IntercomControllerPS
  GetController(): IntercomController
  DeterminGameplayRole(): EGameplayRole
}

declare interface IntercomController extends ScriptableDC {

  GetPS(): IntercomControllerPS
}

declare interface IntercomControllerPS extends ScriptableDeviceComponentPS {

  OnInstantiated(): Bool
  Initialize(): void
  GameAttached(): void
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  GetQuestActions(actions: DeviceAction[], context: GetActionsContext): void
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  CallStarted(): Bool
  ActionStartCall(): StartCall
  OnStartCall(evt: StartCall): EntityNotificationType
  ActionQuestPickUpCall(): QuestPickUpCall
  OnQuestPickUpCall(evt: QuestPickUpCall): EntityNotificationType
  ActionQuestHangUpCall(): QuestHangUpCall
  OnQuestHangUpCall(evt: QuestHangUpCall): EntityNotificationType
  ActionResetIntercom(): DelayEvent
  OnResetIntercom(evt: DelayEvent): EntityNotificationType
  ActionForceFollowTarget(): QuestLookAtTarget
  ActionStopFollowingTarget(): QuestStopLookAtTarget
  GetImmediateSlaves(): DeviceComponentPS[]
  RefreshSlaves_Event(): void
  OnRefreshSlavesEvent(evt: RefreshSlavesEvent): EntityNotificationType
  RefreshSlaves(): void
  GetBlackboardDef(): IntercomBlackboardDef
}

declare interface QuestPickUpCall extends ActionBool {

  SetProperties(): void
}

declare interface QuestHangUpCall extends ActionBool {

  SetProperties(): void
}

declare interface ElevatorTerminalFakeGameController extends DeviceInkGameControllerBase {

  Refresh(state: EDeviceStatus): void
}

declare interface ElevatorTerminalLogicController extends DeviceWidgetControllerBase {

  OnInitialize(): Bool
  Initialize(gameController: DeviceInkGameControllerBase, widgetData: SDeviceWidgetPackage): void
  ForceFakeElevatorArrows(arrowsState: EForcedElevatorArrowsState): void
}

declare interface JukeboxBigGameController extends DeviceInkGameControllerBase {

  RegisterBlackboardCallbacks(blackboard: IBlackboard): void
  UnRegisterBlackboardCallbacks(blackboard: IBlackboard): void
  OnTogglePlay(value: Bool): Bool
  Refresh(state: EDeviceStatus): void
  ResolveAnimState(isPlaying: Bool): void
  CreatePlaybackOverrideData(): PlaybackOptionsUpdateData
  GetOwner(): Jukebox
}

declare interface Jukebox extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  IsPlaying(): Bool
  PlayGivenStation(): void
  StopPlayingStation(): void
  OnTogglePlay(evt: TogglePlay): Bool
  OnNextStation(evt: NextStation): Bool
  OnPreviousStation(evt: PreviousStation): Bool
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
  TurnOnDevice(): void
  TurnOffDevice(): void
  AdvertGlitch(start: Bool, data: GlitchData): void
  SimpleGlitch(on: Bool): void
  GetGlitchData(glitchState: EGlitchState): GlitchData
  SendDataToUIBlackboard(isPlaying: Bool): void
  CreateBlackboard(): void
  GetBlackboardDef(): JukeboxBlackboardDef
  GetDevicePS(): JukeboxControllerPS
  GetController(): JukeboxController
  DeterminGameplayRole(): EGameplayRole
}

declare interface JukeboxController extends ScriptableDC {

  GetPS(): JukeboxControllerPS
}

declare interface JukeboxControllerPS extends ScriptableDeviceComponentPS {

  Initialize(): void
  GameAttached(): void
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  GetPaymentRecordID(): TweakDBID
  ActionTogglePlay(): TogglePlay
  ActionPreviousStation(): PreviousStation
  ActionNextStation(): NextStation
  ActionQuickHackDistraction(): QuickHackDistraction
  GetActiveStationIndex(): number
  GetActiveStationSoundEvent(): CName
  GetGlitchSFX(): CName
  IsPlaying(): Bool
  OnTogglePlay(evt: TogglePlay): EntityNotificationType
  OnNextStation(evt: NextStation): EntityNotificationType
  OnPreviousStation(evt: PreviousStation): EntityNotificationType
  OnQuickHackDistraction(evt: QuickHackDistraction): EntityNotificationType
  InitializeStations(): void
  CreateStation(SoundEvt: CName, ChannelName: string): RadioStationsMap
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
  GetBlackboardDef(): JukeboxBlackboardDef
}

declare interface JukeboxSetup {

}

declare interface JukeboxInkGameController extends DeviceInkGameControllerBase {

  RegisterBlackboardCallbacks(blackboard: IBlackboard): void
  UpdateActionWidgets(widgetsData: SActionWidgetPackage[]): void
  OnActionWidgetSpawned(widget: inkWidget, userData: IScriptable): Bool
  Decline(): void
  ExecuteDeviceActions(controller: DeviceActionWidgetControllerBase): void
  GetOwner(): Jukebox
  Refresh(state: EDeviceStatus): void
}

declare interface KeypadDeviceController extends DeviceWidgetControllerBase {

  OnInitialize(): Bool
  Initialize(gameController: DeviceInkGameControllerBase, widgetData: SDeviceWidgetPackage): void
  AddKeypadButtons(parentWidget: inkWidget, rowNumber: number): void
  OnMouseButtonReleased(e: inkPointerEvent): Bool
  HandleButtonClicked(button: inkWidget): void
  CheckPassword(): Bool
  RefreshActionButtons(): void
  ResolveAction(widgetData: SActionWidgetPackage): void
}

declare interface VisibilitySimpleControllerBase extends inkLogicController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  OnHoverOver(e: inkPointerEvent): Bool
  OnHoverOut(e: inkPointerEvent): Bool
  Hide(): void
  Show(): void
}

declare interface LcdScreenILogicController extends inkLogicController {

  OnInitialize(): Bool
  OnFillStreetSignData(selector: TweakDBIDSelector): Bool
  PlayVideo(videoPath: ResRef, looped: Bool, audioEvent: CName): void
  StopVideo(): void
  TurnOff(): void
  TurnOn(): void
  InitializeCustomNumber(replaceTextWithCustomNumber: Bool, customNumber: number): void
  InitializeMessageRecord(messageRecord: ScreenMessageData_Record): void
  ResolveMessegeRecord(record: ScreenMessageData_Record): void
  GetColorFromArray(calorArray: number[]): Color
}

declare interface LcdScreenSignInkGameController extends DeviceInkGameControllerBase {

  SetupWidgets(): void
  OnFillStreetSignData(selector: TweakDBIDSelector): Bool
  Refresh(state: EDeviceStatus): void
  RegisterBlackboardCallbacks(blackboard: IBlackboard): void
  UnRegisterBlackboardCallbacks(blackboard: IBlackboard): void
  GetOwner(): LcdScreen
  GetMainLogicController(): LcdScreenILogicController
  OnActionWidgetsUpdate(value: Variant): Bool
  OnMessegeChanged(value: Variant): Bool
  StartGlitchingScreen(glitchData: GlitchData): void
  StopGlitchingScreen(): void
  TurnOff(): void
  TurnOn(): void
  InitializeCustomNumber(replaceTextWithCustomNumber: Bool, customNumber: number): void
  InitializeMessageRecord(messageRecord: ScreenMessageData_Record): void
  ResolveMessegeRecord(record: ScreenMessageData_Record): void
}

declare interface WebsiteLoadingSpinner extends inkLogicController {

  OnInitialize(): Bool
}

declare interface ControlledDeviceLogicController extends inkLogicController {

  OnInitialize(): Bool
  Initialize(gameController: ControlledDevicesInkGameController, widgetData: SWidgetPackage): void
}

declare interface NcartTimetableInkGameController extends DeviceInkGameControllerBase {

  OnUninitialize(): Bool
  SetupWidgets(): void
  UpdateActionWidgets(widgetsData: SActionWidgetPackage[]): void
  Refresh(state: EDeviceStatus): void
  RegisterBlackboardCallbacks(blackboard: IBlackboard): void
  UnRegisterBlackboardCallbacks(blackboard: IBlackboard): void
  GetOwner(): NcartTimetable
  OnActionWidgetsUpdate(value: Variant): Bool
  OnTimeToDepartChanged(value: number): Bool
  StartGlitchingScreen(glitchData: GlitchData): void
  StopGlitchingScreen(): void
  PlayVideo(videoPath: ResRef, looped: Bool, audioEvent: CName): void
  StopVideo(): void
  TurnOff(): void
  TurnOn(): void
}

declare interface NcartTimetable extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  ResavePersistentData(ps: PersistentState): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  OnPersitentStateInitialized(evt: GameAttachedEvent): Bool
  CreateBlackboard(): void
  GetBlackboardDef(): NcartTimetableBlackboardDef
  GetController(): NcartTimetableController
  GetDevicePS(): NcartTimetableControllerPS
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
  StartShortGlitch(): void
  OnStopShortGlitch(evt: StopShortGlitchEvent): Bool
  OnHitEvent(hit: gameHitEvent): Bool
  TurnOnDevice(): void
  TurnOffDevice(): void
  CutPower(): void
  TurnOffScreen(): void
  TurnOnScreen(): void
  DeterminGameplayRole(): EGameplayRole
  ApplyActiveStatusEffect(target: EntityID, statusEffect: TweakDBID): void
  UploadActiveProgramOnNPC(targetID: EntityID): void
  InitializeDisplayUpdate(): void
  UpdateCounterUI(): void
  OnCounterUpdate(evt: NcartTimeTableCounterUpdateEvent): Bool
}

declare interface NcartTimetableController extends ScriptableDC {

  GetPS(): NcartTimetableControllerPS
}

declare interface NcartTimetableControllerPS extends ScriptableDeviceComponentPS {

  OnInstantiated(): Bool
  Initialize(): void
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(outActions: DeviceAction[], context: GetActionsContext): void
  GetQuestActions(outActions: DeviceAction[], context: GetActionsContext): void
  GetDepartFrequency(): number
  GetUiUpdateFrequency(): number
  GetCurrentTimeToDepart(): number
  GetCurrentTimeToDepartAsString(): string
  UpdateCurrentTimeToDepart(): void
  ResetTimeToDepart(): void
  GetBlackboardDef(): NcartTimetableBlackboardDef
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface NcartTimetableSetup {

}

declare interface NcartTimeTableCounterUpdateEvent extends Event {

}

declare interface RadioInkGameController extends DeviceInkGameControllerBase {

  Refresh(state: EDeviceStatus): void
  GetOwner(): Radio
  TurnOff(): void
  TurnOn(): void
  SetupStationLogo(): void
}

declare interface RadioControllerPS extends MediaDeviceControllerPS {

  OnInstantiated(): Bool
  GameAttached(): void
  CanCreateAnyQuickHackActions(): Bool
  GetGlitchSFX(): CName
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  GetStationByIndex(index: number): RadioStationsMap
  OnNextStation(evt: NextStation): EntityNotificationType
  OnPreviousStation(evt: PreviousStation): EntityNotificationType
  GetActiveStationIndex(): number
  GetActiveStationEnumValue(): ERadioStationList
  OnSpiderbotDistraction(evt: SpiderbotDistraction): EntityNotificationType
  CauseDistraction(): void
  ActionQuickHackDistraction(): QuickHackDistraction
  OnQuickHackDistraction(evt: QuickHackDistraction): EntityNotificationType
  PushResaveData(data: RadioResaveData): void
  InitializeRadioStations(): void
  CreateRadioStation(SoundEvt: CName, ChannelName: string, stationID: ERadioStationList): RadioStationsMap
  DetermineGameplayViability(context: GetActionsContext, hasActiveActions: Bool): Bool
  GetDeviceIconPath(): string
  GetBackgroundTextureTweakDBID(): TweakDBID
  GetDeviceIconTweakDBID(): TweakDBID
  GetDeviceWidget(context: GetActionsContext): SDeviceWidgetPackage
}

declare interface RadioSetup {

}

declare interface RadioViabilityInterpreter extends IScriptable {

  /** @noSelf **/
  Evaluate(device: RadioControllerPS, hasActiveActions: Bool): Bool
}

declare interface Radio extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  OnToggleON(evt: ToggleON): Bool
  OnTogglePower(evt: TogglePower): Bool
  ResavePersistentData(ps: PersistentState): Bool
  RestoreDeviceState(): void
  GetDevicePS(): RadioControllerPS
  GetController(): RadioController
  PlayGivenStation(): void
  MetalItUp(isMetal: Bool): void
  OnNextStation(evt: NextStation): Bool
  OnPreviousStation(evt: PreviousStation): Bool
  OnQuestSetChannel(evt: QuestSetChannel): Bool
  OnSpiderbotDistraction(evt: SpiderbotDistraction): Bool
  OnSpiderbotOrderCompletedEvent(evt: SpiderbotOrderCompletedEvent): Bool
  TurnOnDevice(): void
  TurnOffDevice(): void
  CutPower(): void
  DeactivateDevice(): void
  DeterminGameplayRole(): EGameplayRole
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
  StartShortGlitch(): void
  OnStopShortGlitch(evt: StopShortGlitchEvent): Bool
}

declare interface RadioController extends MediaDeviceController {

  GetPS(): RadioControllerPS
}

declare interface RadioResaveData {

}

declare interface SmartHouseDeviceWidgetController extends DeviceWidgetControllerBase {

  OnInitialize(): Bool
  Initialize(gameController: DeviceInkGameControllerBase, widgetData: SDeviceWidgetPackage): void
}

declare interface OpenInteriorManager extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface SmartWindowInkGameController extends ComputerInkGameController {

  OnInitialize(): Bool
  GetOwner(): SmartWindow
  InitializeMainLayout(): void
  Refresh(state: EDeviceStatus): void
  TurnOn(): void
  TurnOff(): void
  GetMainLayoutController(): SmartWindowMainLayoutWidgetController
  UpdateMailsWidgets(widgetsData: SDocumentWidgetPackage[]): void
  UpdateFilesWidgets(widgetsData: SDocumentWidgetPackage[]): void
}

declare interface SmartWindow extends Computer {

  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetController(): SmartWindowController
  GetDevicePS(): SmartWindowControllerPS
  InitializeScreenDefinition(): void
}

declare interface SmartWindowController extends ComputerController {

  GetPS(): SmartWindowControllerPS
}

declare interface SmartWindowControllerPS extends ComputerControllerPS {

  GetBannerWidgetTweakDBID(): TweakDBID
  GetFileThumbnailWidgetTweakDBID(): TweakDBID
  GetMailThumbnailWidgetTweakDBID(): TweakDBID
  GetFileWidgetTweakDBID(): TweakDBID
  GetMailWidgetTweakDBID(): TweakDBID
  DetermineGameplayViability(context: GetActionsContext, hasActiveActions: Bool): Bool
}

declare interface SmartWindowViabilityInterpreter extends IScriptable {

  /** @noSelf **/
  Evaluate(device: SmartWindowControllerPS, hasActiveActions: Bool): Bool
}

declare interface SmartWindowMainLayoutWidgetController extends ComputerMainLayoutWidgetController {

  Initialize(gameController: ComputerInkGameController): void
  GetDevicesMenuContainer(): inkWidget
  GetNewsfeedMenuContainer(): inkWidget
  GetMailsMenuContainer(): inkWidget
  GetFilesMenuContainer(): inkWidget
  SetMailsMenu(gameController: ComputerInkGameController, parentWidget: inkWidget): void
  SetFilesMenu(gameController: ComputerInkGameController, parentWidget: inkWidget): void
  SetDevicesMenu(widget: inkWidget): void
  SetNewsFeedMenu(gameController: ComputerInkGameController, parentWidget: inkWidget): void
  ShowNewsfeed(): void
  ShowMails(): void
  ShowFiles(): void
  ShowDevices(): void
}

declare interface ControlledDevicesInkGameController extends inkGameController {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  GetBlackboard(): IBlackboard
  RegisterBlackboardCallbacks(): void
  UnRegisterBlackboardCallbacks(): void
  GetBlackboardDef(): DeviceTakeControlDef
  CreateControlledDeviceWidget(parentWidget: inkWidget, widgetData: SWidgetPackage): inkWidget
  GetControlledDeviceWidget(id: number): inkWidget
  GetControlledDeviceWidget(widgetData: SWidgetPackage): inkWidget
  AddControlledDeviceWidget(widget: inkWidget, widgetData: SWidgetPackage): inkWidget
  HideControlledDeviceWidgets(): void
  InitializeControlledDeviceWidget(widget: inkWidget, widgetData: SWidgetPackage): void
  UpdateControlledDevicesWidgets(widgetsData: SWidgetPackage[]): void
  ClearControlledDevicesStack(): void
  CreateSwitchCameraHint(isVisible: Bool): void
  SetRootVisibility(isVisible: Bool): void
  OnTakeControllOverDevice(value: Variant): Bool
  OnDeviceChainLocked(value: Bool): Bool
  OnControlledDeviceChanged(value: EntityID): Bool
  OnControlledDeviceWorkStateChanged(value: Bool): Bool
}

declare interface SystemDeviceWidgetController extends DeviceWidgetControllerBase {

  Initialize(gameController: DeviceInkGameControllerBase, widgetData: SDeviceWidgetPackage): void
}

declare interface DisplayGlassInkGameController extends DeviceInkGameControllerBase {

  TurnOn(): void
  TurnOff(): void
  Refresh(state: EDeviceStatus): void
  GetOwner(): DisplayGlass
}

declare interface DisplayGlassControllerPS extends ScriptableDeviceComponentPS {

  OnInstantiated(): Bool
  GameAttached(): void
  IsTinted(): Bool
  UsesAppearances(): Bool
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(outActions: DeviceAction[], context: GetActionsContext): void
  GetQuestActions(actions: DeviceAction[], context: GetActionsContext): void
  ActionQuestForceTintGlass(): QuestForceTintGlass
  OnQuestForceTintGlass(evt: QuestForceTintGlass): EntityNotificationType
  ActionQuestForceClearGlass(): QuestForceClearGlass
  OnQuestForceClearGlass(evt: QuestForceClearGlass): EntityNotificationType
  OnToggleGlassTint(evt: ToggleGlassTint): EntityNotificationType
  ActionToggleGlassTint(): ToggleGlassTint
  OnToggleGlassTintHack(evt: ToggleGlassTintHack): EntityNotificationType
  ActionToggleGlassTintHack(): ToggleGlassTintHack
  GetTintAppearance(): CName
  GetClearAppearance(): CName
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface ToggleGlassTintHack extends ToggleGlassTint {

}

declare interface QuestForceTintGlass extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceClearGlass extends ActionBool {

  SetProperties(): void
}

declare interface DisplayGlass extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnPersitentStateInitialized(evt: GameAttachedEvent): Bool
  OnDetach(): Bool
  OnToggleGlassTint(evt: ToggleGlassTint): Bool
  OnToggleGlassTintHack(evt: ToggleGlassTintHack): Bool
  OnQuestForceTintGlass(evt: QuestForceTintGlass): Bool
  OnQuestForceClearGlass(evt: QuestForceClearGlass): Bool
  UpdateGlassState(): void
  OnPhysicalDestructionEvent(evt: PhysicalDestructionEvent): Bool
  ToggleTintGlass(): void
  TintGlass(): void
  ClearGlass(): void
  TurnOnDevice(): void
  TurnOffDevice(): void
  CutPower(): void
  GetController(): DisplayGlassController
  GetDevicePS(): DisplayGlassControllerPS
  DeterminGameplayRole(): EGameplayRole
}

declare interface DisplayGlassController extends ScriptableDC {

  GetPS(): DisplayGlassControllerPS
}

declare interface TerminalMainLayoutWidgetController extends inkLogicController {

  OnInitialize(): Bool
  Initialize(gameController: TerminalInkGameControllerBase): void
  HideBackgroundIcon(): void
  ShowBackgroundIcon(): void
  GetReturnButton(): inkWidget
  GetDevicesSlot(): inkWidget
  GetThumbnailListSlot(): inkWidget
  GetMainCanvas(): inkWidget
}

declare interface TerminalInkGameControllerBase extends MasterDeviceInkGameControllerBase {

  OnUninitialize(): Bool
  SetupWidgets(): void
  RegisterBlackboardCallbacks(blackboard: IBlackboard): void
  UnRegisterBlackboardCallbacks(blackboard: IBlackboard): void
  SetupTerminalTitle(): void
  GetTerminalTitle(): string
  InitializeMainLayout(): void
  IsMainLayoutInitialized(): Bool
  OnMainLayoutSpawned(widget: inkWidget, userData: IScriptable): Bool
  UpdateThumbnailWidgets(widgetsData: SThumbnailWidgetPackage[]): void
  UpdateDeviceWidgets(widgetsData: SDeviceWidgetPackage[]): void
  GetOwner(): InteractiveMasterDevice
  Refresh(state: EDeviceStatus): void
  RegisterReturnButtonCallback(): void
  OnReturnCallback(e: inkPointerEvent): Bool
  ResolveBreadcrumbLevel(): void
  UpdateBreadCrumbBar(data: SBreadCrumbUpdateData): void
  GetMainLayoutController(): TerminalMainLayoutWidgetController
  TurnOn(): void
  TurnOff(): void
  StartGlitchingScreen(glitchData: GlitchData): void
  StopGlitchingScreen(): void
  PlayVideo(videoPath: ResRef, looped: Bool, audioEvent: CName): void
  StopVideo(): void
}

declare interface SceneScreenGameController extends inkGameController {

  OnInitialize(): Bool
  RegisterBlackboardCallbacks(blackboard: IBlackboard): void
  UnRegisterBlackboardCallbacks(blackboard: IBlackboard): void
  OnQuestAnimChange(value: CName): Bool
  GetOwner(): SceneScreen
  GetBlackboard(): IBlackboard
}

declare interface TvDeviceWidgetController extends DeviceWidgetControllerBase {

  Initialize(gameController: DeviceInkGameControllerBase, widgetData: SDeviceWidgetPackage): void
  ResolveChannelData(data: TvDeviceWidgetCustomData, widgetData: SDeviceWidgetPackage, gameController: DeviceInkGameControllerBase): void
  HideGlobalTVChannel(): void
  ShowGlobalTVChannel(): void
  RegisterTvChannel(index: number, gameController: DeviceInkGameControllerBase): void
  StopVideo(): void
  PlayVideo(videoPath: ResRef, looped: Bool): void
  ResolveMessegeRecord(record: ScreenMessageData_Record): void
  GetColorFromArray(colorArray: number[]): Color
  GetMessageRecord(messageID: TweakDBID): ScreenMessageData_Record
  SetBackgroundTexture(imageWidget: inkImage, textureID: TweakDBID): void
  SetBackgroundTexture(imageWidget: inkImage, textureRecord: UIIcon_Record): void
  SetBackgroundTexture(imageWidgetRef: inkImageRef, textureRecord: UIIcon_Record): void
}

declare interface SimpleBinkGameController extends DeviceInkGameControllerBase {

  OnInitialize(): Bool
  OnUninitialize(): Bool
  switchAd(): void
  StartVideo2(): void
  StartVideo1(): void
}

declare interface IceMachineInkGameController extends DeviceInkGameControllerBase {

  UpdateActionWidgets(widgetsData: SActionWidgetPackage[]): void
  GetOwner(): IceMachine
  Refresh(state: EDeviceStatus): void
}

declare interface IceMachine extends VendingMachine {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetVendorID(): TweakDBID
  StopGlitching(): void
  OnDispenceItemFromVendor(evt: DispenceItemFromVendor): Bool
  OnVendingMachineFinishedEvent(evt: VendingMachineFinishedEvent): Bool
  HackedEffect(): void
  PlayItemFall(): void
  GetDevicePS(): IceMachineControllerPS
  GetController(): IceMachineController
  DeterminGameplayRole(): EGameplayRole
}

declare interface IceMachineController extends VendingMachineController {

  GetPS(): IceMachineControllerPS
}

declare interface IceMachineControllerPS extends VendingMachineControllerPS {

  OnInstantiated(): Bool
  GetVendorTweakID(): TweakDBID
  GetProcessingSFX(): CName
  GetGlitchStartSFX(): CName
  GetGlitchStopSFX(): CName
  GetIceFallSFX(): CName
  GetTimeToCompletePurchase(): number
  GetHackedItemCount(): number
  PushShopStockActions(actions: DeviceAction[], context: GetActionsContext): void
  ActionDispenceIceCube(item: ItemID): DispenceItemFromVendor
  OnDispenceItemFromVendor(evt: DispenceItemFromVendor): EntityNotificationType
}

declare interface IceMachineSFX extends VendingMachineSFX {

}

declare interface ImageActionButtonLogicController extends DeviceActionWidgetControllerBase {

  Initialize(gameController: DeviceInkGameControllerBase, widgetData: SActionWidgetPackage): void
  GetPrice(): number
}

declare interface TvChannelSpawnData extends IScriptable {

  Initialize(channelName: CName, localizedName: string): void
}

declare interface TvInkGameController extends DeviceInkGameControllerBase {

  OnUninitialize(): Bool
  SetupWidgets(): void
  Refresh(state: EDeviceStatus): void
  RegisterBlackboardCallbacks(blackboard: IBlackboard): void
  UnRegisterBlackboardCallbacks(blackboard: IBlackboard): void
  GetOwner(): TV
  OnChangeChannel(value: number): Bool
  StartGlitchingScreen(glitchData: GlitchData): void
  StopGlitchingScreen(): void
  SelectChannel(value: number, force?: Bool): void
  PlayVideo(videoPath: ResRef, looped: Bool, audioEvent: CName): void
  StopVideo(): void
  SetChannellText(channelName: string): void
  SetSecuredText(text: string): void
  TurnOff(): void
  TurnOn(): void
  OnVideoFinished(target: inkVideo): Bool
  RegisterTvChannel(id: number): void
  IsGlobalTVInitialized(): Bool
  WasGlobalTVinitalizationTrigered(): Bool
  InitializeGlobalTV(): void
  GetGlobalTVSlot(): inkWidget
  OnGLobalChannelSpawned(widget: inkWidget, userData: IScriptable): Bool
  HideAllGlobalTVChannels(): void
  ShowGlobalTVChannel(channelID: TweakDBID): Bool
  HideGlobalTVChannel(channelID: TweakDBID): void
  IsGlobalTVChannel(channel: STvChannel): Bool
  ResolveMessegeRecord(record: ScreenMessageData_Record): void
  GetColorFromArray(colorArray: number[]): Color
  GetMessageRecord(messageID: TweakDBID): ScreenMessageData_Record
  SetBackgroundTexture(imageWidget: inkImage, textureID: TweakDBID): void
  SetBackgroundTexture(imageWidget: inkImage, textureRecord: UIIcon_Record): void
  SetBackgroundTexture(imageWidgetRef: inkImageRef, textureRecord: UIIcon_Record): void
  OnMessageTextureCallback(e: iconAtlasCallbackData): Bool
}

declare interface SequenceVideo {

}

declare interface InteractiveAdInkGameController extends DeviceInkGameControllerBase {

  SetupWidgets(): void
  CreateAnimation(): void
  UpdateActionWidgets(widgetsData: SActionWidgetPackage[]): void
  RegisterBlackboardCallbacks(blackboard: IBlackboard): void
  UnRegisterBlackboardCallbacks(blackboard: IBlackboard): void
  OnShowAd(flag: Bool): Bool
  OnShowVendor(flag: Bool): Bool
  StartAdVideo(): void
  StartProcessingVideo(): void
  StopProcessingVideo(): void
  GetOwner(): InteractiveAd
  Refresh(state: EDeviceStatus): void
}

declare interface InteractiveAd extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetBlackboardDef(): InteractiveDeviceBlackboardDef
  CreateBlackboard(): void
  GetController(): InteractiveAdController
  GetDevicePS(): InteractiveAdControllerPS
  ResolveGameplayState(): void
  OnGameAttached(): Bool
  OnDetach(): Bool
  PushPersistentData(): void
  DelayInteractiveAdEvent(): void
  OnInteractiveAdFinishedEvent(evt: InteractiveAdFinishedEvent): Bool
  OnCloseAd(evt: CloseAd): Bool
  OnShowVendor(evt: ShowVendor): Bool
  OnAreaEnter(evt: AreaEnteredEvent): Bool
  OnAreaExit(evt: AreaExitedEvent): Bool
}

declare interface InteractiveAdController extends ScriptableDC {

  GetPS(): InteractiveAdControllerPS
}

declare interface InteractiveAdControllerPS extends ScriptableDeviceComponentPS {

  OnInstantiated(): Bool
  Initialize(): void
  ActionCloseAd(ButtonName: string): CloseAd
  ActionShowVendor(ButtonName: string): ShowVendor
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  GetQuestActions(outActions: DeviceAction[], context: GetActionsContext): void
  OnCloseAd(evt: CloseAd): EntityNotificationType
  OnShowVendor(evt: ShowVendor): EntityNotificationType
  SetIsReady(value: Bool): void
  AddLocation(value: Bool): void
  GetBlackboardDef(): InteractiveDeviceBlackboardDef
}

declare interface CloseAd extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
}

declare interface ShowVendor extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface InteractiveAdFinishedEvent extends Event {

}

declare interface VendingMachineInkGameController extends DeviceInkGameControllerBase {

  OnInitialize(): Bool
  RegisterBlackboardCallbacks(blackboard: IBlackboard): void
  UnRegisterBlackboardCallbacks(blackboard: IBlackboard): void
  UpdateActionWidgets(widgetsData: SActionWidgetPackage[]): void
  OnSoldOut(value: Bool): Bool
  OnUpdateStatus(value: Variant): Bool
  ExecuteDeviceActions(controller: DeviceActionWidgetControllerBase): void
  OnButtonHoverOver(e: inkPointerEvent): Bool
  UpdatePrice(price: number): void
  GetOwner(): VendingMachine
  Refresh(state: EDeviceStatus): void
  TurnOn(): void
  TurnOff(): void
}

declare interface WeaponMachineInkGameController extends VendingMachineInkGameController {

  OnUpdateStatus(value: Variant): Bool
  Processing(): void
  NoMoney(): void
  UpdateActionWidgets(widgetsData: SActionWidgetPackage[]): void
  OnActionWidgetSpawned(widget: inkWidget, userData: IScriptable): Bool
  GetOwner(): WeaponVendingMachine
  Refresh(state: EDeviceStatus): void
}

declare interface WeaponVendingMachine extends VendingMachine {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetVendorID(): TweakDBID
  PlayItemFall(): void
  GetJunkItem(): ItemID
  GetProcessingSFX(): CName
  CreateDispenseRequest(shouldPay: Bool, item: ItemID): DispenseRequest
  TurnOffDevice(): void
  TurnOnDevice(): void
  GetController(): WeaponVendingMachineController
  GetDevicePS(): WeaponVendingMachineControllerPS
  DeterminGameplayRole(): EGameplayRole
}

declare interface WeaponVendingMachineController extends ScriptableDC {

  GetPS(): WeaponVendingMachineControllerPS
}

declare interface WeaponVendingMachineControllerPS extends VendingMachineControllerPS {

  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  GetVendorTweakID(): TweakDBID
  GetJunkItemID(): TweakDBID
  GetTimeToCompletePurchase(): number
  GetGunFallSFX(): CName
  GetProcessingSFX(): CName
  GetGlitchStartSFX(): CName
  GetGlitchStopSFX(): CName
  GetHackedItemCount(): number
  PushShopStockActions(actions: DeviceAction[], context: GetActionsContext): void
}

declare interface WeaponVendingMachineSetup {

}

declare interface WeaponVendingMachineSFX extends VendingMachineSFX {

}

declare interface ActivatedDeviceCover extends ActivatedDeviceTransfromAnim {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnActivateDevice(evt: ActivateDevice): Bool
}

declare interface ActivatedDeviceIndustrialArm extends ActivatedDeviceTrap {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  DeterminGameplayRole(): EGameplayRole
  OnAreaEnter(evt: AreaEnteredEvent): Bool
  SendIndustrialArmDamageEvent(): void
  OnQuestSetIndustrialArmAnimationOverride(evt: QuestSetIndustrialArmAnimationOverride): Bool
  OnIndustrialArmDamageEvent(evt: IndustrialArmDamageEvent): Bool
  OnAreaExit(evt: AreaExitedEvent): Bool
  RefreshAnimation(): void
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
  SendIndustrialArmAnimFeature(idleAnimNumber: number, isRotate: Bool, isDistraction: Bool, isPoke: Bool): void
}

declare interface IndustrialArmDamageEvent extends Event {

}

declare interface ActivatedDeviceNPC extends ActivatedDeviceTransfromAnim {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetController(): ActivatedDeviceNPCController
  GetDevicePS(): ActivatedDeviceNPCControllerPS
  OnActivateDevice(evt: ActivateDevice): Bool
  OnSpiderbotOrderCompletedEvent(evt: SpiderbotOrderCompletedEvent): Bool
  OnGameEntitySpawnerEvent(evt: gameEntitySpawnerEvent): Bool
  EnterWorkspot(activator: GameObject, freeCamera?: Bool, componentName?: CName, deviceData?: CName, typeOfEvent?: CName): void
  OnWorkspotFinished(componentName: CName): Bool
  DeterminGameplayRole(): EGameplayRole
}

declare interface ActivatedDeviceNPCController extends ScriptableDC {

}

declare interface ActivatedDeviceNPCControllerPS extends ActivatedDeviceControllerPS {

  GetSpawnedNPC(): NPCPuppet
  GameAttached(): void
  OnGameEntitySpawnerEvent(evt: gameEntitySpawnerEvent): EntityNotificationType
}

declare interface ActivatedDeviceNPCSetup {

}

declare interface EffectObjectProvider_TrapEntities extends EffectObjectProvider_Scripted {

  Process(ctx: EffectScriptContext, providerCtx: EffectProviderScriptContext): void
}

declare interface ActivatedDeviceTrapDestruction extends ActivatedDeviceTrap {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnActivateDevice(evt: ActivateDevice): Bool
  OnTimerEvent(evt: TimerEvent): Bool
  OnTrapPhysicsActivationEvent(evt: TrapPhysicsActivationEvent): Bool
  ActivatePhysicalMeshes(): void
  HidePhysicalMeshes(): void
  EnableComponents(): void
  HideMeshes(): void
  OnHit(evt: gameHitEvent): Bool
  OnPhysicalCollisionEvent(evt: PhysicalCollisionEvent): Bool
  GetLastEntityHit(): IScriptable
  CreateFxInstance(resource: FxResource, transform: WorldTransform): FxInstance
  RefreshAnimation(): void
}

declare interface AOEAreaSetup {

}

declare interface AOEAreaController extends MasterController {

  GetPS(): AOEAreaControllerPS
}

declare interface AOEAreaControllerPS extends MasterControllerPS {

  GetActionName(): CName
  GetAreaEffect(): TweakDBID
  GetEffectDuration(): number
  BlocksVisibility(): Bool
  IsDangerous(): Bool
  EffectsOnlyActiveInArea(): Bool
  GetQuestActions(outActions: DeviceAction[], context: GetActionsContext): void
  ActionDeactivateDevice(): DeactivateDevice
  GetActions(outActions: DeviceAction[], context: GetActionsContext): Bool
  GameAttached(): void
  OnActivateDevice(evt: ActivateDevice): EntityNotificationType
  OnActionForceResetDevice(evt: ActionForceResetDevice): EntityNotificationType
  QueueDeactivateAction(delayTime: number): void
  OnDeactivateDevice(evt: DeactivateDevice): EntityNotificationType
  ToggleEffectors(): void
  IsAreaActive(): Bool
  GetInkWidgetTweakDBID(context: GetActionsContext): TweakDBID
  GetDeviceIconTweakDBID(): TweakDBID
}

declare interface ToggleAOEEffect extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
}

declare interface AOEArea extends InteractiveMasterDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnDetach(): Bool
  IsGameplayRelevant(): Bool
  GetController(): AOEAreaController
  GetDevicePS(): AOEAreaControllerPS
  GetObstacleComponent(): IComponent
  GetVisionBlockerComponent(): IComponent
  OnActivateDevice(evt: ActivateDevice): Bool
  OnDeactivateDevice(evt: DeactivateDevice): Bool
  OnRevealDeviceRequest(evt: RevealDeviceRequest): Bool
  ToggleHighlightOnTargets(toggle: Bool): void
  ToggleHighlightOnSingleTarget(toggle: Bool, id: EntityID): void
  CreateHighlight(highlightType: EFocusForcedHighlightType): FocusForcedHighlightData
  ActivateArea(): void
  DeactivateArea(): void
  ActivateEffect(): void
  StopGameEffect(): void
  GetEntitiesInArea(): Entity[]
  OnAreaEnter(evt: AreaEnteredEvent): Bool
  OnAreaExit(evt: AreaExitedEvent): Bool
  UpdateWillingInvestigator(): void
  ApplyActiveStatusEffectsToEntity(entityID: EntityID): void
  RemoveActiveStatusEffectsFromEntity(entityID: EntityID): void
  GetDefaultHighlight(): FocusForcedHighlightData
  GetStimTarget(): GameObject
  GetDistractionControllerSource(effectData?: AreaEffectData): Entity
  GetDistractionStimLifetime(defaultValue: number): number
  ExtendBoundingBox(): void
}

declare interface TrapPhysicsActivationEvent extends Event {

}

declare interface EffectObjectProvider_PhysicalCollisionTrapEntities extends EffectObjectProvider_Scripted {

  Process(ctx: EffectScriptContext, providerCtx: EffectProviderScriptContext): void
}

declare interface AOEEffector extends ActivatedDeviceTransfromAnim {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  GetController(): AOEEffectorController
  GetDevicePS(): AOEEffectorControllerPS
  PushPersistentData(): void
  OnToggleAOEEffect(evt: ToggleAOEEffect): Bool
  StartEffects(): void
  BreakEffects(): void
  DeterminGameplayRole(): EGameplayRole
  IsGameplayRelevant(): Bool
}

declare interface AOEEffectorController extends ScriptableDC {

}

declare interface AOEEffectorControllerPS extends ActivatedDeviceControllerPS {

  ActionToggleAOEEffect(): ToggleAOEEffect
  GetEffectsToPlay(): CName[]
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  OnToggleAOEEffect(evt: ToggleAOEEffect): EntityNotificationType
}

declare interface EffectObjectProvider_AOEAreaEntities extends EffectObjectProvider_Scripted {

  Process(ctx: EffectScriptContext, providerCtx: EffectProviderScriptContext): void
}

declare interface PachinkoMachine extends ArcadeMachine {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  GetController(): PachinkoMachineController
  GetDevicePS(): PachinkoMachineControllerPS
  RefreshDeviceInteractions(): void
  OnQuickHackDistraction(evt: QuickHackDistraction): Bool
  DeterminGameplayRole(): EGameplayRole
}

declare interface PachinkoMachineController extends ArcadeMachineController {

  GetPS(): PachinkoMachineControllerPS
}

declare interface PachinkoMachineControllerPS extends ArcadeMachineControllerPS {

  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
}

declare interface BarbedWireController extends ActivatedDeviceController {
}

declare interface BarbedWireControllerPS extends ActivatedDeviceControllerPS {

}

declare interface BarbedWire extends ActivatedDeviceTrap {

  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnAreaEnter(evt: AreaEnteredEvent): Bool
  CanAttackActivator(activator: GameObject): Bool
}

declare interface worldITriggerAreaNotiferInstance extends IScriptable {

}

declare interface TriggerNotifier_ScriptInstance extends worldITriggerAreaNotiferInstance {

  GetNotifier(): TriggerNotifier_Script
}

declare interface TriggerNotifier_BarbedWire extends TriggerNotifier_Script {

  OnAreaEnter(evt: AreaEnteredEvent): Bool
  OnAreaExit(evt: AreaExitedEvent): Bool
  GetInstanceClassName(): CName
}

declare interface TriggerNotifier_BarbedWireInstance extends TriggerNotifier_ScriptInstance {

  OnAreaEnter(evt: AreaEnteredEvent): Bool
  CanAttackActivator(activator: GameObject): Bool
  OnAreaExit(evt: AreaExitedEvent): Bool
  DoAttack(attackRecord: TweakDBID, target: GameObject): void
}

declare interface NetrunnerControlPanel extends BasicDistractionDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnCreateFactQuickHack(evt: FactQuickHack): Bool
  GetController(): NetrunnerControlPanelController
  GetDevicePS(): NetrunnerControlPanelControllerPS
}

declare interface NetrunnerControlPanelController extends BasicDistractionDeviceController {

  GetPS(): NetrunnerControlPanelControllerPS
}

declare interface NetrunnerControlPanelControllerPS extends BasicDistractionDeviceControllerPS {

  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  ActionCreateFactQuickHack(): FactQuickHack
  OnCreateFactQuickHack(evt: FactQuickHack): EntityNotificationType
}

declare interface BillboardDevice extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  CutPower(): void
  TurnOnDevice(): void
  TurnOffDevice(): void
  BreakDevice(): void
  TurnOffScreen(): void
  TurnOnScreen(): void
  ToggleLights(on: Bool): void
  ShouldRegisterToHUD(): Bool
  GetController(): BillboardDeviceController
  GetDevicePS(): BillboardDeviceControllerPS
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
  DeterminGameplayRole(): EGameplayRole
  ApplyActiveStatusEffect(target: EntityID, statusEffect: TweakDBID): void
  UploadActiveProgramOnNPC(targetID: EntityID): void
  OnHitEvent(hit: gameHitEvent): Bool
  StartShortGlitch(): void
  OnStopShortGlitch(evt: StopShortGlitchEvent): Bool
  OnPhysicalDestructionEvent(evt: PhysicalDestructionEvent): Bool
}

declare interface BillboardDeviceController extends ScriptableDC {

  GetPS(): BillboardDeviceControllerPS
}

declare interface BillboardDeviceControllerPS extends ScriptableDeviceComponentPS {

  OnInstantiated(): Bool
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(outActions: DeviceAction[], context: GetActionsContext): void
  GetClearance(): Clearance
  GetGlitchSFX(): CName
  IsUsingLights(): Bool
  IsUsingDeviceAppearence(): Bool
  GetLightsSettings(): EditableGameLightSettings[]
  LogActionDetails(action: ScriptableDeviceAction, cachedStatus: BaseDeviceStatus, context?: string, status?: string, overrideStatus?: Bool): void
  GetBackgroundTextureTweakDBID(): TweakDBID
  GetDeviceIconTweakDBID(): TweakDBID
}

declare interface BlindingLight extends BasicDistractionDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnPersitentStateInitialized(evt: GameAttachedEvent): Bool
  OnOverloadDevice(evt: OverloadDevice): Bool
  StartDistraction(loopAnimation?: Bool): void
  StopDistraction(): void
  StartBlinking(): void
  StopBlinking(): void
  TurnOnDevice(): void
  TurnOffDevice(): void
  OnAreaEnter(evt: AreaEnteredEvent): Bool
  OnAreaExit(evt: AreaExitedEvent): Bool
  TurnOnLights(): void
  TurnOffLights(): void
  GetEntitiesInArea(): Entity[]
  ApplyStatusEffect(): void
  OnRevealDeviceRequest(evt: RevealDeviceRequest): Bool
  CreateHighlight(highlightType: EFocusForcedHighlightType): FocusForcedHighlightData
  ToggleHighlightOnTargets(toggle: Bool): void
  ToggleHighlightOnSingleTarget(toggle: Bool, id: EntityID): void
  GetController(): BlindingLightController
  GetDevicePS(): BlindingLightControllerPS
  DeterminGameplayRole(): EGameplayRole
}

declare interface Reflector extends BlindingLight {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetDevicePS(): ReflectorControllerPS
  GetController(): ReflectorController
  OnDistraction(evt: Distraction): Bool
}

declare interface ReflectorController extends BlindingLightController {

  GetPS(): ReflectorControllerPS
}

declare interface ReflectorControllerPS extends BlindingLightControllerPS {

  GetActions(outActions: DeviceAction[], context: GetActionsContext): Bool
  ActionToggleON(): ToggleON
  ActionDistraction(): Distraction
  OnDistraction(evt: Distraction): EntityNotificationType
  OnActivateDevice(evt: ActivateDevice): EntityNotificationType
  OnDeactivateDevice(evt: DeactivateDevice): EntityNotificationType
  GetBackgroundTextureTweakDBID(): TweakDBID
  GetDeviceIconTweakDBID(): TweakDBID
}

declare interface Distraction extends ActionBool {

  SetProperties(action_name: CName): void
  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface CCTVCamera extends GameObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  Rotate(deltaYaw: number): void
  TakeControl(val: Bool): void
  OnAreaEnter(trigger: AreaEnteredEvent): Bool
  OnAreaExit(trigger: AreaExitedEvent): Bool
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
}

declare interface AlarmEvent extends Event {

}

declare interface SurveillanceCameraResaveData {

}

declare interface Candle extends GameObject {

  OnAreaEnter(evt: AreaEnteredEvent): Bool
  OnAreaExit(evt: AreaExitedEvent): Bool
}

declare interface CandleController extends ScriptableDC {

  GetPS(): CandleControllerPS
}

declare interface CandleControllerPS extends ScriptableDeviceComponentPS {

  OnInstantiated(): Bool
  Initialize(): void
  GameAttached(): void
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  GetBackgroundTextureTweakDBID(): TweakDBID
  GetDeviceIconTweakDBID(): TweakDBID
}

declare interface CandleDevice extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  TurnOffDevice(): void
  TurnOnDevice(): void
  OnAreaEnter(evt: AreaEnteredEvent): Bool
  OnAreaExit(evt: AreaExitedEvent): Bool
}

declare interface CleaningMachine extends BasicDistractionDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetController(): CleaningMachineController
  GetDevicePS(): CleaningMachineControllerPS
}

declare interface CleaningMachineController extends BasicDistractionDeviceController {

  GetPS(): CleaningMachineControllerPS
}

declare interface CleaningMachineControllerPS extends BasicDistractionDeviceControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  GameAttached(): void
}

declare interface DeviceConnectionHighlightComponent extends ScriptableComponent {

  OnDeviceConnectionHighlightEvent(evt: HighlightConnectionComponentEvent): Bool
  SendForceVisionApperaceEvent(enable: Bool, target: GameObject): void
}

declare interface InputDeviceController extends ScriptableComponent {

  /** @noSelf **/
  Start(self: InputDeviceController): void
  /** @noSelf **/
  Stop(self: InputDeviceController): void
  /** @noSelf **/
  RegisterListeners(self: InputDeviceController): void
  /** @noSelf **/
  UnregsiterListeners(self: InputDeviceController): void
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
}

declare interface TrafficLightListenerComponent extends IComponent {

}

declare interface SHighlightTarget {

}

declare interface gameConveyorControlEvent extends Event {

}

declare interface ConveyorController extends ScriptableDC {

  GetPS(): ConveyorControllerPS
  OnGameAttach(): void
  RestoreDeviceState(): void
  OnSetDeviceON(evt: SetDeviceON): Bool
  OnSetDeviceOFF(evt: SetDeviceOFF): Bool
  OnToggleON(evt: ToggleON): Bool
  StartConveyor(): void
  StopConveyor(): void
}

declare interface ConveyorControllerPS extends ScriptableDeviceComponentPS {

  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  OnSetDeviceON(evt: SetDeviceON): EntityNotificationType
  OnSetDeviceOFF(evt: SetDeviceOFF): EntityNotificationType
  OnToggleON(evt: ToggleON): EntityNotificationType
}

declare interface GenericDeviceOperation extends DeviceOperationBase {

  Execute(owner: GameObject): void
  Restore(owner: GameObject): void
  ResolveTeleport(teleport: STeleportOperationData, owner: GameObject): void
  ResolveItems(items: SInventoryOperationData[], owner: GameObject): void
  ResolveVFXs(VFXs: SVFXOperationData[], owner: GameObject): void
  ResolveSFXs(SFXs: SSFXOperationData[], owner: GameObject): void
  ResolveFacts(facts: SFactOperationData[], owner: GameObject, restore?: Bool): void
  ResolveComponents(componentsData: SComponentOperationData[], owner: GameObject): void
  ResolveMeshesAppearence(appearanceName: CName, owner: GameObject): void
  ResolveTransformAnimations(animations: STransformAnimationData[], owner: GameObject): void
  ResolveWorkspots(workspot: SWorkspotData, owner: GameObject): void
  ResolveStims(stims: SStimOperationData[], owner: GameObject): void
  ResolveStatusEffects(statusEffects: SStatusEffectOperationData[], owner: GameObject): void
  ResolveDamages(damages: SDamageOperationData[], owner: GameObject): void
  EnterWorkspot(target: Device, activator: GameObject, freeCamera?: Bool, componentName?: CName): void
  LeaveWorkspot(activator: GameObject): void
  GetFxInstance(id: CName): FxInstance
  RemoveFxInstance(id: CName): void
  CreateFxInstance(owner: GameObject, id: CName, resource: FxResource, transform: WorldTransform): FxInstance
  StoreFxInstance(id: CName, fx: FxInstance): void
}

declare interface SBaseStateOperationData {

}

declare interface SDoorStateOperationData {

}

declare interface SBaseActionOperationData {

}

declare interface SCustomActionOperationData {

}

declare interface STriggerVolumeOperationData {

}

declare interface SInteractionAreaOperationData {

}

declare interface SHitOperationData {

}

declare interface SSensesOperationData {

}

declare interface SFocusModeOperationData {

}

declare interface ToggleComponentsDeviceOperation extends DeviceOperationBase {

  Execute(owner: GameObject): void
  Restore(owner: GameObject): void
  ResolveComponents(componentsData: SComponentOperationData[], owner: GameObject): void
}

declare interface FocusModeOperations extends DeviceOperations {

  RequestComponents(ri: EntityRequestComponentsInterface): void
  TakeControl(ri: EntityResolveComponentsInterface): void
  ToggleOperation(enable: Bool, index: number): void
  IsOperationEnabled(index: number): Bool
  SetDelayIdOnOperation(delayId: DelayID, operationID: number): void
  ClearDelayIdOnOperation(operationID: number): void
  ExecuteOperation(owner: GameObject, operationType: ETriggerOperationType): void
  RestoreOperation(owner: GameObject, operationType: ETriggerOperationType): void
  IsLookedAt(object: GameObject): Bool
}

declare interface PlayTransformAnimationDeviceOperation extends DeviceOperationBase {

  Execute(owner: GameObject): void
  Restore(owner: GameObject): void
  ResolveTransformAnimations(animations: STransformAnimationData[], owner: GameObject): void
}

declare interface FactsDeviceOperation extends DeviceOperationBase {

  Execute(owner: GameObject): void
  Restore(owner: GameObject): void
  ResolveFacts(facts: SFactOperationData[], owner: GameObject, restore?: Bool): void
}

declare interface SensesOperations extends DeviceOperations {

  RequestComponents(ri: EntityRequestComponentsInterface): void
  TakeControl(ri: EntityResolveComponentsInterface): void
  ToggleOperation(enable: Bool, index: number): void
  IsOperationEnabled(index: number): Bool
  SetDelayIdOnOperation(delayId: DelayID, operationID: number): void
  ClearDelayIdOnOperation(operationID: number): void
  ExecuteOperation(owner: GameObject, activator: GameObject, operationType: ETriggerOperationType): void
  RestoreOperation(owner: GameObject, activator: GameObject, operationType: ETriggerOperationType): void
}

declare interface PlayEffectDeviceOperation extends DeviceOperationBase {

  Execute(owner: GameObject): void
  Restore(owner: GameObject): void
  ResolveVFXs(VFXs: SVFXOperationData[], owner: GameObject): void
  GetFxInstance(id: CName): FxInstance
  RemoveFxInstance(id: CName): void
  CreateFxInstance(owner: GameObject, id: CName, resource: FxResource, transform: WorldTransform): FxInstance
  StoreFxInstance(id: CName, fx: FxInstance): void
}

declare interface StimDeviceOperation extends DeviceOperationBase {

  Execute(owner: GameObject): void
  Restore(owner: GameObject): void
  ResolveStims(stims: SStimOperationData[], owner: GameObject): void
}

declare interface HitOperations extends DeviceOperations {

  RequestComponents(ri: EntityRequestComponentsInterface): void
  TakeControl(ri: EntityResolveComponentsInterface): void
  ToggleOperation(enable: Bool, index: number): void
  IsOperationEnabled(index: number): Bool
  SetDelayIdOnOperation(delayId: DelayID, operationID: number): void
  ClearDelayIdOnOperation(operationID: number): void
  ExecuteOperation(owner: GameObject, activator: GameObject, attackData: AttackData): void
  RestoreOperation(owner: GameObject, activator: GameObject): void
}

declare interface PlaySoundDeviceOperation extends DeviceOperationBase {

  Execute(owner: GameObject): void
  Restore(owner: GameObject): void
  ResolveSFXs(SFXs: SSFXOperationData[], owner: GameObject): void
}

declare interface ApplyStatusEffectDeviceOperation extends DeviceOperationBase {

  Execute(owner: GameObject): void
  Restore(owner: GameObject): void
  ResolveStatusEffects(statusEffects: SStatusEffectOperationData[], owner: GameObject): void
}

declare interface InteractionAreaOperations extends DeviceOperations {

  RequestComponents(ri: EntityRequestComponentsInterface): void
  TakeControl(ri: EntityResolveComponentsInterface): void
  ToggleOperation(enable: Bool, index: number): void
  IsOperationEnabled(index: number): Bool
  SetDelayIdOnOperation(delayId: DelayID, operationID: number): void
  ClearDelayIdOnOperation(operationID: number): void
  ExecuteOperation(areaTag: CName, owner: GameObject, activator: GameObject, operationType: gameinteractionsEInteractionEventType): void
  RestoreOperation(areaTag: CName, owner: GameObject, activator: GameObject, operationType: gameinteractionsEInteractionEventType): void
}

declare interface ApplyDamageDeviceOperation extends DeviceOperationBase {

  Execute(owner: GameObject): void
  Restore(owner: GameObject): void
  ResolveDamages(damages: SDamageOperationData[], owner: GameObject): void
}

declare interface ItemsDeviceOperation extends DeviceOperationBase {

  Execute(owner: GameObject): void
  Restore(owner: GameObject): void
  ResolveItems(items: SInventoryOperationData[], owner: GameObject): void
}

declare interface TriggerVolumeOperations extends DeviceOperations {

  RequestComponents(ri: EntityRequestComponentsInterface): void
  TakeControl(ri: EntityResolveComponentsInterface): void
  ToggleOperation(enable: Bool, index: number): void
  IsOperationEnabled(index: number): Bool
  SetDelayIdOnOperation(delayId: DelayID, operationID: number): void
  ClearDelayIdOnOperation(operationID: number): void
  ExecuteOperation(componentName: CName, owner: GameObject, activator: GameObject, operationType: ETriggerOperationType): void
  RestoreOperation(componentName: CName, owner: GameObject, activator: GameObject, operationType: ETriggerOperationType): void
}

declare interface TeleportDeviceOperation extends DeviceOperationBase {

  Execute(owner: GameObject): void
  Restore(owner: GameObject): void
  ResolveTeleport(teleport: STeleportOperationData, owner: GameObject): void
}

declare interface MeshAppearanceDeviceOperation extends DeviceOperationBase {

  Execute(owner: GameObject): void
  Restore(owner: GameObject): void
  ResolveMeshesAppearence(appearanceName: CName, owner: GameObject): void
}

declare interface PlayerWokrspotDeviceOperation extends DeviceOperationBase {

  Execute(owner: GameObject): void
  Restore(owner: GameObject): void
  ResolveWorkspots(workspot: SWorkspotData, owner: GameObject): void
  EnterWorkspot(target: Device, activator: GameObject, freeCamera?: Bool, componentName?: CName): void
  LeaveWorkspot(activator: GameObject): void
}

declare interface BaseActionOperations extends DeviceOperations {

  RequestComponents(ri: EntityRequestComponentsInterface): void
  TakeControl(ri: EntityResolveComponentsInterface): void
  ToggleOperation(enable: Bool, index: number): void
  IsOperationEnabled(index: number): Bool
  SetDelayIdOnOperation(delayId: DelayID, operationID: number): void
  ClearDelayIdOnOperation(operationID: number): void
  ExecuteOperation(actionClassName: CName, owner: GameObject): void
  RestoreOperation(actionClassName: CName, owner: GameObject): void
}

declare interface PlayBinkDeviceOperation extends DeviceOperationBase {

  Execute(owner: GameObject): void
  Restore(owner: GameObject): void
  ResolveBink(binkData: SBinkperationData, owner: GameObject): void
}

declare interface ToggleCustomActionDeviceOperation extends DeviceOperationBase {

  Execute(owner: GameObject): void
  Restore(owner: GameObject): void
  ResolveCustomActionState(actionID: CName, state: Bool, owner: GameObject): void
}

declare interface ToggleOffMeshConnectionsDeviceOperation extends DeviceOperationBase {

  Execute(owner: GameObject): void
  Restore(owner: GameObject): void
  ResolveOffMeshConnections(owner: GameObject): void
}

declare interface CustomActionOperations extends DeviceOperations {

  RequestComponents(ri: EntityRequestComponentsInterface): void
  TakeControl(ri: EntityResolveComponentsInterface): void
  ToggleOperation(enable: Bool, index: number): void
  IsOperationEnabled(index: number): Bool
  SetDelayIdOnOperation(delayId: DelayID, operationID: number): void
  ClearDelayIdOnOperation(operationID: number): void
  ExecuteOperation(actionID: CName, owner: GameObject): void
  RestoreOperation(actionID: CName, owner: GameObject): void
}

declare interface DoorStateOperations extends DeviceOperations {

  RequestComponents(ri: EntityRequestComponentsInterface): void
  TakeControl(ri: EntityResolveComponentsInterface): void
  ToggleOperation(enable: Bool, index: number): void
  IsOperationEnabled(index: number): Bool
  SetDelayIdOnOperation(delayId: DelayID, operationID: number): void
  ClearDelayIdOnOperation(operationID: number): void
  ExecuteOperation(state: EDoorStatus, owner: GameObject): void
}

declare interface BaseStateOperations extends DeviceOperations {

  RequestComponents(ri: EntityRequestComponentsInterface): void
  TakeControl(ri: EntityResolveComponentsInterface): void
  ToggleOperation(enable: Bool, index: number): void
  IsOperationEnabled(index: number): Bool
  SetDelayIdOnOperation(delayId: DelayID, operationID: number): void
  ClearDelayIdOnOperation(operationID: number): void
  ExecuteOperation(state: EDeviceStatus, owner: GameObject): void
}

declare interface ActionPrereqs {

}

declare interface ActionInteractivityInfo {

}

declare interface ActivatorOperationTriggerData extends DeviceOperationTriggerData {

}

declare interface DeviceRef {

}

declare interface DeviceDynamicConnectionChange extends Event {

}

declare interface ForceUIRefreshEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface gameDevicePSChanged extends Event {

}

declare interface IsAccessPointFilter extends EffectObjectSingleFilter_Scripted {

  Process(ctx: EffectScriptContext, filterCtx: EffectSingleFilterScriptContext): Bool
}

declare interface IsDeviceFilter extends EffectObjectSingleFilter_Scripted {

  Process(ctx: EffectScriptContext, filterCtx: EffectSingleFilterScriptContext): Bool
}

declare interface IsPlayerFilter extends EffectObjectSingleFilter_Scripted {

  Process(ctx: EffectScriptContext, filterCtx: EffectSingleFilterScriptContext): Bool
}

declare interface IsCoverDevice extends EffectObjectSingleFilter_Scripted {

  Process(ctx: EffectScriptContext, filterCtx: EffectSingleFilterScriptContext): Bool
}

declare interface RetractableAd extends BaseAnimatedDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnActivateDevice(evt: ActivateDevice): Bool
  ToggleState(): void
  TransformAnimate(): void
  ToggleOffMeshConnection(toggle: Bool): void
  ToggleLights(toggle: Bool): void
  OnPhysicalDestructionEvent(evt: PhysicalDestructionEvent): Bool
  DisableTrap(): void
  GetEntitiesInArea(): Entity[]
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
  ApplyImpulse(activators: Entity[]): void
  OnAreaEnter(evt: AreaEnteredEvent): Bool
  GetController(): RetractableAdController
  GetDevicePS(): RetractableAdControllerPS
}

declare interface RetractableAdController extends BaseAnimatedDeviceController {

  GetPS(): RetractableAdControllerPS
}

declare interface RetractableAdControllerPS extends BaseAnimatedDeviceControllerPS {

  IsConnected(): Bool
  IsNotConnected(): Bool
  GameAttached(): void
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  CanCreateAnyQuickHackActions(): Bool
  ControlledByMaster(): void
  GetTrapController(): RoadBlockTrapControllerPS
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface RoadBlockTrapControllerPS extends MasterControllerPS {

  Initialize(): void
  OnRefreshSlavesEvent(evt: RefreshSlavesEvent): EntityNotificationType
  RefreshSlaves(): void
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface RoadBlockControllerPS extends ScriptableDeviceComponentPS {

  IsBlocking(): Bool
  IsNotBlocking(): Bool
  NegateAnim(): Bool
  GameAttached(): void
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  GetQuestActions(actions: DeviceAction[], context: GetActionsContext): void
  ActionToggleBlockade(): ToggleBlockade
  ActionQuickHackToggleBlockade(): QuickHackToggleBlockade
  ActionQuestForceRoadBlockadeActivate(): QuestForceRoadBlockadeActivate
  ActionQuestForceRoadBlockadeDeactivate(): QuestForceRoadBlockadeDeactivate
  OnToggleBlockade(evt: ToggleBlockade): EntityNotificationType
  OnQuickHackToggleBlockade(evt: QuickHackToggleBlockade): EntityNotificationType
  OnQuestForceRoadBlockadeActivate(evt: QuestForceRoadBlockadeActivate): EntityNotificationType
  OnQuestForceRoadBlockadeDeactivate(evt: QuestForceRoadBlockadeDeactivate): EntityNotificationType
  OnActivateDevice(evt: ActivateDevice): EntityNotificationType
  OnDeactivateDevice(evt: DeactivateDevice): EntityNotificationType
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface QuestForceRoadBlockadeActivate extends ActionBool {

  SetProperties(): void
}

declare interface QuestForceRoadBlockadeDeactivate extends ActionBool {

  SetProperties(): void
}

declare interface QuickHackToggleBlockade extends ToggleBlockade {

  GetTweakDBChoiceRecord(): string
}

declare interface RoadBlockTrap extends InteractiveMasterDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnActivateDevice(evt: ActivateDevice): Bool
  OnAreaEnter(evt: AreaEnteredEvent): Bool
  OnAreaExit(evt: AreaExitedEvent): Bool
  IsPlayerInside(): Bool
  GetController(): RoadBlockTrapController
  GetDevicePS(): RoadBlockTrapControllerPS
  TrapPlayer(player: PlayerPuppet): void
}

declare interface RoadBlockTrapController extends MasterController {

  GetPS(): RoadBlockTrapControllerPS
}

declare interface IsNotWeakspotFilter extends EffectObjectSingleFilter_Scripted {

  Process(ctx: EffectScriptContext, filterCtx: EffectSingleFilterScriptContext): Bool
}

declare interface IsNotInstigatorWeakspotFilter extends EffectObjectSingleFilter_Scripted {

  Process(ctx: EffectScriptContext, filterCtx: EffectSingleFilterScriptContext): Bool
}

declare interface EffectFilter_DamageOverTime extends EffectObjectSingleFilter_Scripted {

  Process(ctx: EffectScriptContext, filterCtx: EffectSingleFilterScriptContext): Bool
}

declare interface OnlySingleStatusEffectFromInstigator extends EffectObjectSingleFilter_Scripted {

  Process(ctx: EffectScriptContext, filterCtx: EffectSingleFilterScriptContext): Bool
}

declare interface RemotelyConnectToAccessPoint extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface DebugRemoteConnectionEvent extends Event {

}

declare interface NotInDefeated extends EffectObjectSingleFilter_Scripted {

  Process(ctx: EffectScriptContext, filterCtx: EffectSingleFilterScriptContext): Bool
}

declare interface IgnoreFriendlyTargets extends EffectObjectSingleFilter_Scripted {

  Process(ctx: EffectScriptContext, filterCtx: EffectSingleFilterScriptContext): Bool
}

declare interface PlayerIgnoreFriendlyAndAlive extends EffectObjectSingleFilter_Scripted {

  Process(ctx: EffectScriptContext, filterCtx: EffectSingleFilterScriptContext): Bool
}

declare interface EffectExecutor_PuppetForceVisionAppearance extends EffectExecutor_Scripted {

  GetForceVisionAppearanceData(ctx: EffectScriptContext): PuppetForceVisionAppearanceData
  SetForceVisionAppearanceData(ctx: EffectScriptContext, data: PuppetForceVisionAppearanceData): void
  GetHighlightType(ctx: EffectScriptContext): EFocusForcedHighlightType
  GetOutlineType(ctx: EffectScriptContext): EFocusOutlineType
  GetStimRecord(ctx: EffectScriptContext): Stim_Record
  GetTransitionTime(ctx: EffectScriptContext): number
  GetPriority(ctx: EffectScriptContext): EPriority
  GetHighlightedTargets(ctx: EffectScriptContext): ScriptedPuppet[]
  GetTargets(ctx: EffectScriptContext): ScriptedPuppet[]
  GetInvestigationSlots(ctx: EffectScriptContext): number
  IsSourceHighlighted(ctx: EffectScriptContext): Bool
  GetEffectName(ctx: EffectScriptContext): string
  Init(ctx: EffectScriptContext): Bool
  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
  ClearAllHighlights(source: GameObject, ctx: EffectScriptContext): void
  TargetAcquired(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): void
  TargetLost(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): void
  IsSourceValid(source: GameObject): Bool
  IsTargetValid(target: ScriptedPuppet): Bool
  AddTarget(target: ScriptedPuppet, ctx: EffectScriptContext): void
  RemoveTarget(target: ScriptedPuppet, ctx: EffectScriptContext): void
  AddHighlightTarget(target: ScriptedPuppet, ctx: EffectScriptContext): void
  RemoveHighlightTarget(target: ScriptedPuppet, ctx: EffectScriptContext): void
  HasHighlightedTargets(ctx: EffectScriptContext): Bool
  HasAnyTargets(ctx: EffectScriptContext): Bool
  EvaluateTargets(source: GameObject, ctx: EffectScriptContext): void
  UpdateSourceHighlight(source: GameObject, ctx: EffectScriptContext): void
  UpdateDistractionHighlights(source: GameObject, targetsToHighlight: ScriptedPuppet[], ctx: EffectScriptContext): void
  CanReactOnStimType(target: ScriptedPuppet, stimRecord: Stim_Record): Bool
  GetNearestTarget(source: GameObject, ctx: EffectScriptContext): ScriptedPuppet
  GetNearestTarget(source: GameObject, targets: ScriptedPuppet[], ctx: EffectScriptContext): ScriptedPuppet
  GetNearestTargets(source: GameObject, amount: number, ctx: EffectScriptContext): ScriptedPuppet[]
  GetFarestTargetDistance(source: GameObject, targets: ScriptedPuppet[], index: number): number
  SendForceVisionApperaceEvent(enable: Bool, owner: GameObject, source: GameObject, ctx: EffectScriptContext): void
}

declare interface IgnorePlayerMountedVehicle extends EffectObjectSingleFilter_Scripted {

  Process(ctx: EffectScriptContext, filterCtx: EffectSingleFilterScriptContext): Bool
}

declare interface IgnorePlayerIfMountedToVehicle extends EffectObjectSingleFilter_Scripted {

  Process(ctx: EffectScriptContext, filterCtx: EffectSingleFilterScriptContext): Bool
}

declare interface IgnoreAlreadyAffectedEntities extends EffectObjectSingleFilter_Scripted {

  Process(ctx: EffectScriptContext, filterCtx: EffectSingleFilterScriptContext): Bool
}

declare interface IsLootContainer extends EffectObjectSingleFilter_Scripted {

  Process(ctx: EffectScriptContext, filterCtx: EffectSingleFilterScriptContext): Bool
}

declare interface ApplyJammer extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface ApplyJammerFromCw extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface SensorJammed extends Event {

}

declare interface EMP extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
  TargetAcquired(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): void
}

declare interface EMPExplosion extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface EffectExecutor_PingNetwork extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
  TargetLost(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): void
  ShouldRevealObject(object: GameObject): Bool
  GetFxResource(object: GameObject): FxResource
  IsTargetValid(target: GameObject, source: GameObject, ctx: EffectScriptContext): Bool
  GetNetworkSystem(ctx: EffectScriptContext): NetworkSystem
}

declare interface EffectExecutor_MuteBubble extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
  TargetAcquired(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): void
  TargetLost(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): void
  IsTargetValid(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface ActionNodeRef extends ScriptableDeviceAction {

  GetProperties(): DeviceActionProperty[]
  GetCurrentDisplayString(): string
}

declare interface EffectExecutor_Device extends EffectExecutor_Scripted {

  QueueEventOnDevice(device: InteractiveDevice, evt: ActionBool): void
}

declare interface EffectExecutor_SetDeviceOFF extends EffectExecutor_Device {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface ActionWorkSpot extends ActionBool {

  GetWorkspotTarget(): gamePuppet
}

declare interface EffectExecutor_SetDeviceON extends EffectExecutor_Device {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface EffectExecutor_ToggleDevice extends EffectExecutor_Device {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface EffectExecutor_ReactionStimuli extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface EffectExecutor_GrenadeTargetTracker extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
  TargetAcquired(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): void
  TargetLost(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): void
  IsTargetValid(target: NPCPuppet, ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext, targetSlot: CName): Bool
  IsTargetReachable(ctx: EffectScriptContext, target: NPCPuppet, targetSlot: CName): Bool
  GetAngleBetweenSourceUpAndTarget(sourcePosition: Vector4, targetPosition: Vector4): number
  IsPointReachable(ctx: EffectScriptContext, startPoint: Vector4, endPoint: Vector4): Bool
}

declare interface EffectExecutor_TrackTargets extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
  TargetAcquired(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): void
  TargetLost(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): void
  IsTargetValid(target: GameObject, ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface TargetAcquiredEvent extends Event {

}

declare interface TargetLostEvent extends Event {

}

declare interface EffectExecutor_SendActionSignal extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface EffectExecutor_VisualEffectAtTarget extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
  Preload(ctx: EffectPreloadScriptContext): void
}

declare interface DeviceMappinsContainer extends IScriptable {

  Initialize(): void
  HasNewFocusMappin(): Bool
  EvaluatePositions(owner: GameObject): void
  GetNextAxis(currentAxis: EAxisType): EAxisType
  ShowMappins(owner: GameObject): void
  HideMappins(owner: GameObject): void
  HideSingleMappin(index: number, owner: GameObject): void
  HasMappin(mappinVariant: gamedataMappinVariant): Bool
  HasMappin(data: SDeviceMappinData): Bool
  ToggleMappin(owner: GameObject, mappinVariant: gamedataMappinVariant, enable: Bool): void
  AddMappin(data: SDeviceMappinData): void
}

declare interface DeviceTimetable extends ScriptableComponent {

  OnGameAttach(): void
  OnGameDetach(): void
  SetTimetable(timetable: DeviceTimeTableManager): void
  InitializeTimetable(): void
  UninitializeTimetable(): void
}

declare interface BackDoorObjectiveData extends GemplayObjectiveData {

}

declare interface ControlPanelObjectiveData extends GemplayObjectiveData {

}

declare interface MasterDeviceComponent extends GameComponent {

  GetActionsOfConnectedDevices(outActions: DeviceAction[], context: GetActionsContext): void
  GetConnectedDevices(outDevices: DeviceComponentPS[]): void
}

declare interface SpiderbotBoolAction extends ActionBool {

  SetProperties(status: EDeviceStatus): void
  SetProperties(status: EDeviceStatus, nameOnTrue: CName, nameOnFalse: CName): void
  GetTweakDBChoiceRecord(): string
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
}

declare interface PlayDeafeningMusic extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  GetInteractionIcon(): ChoiceCaptionIconPart_Record
}

declare interface ChangeMusicAction extends ActionBool {

  SetProperties(settings: MusicSettings): void
  SetProperties(settings: MusicSettings, nameOnTrue: TweakDBID): void
  GetTweakDBChoiceRecord(): string
  GetMusicSettings(): MusicSettings
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
}

declare interface Flush extends ActionBool {

  SetProperties(): void
  GetTweakDBChoiceRecord(): string
}

declare interface PresetAction extends ActionBool {

  SetProperties(preset: SmartHousePreset): void
  GetPreset(): SmartHousePreset
  GetDisplayName(): CName
  CreateActionWidgetPackage(actions?: DeviceAction[]): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  GetInkWidgetTweakDBID(): TweakDBID
}

declare interface EnterLadder extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsPlayerInAcceptableState(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  PushOnEnterLadderEventToPSM(requester: GameObject): void
  /** @noSelf **/
  GetPlayerStateMachine(requester: GameObject): IBlackboard
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  GetTweakDBChoiceRecord(): string
}

declare interface KillTaggedTargetEvent extends Event {

}

declare interface ReevaluateTargetsEvent extends Event {

}

declare interface BaseDestructibleDevice extends Device {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  OnMasterDeviceDestroyed(evt: MasterDeviceDestroyed): Bool
  OnPhysicalDestructionEvent(evt: PhysicalDestructionEvent): Bool
  CreateDestructionEffects(): void
  CreatePhysicalBody(): void
  OnDelayEvent(evt: DelayEvent): Bool
  HidePhysicalBody(): void
  DeactivateDevice(): void
  DeactivateDeviceSilent(): void
  ActivateDevice(): void
  GetController(): BaseDestructibleController
  GetDevicePS(): BaseDestructibleControllerPS
}

declare interface BaseDestructibleController extends ScriptableDC {

  GetPS(): BaseDestructibleControllerPS
}

declare interface BaseDestructibleControllerPS extends ScriptableDeviceComponentPS {

  OnInstantiated(): Bool
  Initialize(): void
  GameAttached(): void
  OnMasterDeviceDestroyed(evt: MasterDeviceDestroyed): EntityNotificationType
  IsMasterDestroyed(): Bool
}

declare interface DestructibleMasterLight extends DestructibleMasterDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnPhysicalDestructionEvent(evt: PhysicalDestructionEvent): Bool
  GetController(): DestructibleMasterLightController
  GetDevicePS(): DestructibleMasterLightControllerPS
  ShouldRegisterToHUD(): Bool
  ApplyPreset(light: gameLightComponent, preset: TweakDBID): void
  CreateColorFromIntArray(ints: number[], color: Color): Bool
  CutPower(): void
  TurnOnDevice(): void
  TurnOffDevice(): void
  TurnOnLights(): void
  TurnOffLights(): void
  OnHitEvent(hit: gameHitEvent): Bool
  ReactToHit(hit: gameHitEvent): void
  OnEMPHitEvent(evt: EMPHitEvent): Bool
  OnEMPEnded(evt: EMPEnded): Bool
}

declare interface LightPreset {

}

declare interface DestructibleMasterLightController extends DestructibleMasterDeviceController {

  GetPS(): DestructibleMasterLightControllerPS
}

declare interface DestructibleMasterLightControllerPS extends DestructibleMasterDeviceControllerPS {

  OnInstantiated(): Bool
  GameAttached(): void
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  InitializeCLS(): void
  UpdateStateOnCLS(state: EDeviceStatus): void
}

declare interface DestructibleRoadSign extends BaseDestructibleDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  CreateDestructionEffects(): void
  OnPhysicalDestructionEvent(evt: PhysicalDestructionEvent): Bool
  DeactivateDevice(): void
  DeactivateDeviceSilent(): void
  ActivateDevice(): void
}

declare interface DisassemblableEntitySimple extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetDevicePS(): GenericDeviceControllerPS
  OnDisassembleDevice(evt: DisassembleDevice): Bool
  OnWorkspotFinished(componentName: CName): Bool
}

declare interface MaintenancePanel extends InteractiveMasterDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetController(): MaintenancePanelController
  GetDevicePS(): MaintenancePanelControllerPS
  RestoreDeviceState(): void
  EnterWorkspot(activator: GameObject, freeCamera?: Bool, componentName?: CName, deviceData?: CName): void
  OnDisassembleDevice(evt: DisassembleDevice): Bool
  OnDelayApperanceSwitchEvent(evt: panelApperanceSwitchEvent): Bool
  OnWorkspotFinished(componentName: CName): Bool
  IsAuthorizationModuleOn(): Bool
  UpdateAnimState(): void
  DelayApperanceSwitchEvent(newApperance: CName, time: number): void
}

declare interface MaintenancePanelController extends MasterController {

  GetPS(): MaintenancePanelControllerPS
}

declare interface MaintenancePanelControllerPS extends MasterControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  GameAttached(): void
  RmoveAuthorizationFromSlaves(): void
  RefreshLockOnSlaves(): void
  ActionEngineering(context: GetActionsContext): ActionEngineering
  OnDisassembleDevice(evt: DisassembleDevice): EntityNotificationType
}

declare interface panelApperanceSwitchEvent extends Event {

}

declare interface DeviceDebuggerComponent extends ScriptableComponent {

  OnRegisterDebuggerCandidate(evt: RegisterDebuggerCanditateEvent): Bool
  OnUpdate(deltaTime: number): void
  PerformDebug(): void
  DrawDbgLine(): void
  IsFactValid(): Bool
  AddDebugBit(position: Vector4, text: string, color: Color): void
  GetColor(reverse?: Bool): Color
  ToggleDebuggerColor(): void
}

declare interface FakeDoor extends GameObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnInteractionActivated(evt: InteractionEvent): Bool
  CreateFakeDoorChoice(): void
  DeterminGameplayRole(): EGameplayRole
}

declare interface ResolveAllSkillchecksEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface DoorResaveData {

}

declare interface DropPointModule extends Device {

}

declare interface ElevatorFloorTerminal extends Terminal {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetDevicePS(): ElevatorFloorTerminalControllerPS
  GetController(): ElevatorFloorTerminalController
  OnPerformedAction(evt: PerformedAction): Bool
  InitializeScreenDefinition(): void
  OnMaraudersMapDeviceDebug(sink: MaraudersMapDevicesSink): void
  ShouldAlwasyRefreshUIInLogicAra(): Bool
}

declare interface ElevatorFloorTerminalController extends TerminalController {

  GetPS(): ElevatorFloorTerminalControllerPS
}

declare interface ResetDoorState extends Event {

  GetFriendlyDescription(): string
}

declare interface DoorColliderEnableEvent extends Event {

}

declare interface ElectricLight extends Device {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetController(): ElectricLightController
  GetDevicePS(): ElectricLightControllerPS
  ShouldRegisterToHUD(): Bool
  ApplyPreset(light: gameLightComponent, preset: TweakDBID): void
  CreateColorFromIntArray(ints: number[], color: Color): Bool
  CutPower(): void
  RestorePower(): void
  TurnOnDevice(): void
  TurnOffDevice(): void
  TurnOnLights(): void
  TurnOffLights(): void
  OnHitEvent(hit: gameHitEvent): Bool
  ReactToHit(hit: gameHitEvent): void
  OnEMPHitEvent(evt: EMPHitEvent): Bool
  OnEMPEnded(evt: EMPEnded): Bool
  OnPhysicalDestructionEvent(evt: PhysicalDestructionEvent): Bool
  ActivateDevice(): void
  IncludeLightsInVisibilityBoundsScript(): Bool
  IsGameplayRelevant(): Bool
  ShouldSendGameAttachedEventToPS(): Bool
}

declare interface ExitLight extends ElectricLight {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnHitEvent(hit: gameHitEvent): Bool
  TurnOnDevice(): void
  TurnOffDevice(): void
  ReactToHit(hit: gameHitEvent): void
  TurnRed(): void
  TurnGreen(): void
}

declare interface ExitLightController extends ScriptableDC {

  GetPS(): ExitLightControllerPS
}

declare interface ExitLightControllerPS extends ScriptableDeviceComponentPS {

  OnInstantiated(): Bool
  Initialize(): void
}

declare interface ExplosiveTriggerDeviceProximityEvent extends Event {

}

declare interface ExplosiveTriggerDevice extends ExplosiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  GetController(): ExplosiveTriggerDeviceController
  GetDevicePS(): ExplosiveTriggerDeviceControllerPS
  OnAreaEnter(evt: AreaEnteredEvent): Bool
  ReactOnSurroundingArea(whoEnteredID: EntityID): void
  ReactOnTrigger(whoEnteredID: EntityID): void
  OnAreaExit(evt: AreaExitedEvent): Bool
  OnExplosiveTriggerDeviceProximityEvent(evt: ExplosiveTriggerDeviceProximityEvent): Bool
  ToggleVisibility(visible: Bool): void
  ToggleTriggerLogic(state: Bool): void
  TurnOffDevice(): void
  TurnOnDevice(): void
  ToggleComponents(state: Bool): void
  ChangeLasersColor(laserState: ExplosiveTriggerDeviceLaserState): void
  OnSetDeviceAttitude(evt: SetDeviceAttitude): Bool
  OnQuestSetPlayerSafePass(evt: QuestSetPlayerSafePass): Bool
}

declare interface ExplosiveTriggerDeviceControllerPS extends ExplosiveDeviceControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  GameAttached(): void
  CanPlayerSafePass(): Bool
  IsDisarmed(): Bool
  IsTriggerExploded(): Bool
  SetTriggerExplodedState(state: Bool): void
  ActionSetDeviceAttitude(): SetDeviceAttitude
  ActionToggleON(): ToggleON
  ActionSpiderbotDisarmExplosiveDevice(): SpiderbotDisarmExplosiveDevice
  ActionSpiderbotDisarmExplosiveDevicePerformed(): SpiderbotDisarmExplosiveDevicePerformed
  ActionEngineering(context: GetActionsContext): ActionEngineering
  OnActionEngineering(evt: ActionEngineering): EntityNotificationType
  Disarm(action: ScriptableDeviceAction): void
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  GetQuestActions(actions: DeviceAction[], context: GetActionsContext): void
  ActionQuestSetPlayerSafePass(value: Bool): QuestSetPlayerSafePass
  CanCreateAnyQuickHackActions(): Bool
  PushSkillCheckActions(outActions: DeviceAction[], context: GetActionsContext): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  CanCreateAnySpiderbotActions(): Bool
  GetSpiderbotActions(actions: DeviceAction[], context: GetActionsContext): void
  OnSetDeviceAttitude(evt: SetDeviceAttitude): EntityNotificationType
  OnQuestSetPlayerSafePass(evt: QuestSetPlayerSafePass): EntityNotificationType
  OnSpiderbotDisarmExplosiveDevice(evt: SpiderbotDisarmExplosiveDevice): EntityNotificationType
  OnSpiderbotDisarmExplosiveDevicePerformed(evt: SpiderbotDisarmExplosiveDevicePerformed): EntityNotificationType
}

declare interface SpiderbotDisarmExplosiveDevice extends ActionBool {

  SetProperties(): void
  GetTweakDBChoiceRecord(): string
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
}

declare interface SpiderbotDisarmExplosiveDevicePerformed extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
}

declare interface QuestSetPlayerSafePass extends ActionBool {

  SetProperties(value: Bool): void
}

declare interface ExplosiveTriggerDeviceController extends ExplosiveDeviceController {

  GetPS(): ExplosiveTriggerDeviceControllerPS
}

declare interface C4 extends ExplosiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnDetach(): Bool
  GetDevicePS(): C4ControllerPS
  OnActivateC4(evt: ActivateC4): Bool
  OnDeactivateC4(evt: DeactivateC4): Bool
  OnDetonateC4(evt: DetonateC4): Bool
  ToggleVisibility(visible: Bool): void
}

declare interface C4Controller extends ExplosiveDeviceController {

  GetPS(): C4ControllerPS
}

declare interface C4ControllerPS extends ExplosiveDeviceControllerPS {

  GameAttached(): void
  ActionActivate(): ActivateC4
  ActionDeactivate(): DeactivateC4
  ActionDetonate(): DetonateC4
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(outActions: DeviceAction[], context: GetActionsContext): void
  PushInactiveInteractionChoice(context: GetActionsContext, choices: InteractionChoice[]): void
  OnActivateC4(evt: ActivateC4): EntityNotificationType
  OnDeactivateC4(evt: DeactivateC4): EntityNotificationType
  OnDetonateC4(evt: DetonateC4): EntityNotificationType
  GetItemTweakDBString(): CName
  GetInventoryItemID(): ItemID
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface ActivateC4 extends ActionBool {

  SetProperties(): void
  GetTweakDBChoiceRecord(): string
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
}

declare interface DeactivateC4 extends ActionBool {

  SetProperties(): void
  GetTweakDBChoiceRecord(): string
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
}

declare interface DetonateC4 extends ActionBool {

  SetProperties(): void
  GetTweakDBChoiceRecord(): string
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
}

declare interface forklift extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnActivateDevice(evt: ActivateDevice): Bool
  UpdateAnimState(): void
  OnForkliftCompleteActivateEvent(evt: ForkliftCompleteActivateEvent): Bool
  RefreshDeviceInteractions(): void
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
  OnUploadProgressStateChanged(evt: UploadProgramProgressEvent): Bool
  OnPlayerEnter(evt: AreaEnteredEvent): Bool
  OnPlayerExit(evt: AreaExitedEvent): Bool
}

declare interface ForkliftController extends ScriptableDC {

}

declare interface ForkliftControllerPS extends ScriptableDeviceComponentPS {

  GetActionName(): CName
  GetLiftingAnimationTime(): number
  IsForkliftUp(): Bool
  ToggleForkliftPosition(): void
  ChangeState(newState: EDeviceStatus): void
  GameAttached(): void
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  OnActivateDevice(evt: ActivateDevice): EntityNotificationType
}

declare interface ForkliftSetup {

}

declare interface ForkliftCompleteActivateEvent extends Event {

}

declare interface HoloDevice extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  OnPlay(evt: TogglePlay): Bool
  UpdateFactDB(): void
  UpdateUI(): void
  GetController(): HoloDeviceController
  GetDevicePS(): HoloDeviceControllerPS
}

declare interface HoloDeviceController extends ScriptableDC {

  GetPS(): HoloDeviceControllerPS
}

declare interface HoloDeviceControllerPS extends ScriptableDeviceComponentPS {

  OnInstantiated(): Bool
  Initialize(): void
  ActionTogglePlay(): TogglePlay
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  OnPlay(evt: TogglePlay): EntityNotificationType
  GetClearance(): Clearance
  IsPlaying(): Bool
  LogActionDetails(action: ScriptableDeviceAction, cachedStatus: BaseDeviceStatus, context?: string, status?: string, overrideStatus?: Bool): void
}

declare interface Fridge extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  OnOpenDoor(evt: ToggleOpenFridge): Bool
  UpdateDoorAnimState(): void
  UpdateFactDB(): void
  GetDevicePS(): FridgeControllerPS
  GetController(): FridgeController
}

declare interface FridgeController extends ScriptableDC {

  GetPS(): FridgeControllerPS
}

declare interface FridgeControllerPS extends ScriptableDeviceComponentPS {

  OnInstantiated(): Bool
  Initialize(): void
  ActionToggleOpenFridge(): ToggleOpenFridge
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  OnOpen(evt: ToggleOpenFridge): EntityNotificationType
  GetClearance(): Clearance
  IsOpen(): Bool
}

declare interface ToggleOpenFridge extends ActionBool {

  SetProperties(isOpen: Bool): void
}

declare interface HoloFeeder extends Device {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetController(): HoloFeederController
  GetDevicePS(): HoloFeederControllerPS
  CutPower(): void
  TurnOnDevice(): void
  TurnOffDevice(): void
  TurnOn(): void
  TurnOff(): void
}

declare interface HoloFeederController extends ScriptableDC {

  GetPS(): HoloFeederControllerPS
}

declare interface HoloFeederControllerPS extends ScriptableDeviceComponentPS {

  OnInstantiated(): Bool
  Initialize(): void
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
}

declare interface SGenericDevicePersistentData {

}

declare interface HoloTable extends InteractiveDevice {

  GetDevicePS(): HoloTableControllerPS
  GetController(): MediaDeviceController
  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  SetActiveMesh(): void
  TurnOffMeshes(): void
  OnNextStation(evt: NextStation): Bool
  OnPreviousStation(evt: PreviousStation): Bool
  TurnOnDevice(): void
  TurnOffDevice(): void
  CutPower(): void
  DeactivateDevice(): void
  DeterminGameplayRole(): EGameplayRole
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
}

declare interface HoloTableControllerPS extends MediaDeviceControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  SetMeshesAmount(value: number): void
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  OnNextStation(evt: NextStation): EntityNotificationType
  OnPreviousStation(evt: PreviousStation): EntityNotificationType
}

declare interface HoloTableController extends MediaDeviceController {

  GetPS(): HoloTableControllerPS
}

declare interface MovableWallScreen extends Door {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  GetController(): MovableWallScreenController
  OnToggleOpen(evt: ToggleOpen): Bool
  UpdateAnimState(): void
  PlaySounds(): void
  SetQuestFact(factName: CName): void
  OnSecretOpenAnimationEvent(evt: SecretOpenAnimationEvent): Bool
}

declare interface MovableWallScreenController extends DoorController {

  GetPS(): MovableWallScreenControllerPS
}

declare interface MovableWallScreenControllerPS extends DoorControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  GetDeviceIconPath(): string
}

declare interface SecretOpenAnimationEvent extends Event {

}

declare interface WallScreen extends TV {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetController(): WallScreenController
  GetDevicePS(): WallScreenControllerPS
  OnMovementFinished(movementStatus: ObjectMoverStatus): Bool
  OnToggleSecureShow(evt: ToggleShow): Bool
  Move(): void
  MoveBack(): void
}

declare interface WallScreenController extends TVController {

  GetPS(): WallScreenControllerPS
}

declare interface WallScreenControllerPS extends TVControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  ActionToggleShow(): ToggleShow
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  OnToggleShow(evt: ToggleShow): EntityNotificationType
  IsShown(): Bool
  GetDeviceIconPath(): string
}

declare interface ToggleShow extends ActionBool {

  SetProperties(isShown: Bool): void
}

declare interface Toilet extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnFlush(evt: Flush): Bool
  GetDevicePS(): ToiletControllerPS
  GetController(): ToiletController
  DeterminGameplayRole(): EGameplayRole
}

declare interface ToiletController extends ScriptableDC {

  GetPS(): ToiletControllerPS
}

declare interface ToiletControllerPS extends ScriptableDeviceComponentPS {

  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  GetFlushSFX(): CName
  GetFlushVFX(): CName
  ActionFlush(): Flush
  OnFlush(evt: Flush): EntityNotificationType
}

declare interface WindowBlindersReplicatedState extends DeviceReplicatedState {

}

declare interface WindowBlinders extends InteractiveDevice {

  GetDeviceStateClass(): CName
  ApplyReplicatedState(state: DeviceReplicatedState): void
  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  GetController(): WindowBlindersController
  GetDevicePS(): WindowBlindersControllerPS
  UpdateDeviceState(isDelayed?: Bool): Bool
  OnToggleOpen(evt: ToggleOpen): Bool
  OnQuickHackToggleOpen(evt: QuickHackToggleOpen): Bool
  OnToggleTilt(evt: ToggleTiltBlinders): Bool
  OnActionEngineering(evt: ActionEngineering): Bool
  OnActionDemolition(evt: ActionDemolition): Bool
  EnterWorkspot(): void
  OnQuestStatusChange(evt: PSChangedEvent): Bool
  UpdateAnimState(): void
  ApplyAnimState(isOpen: Bool, isTilted: Bool): void
  DeterminGameplayRole(): EGameplayRole
  CheckCurrentSide(): void
}

declare interface WindowBlindersController extends ScriptableDC {

  GetPS(): WindowBlindersControllerPS
}

declare interface WindowBlindersControllerPS extends ScriptableDeviceComponentPS {

  OnInstantiated(): Bool
  Initialize(): void
  GameAttached(): void
  GetDeviceIconPath(): string
  IsOpen(): Bool
  IsTilted(): Bool
  IsClosed(): Bool
  IsNonInteractive(): Bool
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(outActions: DeviceAction[], context: GetActionsContext): void
  GetQuestActions(outActions: DeviceAction[], context: GetActionsContext): void
  ActionQuickHackToggleOpen(): QuickHackToggleOpen
  OnQuickHackToggleOpen(evt: QuickHackToggleOpen): EntityNotificationType
  ActionToggleOpen(): ToggleOpen
  OnToggleOpen(evt: ToggleOpen): EntityNotificationType
  ActionToggleTiltBlinders(): ToggleTiltBlinders
  OnToggleTiltBlinders(evt: ToggleTiltBlinders): EntityNotificationType
  OnActionEngineering(evt: ActionEngineering): EntityNotificationType
  OnActionDemolition(evt: ActionDemolition): EntityNotificationType
  OnSecuritySystemOutput(evt: SecuritySystemOutput): EntityNotificationType
  ActionQuestForceOpen(): QuestForceOpen
  OnQuestForceOpen(evt: QuestForceOpen): EntityNotificationType
  ActionQuestForceClose(): QuestForceClose
  OnQuestForceClose(evt: QuestForceClose): EntityNotificationType
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface WindowBlindersData {

}

declare interface ToggleTiltBlinders extends ActionBool {

  SetProperties(isTilted: Bool): void
  GetTweakDBChoiceRecord(): string
}

declare interface SChannelEnumData {

}

declare interface Window extends Door {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnActionDemolition(evt: ActionDemolition): Bool
  OnPhysicalDestructionEvent(evt: PhysicalDestructionEvent): Bool
  SetSoloAppearance(): void
}

declare interface WindowController extends DoorController {

  GetPS(): WindowControllerPS
}

declare interface WindowControllerPS extends DoorControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  GameAttached(): void
  GetDeviceIconPath(): string
  OnActionDemolition(evt: ActionDemolition): EntityNotificationType
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface Ladder extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  HasAnyDirectInteractionActive(): Bool
  DeterminGameplayRole(): EGameplayRole
  GetController(): LadderController
  GetDevicePS(): LadderControllerPS
}

declare interface LadderController extends ScriptableDC {

  GetPS(): LadderControllerPS
}

declare interface LadderControllerPS extends ScriptableDeviceComponentPS {

  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  ActionEnterLadder(): EnterLadder
  OnEnterLadder(evt: EnterLadder): EntityNotificationType
}

declare interface JumpPod extends GameObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnAreaEnter(trigger: AreaEnteredEvent): Bool
  OnAreaExit(trigger: AreaExitedEvent): Bool
  ApplyImpulse(activator: EntityGameInterface): void
}

declare interface ElevatorFloorViabilityInterpreter extends IScriptable {

  /** @noSelf **/
  Evaluate(device: DoorControllerPS, hasActiveActions: Bool): Bool
}

declare interface SlidingLadder extends BaseAnimatedDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  OnHitEvent(hit: gameHitEvent): Bool
  OnDelayEvent(evt: DelayEvent): Bool
  TransformAnimate(): void
  Animate(): void
  ToggleLadder(): void
  GetController(): SlidingLadderController
  GetDevicePS(): SlidingLadderControllerPS
  DeterminGameplayRole(): EGameplayRole
}

declare interface SlidingLadderController extends BaseAnimatedDeviceController {

  GetPS(): SlidingLadderControllerPS
}

declare interface SlidingLadderControllerPS extends BaseAnimatedDeviceControllerPS {

  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  CanCreateAnyQuickHackActions(): Bool
  SetActive(): void
  IsShootable(): Bool
  GetAnimTime(): number
  ActionEnterLadder(): EnterLadder
  OnEnterLadder(evt: EnterLadder): EntityNotificationType
}

declare interface ActionsSequencer extends InteractiveMasterDevice {

  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetController(): ActionsSequencerController
  GetDevicePS(): ActionsSequencerControllerPS
}

declare interface ActionsSequencerController extends ScriptableDC {

  GetPS(): ActionsSequencerControllerPS
}

declare interface Activator extends InteractiveMasterDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetController(): ActivatorController
  EnterWorkspot(activator: GameObject, freeCamera?: Bool, componentName?: CName, deviceData?: CName): void
  OnDisassembleDevice(evt: DisassembleDevice): Bool
  OnSpiderbotActivateActivator(evt: SpiderbotActivateActivator): Bool
  OnSpiderbotOrderCompletedEvent(evt: SpiderbotOrderCompletedEvent): Bool
  OnToggleActivation(evt: ToggleActivation): Bool
  OnDelayApperanceSwitchEvent(evt: panelApperanceSwitchEvent): Bool
  OnWorkspotFinished(componentName: CName): Bool
  UpdateAnimState(): void
  DelayApperanceSwitchEvent(newApperance: CName, time: number): void
  OnHit(evt: gameHitEvent): Bool
  DeterminGameplayRole(): EGameplayRole
  GetCurrentGameplayRole(): EGameplayRole
}

declare interface ActivatorController extends MasterController {

}

declare interface ActivatorControllerPS extends MasterControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  GameAttached(): void
  GetActions(outActions: DeviceAction[], context: GetActionsContext): Bool
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  CanCreateAnySpiderbotActions(): Bool
  GetSpiderbotActions(actions: DeviceAction[], context: GetActionsContext): void
  GetQuestActions(actions: DeviceAction[], context: GetActionsContext): void
  GetSpiderbotInteractionLocationOverride(): NodeRef
  ActivateConnectedDevices(): void
  ActionEngineering(context: GetActionsContext): ActionEngineering
  ActionDemolition(context: GetActionsContext): ActionDemolition
  OnActionDemolition(evt: ActionDemolition): EntityNotificationType
  OnActionEngineering(evt: ActionEngineering): EntityNotificationType
  ResolveActionHackingCompleted(evt: ActionHacking): void
  ActionSpiderbotActivateActivator(interactionTDBID: TweakDBID): SpiderbotActivateActivator
  OnSpiderbotActivateActivator(evt: SpiderbotActivateActivator): EntityNotificationType
  OnDisassembleDevice(evt: DisassembleDevice): EntityNotificationType
  OnToggleActivation(evt: ToggleActivation): EntityNotificationType
  OnQuestForceActivate(evt: QuestForceActivate): EntityNotificationType
}

declare interface VentilationAreaControllerPS extends MasterControllerPS {

  GetActionName(): CName
  GetAreaEffect(): ETrapEffects
  ActionActivateDevice(): ActivateDevice
  GetActions(outActions: DeviceAction[], context: GetActionsContext): Bool
  OnActivateDevice(evt: ActivateDevice): EntityNotificationType
  ActivateEffectors(): void
  IsAreaActive(): Bool
  GetInkWidgetTweakDBID(context: GetActionsContext): TweakDBID
  GetThumbnailWidget(): SThumbnailWidgetPackage
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface VentilationAreaSetup {

}

declare interface ToggleEffect extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
}

declare interface BreachViewTimeListener extends TimeDilationListener {

  OnFinished(reason: CName): Bool
  SetOwner(owner: GameObject): void
}

declare interface QuestResetPerfomedActionsStorage extends ActionBool {

  SetProperties(): void
}

declare interface ComputerPersistentData {

}

declare interface DepleteCharges extends Event {

}

declare interface UIScreenDefinition {

}

declare interface SNewsFeedData {

}

declare interface ElectricBox extends InteractiveMasterDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  GetController(): ElectricBoxController
  GetDevicePS(): ElectricBoxControllerPS
  DeterminGameplayRole(): EGameplayRole
  OnActionOverride(evt: ActionOverride): Bool
  OnDelayEvent(evt: DelayEvent): Bool
  SetQuestFact(): void
  EnterWorkspot(activator: GameObject, freeCamera?: Bool, componentName?: CName, deviceData?: CName): void
  UpdateAnimState(): void
}

declare interface ElectricBoxController extends MasterController {

  GetPS(): ElectricBoxControllerPS
}

declare interface ElectricBoxControllerPS extends MasterControllerPS {

  GameAttached(): void
  IsOverriden(): Bool
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  ActionOverride(): ActionOverride
  OnActionEngineering(evt: ActionEngineering): EntityNotificationType
  OnActionOverride(evt: ActionOverride): EntityNotificationType
  GetQuestSetup(): ComputerQuickHackData
  WorkspotFinished(): void
  RefreshSlaves(): void
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface ActionOverride extends ActionBool {

  SetProperties(): void
  GetTweakDBChoiceRecord(): string
}

declare interface Fuse extends InteractiveMasterDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnPersitentStateInitialized(evt: GameAttachedEvent): Bool
  GetController(): FuseController
  GetDevicePS(): FuseControllerPS
  GetDefaultHighlight(): FocusForcedHighlightData
  IsGameplayRelevant(): Bool
  ShouldSendGameAttachedEventToPS(): Bool
}

declare interface FuseController extends MasterController {

  GetPS(): FuseControllerPS
}

declare interface FuseBox extends InteractiveMasterDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetController(): FuseBoxController
  GetDevicePS(): FuseBoxControllerPS
  TurnOffDevice(): void
  TurnOnDevice(): void
  ToggleComponentsON_OFF(visible: Bool): void
  ResolveGameplayState(): void
  OnOverloadDevice(evt: OverloadDevice): Bool
  StartOverloading(effectName: CName): void
  StopOverloading(): void
  ToggleVisibility(visible: Bool): void
  DeterminGameplayRole(): EGameplayRole
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
  OnHitEvent(hit: gameHitEvent): Bool
  StartShortGlitch(): void
  OnStopShortGlitch(evt: StopShortGlitchEvent): Bool
  HasAnyDirectInteractionActive(): Bool
}

declare interface FuseBoxController extends MasterController {

  GetPS(): FuseBoxControllerPS
}

declare interface FuseBoxControllerPS extends MasterControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  GameAttached(): void
  IsGenerator(): Bool
  GetExpectedSlaveState(): EDeviceStatus
  GetClearance(): Clearance
  GetWidgetTypeName(): CName
  ActionEngineering(context: GetActionsContext): ActionEngineering
  OnToggleON(evt: ToggleON): EntityNotificationType
  OnSetDeviceOFF(evt: SetDeviceOFF): EntityNotificationType
  OnSetDeviceON(evt: SetDeviceON): EntityNotificationType
  RefreshSlaves(): void
  OnRefreshSlavesEvent(evt: RefreshSlavesEvent): EntityNotificationType
  ActionToggleON(): ToggleON
  ActionSendSpiderbotToTogglePower(): SendSpiderbotToTogglePower
  OnSendSpiderbotToTogglePower(evt: SendSpiderbotToTogglePower): EntityNotificationType
  ActionSendSpiderbotToOverloadDevice(): SendSpiderbotToOverloadDevice
  OnSendSpiderbotToOverloadDevice(evt: SendSpiderbotToOverloadDevice): EntityNotificationType
  ActionOverloadDevice(): OverloadDevice
  OnOverloadDevice(evt: OverloadDevice): EntityNotificationType
  IsOverloaded(): Bool
  GetActions(outActions: DeviceAction[], context: GetActionsContext): Bool
  CanCreateAnySpiderbotActions(): Bool
  GetSpiderbotActions(actions: DeviceAction[], context: GetActionsContext): void
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface SendSpiderbotToTogglePower extends ActionBool {

  SetProperties(status: EDeviceStatus): void
  GetTweakDBChoiceRecord(): string
}

declare interface SendSpiderbotToOverloadDevice extends ActionBool {

  SetProperties(): void
}

declare interface BreachAccessPointEvent extends Event {

}

declare interface NetworkArea extends InteractiveMasterDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetDevicePS(): NetworkAreaControllerPS
  OnAreaEnter(evt: AreaEnteredEvent): Bool
  OnAreaExit(evt: AreaExitedEvent): Bool
}

declare interface NetworkAreaController extends MasterController {

  GetPS(): NetworkAreaControllerPS
}

declare interface BlinkingEvent extends Event {

}

declare interface SecurityAlarm extends InteractiveMasterDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  GetController(): SecurityAlarmController
  GetDevicePS(): SecurityAlarmControllerPS
  OnToggleAlarm(evt: ToggleAlarm): Bool
  OnSecuritySystemOutput(evt: SecuritySystemOutput): Bool
  OnSecurityAlarmBreachResponse(evt: SecurityAlarmBreachResponse): Bool
  OnTargetAssessmentRequest(evt: TargetAssessmentRequest): Bool
  OnQuestForceSecuritySystemSafe(evt: QuestForceSecuritySystemSafe): Bool
  OnQuestForceSecuritySystemArmed(evt: QuestForceSecuritySystemArmed): Bool
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
  DetermineState(): void
  SetCombatState(): void
  DeactivateState(): void
  PlaySound(): void
  StopSound(): void
  SendStim(): void
  StopStim(): void
  TurnOffLights(): void
  TurnOnLights(): void
  StartBlinking(): void
  StopBlinking(): void
  TurnOnDevice(): void
  TurnOffDevice(): void
  CutPower(): void
  DeactivateDevice(): void
  ActivateDevice(): void
  BreakDevice(): void
  DeterminGameplayRole(): EGameplayRole
}

declare interface SecurityAlarmController extends MasterController {

  GetPS(): SecurityAlarmControllerPS
}

declare interface ChangePresetEvent extends Event {

  GetFriendlyDescription(): string
}

declare interface EnableTimeCallbacks extends Event {

  GetFriendlyDescription(): string
}

declare interface DisableTimeCallbacks extends Event {

  GetFriendlyDescription(): string
}

declare interface SmartHouse extends InteractiveMasterDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnDetach(): Bool
  OnTimeTableCallback(evt: PresetTimetableEvent): Bool
  OnFactChanged(evt: FactChangedEvent): Bool
  OnQuestChangePreset(evt: ChangePresetEvent): Bool
  OnEnableTimeCallbacks(evt: EnableTimeCallbacks): Bool
  OnDisableTimeCallbacks(evt: DisableTimeCallbacks): Bool
  GetController(): SmartHouseController
  GetDevicePS(): SmartHouseControllerPS
}

declare interface SmartHouseController extends MasterController {

  GetPS(): SmartHouseControllerPS
}

declare interface SmartHouseControllerPS extends MasterControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  GameAttached(): void
  GetCustomizationFact(): CName
  RegisterFactCallback(): void
  UnregisterFactCallback(): void
  GetActions(outActions: DeviceAction[], context: GetActionsContext): Bool
  ActionOpenInteriorManager(): OpenInteriorManager
  OnOpenInteriorManager(evt: OpenInteriorManager): EntityNotificationType
  ActionPreset(preset: SmartHousePreset): PresetAction
  OnPresetAction(evt: PresetAction): EntityNotificationType
  ActivatePreset(i: number): void
  QuestForcePreset(preset: CName): void
  InitializePreset(): void
  InitializeTimetable(): void
  UninitializeTimetable(): void
  GetActiveTimeTableEntry(): number
  CheckTimetable(newTable: SPresetTimetableEntry, arrayPos: number): void
  GetCurrentTime(): GameTime
  MakeTime(time: SSimpleGameTime): GameTime
  GetDeviceWidget(context: GetActionsContext): SDeviceWidgetPackage
  GetInkWidgetTweakDBID(context: GetActionsContext): TweakDBID
}

declare interface SmartHousePreset extends IScriptable {

  GetPresetName(): CName
  GetIconName(): CName
  GetTimeTable(): SPresetTimetableEntry
  ExecutePresetActions(devices: DeviceComponentPS[]): void
  QueueSwitchActions(device: SimpleSwitchControllerPS): void
  QueueRadioActions(device: RadioControllerPS): void
  QueueTVActions(device: TVControllerPS): void
  QueueWindowBlinderActions(device: WindowBlindersControllerPS): void
  QueueDoorActions(device: DoorControllerPS): void
}

declare interface SimpleSwitchControllerPS extends MasterControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  GetExpectedSlaveState(): EDeviceStatus
  GetClearance(): Clearance
  IsLightSwitch(): Bool
  GetActions(outActions: DeviceAction[], context: GetActionsContext): Bool
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(outActions: DeviceAction[], context: GetActionsContext): void
  OnRefreshSlavesEvent(evt: RefreshSlavesEvent): EntityNotificationType
  RefreshSlaves(onInitialize?: Bool): void
  GetAction(): ScriptableDeviceAction
  ActionToggleON(): ToggleON
  OnToggleON(evt: ToggleON): EntityNotificationType
  OnQuestForceON(evt: QuestForceON): EntityNotificationType
  OnQuestForceOFF(evt: QuestForceOFF): EntityNotificationType
}

declare interface SPresetTimetableEntry {

}

declare interface PresetTimetableEvent extends Event {

}

declare interface SmartHouseConfiguration {

}

declare interface MorningPreset extends SmartHousePreset {

  GetPresetName(): CName
  GetIconName(): CName
  QueueSwitchActions(device: SimpleSwitchControllerPS): void
  QueueRadioActions(device: RadioControllerPS): void
  QueueTVActions(device: TVControllerPS): void
  QueueWindowBlinderActions(device: WindowBlindersControllerPS): void
  QueueDoorActions(device: DoorControllerPS): void
}

declare interface EveningPreset extends SmartHousePreset {

  GetPresetName(): CName
  QueueSwitchActions(device: SimpleSwitchControllerPS): void
  QueueRadioActions(device: RadioControllerPS): void
  QueueTVActions(device: TVControllerPS): void
  QueueWindowBlinderActions(device: WindowBlindersControllerPS): void
  QueueDoorActions(device: DoorControllerPS): void
}

declare interface SoundSystem extends InteractiveMasterDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetController(): SoundSystemController
  GetDevicePS(): SoundSystemControllerPS
}

declare interface SoundSystemController extends MasterController {

  GetPS(): SoundSystemControllerPS
}

declare interface SoundSystemControllerPS extends MasterControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  GameAttached(): void
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(outActions: DeviceAction[], context: GetActionsContext): void
  GetQuickHackActionsExternal(outActions: DeviceAction[], context: GetActionsContext): void
  ActionChangeMusic(settings: SoundSystemSettings): ChangeMusicAction
  OnChangeMusicAction(evt: ChangeMusicAction): EntityNotificationType
  EvaluateQuickHacksAvailability(settings: MusicSettings): void
  OnRefreshSlavesEvent(evt: RefreshSlavesEvent): EntityNotificationType
  RefreshSlaves(): void
  OnRefreshSlavesState(evt: RefreshSlavesState): EntityNotificationType
  RefreshSlavesState(): void
  OnSetDeviceON(evt: SetDeviceON): EntityNotificationType
  OnSetDeviceOFF(evt: SetDeviceOFF): EntityNotificationType
  OnQuestForceOFF(evt: QuestForceOFF): EntityNotificationType
  OnQuestForceON(evt: QuestForceON): EntityNotificationType
  OnToggleON(evt: ToggleON): EntityNotificationType
  RefreshSlavesState_Event(): void
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface SoundSystemSettings {

}

declare interface SpeakerControllerPS extends ScriptableDeviceComponentPS {

  OnInstantiated(): Bool
  Initialize(): void
  GameAttached(): void
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  GetGlitchSFX(): CName
  UseOnlyGlitchSFX(): Bool
  GetCurrentStation(): CName
  SetCurrentStation(station: CName): void
  GetRange(): number
  ActionQuickHackDistraction(): QuickHackDistraction
  OnQuickHackDistraction(evt: QuickHackDistraction): EntityNotificationType
  OnChangeMusicAction(evt: ChangeMusicAction): EntityNotificationType
  CreateDeafeningMusic(): MusicSettings
  GetSoundName(music: ERadioStationList): CName
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface SpeakerSetup {

}

declare interface PlayRadio extends MusicSettings {

  SetSoundName(soundname: ERadioStationList): void
  GetStation(): ERadioStationList
  GetSoundName(): CName
}

declare interface RefreshSlavesState extends Event {

}

declare interface NightPreset extends SmartHousePreset {

  GetPresetName(): CName
  GetIconName(): CName
  QueueSwitchActions(device: SimpleSwitchControllerPS): void
  QueueRadioActions(device: RadioControllerPS): void
  QueueTVActions(device: TVControllerPS): void
  QueueWindowBlinderActions(device: WindowBlindersControllerPS): void
  QueueDoorActions(device: DoorControllerPS): void
}

declare interface SimpleSwitch extends InteractiveMasterDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetController(): SimpleSwitchController
  GetDevicePS(): SimpleSwitchControllerPS
  TurnOnDevice(): void
  TurnOffDevice(): void
  SetDiodeAppearance(on: Bool): void
  PlayAnimation(id: CName): void
  TurnOnLights(): void
  DeterminGameplayRole(): EGameplayRole
}

declare interface SimpleSwitchController extends MasterController {

  GetPS(): SimpleSwitchControllerPS
}

declare interface DeviceSystemBase extends InteractiveMasterDevice {

  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  AdjustInteractionComponent(): void
}

declare interface PlaySoundEvent extends MusicSettings {

  GetSoundName(): CName
  SetSoundName(soundname: CName): void
}

declare interface SecurityArea extends InteractiveMasterDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnDetach(): Bool
  OnSlaveStateChanged(evt: PSDeviceChangedEvent): Bool
  OnRegisterTimeListeners(evt: RegisterTimeListeners): Bool
  RegisterTimeSystemListeners(): void
  UnregisterTimeSystemListeners(): void
  OnTransition(evt: Transition): Bool
  OnManageAreaComponent(evt: ManageAreaComponent): Bool
  GetDevicePS(): SecurityAreaControllerPS
  OnAreaEnter(evt: AreaEnteredEvent): Bool
  OnAreaExit(evt: AreaExitedEvent): Bool
  OnAreaExitInternal(obj: GameObject, triggerID: EntityID): void
  AdjustInteractionComponent(): void
  GetDefaultHighlight(): FocusForcedHighlightData
  OnQuestIllegalActionAreaNotification(evt: QuestIllegalActionAreaNotification): Bool
  OnQuestCombatActionAreaNotification(evt: QuestCombatActionAreaNotification): Bool
  OnQuestAddTransition(evt: QuestAddTransition): Bool
  OnQuestRemoveTransition(evt: QuestRemoveTransition): Bool
  OnQuestExecuteTranstion(evt: QuestExecuteTransition): Bool
  SendFakeExitEventToObjectsInsideMe(): void
}

declare interface SecurityAreaController extends MasterController {

  GetPS(): SecurityAreaControllerPS
}

declare interface SecuritySystem extends DeviceSystemBase {

  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetDefaultHighlight(): FocusForcedHighlightData
  GetController(): SecuritySystemController
  OnSlaveStateChanged(evt: PSDeviceChangedEvent): Bool
  OnQuestIllegalActionNotification(evt: QuestIllegalActionNotification): Bool
  OnQuestCombatActionNotification(evt: QuestCombatActionNotification): Bool
  OnSetSecuritySystemState(evt: SetSecuritySystemState): Bool
  OnQuestAuthorizePlayer(evt: AuthorizePlayerInSecuritySystem): Bool
  OnQuestBlackListPlayer(evt: BlacklistPlayer): Bool
  OnQuestExclusiveQuestControl(evt: SuppressSecuritySystemStateChange): Bool
  OnQuestChangeSecuritySystemAttitudeGroup(evt: QuestChangeSecuritySystemAttitudeGroup): Bool
  OnMaraudersMapDeviceDebug(sink: MaraudersMapDevicesSink): void
}

declare interface SecuritySystemController extends DeviceSystemBaseController {
}

declare interface PhysicalHackingEvent extends Event {

}

declare interface TriggerPlayerAreaCheck extends Event {

}

declare interface QuestIllegalActionNotification extends QuestSecuritySystemInput {

  GetFriendlyDescription(): string
}

declare interface QuestCombatActionNotification extends QuestSecuritySystemInput {

  GetFriendlyDescription(): string
}

declare interface NewCycleEvent extends Event {

}

declare interface MovableDevice extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  OnGameAttached(): Bool
  EnterWorkspot(activator: GameObject, freeCamera?: Bool, componentName?: CName, syncSlotName?: CName): void
  OnActionDemolition(evt: ActionDemolition): Bool
  OnActionMoveObstacle(evt: MoveObstacle): Bool
  HandleMoveDevice(): void
  PlayTransformAnim(): void
  UpdateAnimState(): void
  DeterminGameplayRole(): EGameplayRole
  UpdateOffMeshLinks(): void
  CheckCurrentSide(): void
}

declare interface MovableDeviceController extends ScriptableDC {

  GetPS(): MovableDeviceControllerPS
}

declare interface MovableDeviceControllerPS extends ScriptableDeviceComponentPS {

  GetActionName(): string
  GameAttached(): void
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  ActionMoveObstacle(interactionTweak: TweakDBID): MoveObstacle
  OnActionMoveObstacle(evt: MoveObstacle): EntityNotificationType
  OnActionDemolition(evt: ActionDemolition): EntityNotificationType
  WasDeviceMoved(): Bool
}

declare interface DemolitionContainer extends BaseSkillCheckContainer {

  Initialize(container: BaseSkillCheckContainer): void
}

declare interface MovableDeviceSetup {

}

declare interface MoveObstacle extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
}

declare interface MovableQuestTrigger extends GameObject {

  OnAreaEnter(trigger: AreaEnteredEvent): Bool
  OnAreaExit(trigger: AreaExitedEvent): Bool
}

declare interface OutputValidationDataStruct {

  /** @noSelf **/
  Construct(evt: SecuritySystemInput, currentReprimender: EntityID, breachedAreas: PersistentID[]): OutputValidationDataStruct
  /** @noSelf **/
  IsDuplicated(self: OutputValidationDataStruct, evt: SecuritySystemInput, currentReprimender: EntityID, currentlyBreachedAreas: PersistentID[]): Bool
}

declare interface NPCDebugInfo {

  /** @noSelf **/
  IsValid(self: NPCDebugInfo): Bool
}

declare interface Time {

}

declare interface WeakFence extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  GetController(): WeakFenceController
  GetDevicePS(): WeakFenceControllerPS
  OnActivateDevice(evt: ActivateDevice): Bool
  OnActionEngineering(evt: ActionEngineering): Bool
  PlayWorkspotAnimations(): void
  OnWorkspotFinished(componentName: CName): Bool
  CheckCurrentSide(): void
  UpdateAnimState(): void
  DeterminGameplayRole(): EGameplayRole
  EnableOffMeshConnections(): void
  DisableOffMeshConnections(): void
}

declare interface WeakFenceController extends ScriptableDC {
}

declare interface WeakFenceControllerPS extends ScriptableDeviceComponentPS {

  GameAttached(): void
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  ActionEngineering(context: GetActionsContext): ActionEngineering
  OnActionEngineering(evt: ActionEngineering): EntityNotificationType
  OnActivateDevice(evt: ActivateDevice): EntityNotificationType
}

declare interface WeakFenceSetup {

}

declare interface Mainframe extends BaseAnimatedDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnSetQuestFact(evt: FactQuickHack): Bool
  GetController(): MainframeController
  GetDevicePS(): MainframeControllerPS
}

declare interface MainframeController extends BaseAnimatedDeviceController {

  GetPS(): MainframeControllerPS
}

declare interface MainframeControllerPS extends BaseAnimatedDeviceControllerPS {

  OnActivateDevice(evt: ActivateDevice): EntityNotificationType
  ActionSetQuestFact(): FactQuickHack
  OnSetQuestFact(evt: FactQuickHack): EntityNotificationType
}

declare interface State extends MorphData {

}

declare interface Blacklist extends MorphData {

}

declare interface Reprimand extends MorphData {

}

declare interface ProtectedEntities extends MorphData {

}

declare interface EntitiesAtGate extends MorphData {

}

declare interface SecuritySystemMorphData {

}

declare interface RoadBlock extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  GetController(): RoadBlockController
  GetDevicePS(): RoadBlockControllerPS
  OnToggleBlockade(evt: ToggleBlockade): Bool
  OnQuickHackToggleBlockade(evt: QuickHackToggleBlockade): Bool
  OnQuestForceRoadBlockadeActivate(evt: QuestForceRoadBlockadeActivate): Bool
  OnQuestForceRoadBlockadeDeactivate(evt: QuestForceRoadBlockadeDeactivate): Bool
  OnActivateDevice(evt: ActivateDevice): Bool
  OnDeactivateDevice(evt: DeactivateDevice): Bool
  OnPhysicalDestructionEvent(evt: PhysicalDestructionEvent): Bool
  DeactivateDevice(): void
  ActivateDevice(): void
  ToggleBlockade(immediate: Bool): void
  Animate(immediate: Bool): void
  TransformAnimate(immediate: Bool): void
  ToggleOffMeshConnection(toggle: Bool): void
  DeterminGameplayRole(): EGameplayRole
}

declare interface RoadBlockController extends ScriptableDC {

  GetPS(): RoadBlockControllerPS
}

declare interface UnstablePlatform extends BaseAnimatedDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnAreaEnter(evt: AreaEnteredEvent): Bool
}

declare interface GlitchedTurret extends Device {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetController(): GlitchedTurretController
  GetDevicePS(): GlitchedTurretControllerPS
  OnGameAttached(): Bool
  TurnOnDevice(): void
  OnQuestForceGlitch(evt: QuestForceGlitch): Bool
  DeterminGameplayRole(): EGameplayRole
  HasAnyDirectInteractionActive(): Bool
}

declare interface GlitchedTurretController extends ScriptableDC {

  GetPS(): GlitchedTurretControllerPS
}

declare interface GlitchedTurretControllerPS extends ScriptableDeviceComponentPS {

  OnInstantiated(): Bool
  Initialize(): void
  GetQuestActions(outActions: DeviceAction[], context: GetActionsContext): void
  ActionQuestForceGlitch(): QuestForceGlitch
  OnQuestForceGlitch(evt: QuestForceGlitch): EntityNotificationType
}

declare interface QuestForceGlitch extends ActionBool {

  SetProperties(): void
}

declare interface Coder extends BasicDistractionDevice {

  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
}

declare interface CoderController extends ScriptableDC {

  GetPS(): CoderControllerPS
}

declare interface CoderControllerPS extends BasicDistractionDeviceControllerPS {

  ActionAuthorizeUser(): AuthorizeUser
  OnAuthorizeUser(evt: AuthorizeUser): EntityNotificationType
  GetActions(outActions: DeviceAction[], context: GetActionsContext): Bool
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface DoorProximityDetector extends ProximityDetector {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnDetach(): Bool
  GetDevicePS(): DoorProximityDetectorControllerPS
  GetController(): DoorProximityDetectorController
  TurnOffDevice(): void
  TurnOnDevice(): void
  LockDevice(shouldLock: Bool): void
  TriggerAlarmBehavior(yes: Bool): void
  OnSecuritySystemOutput(evt: SecuritySystemOutput): Bool
  IsAlarmTriggered(): Bool
  OnAlarmBlink(evt: AlarmEvent): Bool
  CancelAlarmCallback(): void
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
}

declare interface DoorProximityDetectorController extends ScriptableDC {

  GetPS(): DoorProximityDetectorControllerPS
}

declare interface DoorProximityDetectorControllerPS extends ScriptableDeviceComponentPS {

  OnSecuritySystemOutput(evt: SecuritySystemOutput): EntityNotificationType
  GetQuestActions(outActions: DeviceAction[], context: GetActionsContext): void
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface LaserDetector extends ProximityDetector {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetDevicePS(): LaserDetectorControllerPS
  GetController(): LaserDetectorController
  TurnOffDevice(): void
  TurnOnDevice(): void
  LockDevice(on: Bool): void
  ChangeLasersColor(toGreen: Bool): void
}

declare interface LaserDetectorController extends ScriptableDC {

  GetPS(): LaserDetectorControllerPS
}

declare interface LaserDetectorControllerPS extends ScriptableDeviceComponentPS {

  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface SecurityGate extends InteractiveMasterDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetDevicePS(): SecurityGateControllerPS
  GetController(): SecurityGateController
  OnAreaEnter(evt: AreaEnteredEvent): Bool
  OnAreaExit(evt: AreaExitedEvent): Bool
  OnSecurityGateResponse(evt: SecurityGateResponse): Bool
  OnInitiateScanner(evt: InitiateScanner): Bool
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
  DeterminGameplayRole(): EGameplayRole
}

declare interface SecurityGateController extends MasterController {

  GetPS(): SecurityGateControllerPS
}

declare interface SecurityGateLock extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetDevicePS(): SecurityGateLockControllerPS
  GetController(): SecurityGateLockController
  OnAreaEnter(evt: AreaEnteredEvent): Bool
  OnAreaExit(evt: AreaExitedEvent): Bool
  OnUpdateGatePosition(evt: UpdateGatePosition): Bool
  UpdateGatePosition(): void
}

declare interface SecurityGateLockController extends ScriptableDC {

  GetPS(): SecurityGateLockControllerPS
}

declare interface SecurityGateLockControllerPS extends ScriptableDeviceComponentPS {

  IsLocked(): Bool
  UpdateTrespassersList(evt: TriggerEvent, isEntering: Bool): void
  IsTrespasserOnTheList(trespasser: ScriptedPuppet, index: number): Bool
  UpdateTrespasserEntry(index: number, isEntering: Bool, areaName: CName): void
  IsLegallyLeaving(t: TrespasserEntry): Bool
  AddTrespasserEntry(trespasser: ScriptedPuppet, areaName: CName): void
  RemoveTrespasserEntry(index: number): void
  IsTrespasserOutside(index: number): Bool
  OnForceUnlock(evt: SecurityGateForceUnlock): EntityNotificationType
  UnlockGate(): void
  LockGate(expireToken: Bool): void
  UpdateGatePosition(): void
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface UpdateGatePosition extends Event {

}

declare interface SecurityLocker extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetDevicePS(): SecurityLockerControllerPS
  GetController(): SecurityLockerController
  CutPower(): void
  TurnOnDevice(): void
  TurnOffDevice(): void
  TurnOffScreen(): void
  TurnOnScreen(): void
  OnUseSecurityLocker(evt: UseSecurityLocker): Bool
  OnDisarm(evt: Disarm): Bool
  DisarmUser(evt: UseSecurityLocker): void
  ReturnArms(evt: UseSecurityLocker): void
  TransferItems(items: gameItemData[], from: GameObject, to: GameObject): void
  ActivateCyberwere(activate: Bool): void
  DeterminGameplayRole(): EGameplayRole
}

declare interface SecurityLockerController extends ScriptableDC {

  GetPS(): SecurityLockerControllerPS
}

declare interface SecurityLockerControllerPS extends ScriptableDeviceComponentPS {

  ShouldDisableCyberware(): Bool
  GetAuthorizationLevel(): ESecurityAccessLevel
  GetIsEmpty(): Bool
  GetIsStoringPlayerEquipement(): Bool
  GetStoreSFX(): CName
  GetReturnSFX(): CName
  Initialize(): void
  ActionUseSecurityLocker(executor: GameObject): UseSecurityLocker
  OnUseSecurityLocker(evt: UseSecurityLocker): EntityNotificationType
  ResolvePersonalLinkConnection(evt: TogglePersonalLink, abortOperation: Bool): void
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface SecurityLockerProperties {

}

declare interface UseSecurityLocker extends ActionBool {

  SetProperties(shouldDeposit: Bool): void
  GetTweakDBChoiceRecord(): string
}

declare interface Disarm extends Event {

}

declare interface Arm extends Event {

}

declare interface SecurityLockerUserEntry {

}

declare interface SmokeMachine extends BasicDistractionDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnPersitentStateInitialized(evt: GameAttachedEvent): Bool
  OnOverloadDevice(evt: OverloadDevice): Bool
  StartDistraction(loopAnimation?: Bool): void
  GetDevicePS(): SmokeMachineControllerPS
  GetController(): SmokeMachineController
  OnAreaEnter(evt: AreaEnteredEvent): Bool
  OnAreaExit(evt: AreaExitedEvent): Bool
  GetEntitiesInArea(): Entity[]
  ApplyStatusEffect(): void
  RemoveStatusEffect(): void
  OnRevealDeviceRequest(evt: RevealDeviceRequest): Bool
  CreateHighlight(highlightType: EFocusForcedHighlightType): FocusForcedHighlightData
  ToggleHighlightOnTargets(toggle: Bool): void
  ToggleHighlightOnSingleTarget(toggle: Bool, id: EntityID): void
  DeterminGameplayRole(): EGameplayRole
}

declare interface SmokeMachineController extends BasicDistractionDeviceController {

  GetPS(): SmokeMachineControllerPS
}

declare interface SmokeMachineControllerPS extends BasicDistractionDeviceControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  ActionOverloadDevice(): OverloadDevice
  OnOverloadDevice(evt: OverloadDevice): EntityNotificationType
}

declare interface EngineeringContainer extends BaseSkillCheckContainer {

  Initialize(container: BaseSkillCheckContainer): void
}

declare interface HackEngContainer extends BaseSkillCheckContainer {

  Initialize(container: BaseSkillCheckContainer): void
}

declare interface Speaker extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnPersitentStateInitialized(evt: GameAttachedEvent): Bool
  TurnOnDevice(): void
  TurnOffDevice(): void
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
  OnChangeMusicAction(evt: ChangeMusicAction): Bool
  StopAllSounds(): void
  PlayAllSounds(): void
  StartGameEffect(effect: ESoundStatusEffects): void
  OnDelayEvent(evt: DelayEvent): Bool
  CreateGameEffect(): void
  StopGameEffect(): void
  OnTargetAcquired(evt: TargetAcquiredEvent): Bool
  OnTargetLost(evt: TargetLostEvent): Bool
  ApplyStatusEffect(target: GameObject): void
  RemoveStatusEffect(target: GameObject): void
  GetDevicePS(): SpeakerControllerPS
  GetController(): SpeakerController
  DeterminGameplayRole(): EGameplayRole
}

declare interface SpeakerController extends ScriptableDC {

  GetPS(): SpeakerControllerPS
}

declare interface InvisibleSceneStash extends Device {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnQuestUndressPlayer(evt: UndressPlayer): Bool
  OnQuestDressPlayer(evt: DressPlayer): Bool
  GetController(): InvisibleSceneStashController
  GetDevicePS(): InvisibleSceneStashControllerPS
}

declare interface InvisibleSceneStashController extends ScriptableDC {

  GetPS(): InvisibleSceneStashControllerPS
}

declare interface InvisibleSceneStashControllerPS extends ScriptableDeviceComponentPS {

  StoreItems(items: ItemID[]): void
  GetItems(): ItemID[]
  ClearStoredItems(): void
}

declare interface UndressPlayer extends Event {

  GetFriendlyDescription(): string
}

declare interface DressPlayer extends Event {

  GetFriendlyDescription(): string
}

declare interface CrossingLightController extends TrafficLightController {

  GetPS(): CrossingLightControllerPS
}

declare interface CrossingLightControllerPS extends TrafficLightControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  GameAttached(): void
  GetGreenSFX(): CName
  GetRedSFX(): CName
}

declare interface CrossingLightSetup {

}

declare interface CrossingLight extends TrafficLight {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetController(): CrossingLightController
  GetDevicePS(): CrossingLightControllerPS
  CommenceChangeToRed(): void
  CommenceChangeToGreen(): void
  CompleteLightChangeSequence(): void
  PlayTrafficNotificationSound(status: worldTrafficLightColor): void
  StartBlinking(): void
  StopBlinking(): void
}

declare interface OpenStash extends ActionBool {

  SetProperties(): void
}

declare interface Stash extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetDevicePS(): StashControllerPS
  GetController(): StashController
  OnOpenStash(evt: OpenStash): Bool
}

declare interface StashController extends ScriptableDC {

  GetPS(): StashControllerPS
}

declare interface StashControllerPS extends ScriptableDeviceComponentPS {

  ActionOpenStash(): OpenStash
  OnOpenStash(evt: OpenStash): EntityNotificationType
  GetActions(outActions: DeviceAction[], context: GetActionsContext): Bool
}

declare interface InitiateTrafficLightChange extends ActionBool {

  SetProperties(): void
}

declare interface TrafficIntersectionManagerController extends MasterController {

  GetPS(): TrafficIntersectionManagerControllerPS
}

declare interface TrafficIntersectionManagerControllerPS extends MasterControllerPS {

  ActionInitiateTrafficLightChange(): InitiateTrafficLightChange
  GetQuestActions(outActions: DeviceAction[], context: GetActionsContext): void
  OnInitiateTrafficLightChange(evt: InitiateTrafficLightChange): EntityNotificationType
  HandleLightChangeRequest(): void
  SetLightChangeRequest(newColor: worldTrafficLightColor): void
  InitiateChangeLightsSequenceForEntireIntersection(): void
  SetLightsSequenceForEntireIntersection(newColor: worldTrafficLightColor): void
  GetDesiredTrafficLightState(): worldTrafficLightColor
  ToggleLights(): void
}

declare interface ToggleLight extends ActionBool {

  SetProperties(status: worldTrafficLightColor): void
}

declare interface LightSwitchRequest extends Event {

}

declare interface TrafficPersistentData {

}

declare interface TrafficLightResaveData {

}

declare interface TrafficZebra extends TrafficLight {

  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetController(): TrafficZebraController
  GetDevicePS(): TrafficZebraControllerPS
  OnTrafficLightChangeEvent(evt: TrafficLightChangeEvent): Bool
  HandleRedLight(): void
  HandleGreenLight(): void
}

declare interface TrafficZebraController extends TrafficLightController {

  GetPS(): TrafficZebraControllerPS
}

declare interface TrafficZebraControllerPS extends TrafficLightControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  GameAttached(): void
}

declare interface TrafficLightGreen extends ActionBool {

  SetProperties(): void
}

declare interface TrafficLightRed extends ActionBool {

  SetProperties(): void
}

declare interface ChestPress extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  GetController(): ChestPressController
  GetDevicePS(): ChestPressControllerPS
  DeterminGameplayRole(): EGameplayRole
  OnChestPressWeightHack(evt: ChestPressWeightHack): Bool
  OnE3Hack_QuestPlayAnimationWeightLift(evt: E3Hack_QuestPlayAnimationWeightLift): Bool
  OnE3Hack_QuestPlayAnimationKillNPC(evt: E3Hack_QuestPlayAnimationKillNPC): Bool
}

declare interface ChestPressController extends ScriptableDC {

  GetPS(): ChestPressControllerPS
}

declare interface ChestPressControllerPS extends ScriptableDeviceComponentPS {

  OnInstantiated(): Bool
  Initialize(): void
  GameAttached(): void
  PushPersistentData(): void
  GetFactOnQHack(): CName
  ActionChestPressWeightHack(): ChestPressWeightHack
  ActionE3Hack_QuestPlayAnimationWeightLift(): E3Hack_QuestPlayAnimationWeightLift
  ActionE3Hack_QuestPlayAnimationKillNPC(): E3Hack_QuestPlayAnimationKillNPC
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  GetQuestActions(outActions: DeviceAction[], context: GetActionsContext): void
  OnChestPressWeightHack(evt: ChestPressWeightHack): EntityNotificationType
  OnE3Hack_QuestPlayAnimationWeightLift(evt: E3Hack_QuestPlayAnimationWeightLift): EntityNotificationType
  OnE3Hack_QuestPlayAnimationKillNPC(evt: E3Hack_QuestPlayAnimationKillNPC): EntityNotificationType
}

declare interface ChestPressWeightHack extends ActionBool {

  SetProperties(): void
  GetInteractionIcon(): ChoiceCaptionIconPart_Record
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
}

declare interface E3Hack_QuestPlayAnimationWeightLift extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
}

declare interface E3Hack_QuestPlayAnimationKillNPC extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsAvailable(device: ScriptableDeviceComponentPS): Bool
  /** @noSelf **/
  IsClearanceValid(clearance: Clearance): Bool
  /** @noSelf **/
  IsContextValid(context: GetActionsContext): Bool
}

declare interface AnimFeature_ChestPress extends AnimFeature {

}

declare interface AlarmLightController extends ScriptableDC {

  GetPS(): AlarmLightControllerPS
}

declare interface AlarmLightControllerPS extends BasicDistractionDeviceControllerPS {

  GetAlarmState(): ESecuritySystemState
  OnQuestForceSecuritySystemSafe(evt: QuestForceSecuritySystemSafe): EntityNotificationType
  OnQuestForceSecuritySystemArmed(evt: QuestForceSecuritySystemArmed): EntityNotificationType
  OnSecurityAlarmBreachResponse(evt: SecurityAlarmBreachResponse): EntityNotificationType
  OnSecuritySystemOutput(evt: SecuritySystemOutput): EntityNotificationType
}

declare interface AlarmLight extends BasicDistractionDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  OnSecurityAlarmBreachResponse(evt: SecurityAlarmBreachResponse): Bool
  OnQuestForceSecuritySystemSafe(evt: QuestForceSecuritySystemSafe): Bool
  OnQuestForceSecuritySystemArmed(evt: QuestForceSecuritySystemArmed): Bool
  OnSecuritySystemOutput(evt: SecuritySystemOutput): Bool
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
  UpdateLights(): void
  TurnOnLights(): void
  TurnOffLights(): void
  StartBlinking(): void
  StopBlinking(): void
  SendStim(): void
  StopStim(): void
  CutPower(): void
  TurnOnDevice(): void
  TurnOffDevice(): void
  GetController(): AlarmLightController
  GetDevicePS(): AlarmLightControllerPS
  DeterminGameplayRole(): EGameplayRole
}

declare interface GameplayLight extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetController(): GameplayLightController
  GetDevicePS(): GameplayLightControllerPS
  CutPower(): void
  TurnOnDevice(): void
  TurnOffDevice(): void
  StartGlitching(glitchState: EGlitchState, intensity?: number): void
  StopGlitching(): void
  TurnOnLights(): void
  TurnOffLights(): void
  StartBlinking(): void
  StopBlinking(): void
  IncludeLightsInVisibilityBoundsScript(): Bool
  DeterminGameplayRole(): EGameplayRole
}

declare interface GameplayLightController extends ElectricLightController {

  GetPS(): GameplayLightControllerPS
}

declare interface GameplayLightControllerPS extends ElectricLightControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  GameAttached(): void
  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
}

declare interface FanController extends BasicDistractionDeviceController {

  GetPS(): FanControllerPS
}

declare interface FanControllerPS extends BasicDistractionDeviceControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  IsRotatingClockwise(): Bool
  IsBladesSpeedRandomized(): Bool
  GetMaxRotationSpeed(): number
  GetTimeToMaxRotation(): number
  PushResaveData(data: FanResaveData): void
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface FanSetup {

}

declare interface FanResaveData {

}

declare interface Fan extends BasicDistractionDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnDeviceVisible(evt: gameDeviceVisibilityChangedEvent): Bool
  ResolveGameplayState(): void
  ResavePersistentData(ps: PersistentState): Bool
  GetController(): FanController
  GetDevicePS(): FanControllerPS
  CutPower(): void
  TurnOnDevice(): void
  TurnOffDevice(): void
  StartFan(): void
  StopFan(): void
  PLayTransformAnimation(): void
  StopTransformAnimation(): void
  PlayRegularAnimation(): void
  StopRegularAnimation(): void
  OnAreaEnter(evt: AreaEnteredEvent): Bool
  DoAttack(damageType: TweakDBID): void
}

declare interface NetrunnerChair extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetController(): NetrunnerChairController
  GetDevicePS(): NetrunnerChairControllerPS
  DeterminGameplayRole(): EGameplayRole
}

declare interface NetrunnerChairController extends ScriptableDC {

  GetPS(): NetrunnerChairControllerPS
}

declare interface NetrunnerChairControllerPS extends ScriptableDeviceComponentPS {

  CanCreateAnyQuickHackActions(): Bool
  GetQuickHackActions(actions: DeviceAction[], context: GetActionsContext): void
  ActionOverloadDevice(): OverloadDevice
  OnOverloadDevice(evt: OverloadDevice): EntityNotificationType
}

declare interface OdaCementBagController extends ScriptableDC {

  GetPS(): OdaCementBagControllerPS
}

declare interface OdaCementBagControllerPS extends ScriptableDeviceComponentPS {

  OnInstantiated(): Bool
  Initialize(): void
  GetCementCooldown(): number
}

declare interface OdaCementBag extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetDevicePS(): OdaCementBagControllerPS
  GetController(): OdaCementBagController
  OnHitEvent(hit: gameHitEvent): Bool
  OnDelayEvent(evt: DelayEvent): Bool
  DeterminGameplayRole(): EGameplayRole
  HasAnyDirectInteractionActive(): Bool
}

declare interface Stillage extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnThrowStuff(evt: ThrowStuff): Bool
  OnWorkspotFinished(componentName: CName): Bool
  OnQuestResetDeviceToInitialState(evt: QuestResetDeviceToInitialState): Bool
}

declare interface StillageController extends ScriptableDC {

  GetPS(): StillageControllerPS
}

declare interface StillageControllerPS extends ScriptableDeviceComponentPS {

  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  GetQuestActions(actions: DeviceAction[], context: GetActionsContext): void
  ActionThrowStuff(): ThrowStuff
  OnThrowStuff(evt: ThrowStuff): EntityNotificationType
  OnQuestResetDeviceToInitialState(evt: QuestResetDeviceToInitialState): EntityNotificationType
}

declare interface ThrowStuff extends ActionBool {

  SetProperties(): void
}

declare interface AnimatedSign extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  TurnOnDevice(): void
  TurnOffDevice(): void
  UpdateAnimState(): void
}

declare interface DelaySpawning extends Event {

}

declare interface VehicleDoorDetached extends ActionBool {

  SetProperties(slotString: string, source?: Bool): void
}

declare interface VendingTerminal extends InteractiveDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  ResolveGameplayState(): void
  OnDetach(): Bool
  GetBlackboardDef(): VendingMachineDeviceBlackboardDef
  CreateBlackboard(): void
  GetController(): VendingTerminalController
  GetDevicePS(): VendingTerminalControllerPS
  PushPersistentData(): void
  OnAreaEnter(evt: AreaEnteredEvent): Bool
  OnAreaExit(evt: AreaExitedEvent): Bool
  OnCraftItemForTarget(evt: CraftItemForTarget): Bool
  OnBuyItemFromVendor(evt: BuyItemFromVendor): Bool
  OnSellItemToVendor(evt: SellItemToVendor): Bool
  OnDispenceItemFromVendor(evt: DispenceItemFromVendor): Bool
  OnVendingMachineFinishedEvent(evt: VendingMachineFinishedEvent): Bool
  SendDataToUIBlackboard(TopText: string, BottomText: string): void
  DelayVendingMachineEvent(time: number, itemID: ItemID): void
  InitializeScreenDefinition(): void
}

declare interface VendingTerminalController extends ScriptableDC {

  GetPS(): VendingTerminalControllerPS
}

declare interface VendingTerminalControllerPS extends ScriptableDeviceComponentPS {

  Prepare(vendor: GameObject): void
  GetVendorDataManager(): VendorDataManager
  SetIsReady(value: Bool): void
  GetBlackboardDef(): VendingMachineDeviceBlackboardDef
}

declare interface BuyItemFromVendor extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  GetInkWidgetLibraryID(): CName
  GetInkWidgetTweakDBID(): TweakDBID
}

declare interface SellItemToVendor extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  GetInkWidgetLibraryID(): CName
  GetInkWidgetTweakDBID(): TweakDBID
}

declare interface CraftItemForTarget extends ActionBool {

  SetProperties(): void
  /** @noSelf **/
  IsDefaultConditionMet(device: ScriptableDeviceComponentPS, context: GetActionsContext): Bool
  GetInkWidgetLibraryID(): CName
  GetInkWidgetTweakDBID(): TweakDBID
}

declare interface VentilationAreaController extends MasterController {

  GetPS(): VentilationAreaControllerPS
}

declare interface VentilationArea extends InteractiveMasterDevice {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnDetach(): Bool
  GetController(): VentilationAreaController
  GetDevicePS(): VentilationAreaControllerPS
  OnActivateDevice(evt: ActivateDevice): Bool
  OnRevealDeviceRequest(evt: RevealDeviceRequest): Bool
  ToggleHighlightOnTargets(toogle: Bool): void
  ToggleHighlightOnSingleTarget(toogle: Bool, id: EntityID): void
  CreateHighlight(highlightType: EFocusForcedHighlightType): FocusForcedHighlightData
  PlayGameEffect(): void
  StopGameEffect(): void
  GetEntitiesInArea(): Entity[]
  ApplyStatusEffect(effectTDBID: string): void
  OnAreaEnter(evt: AreaEnteredEvent): Bool
  OnAreaExit(evt: AreaExitedEvent): Bool
  GetDefaultHighlight(): FocusForcedHighlightData
  GetStimTarget(): GameObject
  GetDistractionControllerSource(effectData?: AreaEffectData): Entity
}

declare interface VentilationEffector extends ActivatedDeviceTransfromAnim {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  GetDevicePS(): VentilationEffectorControllerPS
  PushPersistentData(): void
  OnToggleEffect(evt: ToggleEffect): Bool
  SetEffects(state: Bool): void
  DeterminGameplayRole(): EGameplayRole
}

declare interface VentilationEffectorController extends ScriptableDC {
}

declare interface VentilationEffectorControllerPS extends ActivatedDeviceControllerPS {

  ActionToggleEffect(): ToggleEffect
  GetActions(actions: DeviceAction[], context: GetActionsContext): Bool
  OnToggleEffect(evt: ToggleEffect): EntityNotificationType
  GetDeviceIconTweakDBID(): TweakDBID
  GetBackgroundTextureTweakDBID(): TweakDBID
}

declare interface DispenseFreeItem extends Event {

  GetFriendlyDescription(): string
}

declare interface VirtualMasterDevice extends Device {

}

declare interface VirtualMasterDevicePS extends ScriptableDeviceComponentPS {

  InitializeVirtualDevice(): void
  DoCustomShit(devices: DeviceComponentPS[], on: Bool): void
  GetGlobalActions(actions: DeviceAction[]): void
}

declare interface WireRepairable extends GameObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnInteractionActivated(evt: InteractionEvent): Bool
  OnBasicInteraction(choiceEvent: InteractionChoiceEvent): Bool
  OnVisionModeVisual(evt: gameVisionModeVisualEvent): Bool
  ChangeState(newstate: Bool): Bool
  ChangeWiringBrokenOnConnectedPanels(newWiringBroken: Bool): void
}

declare interface EffectObjectProvider_VentilationAreaEntities extends EffectObjectProvider_Scripted {

  Process(ctx: EffectScriptContext, providerCtx: EffectProviderScriptContext): void
}

declare interface ItemsLocalizationHelper extends IScriptable {

  /** @noSelf **/
  GetAbbreviatedItemStatName(type: gamedataStatType): string
}

declare interface UILocalizationKeys extends IScriptable {

  /** @noSelf **/
  Common_EuroDollar(): string
  /** @noSelf **/
  Inventory_NoSuitableItems(): string
  /** @noSelf **/
  Inventory_NoSlots(): string
}

declare interface CustomSystemUIPS extends VirtualSystemPS {
}

declare interface GrappleInteractionCondition extends InteractionScriptedCondition {

  Test(activatorObject: GameObject, hotSpotObject: GameObject): Bool
  IsAreaBetweenPlayerAndVictim(activatorObject: GameObject, hotSpotObject: GameObject): Bool
}

declare interface ContainerStateInteractionCondition extends InteractionScriptedCondition {

  Test(activatorObject: GameObject, hotSpotObject: GameObject): Bool
}

declare interface DeviceDirectInteractionCondition extends InteractionScriptedCondition {

  Test(activatorObject: GameObject, hotSpotObject: GameObject): Bool
}

declare interface IsPlayerNotInteractingWithDevice extends InteractionScriptedCondition {

  Test(activatorObject: GameObject, hotSpotObject: GameObject): Bool
}

declare interface DeviceRemoteInteractionCondition extends InteractionScriptedCondition {

  Test(activatorObject: GameObject, hotSpotObject: GameObject): Bool
  IsScannerTarget(hotSpotObject: GameObject): Bool
  IsLookaAtTarget(activatorObject: GameObject, hotSpotObject: GameObject): Bool
  ShouldEnableLayer(hotSpotObject: GameObject): Bool
}

declare interface AntiRadar extends WeaponObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnCollision(eventData: gameprojectileHitEvent): Bool
  OnHit(evt: gameHitEvent): Bool
  OnChargeStartedEvent(evt: ChargeStartedEvent): Bool
  OnChargeEndedEvent(evt: ChargeEndedEvent): Bool
  OnSensorJammed(evt: SensorJammed): Bool
  ChangeAppearance(newAppearance: CName): void
}

declare interface grenadeSpawner extends WeaponObject {

}

declare interface AttackDebugData {

}

declare interface ClaymoreMine extends WeaponObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnInitialize(eventData: gameprojectileSetUpEvent): Bool
  OnHit(evt: gameHitEvent): Bool
  AdjustRotation(): void
  OnAreaEnter(evt: AreaEnteredEvent): Bool
  OnAreaExit(evt: AreaExitedEvent): Bool
  Explode(): void
  OnRelease(evt: MineDespawnEvent): Bool
  OnArmed(evt: MineArmEvent): Bool
  OnScanningEvent(evt: ScanningEvent): Bool
  OnScanningLookedAt(evt: ScanningLookAtEvent): Bool
  ToggleTriggerAreaIndicator(visible: Bool): void
  OnMinePlace(evt: PlaceMineEvent): Bool
}

declare interface MineArmEvent extends Event {

}

declare interface MineDespawnEvent extends Event {

}

declare interface PlaceMineEvent extends Event {

}

declare interface Attack_Projectile extends IAttack {

  PrepareAttack(instigator: GameObject): gameprojectileSpawnerLaunchEvent
}

declare interface Attack_Beam extends Attack_Continuous {

  OnTick(weapon: WeaponObject): void
}

declare interface LaserSight extends Attack_Beam {

  OnTick(weapon: WeaponObject): void
  OnStop(weapon: WeaponObject): void
  HandleTargetEvents(weapon: WeaponObject, target: Entity): void
}

declare interface RoyceLaserSight extends Attack_Beam {

  OnTick(weapon: WeaponObject): void
  OnStop(weapon: WeaponObject): void
  HandleTargetEvents(weapon: WeaponObject, target: Entity): void
}

declare interface Bombus_Flame_Beam extends Attack_Continuous {

  OnTick(weapon: WeaponObject): void
}

declare interface nanowireGrenade extends BaseProjectile {

  OnInitialize(eventData: gameprojectileSetUpEvent): Bool
  StartTrailEffect(): void
  Reset(): void
  OnShoot(eventData: gameprojectileShootEvent): Bool
  OnShootTarget(eventData: gameprojectileShootTargetEvent): Bool
  OnTick(eventData: gameprojectileTickEvent): Bool
  OnCollision(eventData: gameprojectileHitEvent): Bool
  Explode(position: Vector4): void
  StopMovement(): void
}

declare interface EffectExecutor_NanowireGrenadePull extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
  PullTarget(target: GameObject, impactPosition: Vector4): void
}

declare interface piercingGrenade extends BaseProjectile {

  OnInitialize(eventData: gameprojectileSetUpEvent): Bool
  StartTrailEffect(): void
  OnShoot(eventData: gameprojectileShootEvent): Bool
  OnShootTarget(eventData: gameprojectileShootTargetEvent): Bool
  OnTick(eventData: gameprojectileTickEvent): Bool
  OnCollision(eventData: gameprojectileHitEvent): Bool
  Explode(position: Vector4): void
  Pierce(position: Vector4): void
  StopMovement(): void
}

declare interface MineDispenser extends WeaponObject {

}

declare interface MuteArm extends WeaponObject {

  OnChargeStartedEvent(evt: ChargeStartedEvent): Bool
  OnChargeEndedEvent(evt: ChargeEndedEvent): Bool
  ChangeAppearance(newAppearance: CName): void
  SetUpMuteArmBlackboard(enabled: Bool): void
}

declare interface drillMachineEvent extends Event {

}

declare interface drillMachine extends WeaponObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnRewireEvent(evt: RewireEvent): Bool
  OnScanEvent(evt: DrillScanEvent): Bool
  OnPostProcessEvent(evt: DrillScanPostProcessEvent): Bool
  ToggleScreenBack(isEnable: Bool): void
  TogglePostprocess(isEnable: Bool): void
  ToggleMinigameAnimation(isEnable: Bool): void
  ToggleFingerAnimation(isEnable: Bool): void
  OnDrillerInputAction(actionChosen: InteractionChoice): Bool
  OnDrillMachineEvent(evt: drillMachineEvent): Bool
  IsActive(): Bool
}

declare interface RewireComponent extends ScriptableComponent {

  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnRewireStart(rewireEvent: RewireEvent): Bool
  OnUpdate(dt: number): void
  RewireFinished(): void
  ToggleMovie(play: Bool): void
}

declare interface RewireEvent extends Event {

}

declare interface DrillMachineScanManager extends ScriptableComponent {

  OnDrillerScanEvent(evt: DrillerScanEvent): Bool
  OnUpdate(dt: number): void
  QueuePostProcessEvent(isEnabled: Bool): void
}

declare interface DrillerScanEvent extends Event {

}

declare interface DrillScanPostProcessEvent extends Event {

}

declare interface DrillScanEvent extends Event {

}

declare interface DrillerUIEvent extends Event {

}

declare interface RespawnHealthConsumable extends Event {

}

declare interface HealthConsumable extends gameCpoPickableItem {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnInteractionChoiceEvent(evt: InteractionChoiceEvent): Bool
  OnTurnOn(evt: RespawnHealthConsumable): Bool
}

declare interface InspectableItemObject extends ItemObject {

  DisplayScanButton(show: Bool): void
  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  IsClueScanned(clueName: CName): Bool
  OnInteractionActivated(evt: InteractionEvent): Bool
}

declare interface SInspectableClue {

}

declare interface ToggleBulletBendingEvent extends Event {

}

declare interface Katana extends WeaponObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnHit(evt: gameHitEvent): Bool
  QueueEventToPlayerEntity(): void
  GetSlotComponent(): SlotComponent
  OnToggleCollider(evt: ToggleBulletBendingEvent): Bool
  CalculateBendingVector(hitPosition: Vector4): Vector4
}

declare interface MagFieldHitEvent extends Event {

}

declare interface gameEffectExecutor_KatanaBulletBending extends EffectExecutor_Scripted {

  SpawnFX(tag: CName, object: GameObject, from: Vector4, to: Vector4, attachSlotName: CName): void
  Process(ctx: EffectScriptContext, target: Entity, hitPosition: Vector4): void
  SpawnRicochet(katana: Katana, hitPosition: Vector4, hitDirection: Vector4): void
  SpawnBeamSpark(katana: Katana, bladeTransform: Transform, hitPosition: Vector4, slotName: CName): void
  SpawnRicochetFx(katana: Katana, position: Vector4, direction: Vector4, slotName: CName): void
}

declare interface VirtualItem_TEMP extends GameObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnInteractionChoice(choice: InteractionChoiceEvent): Bool
  TransferItem(activator: GameObject): void
  HideVirtualItem(): void
}

declare interface BeamData {

}

declare interface SWeakPoints {

}

declare interface SCyberware {

}

declare interface WeaponCycleTriggerModeEvent extends Event {

}

declare interface ForwardEventToProjectileEvent extends Event {

}

declare interface SetActiveWeaponEvent extends Event {

}

declare interface RemoveActiveWeaponEvent extends Event {

}

declare interface QuickWheelEndUIStructure {

}

declare interface StatsManager extends IScriptable {

  /** @noSelf **/
  GetObjectDPS(obj: GameObject): DPSPackage
}

declare interface DPSPackage {

}

declare interface CommunityProxyPSPresentEvent extends Event {

}

declare interface DoorSystem extends DeviceSystemBase {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetController(): DoorSystemController
}

declare interface DoorSystemController extends BaseNetworkSystemController {

  GetPS(): DoorSystemControllerPS
}

declare interface DoorSystemControllerPS extends BaseNetworkSystemControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
}

declare interface PersonnelSystem extends DeviceSystemBase {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetController(): PersonnelSystemController
  GetDevicePS(): PersonnelSystemControllerPS
}

declare interface PersonnelSystemController extends DeviceSystemBaseController {

  GetPS(): PersonnelSystemControllerPS
}

declare interface PersonnelSystemControllerPS extends DeviceSystemBaseControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
}

declare interface SurveillanceSystem extends DeviceSystemBase {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  GetController(): SurveillanceSystemController
}

declare interface SurveillanceSystemController extends DeviceSystemBaseController {

  GetPS(): SurveillanceSystemControllerPS
}

declare interface SurveillanceSystemControllerPS extends DeviceSystemBaseControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  ActionRevealEnemies(): RevealEnemies
  GetActions(outActions: DeviceAction[], context: GetActionsContext): Bool
  OnRevealEnemies(evt: RevealEnemies): EntityNotificationType
}

declare interface RevealEnemies extends ActionBool {

  SetProperties(reveal: Bool): void
}

declare interface GrenadeProximitySensorTargetAcquiredEvent extends Event {

}

declare interface CuttingGrenadeDespawnEffectsEvent extends Event {

}

declare interface PhotoModePlayerEntityComponent extends ScriptableComponent {

  OnGameAttach(): void
  OnGameDetach(): void
  HasAllItemsFinishedLoading(): Bool
  PutOnFakeItem(itemToAdd: ItemID): void
  RemoveAllItems(areas: SEquipArea[]): void
  ListAllItems(): void
  GetAllAvailableItemTypes(): gamedataItemType[]
  GetWeaponInHands(): gamedataItemType
  IsItemOfThisType(item: ItemID, typesList: gamedataItemType[]): Bool
  AddAmmoForWeapon(weaponID: ItemID): void
  EquipWeaponOfThisType(typesList: gamedataItemType[]): void
  OnItemAddedToSlot(evt: ItemAddedToSlot): Bool
  StopWeaponShootEffects(): void
  SetMuzzleEffectEnabled(enabled: Bool): void
  IsMuzzleFireSupported(): Bool
  ClearInventory(): void
  SetupUnderwear(): void
  SetupInventory(isCurrentPlayerObjectCustomizable: Bool): void
  GetPhotoModeEquipAreas(equipmentData: EquipmentSystemPlayerData, withUnderwear: Bool): SEquipArea[]
  GetPhotoModeSlots(withUnderwear: Bool): gamedataEquipmentArea[]
  GetEquipArea(equipmentData: EquipmentSystemPlayerData, areaType: gamedataEquipmentArea): SEquipArea
}

declare interface DisarmComponent extends ScriptableComponent {

  OnGameAttach(): void
  OnDisarm(evt: Disarm): Bool
  OnArm(evt: Arm): Bool
  OnUnequipEnded(evt: UnequipEnd): Bool
  UnequipWeapons(): Bool
  DisarmOwner(): void
  ArmOwner(requester: GameObject): void
  GetWeapons(): gameItemData[]
  CleanUp(): void
  GetEquipmentSystem(): EquipmentSystem
  SendEquipmentSystemWeaponManipulationRequest(requestType: EquipmentManipulationAction, equipAnimType?: gameEquipAnimationType): void
  SendEquipmentSystemClearAllWeaponSlotsRequest(): void
}

declare interface ClearAllWeaponSlotsRequest extends PlayerScriptableSystemRequest {

}

declare interface UpdateWeaponStatsEvent extends Event {

}

declare interface PlayerWeaponSetupEvent extends Event {

}

declare interface PlayerClimbInfo extends IScriptable {

}

declare interface AverageNormalResult extends IScriptable {

  GetAverageNormal(): Vector4
  GetAverageSlope(): Vector4
  GetCentreNormal(): Vector4
  GetCentreSlope(): Vector4
  GetAveragePredictedNormal(): Vector4
  GetAveragePredictedSlope(): Vector4
  GetCentreMaterialName(): CName
}

declare interface AverageNormalQuery extends IScriptable {

  SetOwnerPosition(ownerPosition: Vector4): void
  SetOwnerDirection(ownerDirection: Vector4): void
  SetQueryDirection(queryDirection: Vector4): void
  SetQueryDistanceOffset(distanceOffset: number): void
  SetRadius(radius: number): void
  SetFilter(filter: QueryFilter): void
  SetQueryLength(queryLength: number): void
}

declare interface PlayerObstacleSystem extends IScriptable {

  GetCurrentClimbInfo(instigator: GameObject): PlayerClimbInfo
  GetSlopeInfo(instigator: GameObject): AverageNormalResult
  OnEnterCrouch(instigator: GameObject): void
  OnCoverDeactivation(instigator: GameObject): void
  OnAutoCoverActivation(instigator: GameObject): void
  ManualLeanLeft(instigator: GameObject): void
  ManualLeanRight(instigator: GameObject): void
  GetCoverDirection(instigator: GameObject): gamePlayerCoverDirection
  EnableQueriesForOwner(instigator: GameObject, queryToEnable_1: gamePlayerObstacleSystemQueryType, queryToEnable_2?: gamePlayerObstacleSystemQueryType, queryToEnable_3?: gamePlayerObstacleSystemQueryType): void
  DisableQueriesForOwner(instigator: GameObject, queryToDisable_1: gamePlayerObstacleSystemQueryType, queryToDisable_2?: gamePlayerObstacleSystemQueryType, queryToDisable_3?: gamePlayerObstacleSystemQueryType): void
}

declare interface PlayerVisionModeControllerInputListeners {

}

declare interface BraindanceControlsTransition extends DefaultTransition {

  SetBraindaneVisionModeBB(scriptInterface: StateGameScriptInterface, newMode: braindanceVisionMode): void
  SetLastBraindanceVisionMode(scriptInterface: StateGameScriptInterface, newMode: braindanceVisionMode): void
  SetBraindanceVisionFact(scriptInterface: StateGameScriptInterface, newMode: braindanceVisionMode): void
  SetCachedPlaySpeedPermVariable(scriptInterface: StateGameScriptInterface, stateContext: StateContext): void
  SetPlaybackSpeedInBlackboard(scriptInterface: StateGameScriptInterface, speed: scnPlaySpeed): void
  SetPlaybackDirectionInBlackboard(scriptInterface: StateGameScriptInterface, direction: scnPlayDirection): void
  IsCachedPlaySpeedSet(stateContext: StateContext): Bool
  GetCachedPlaySpeedPermVariable(stateContext: StateContext): scnPlaySpeed
  CanBraindanceEnterLayer(scriptInterface: StateGameScriptInterface, layer: braindanceVisionMode): Bool
  GetCurrentBraindanceVisionMode(scriptInterface: StateGameScriptInterface): braindanceVisionMode
  GetLastBraindanceVisionMode(scriptInterface: StateGameScriptInterface): braindanceVisionMode
  SetBraindanceVisionMode(scriptInterface: StateGameScriptInterface, newMode: braindanceVisionMode): void
  SendAudioEvents(scriptInterface: StateGameScriptInterface, BdStart: Bool): void
  CycleBraindanceVisionMode(scriptInterface: StateGameScriptInterface): void
  TogglePausePlayForward(scriptInterface: StateGameScriptInterface, stateContext: StateContext): void
  ForceBraindancePause(scriptInterface: StateGameScriptInterface, stateContext: StateContext): void
  CyclePlaySpeed(scriptInterface: StateGameScriptInterface, direction: scnPlayDirection): void
  SetPlaySpeedAndDirection(scriptInterface: StateGameScriptInterface, direction: scnPlayDirection, speed: scnPlaySpeed): void
  GetDistanceFromBraindanceTPPCameraToFPPCamera(scriptInterface: StateGameScriptInterface): number
  CheckTargetThirdPersonPositionCollisions(scriptInterface: StateGameScriptInterface, fppPosition: Vector4, fppOrientationEuler: EulerAngles, angle: number, distance: number, radius: number, queryFilter: QueryFilter, outPosition: Vector4): number
  OnBraindancePerspectiveChangedFromFirstPersonToThirdPerson(scriptInterface: StateGameScriptInterface): void
  EnableBraindanceLocomoition(scriptInterface: StateGameScriptInterface): void
  ToggleCameraControlEnabled(scriptInterface: StateGameScriptInterface, stateContext: StateContext, blendTime: number): void
  SetCameraControl(scriptInterface: StateGameScriptInterface, stateContext: StateContext, setState: Bool, blendTime: number): void
  SetBraindanceState(scriptInterface: StateGameScriptInterface, stateContext: StateContext, newState: Bool, blendTime: number): void
  SetBraindanceUiGameContext(scriptInterface: StateGameScriptInterface, uiContext: UIGameContext): void
  RemoveUiGameContext(scriptInterface: StateGameScriptInterface): void
  GetBraindancePauseInput(scriptInterface: StateGameScriptInterface): Bool
  GetPlayForwardInput(scriptInterface: StateGameScriptInterface): Bool
  CheckPlayForwardInput(scriptInterface: StateGameScriptInterface): Bool
  GetPlayBackwardInput(scriptInterface: StateGameScriptInterface): Bool
  CheckPlayBackwardInput(scriptInterface: StateGameScriptInterface): Bool
  GetRestartInput(scriptInterface: StateGameScriptInterface): Bool
  GetSwitchLayerInput(scriptInterface: StateGameScriptInterface): Bool
  GetBdCameraToggleInput(scriptInterface: StateGameScriptInterface): Bool
  IsPerspectiveTransitionOn(BlockPerspectiveSwitchTimer: number): Bool
  UpdatePerspectiveTransitionTimer(BlockPerspectiveSwitchTimer: number, timeDelta: number): void
  PrintDebugInfo(scriptInterface: StateGameScriptInterface): void
  GetBraindanceInputMask(scriptInterface: StateGameScriptInterface): SBraindanceInputMask
  SendAudioEventForBraindance(enable: Bool, scriptInterface: StateGameScriptInterface): void
  IsProgressAtBeggining(scriptInterface: StateGameScriptInterface): Bool
  IsProgressAtEnd(scriptInterface: StateGameScriptInterface): Bool
  GetChangeBraindanceStateRequest(scriptInterface: StateGameScriptInterface): Bool
  GetPauseBraindanceRequest(scriptInterface: StateGameScriptInterface): Bool
  GetRequestedEditorState(scriptInterface: StateGameScriptInterface): Bool
  SendClearBraindanceStateRequest(scriptInterface: StateGameScriptInterface): void
  SendClearBraindancePauseRequest(scriptInterface: StateGameScriptInterface): void
  IsResetting(scriptInterface: StateGameScriptInterface): Bool
  IsInEditorMode(scriptInterface: StateGameScriptInterface): Bool
  StartGlitchFx(scriptInterface: StateGameScriptInterface, fxState?: Bool): void
  StopGlitchFx(scriptInterface: StateGameScriptInterface): void
  SetEndRecordingNotificationState(newState: Bool, scriptInterface: StateGameScriptInterface): void
  ApplyBraindanceRestriction(scriptInterface: StateGameScriptInterface): void
  RemoveBraindanceRestriction(scriptInterface: StateGameScriptInterface): void
  ApplyNoMovementRestriction(scriptInterface: StateGameScriptInterface): void
  RemoveNoMovementRestriction(scriptInterface: StateGameScriptInterface): void
  ApplyNoHubRestrictionOnLocalPlayer(scriptInterface: StateGameScriptInterface): void
  RemoveNoHubRestrictionFromLocalPlayer(scriptInterface: StateGameScriptInterface): void
}

declare interface CameraContextBaseDecisions extends DefaultTransition {

}

declare interface CameraContextBaseEvents extends DefaultTransition {

  UpdateCameraParams(cameraParams: CName, scriptInterface: StateGameScriptInterface): void
}

declare interface LocomotionContextDecisions extends CameraContextBaseDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface LocomotionContextEvents extends CameraContextBaseEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  SendLocomotionCameraParams(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ConsumableContextDecisions extends CameraContextBaseDecisions {

}

declare interface ConsumableContextEvents extends CameraContextBaseEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface VehicleContextDecisions extends CameraContextBaseDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface VehicleContextEvents extends CameraContextBaseEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  SendVehicleCameraParams(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface TierIIIContextDecisions extends CameraContextBaseDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface TierIIIContextEvents extends CameraContextBaseEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateTier3CameraParams(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  GetPSMBlackboard(scriptInterface: StateGameScriptInterface): IBlackboard
}

declare interface TierIVContextDecisions extends CameraContextBaseDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface TierIVContextEvents extends CameraContextBaseEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface LadderEnterClimbContextDecisions extends CameraContextBaseDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface LadderEnterClimbContextEvents extends CameraContextBaseEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface LadderContextDecisions extends CameraContextBaseDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface LadderContextEvents extends CameraContextBaseEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface LadderClimbContextDecisions extends CameraContextBaseDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface LadderClimbContextEvents extends CameraContextBaseEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SpaceShuttleInteriorContextDecisions extends CameraContextBaseDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface SpaceShuttleInteriorContextEvents extends CameraContextBaseEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface BodyPickUpContextDecisions extends CameraContextBaseDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface BodyPickUpContextEvents extends CameraContextBaseEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface BodyCarryContextDecisions extends CameraContextBaseDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface BodyCarryContextEvents extends CameraContextBaseEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface BodyCarryFriendlyContextDecisions extends CameraContextBaseDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface BodyCarryFriendlyContextEvents extends CameraContextBaseEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface CarriedObject extends OldUpperBodyTransition {

}

declare interface CarriedObjectEvents extends OldUpperBodyEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  IsBodyDisposalOngoing(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  UpdateCarryStylePickUpAndDropParams(stateContext: StateContext, scriptInterface: StateGameScriptInterface, isFriendly: Bool): void
  SetCarryState(state: ECarryState, pickupAnimation?: number, instant?: Bool, stateContext?: StateContext, scriptInterface?: StateGameScriptInterface): void
  SetBodyPickUpCameraContext(stateContext: StateContext, value: Bool): void
  SetBodyCarryCameraContext(stateContext: StateContext, value: Bool): void
  SetBodyCarryFriendlyCameraContext(stateContext: StateContext, value: Bool): void
  SetStyle(style: gamePSMBodyCarryingStyle, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  SetForcedStyle(style: gamePSMBodyCarryingStyle, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ClearForcedStyle(stateContext: StateContext): void
  LockLeftHandAnimation(scriptInterface: StateGameScriptInterface, lockLeftHand: Bool): void
  GetStyle(stateContext: StateContext): gamePSMBodyCarryingStyle
  EnableAnimSet(enable: Bool, animSet: CName, scriptInterface: StateGameScriptInterface): void
  CleanUpCarryState(state: ECarryState, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ResetMountingAnimFeature(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ApplyInitGameplayRestrictions(scriptInterface: StateGameScriptInterface): void
  ApplyFriendlyCarryGameplayRestrictions(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateGameplayRestrictions(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  RemoveGameplayRestrictions(scriptInterface: StateGameScriptInterface): void
  DisableAndResetRagdoll(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  EvaluateWeaponUnequipping(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  EnableRagdoll(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface PickUpDecisions extends CarriedObject {

  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToRelease(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface PickUpEvents extends CarriedObjectEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  IsPickUpFromVehicleTrunk(scriptInterface: StateGameScriptInterface): Bool
}

declare interface CarryDecisions extends CarriedObject {

  IsPlayerAllowedToDropBody(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsBodyDropForced(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToDrop(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToDispose(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToForceDropBody(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsForceBodyDropRequested(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToRelease(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface CarryEvents extends CarriedObjectEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  RefreshCarryState(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  SyncJump(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdatePuppetCarryState(state: ECarryState, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface DropDecisions extends CarriedObject {

  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface DropEvents extends CarriedObjectEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface DisposeDecisions extends CarriedObject {

  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface DisposeEvents extends CarriedObjectEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ForceDropBodyEvents extends CarriedObjectEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ReleaseEvents extends CarriedObjectEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ControlsInactiveDecisions extends BraindanceControlsTransition {

  ToControlsActive(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ControlsInactiveEvents extends BraindanceControlsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ControlsActiveDecisions extends BraindanceControlsTransition {

  ToControlsInactive(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ControlsActiveEvents extends BraindanceControlsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ProcessGlitchFX(scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface CombatGadgetTransitions extends DefaultTransition {

  SetLeftHandAnimationAnimFeature(scriptInterface: StateGameScriptInterface, newState: Bool): void
  SetCombatGadgetQuickthrowAnimFeature(scritpInterface: StateGameScriptInterface, newState: Bool): void
  SetBlackbordThrowUnequip(scriptInterface: StateGameScriptInterface, newThrowUnequip: Bool): void
  SetThrowableAnimFeatureOnGrenade(scriptInterface: StateGameScriptInterface, newState: number, target: GameObject): void
  SetThrowableAnimFeatureOnGrenade(scriptInterface: StateGameScriptInterface, newState: number, isQuickthrow: Bool): void
  ClearLastUsedAnimWrapperInfo(scriptInterface: StateGameScriptInterface): void
  SendAnimWrapperInfo(scriptInterface: StateGameScriptInterface, item: ItemID, clearWrapperInfo: Bool, delay?: number): void
  SaveLastUsedCombatGadget(scriptInterface: StateGameScriptInterface, item: ItemID): void
  GetLockHoldCondition(stateContext: StateContext): Bool
  GetSlotTDBID(stateContext: StateContext): TweakDBID
  RemoveGrenadeFromRightHand(scriptInterface: StateGameScriptInterface): void
  GetRotateAngle(isQuickthrow: Bool): number
  Throw(scriptInterface: StateGameScriptInterface, stateContext: StateContext, isQuickthrow: Bool, inLocalAimForward?: Vector4, inLocalAimPosition?: Vector4): void
  NotifyAutocraftSystem(scriptInterface: StateGameScriptInterface): void
  CreateTrajectoryParams(item: ItemObject, isQuickthrow: Bool): gameprojectileTrajectoryParams
  CheckVehicleStatesForUnequipRequest(stateContext: StateContext): Bool
  SetItemInLeftHand(scriptInterface: StateGameScriptInterface, newState: Bool): void
  SetLeftHandItemHandlingItemState(scriptInterface: StateGameScriptInterface, newState: number): void
  ShouldForceUnequipGrenade(scriptInterface: StateGameScriptInterface): Bool
  RemoveGrenadeFromInventory(scriptInterface: StateGameScriptInterface): void
  GetCancelGrenadeAction(stateContext: StateContext): Bool
  CheckEquipDurationCondition(scriptInterface: StateGameScriptInterface, stateContext: StateContext): Bool
}

declare interface CombatTransitions extends DefaultTransition {

  SendAnimFeatureData(scriptInterface: StateGameScriptInterface, inCombat: Bool): void
  /** @noSelf **/
  UpdatePerkData(scriptInterface: StateGameScriptInterface, time: number): void
  CombatCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface InCombatDecisions extends CombatTransitions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface InCombatEvents extends CombatTransitions {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface OutOfCombatDecisions extends CombatTransitions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface OutOfCombatEvents extends CombatTransitions {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface StealthDecisions extends HighLevelTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToOutOfCombat(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface KeyBindings {

}

declare interface StealthEvents extends HighLevelTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ComDeviceTransition extends DefaultTransition {

}

declare interface PhoneOffDecisions extends ComDeviceTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface PhoneOffEvents extends ComDeviceTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface PhoneOnDecisions extends ComDeviceTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface PhoneOnEvents extends ComDeviceTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface DelayedComDeviceClose extends Event {

}

declare interface ConsumableTransitions extends DefaultTransition {

  IsUsingFluffConsumable(stateContext: StateContext): Bool
  ChangeConsumableAnimFeature(stateContext: StateContext, scriptInterface: StateGameScriptInterface, newState: Bool): void
  SetItemInLeftHand(scriptInterface: StateGameScriptInterface, newState: Bool): void
  GetConsumableCastPoint(consumableItem: ItemID): number
  GetConsumableCycleDuration(consumableItem: ItemID): number
  GetConsumableInitBlendDuration(consumableItem: ItemID): number
  GetConsumableRemovePoint(consumableItem: ItemID): number
  ForceUnequipEvent(scriptInterface: StateGameScriptInterface): void
  SetLeftHandAnimationAnimFeature(scriptInterface: StateGameScriptInterface, newState: Bool): void
}

declare interface CoverActionTransition extends LocomotionTransition {

  IsMeleeLeaningInputCorrect(scriptInterface: StateGameScriptInterface): Bool
  IsPlayerInCorrectStateToPeek(scriptInterface: StateGameScriptInterface, stateContext: StateContext): Bool
  GetManualLeanIdleTime(scriptInterface: StateGameScriptInterface, stateContext: StateContext): number
  IsManualLeanInputPressed(stateContext: StateContext, scriptInterface: StateGameScriptInterface, actionName: CName): Bool
  IsManualLeanLeftInputPressed(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsManualLeanRightInputPressed(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ConsumableStartupDecisions extends ConsumableTransitions {

  ToConsumableUse(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ConsumableStartupEvents extends ConsumableTransitions {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ConsumableUseDecisions extends ConsumableTransitions {

  ToConsumableCleanup(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ConsumableUseEvents extends ConsumableTransitions {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface CoverActionEventsTransition extends CoverActionTransition {

  SetCoverStateAnimFeature(scriptInterface: StateGameScriptInterface, newState: number): void
  SetCoverActionStateBlacboardVal(scriptInterface: StateGameScriptInterface, newVal: number): void
}

declare interface ConsumableCleanupDecisions extends ConsumableTransitions {

}

declare interface ConsumableCleanupEvents extends ConsumableTransitions {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface InactiveCoverDecisions extends CoverActionTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface CombatGadgetInactiveDecisions extends CombatGadgetTransitions {

  ToCombatGadgetQuickThrow(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToCombatGadgetEquip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface InactiveCoverEvents extends CoverActionEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface CombatGadgetInactiveEvents extends CombatGadgetTransitions {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ActivateCoverDecisions extends CoverActionTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ActivateCoverEvents extends CoverActionEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface CombatGadgetEquipDecisions extends CombatGadgetTransitions {

  ToCombatGadgetQuickThrow(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToCombatGadgetCharge(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToCombatGadgetWaitForUnequip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToCombatGadgetUnequip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ManualLeanDecisions extends CoverActionTransition {

}

declare interface ManualLeanEvents extends CoverActionEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface CombatGadgetEquipEvents extends CombatGadgetTransitions {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ManualLeanLeftDecisions extends CoverActionTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ManualLeanLeftEvents extends CoverActionEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface CombatGadgetQuickThrowDecisions extends CombatGadgetTransitions {

  ToCombatGadgetUnequip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ManualLeanRightDecisions extends CoverActionTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface CombatGadgetQuickThrowEvents extends CombatGadgetTransitions {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ManualLeanRightEvents extends CoverActionEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface CombatGadgetChargedThrowDecisions extends CombatGadgetTransitions {

  ToCombatGadgetWaitForUnequip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface CombatGadgetChargedThrowEvents extends CombatGadgetTransitions {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface BaseCrosshairState extends DefaultTransition {

  GetCrosshairStateEnumValue(): gamePSMCrosshairStates
}

declare interface CombatGadgetChargeDecisions extends CombatGadgetTransitions {

  ToCombatGadgetChargedThrow(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToCombatGadgetWaitForUnequip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToCombatGadgetUnequip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToCombatGadgetEquip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface BaseCrosshairStateEvents extends BaseCrosshairState {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SafeCrosshairStateDecisions extends BaseCrosshairState {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface SafeCrosshairStateEvents extends BaseCrosshairStateEvents {

}

declare interface QuickHackCrosshairStateDecisions extends BaseCrosshairState {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface CombatGadgetChargeEvents extends CombatGadgetTransitions {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToCombatGadgetChargedThrow(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToCombatGadgetWaitForUnequip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToCombatGadgetUnequip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToCombatGadgetEquip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  TogglePreview(on: Bool, scriptInterface: StateGameScriptInterface, stateContext: StateContext): void
  RemoveActiveStimuli(owner: GameObject): void
}

declare interface QuickHackCrosshairStateEvents extends BaseCrosshairStateEvents {

}

declare interface LookAtPresetBaseDecisions extends DefaultTransition {

  HasItemEquipped(scriptInterface: StateGameScriptInterface): Bool
  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface LookAtPresetBaseEvents extends DefaultTransition {

  /** @noSelf **/
  GetLookatPartsRequests(lookatPresetRecord: LookAtPreset_Record, lookAtParts: LookAtPartRequest[]): void
  /** @noSelf **/
  AddLookat(scriptInterface: StateGameScriptInterface, recordID: TweakDBID, priority: number, lookAtEventsArray: LookAtAddEvent[], attachLeft: Bool, attachRight: Bool): void
  SetHandAttachAnimVars(scriptInterface: StateGameScriptInterface): void
  AddAllLookAtsInList(scriptInterface: StateGameScriptInterface, presetNames: string[], priority: number, lookAtEventsArray: LookAtAddEvent[]): void
  /** @noSelf **/
  RemoveAddedLookAts(scriptInterface: StateGameScriptInterface, lookAtEventsArray: LookAtAddEvent[]): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface CombatGadgetWaitForUnequipDecisions extends CombatGadgetTransitions {

  ToCombatGadgetUnequip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface CombatGadgetWaitForUnequipEvents extends CombatGadgetTransitions {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface CombatGadgetUnequipEvents extends CombatGadgetTransitions {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface lookAtPresetGunBaseDecisions extends LookAtPresetBaseDecisions {

}

declare interface lookAtPresetGunBaseEvents extends LookAtPresetBaseEvents {

  /** @noSelf **/
  IsReloading(stateContext: StateContext): Bool
  /** @noSelf **/
  IsInSafeMode(stateContext: StateContext): Bool
  SetGunState(scriptInterface: StateGameScriptInterface, newGunState: number): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface EquipItemLeftDecisions extends DefaultTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface EquipItemRightDecisions extends DefaultTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface LookAtPresetMeleeBaseDecisions extends LookAtPresetBaseDecisions {

}

declare interface LookAtPresetMeleeBaseEvents extends LookAtPresetBaseEvents {

}

declare interface lookAtPresetItemBaseDecisions extends LookAtPresetBaseDecisions {

}

declare interface lookAtPresetItemBaseEvents extends LookAtPresetBaseEvents {

}

declare interface UnarmedLookAtDecisions extends LookAtPresetBaseDecisions {

  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface UnarmedLookAtEvents extends LookAtPresetBaseEvents {

}

declare interface AssualtRifleLookAtDecisions extends lookAtPresetGunBaseDecisions {

}

declare interface AssualtRifleLookAtEvents extends lookAtPresetGunBaseEvents {

}

declare interface FistsLookAtDecisions extends LookAtPresetMeleeBaseDecisions {

}

declare interface FistsLookAtEvents extends LookAtPresetMeleeBaseEvents {

}

declare interface HammerLookAtDecisions extends LookAtPresetMeleeBaseDecisions {

}

declare interface HammerLookAtEvents extends LookAtPresetMeleeBaseEvents {

}

declare interface HandgunLookAtDecisions extends lookAtPresetGunBaseDecisions {

}

declare interface HandgunLookAtEvents extends lookAtPresetGunBaseEvents {

}

declare interface HmgLookAtDecisions extends lookAtPresetGunBaseDecisions {

}

declare interface HmgLookAtEvents extends lookAtPresetGunBaseEvents {

}

declare interface KatanaLookAtDecisions extends LookAtPresetMeleeBaseDecisions {

}

declare interface KatanaLookAtEvents extends LookAtPresetMeleeBaseEvents {

}

declare interface KnifeLookAtDecisions extends LookAtPresetMeleeBaseDecisions {

}

declare interface KnifeLookAtEvents extends LookAtPresetMeleeBaseEvents {

}

declare interface LmgLookAtDecisions extends lookAtPresetGunBaseDecisions {

}

declare interface LmgLookAtEvents extends lookAtPresetGunBaseEvents {

}

declare interface LongBladeLookAtDecisions extends LookAtPresetMeleeBaseDecisions {

}

declare interface LongBladeLookAtEvents extends LookAtPresetMeleeBaseEvents {

}

declare interface MeleeLookAtDecisions extends LookAtPresetMeleeBaseDecisions {

}

declare interface MeleeLookAtEvents extends LookAtPresetMeleeBaseEvents {

}

declare interface OneHandedClubLookAtDecisions extends LookAtPresetMeleeBaseDecisions {

}

declare interface OneHandedClubLookAtEvents extends LookAtPresetMeleeBaseEvents {

}

declare interface PrecisionRifleLookAtDecisions extends lookAtPresetGunBaseDecisions {

}

declare interface PrecisionRifleLookAtEvents extends lookAtPresetGunBaseEvents {

}

declare interface RevolverLookAtDecisions extends lookAtPresetGunBaseDecisions {

}

declare interface RevolverLookAtEvents extends lookAtPresetGunBaseEvents {

}

declare interface RifleLookAtDecisions extends lookAtPresetGunBaseDecisions {

}

declare interface RifleLookAtEvents extends lookAtPresetGunBaseEvents {

}

declare interface ShortBladeLookAtDecisions extends LookAtPresetMeleeBaseDecisions {

}

declare interface ShortBladeLookAtEvents extends LookAtPresetMeleeBaseEvents {

}

declare interface ShotgunLookAtDecisions extends lookAtPresetGunBaseDecisions {

}

declare interface ShotgunLookAtEvents extends lookAtPresetGunBaseEvents {

}

declare interface ShotgunDualLookAtDecisions extends lookAtPresetGunBaseDecisions {

}

declare interface ShotgunDualLookAtEvents extends lookAtPresetGunBaseEvents {

}

declare interface SniperRifleLookAtDecisions extends lookAtPresetGunBaseDecisions {

}

declare interface SniperRifleLookAtEvents extends lookAtPresetGunBaseEvents {

}

declare interface SmgLookAtDecisions extends lookAtPresetGunBaseDecisions {

}

declare interface SmgLookAtEvents extends lookAtPresetGunBaseEvents {

}

declare interface TwoHandedClubLookAtDecisions extends LookAtPresetMeleeBaseDecisions {

}

declare interface TwoHandedClubLookAtEvents extends LookAtPresetMeleeBaseEvents {

}

declare interface GrenadeLookAtDecisions extends lookAtPresetItemBaseDecisions {

}

declare interface GrenadeLookAtEvents extends lookAtPresetItemBaseEvents {

}

declare interface InstanceDataMappedToReferenceName {

}

declare interface EquipmentBaseTransition extends DefaultTransition {

  GetMappedInstanceData(referenceName: CName): InstanceDataMappedToReferenceName
  GetWeaponManipulationRequest(stateContext: StateContext): EquipmentManipulationRequest
  SaveProcessedEquipmentManipulationRequest(stateContext: StateContext): void
  GetProcessedEquipmentManipulationRequest(stateContext: StateContext): EquipmentManipulationRequest
  ClearProcessedEquipmentManipulationRequest(stateContext: StateContext): void
  CheckSlotMatchAndCompareRequestType(stateContext: StateContext, stateMachineInstanceData: StateMachineInstanceData, requestTypeCompare: EquipmentManipulationRequestType): Bool
  CheckReplicatedEquipRequest(scriptInterface: StateGameScriptInterface, stateContext: StateContext, stateMachineInstanceData: StateMachineInstanceData): Bool
  ReferenceNameToRequestSlot(stateMachineInstanceData: StateMachineInstanceData): EquipmentManipulationRequestSlot
  GetItemCategoryFromItemID(item: ItemID): gamedataItemCategory
  GetEquipAreaFromItemID(item: ItemID): gamedataEquipmentArea
  IsItemInSlot(scriptInterface: StateGameScriptInterface, stateMachineInstanceData: StateMachineInstanceData): Bool
  IsUsingFluffConsumable(scriptInterface: StateGameScriptInterface, stateMachineInstanceData: StateMachineInstanceData): Bool
  GetIsPSMInValidState(scriptInterface: StateGameScriptInterface, stateContext: StateContext, stateMachineInstanceData: StateMachineInstanceData): Bool
  GetWeaponEquipDuration(scriptInterface: StateGameScriptInterface, stateContext: StateContext, stateMachineInstanceData: StateMachineInstanceData): number
  GetWeaponUnEquipDuration(scriptInterface: StateGameScriptInterface, stateContext: StateContext, stateMachineInstanceData: StateMachineInstanceData): number
  GetConsumableUnEquipDuration(stateContext: StateContext): number
  HandleWeaponEquip(scriptInterface: StateGameScriptInterface, stateContext: StateContext, stateMachineInstanceData: StateMachineInstanceData, item: ItemID): void
  HandleWeaponUnequip(scriptInterface: StateGameScriptInterface, stateContext: StateContext, stateMachineInstanceData: StateMachineInstanceData, item: ItemID): void
  DropActiveWeapon(scriptInterface: StateGameScriptInterface, stateContext: StateContext, stateMachineInstanceData: StateMachineInstanceData): void
  CreateAndSendFirstEquipEndRequest(scriptInterface: StateGameScriptInterface, weaponTweakID: TweakDBID): void
  GetSlotAttachedItemID(scriptInterface: StateGameScriptInterface, stateMachineInstanceData: StateMachineInstanceData): ItemID
  GetSlotAttachedItemObject(scriptInterface: StateGameScriptInterface, stateMachineInstanceData: StateMachineInstanceData): ItemObject
  IsProperItemEquipped(scriptInterface: StateGameScriptInterface, stateContext: StateContext, stateMachineInstanceData: StateMachineInstanceData): Bool
  GetSlotActiveItem(scriptInterface: StateGameScriptInterface, stateMachineInstanceData: StateMachineInstanceData): ItemID
  GetEquipDuration(scriptInterface: StateGameScriptInterface, stateContext: StateContext, stateMachineInstanceData: StateMachineInstanceData): number
  GetUnequipDuration(scriptInterface: StateGameScriptInterface, stateContext: StateContext, stateMachineInstanceData: StateMachineInstanceData): number
  IsLeftHandLogic(stateMachineInstanceData: StateMachineInstanceData): Bool
  IsRightHandLogic(stateMachineInstanceData: StateMachineInstanceData): Bool
  AddConsumableStateMachine(scriptInterface: StateGameScriptInterface): void
  RemoveConsumableStateMachine(scriptInterface: StateGameScriptInterface): void
  AddGrenadesStateMachine(scriptInterface: StateGameScriptInterface): void
  RemoveGrenadesStateMachine(scriptInterface: StateGameScriptInterface): void
  AddCyberwareStateMachine(scriptInterface: StateGameScriptInterface): void
  RemoveCyberwareStateMachine(scriptInterface: StateGameScriptInterface): void
  SetRightHandItemParam(stateContext: StateContext, item: ItemID): void
  ClearRightHandItemParam(stateContext: StateContext): void
  SetLeftHandItemParam(stateContext: StateContext, item: ItemID): void
  ClearLeftHandItemParam(stateContext: StateContext): void
  ClearHandItemParam(stateContext: StateContext, stateMachineInstanceData: StateMachineInstanceData): void
  GetItemIDFromParam(stateMachineInstanceData: StateMachineInstanceData, stateContext: StateContext): ItemID
  GetBlurParametersFromWeapon(scriptInterface: StateGameScriptInterface): void
  CanProcessEquip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface FirstEquipSystem extends ScriptableSystem {

  /** @noSelf **/
  GetInstance(owner: GameObject): FirstEquipSystem
  HasPlayedFirstEquip(weaponID: TweakDBID): Bool
  OnCompletionOfFirstEquip(request: CompletionOfFirstEquipRequest): void
}

declare interface EFirstEquipData {

}

declare interface CompletionOfFirstEquipRequest extends ScriptableSystemRequest {

}

declare interface ExplorationDecisions extends HighLevelTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ExplorationEvents extends HighLevelTransition {

  OnEnterFromSwimming(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ClearSceneGameplayOverrides(scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SwimmingDecisions extends HighLevelTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  /** @noSelf **/
  ShouldPostponeEnteringSwimming(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToExploration(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToDeath(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface SwimmingEvents extends HighLevelTransition {

  OnEnterFromSceneTierII(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface AiControlledDecisions extends HighLevelTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface AiControlledEvents extends HighLevelTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface DeathDecisions extends HighLevelTransition {

  IsDead(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToResurrect(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface DeathEvents extends HighLevelTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  SetDeathCameraParameters(stateContext: StateContext): void
}

declare interface ResurrectDecisions extends HighLevelTransition {

  ToExploration(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ResurrectEvents extends HighLevelTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  SendResurrectEvent(scriptInterface: StateGameScriptInterface): void
}

declare interface InspectionDecisions extends HighLevelTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToExploration(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface InspectionEvents extends HighLevelTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface MinigameDecisions extends HighLevelTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MinigameEvents extends HighLevelTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SceneTierAbstractDecisions extends SceneTierAbstract {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToExploration(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface SceneTierAbstractEvents extends SceneTierAbstract {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SceneTierIIDecisions extends SceneTierAbstractDecisions {

  SceneTierToEnter(): GameplayTier
}

declare interface SceneTierIIEvents extends SceneTierAbstractEvents {

  SceneTierToEnter(): GameplayTier
  GetSceneTier2Data(stateContext: StateContext): SceneTier2Data
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateLocomotionStatsBasedOnMovementType(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateSpeedValue(stateContext: StateContext, scriptInterface: StateGameScriptInterface): number
  UpdateMaxSpeedBasedOnPlayerState(locomotionStateName: CName, movementPreset: Tier2WalkType, speedValue: number): void
  GetCurrentTier2MovementPreset(stateContext: StateContext): Tier2WalkType
}

declare interface SceneTierIIIDecisions extends SceneTierAbstractDecisions {

  SceneTierToEnter(): GameplayTier
}

declare interface SceneTierIIIEvents extends SceneTierAbstractEvents {

  SceneTierToEnter(): GameplayTier
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SceneTierIVDecisions extends SceneTierAbstractDecisions {

  SceneTierToEnter(): GameplayTier
}

declare interface SceneTierIVEvents extends SceneTierAbstractEvents {

  SceneTierToEnter(): GameplayTier
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SceneTierVDecisions extends SceneTierAbstractDecisions {

  SceneTierToEnter(): GameplayTier
}

declare interface SceneTierVEvents extends SceneTierAbstractEvents {

  SceneTierToEnter(): GameplayTier
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface InputContextTransitionDecisions extends DefaultTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToGameplayContext(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToBaseContext(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface InputContextTransitionEvents extends DefaultTransition {

  ShouldForceRefreshInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ShowBodyCarryInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  RemoveBodyCarryInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ShowLadderInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  RemoveLadderInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ShowTerminalInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  RemoveTerminalInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ShowGenericExplorationInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  RemoveGenericExplorationInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ShowMeleeInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  RemoveMeleeInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ShowRangedInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  RemoveRangedInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ShowVehicleDriverInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ShowVehicleRadioInputHint(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  RemoveVehicleRadioInputHint(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ShowVehicleRestrictedInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  RemoveVehicleRestrictedInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ShowVehiclePassengerInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  RemoveVehiclePassengerInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  RemoveVehicleDriverInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ShowVehicleDriverCombatInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  RemoveVehicleDriverCombatInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ShowVehicleExitInputHint(stateContext: StateContext, scriptInterface: StateGameScriptInterface, driver?: Bool): void
  ShowVehiclePassengerCombatInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  RemoveVehiclePassengerCombatInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ShowSwimmingInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  RemoveSwimmingInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  RemoveAllInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateWeaponInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  CheckForControllerChange(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface InitialStateDecisions extends InputContextTransitionDecisions {

  ToUiContext(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface DeviceControlContextDecisions extends InputContextTransitionDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface DeviceControlContextEvents extends InputContextTransitionEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface BraindanceContextDecisions extends InputContextTransitionDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface DeadContextDecisions extends InputContextTransitionDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface BaseContextEvents extends InputContextTransitionEvents {

  UpdateHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateGenericExplorationInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateBodyCarryInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateTerminalInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateLadderInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateSwimmingInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  IsStateValidForExploration(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface AimingContextDecisions extends InputContextTransitionDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface AimingContextEvents extends InputContextTransitionEvents {

  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface VisionContextDecisions extends InputContextTransitionDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface UiContextDecisions extends InputContextTransitionDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface UiRadialContextDecisions extends InputContextTransitionDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface UiRadialContextEvents extends InputContextTransitionEvents {

  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  SetUIBlackboardVector4Variable(scriptInterface: StateGameScriptInterface, id: BlackboardID_Vector4, value: Vector4): void
}

declare interface UiQuickHackPanelContextDecisions extends InputContextTransitionDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface UiQuickHackPanelContextEvents extends InputContextTransitionEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface UiVendorContextDecisions extends InputContextTransitionDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface UiPhoneContextDecisions extends InputContextTransitionDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface LadderEnterContextEvents extends InputContextTransitionEvents {

}

declare interface LadderEnterContextDecisions extends InputContextTransitionDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface VehicleBlockInputContextEvents extends InputContextTransitionEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface VehicleBlockInputContextDecisions extends InputContextTransitionDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface VehicleGameplayContextDecisions extends InputContextTransitionDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface VehiclePassengerContextEvents extends InputContextTransitionEvents {

  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdatePassengerInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface VehiclePassengerContextDecisions extends VehicleGameplayContextDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface VehicleNoDriveContextEvents extends InputContextTransitionEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface VehicleNoDriveContextDecisions extends InputContextTransitionDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface VehicleQuestRestrictedContextDecisions extends InputContextTransitionDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface VehicleQuestRestrictedContextEvents extends VehicleNoDriveContextEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface VehicleTankDriverContextDecisions extends InputContextTransitionDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface VehicleDriverContextEvents extends InputContextTransitionEvents {

  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateVehicleDriverInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateRadioInputHint(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface VehicleDriverContextDecisions extends InputContextTransitionDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface VehicleDriverCombatContextEvents extends InputContextTransitionEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface VehicleDriverCombatContextDecisions extends InputContextTransitionDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface VehicleNoDriveCombatContextDecisions extends InputContextTransitionDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface VehicleCombatContextEvents extends InputContextTransitionEvents {

  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateVehicleCombatInputHints(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface VehicleCombatContextDecisions extends InputContextTransitionDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface LocomotionSceneInitData extends IScriptable {

}

declare interface PlayerStateMachineTestFiveInput extends IScriptable {

}

declare interface PlayerStateMachineTestFourInput extends IScriptable {

}

declare interface PlayerStateMachineTestFourOutput extends IScriptable {

}

declare interface PlayerStateMachineTestThreeOutput extends IScriptable {

}

declare interface EquipmentBaseDecisions extends EquipmentBaseTransition {

}

declare interface EquipmentBaseEvents extends EquipmentBaseTransition {

}

declare interface UnequippedDecisions extends EquipmentBaseDecisions {

  ToEquipCycleInit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface UnequippedEvents extends EquipmentBaseEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface EquippedDecisions extends EquipmentBaseDecisions {

  ToUnequipCycle(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface EquippedEvents extends EquipmentBaseEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface EquipCycleInitDecisions extends EquipmentBaseDecisions {

  ToEquipCycle(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToUnequipped(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface EquipCycleInitEvents extends EquipmentBaseEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface EquipCycleDecisions extends EquipmentBaseDecisions {

  ToEquipped(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToUnequipCycle(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToFirstEquip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface LeftHandCyberwareSafeDecisions extends LeftHandCyberwareTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToLeftHandCyberwareUnequip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface LeftHandCyberwareSafeEvents extends LeftHandCyberwareEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface LeftHandCyberwareEquipDecisions extends LeftHandCyberwareTransition {

  ToLeftHandCyberwareCharge(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToLeftHandCyberwareUnequip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface LeftHandCyberwareEquipEvents extends LeftHandCyberwareEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface LeftHandCyberwareEquippedEvent extends Event {

}

declare interface LeftHandCyberwareChargeDecisions extends LeftHandCyberwareTransition {

  ToLeftHandCyberwareChargeAction(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToLeftHandCyberwareWaitForUnequip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToLeftHandCyberwareUnequip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface LeftHandCyberwareChargeEvents extends LeftHandCyberwareEventsTransition {

  UpdateChargeModeCameraAimAnimFeature(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ResetChargeModeCameraAimAnimFeature(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ChargeStartedEvent extends Event {

}

declare interface ChargeEndedEvent extends Event {

}

declare interface LeftHandCyberwareLoopDecisions extends LeftHandCyberwareTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToLeftHandCyberwareWaitForUnequip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToLeftHandCyberwareUnequip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface LeftHandCyberwareLoopEvents extends LeftHandCyberwareEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface LoopStartedEvent extends Event {

}

declare interface LoopEndedEvent extends Event {

}

declare interface LeftHandCyberwareActionAbstractDecisions extends LeftHandCyberwareTransition {

  ToLeftHandCyberwareWaitForUnequip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface LeftHandCyberwareActionAbstractEvents extends LeftHandCyberwareEventsTransition {

  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface LeftHandCyberwareQuickActionDecisions extends LeftHandCyberwareActionAbstractDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToLeftHandCyberwareUnequip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface LeftHandCyberwareQuickActionEvents extends LeftHandCyberwareActionAbstractEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface QuickActionEvent extends Event {

}

declare interface LeftHandCyberwareChargeActionDecisions extends LeftHandCyberwareActionAbstractDecisions {

  ToLeftHandCyberwareUnequip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface LeftHandCyberwareChargeActionEvents extends LeftHandCyberwareActionAbstractEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface LeftHandCyberwareCatchActionDecisions extends LeftHandCyberwareActionAbstractDecisions {

}

declare interface LeftHandCyberwareCatchActionEvents extends LeftHandCyberwareActionAbstractEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface LeftHandCyberwareCatchDecisions extends LeftHandCyberwareTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToLeftHandCyberwareWaitForUnequip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToLeftHandCyberwareCatchAction(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface EquipCycleEvents extends EquipmentBaseEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface LeftHandCyberwareCatchEvents extends LeftHandCyberwareEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface LeftHandCyberwareWaitForUnequipDecisions extends LeftHandCyberwareTransition {

  ToLeftHandCyberwareUnequip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface LeftHandCyberwareWaitForUnequipEvents extends LeftHandCyberwareEventsTransition {

  OnEnterFromLeftHandCyberwareCharge(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface LeftHandCyberwareUnequipEvents extends LeftHandCyberwareEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface LeftHandCyberwareUnequippedEvent extends Event {

}

declare interface LocomotionBraindance extends LocomotionTransition {

  CanEnterFastFlying(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface LocomotionBraindanceEvents extends LocomotionEventsTransition {

  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  SetLocomotionParameters(stateContext: StateContext, scriptInterface: StateGameScriptInterface): LocomotionBraindanceParameters
  EnableBraindanceCollisionFilter(scriptInterface: StateGameScriptInterface): void
}

declare interface BraindanceFlyDecisions extends LocomotionBraindance {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface BraindanceFlyEvents extends LocomotionBraindanceEvents {

  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface BraindanceFastFlyDecisions extends LocomotionBraindance {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface BraindanceFastFlyEvents extends LocomotionBraindanceEvents {

  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface FirstEquipDecisions extends EquipmentBaseDecisions {

  ToEquipped(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface LocomotionSwimming extends LocomotionTransition {

  IsFallingSpeedToEnterDiveAcceptable(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsDivingBlocked(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsDeepEnoughToDive(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  GetCurrentDepth(stateContext: StateContext, scriptInterface: StateGameScriptInterface): number
  CanEnterFastSwimming(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ShouldExitFastSwimming(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface LocomotionSwimmingEvents extends LocomotionEventsTransition {

  SetSwimmingState(stateContext: StateContext, scriptInterface: StateGameScriptInterface, value: number): void
  UpdateSwimmingAnimFeatureData(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  GetStateSwimmingDefaultParameters(scriptInterface: StateGameScriptInterface, locomotionParameters: LocomotionSwimmingParameters): void
  SetLocomotionParameters(stateContext: StateContext, scriptInterface: StateGameScriptInterface): LocomotionSwimmingParameters
  IsSwimmingForward(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SwimmingSurfaceDecisions extends LocomotionSwimming {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface SwimmingSurfaceEvents extends LocomotionSwimmingEvents {

  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateSwimmingStroke(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnterFromDiving(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SwimmingSurfaceFastDecisions extends LocomotionSwimming {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface FirstEquipEvents extends EquipmentBaseEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SwimmingSurfaceFastEvents extends LocomotionSwimmingEvents {

  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateSwimmingStroke(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnterFromFastDiving(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SwimmingTransitionDecisions extends LocomotionSwimming {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface SwimmingTransitionEvents extends LocomotionSwimmingEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SwimmingDivingDecisions extends LocomotionSwimming {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface SwimmingDivingEvents extends LocomotionSwimmingEvents {

  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateAscendingDescending(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateDivingStroke(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SwimmingFastDivingDecisions extends LocomotionSwimming {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface SwimmingFastDivingEvents extends LocomotionSwimmingEvents {

  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateFastDivingStroke(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SwimmingClimbDecisions extends LocomotionGroundDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ForwardAngleTest(stateContext: StateContext, scriptInterface: StateGameScriptInterface, climbInfo: PlayerClimbInfo): Bool
  OverlapFitTest(scriptInterface: StateGameScriptInterface, climbInfo: PlayerClimbInfo, playerPosition: Vector4): Bool
}

declare interface ClimbEvents extends LocomotionGroundEvents {

  GetClimbParameter(scriptInterface: StateGameScriptInterface): ClimbParameters
  CreateIKConstraint(scriptInterface: StateGameScriptInterface, handData: HandIKDescriptionResult, refUpVector: Vector4, ikChainName: CName): void
  AddHandIK(scriptInterface: StateGameScriptInterface): void
  RemoveHandIK(scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SwimmingClimbEvents extends ClimbEvents {

}

declare interface SwimmingLadderDecisions extends LocomotionGroundDecisions {

  TestParameters(stateContext: StateContext, scriptInterface: StateGameScriptInterface, ladderParameter: LadderDescription): Bool
  TestMath(stateContext: StateContext, scriptInterface: StateGameScriptInterface, ladderParameter: LadderDescription): Bool
  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface UnequipCycleDecisions extends EquipmentBaseDecisions {

  ToEquipCycleInit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToUnequipped(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface LadderEvents extends LocomotionGroundEvents {

  SendLadderEnterStyleToGraph(stateContext: StateContext, scriptInterface: StateGameScriptInterface, enterStyle: number): void
  OnEnterFromJump(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnterFromDoubleJump(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnterFromChargeJump(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnterFromDodgeAir(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnterFromFall(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  WantsToUseLadderClimbCameraContext(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsPlayerLookingAtTheLadder(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsMovingVertically(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  UseLadderClimbCameraContext(stateContext: StateContext, value: Bool): void
  UseLadderEnterClimbCameraContext(stateContext: StateContext, value: Bool): void
  UseLadderCameraContext(stateContext: StateContext, value: Bool): void
  SetLadderEnterInProgress(stateContext: StateContext, value: Bool): void
  SetCameraInputLockDuration(stateContext: StateContext): void
  GetCameraInputLockDuration(stateContext: StateContext): number
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToStand(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToLadderJump(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToLadderCrouch(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToKnockdown(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToStunned(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  CleanUpLadderState(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SwimmingLadderEvents extends LadderEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SwimmingForceFreezeDecisions extends LocomotionSwimming {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface SwimmingForceFreezeEvents extends LocomotionSwimmingEvents {

}

declare interface UnequipCycleEvents extends EquipmentBaseEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface LocomotionTakedownDecisions extends LocomotionTransition {

  IsTakedownAction(actionName: CName): Bool
  IsTakedownAndDispose(scriptInterface: StateGameScriptInterface): Bool
  IsPowerLevelDifferentialTooHigh(target: GameObject): Bool
  ShouldInstantlyBreakFree(target: ScriptedPuppet): Bool
}

declare interface TakedownBeginDecisions extends LocomotionTakedownDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface TakedownBeginEvents extends LocomotionTakedownEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface TakedownLeapToPreyDecisions extends LocomotionTakedownDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToTakedownExecuteTakedown(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToTakedownEnd(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  TestTakedownEnterConditions(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  CollisionBetweenPlayerAndTarget(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface TakedownLeapToPreyEvents extends LocomotionTakedownEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  RequestPositionAdjustmentWithParabolicMotion(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface TakedownSlideToPreyDecisions extends LocomotionTakedownDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface TakedownSlideToPreyEvents extends LocomotionTakedownEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface TakedownGrapplePreyDecisions extends LocomotionTakedownDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface TakedownGrapplePreyEvents extends LocomotionTakedownEvents {

  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface TakedownGrappleFailedDecisions extends LocomotionTakedownDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface TakedownGrappleFailedEvents extends LocomotionTakedownEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface GrappleMountDecisions extends LocomotionTakedownDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface GrappleMountEvents extends LocomotionTakedownEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface GrappleStandDecisions extends LocomotionTakedownDecisions {

  ToTakedownExecuteTakedown(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToTakedownExecuteTakedownAndDispose(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToGrappleStruggle(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsBreakingFreeAllowed(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToGrappleBreakFree(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface GrappleStandEvents extends LocomotionTakedownEvents {

  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  IsPreferredWalkingSpeed(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface GrappleStruggleDecisions extends LocomotionTakedownDecisions {

  ToTakedownExecuteTakedown(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToTakedownExecuteTakedownAndDispose(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface GrappleStruggleEvents extends GrappleStandEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface GrapplePreyDeadDecisions extends GrappleStandEvents {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface LocomotionAirDecisions extends LocomotionTransition {

  InternalEnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ShouldFall(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  GetLandingType(stateContext: StateContext): number
  ToRegularLand(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToHardLand(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToVeryHardLand(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToSuperheroLand(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToDeathLand(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface FallDecisions extends LocomotionAirDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface GrappleFallDecisions extends FallDecisions {

  ToGrappleStand(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface GrappleFallEvents extends FallEvents {

  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface GrapplePreyDeadEvents extends LocomotionTakedownEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface GrappleForceShovePreyDecisions extends GrappleStandDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface GrappleForceShovePreyEvents extends LocomotionTakedownEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UnmountPrey(scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  InitiateForceShoveAttack(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  SpawnShoveAttackGameEffect(stateContext: StateContext, scriptInterface: StateGameScriptInterface, startPosition: Vector4, endPosition: Vector4, attackTime: number, colliderBox: Vector4): void
  OnExitToTakedownReleasePrey(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface GrappleBreakFreeDecisions extends GrappleStandEvents {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface GrappleBreakFreeEvents extends GrappleStandEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface TakedownExecuteTakedownDecisions extends LocomotionTakedownDecisions {

}

declare interface TakedownExecuteTakedownEvents extends LocomotionTakedownEvents {

  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface TakedownExecuteTakedownAndDisposeDecisions extends LocomotionTakedownDecisions {

  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface TakedownExecuteTakedownAndDisposeEvents extends LocomotionTakedownEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface TakedownReleasePreyDecisions extends LocomotionTakedownDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface TakedownReleasePreyEvents extends LocomotionTakedownEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface TakedownUnmountPreyDecisions extends LocomotionTakedownDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface TakedownUnmountPreyEvents extends LocomotionTakedownEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface PickUpBodyAfterTakedownDecisions extends LocomotionTakedownDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface PickUpBodyAfterTakedownEvents extends LocomotionTakedownEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface TakedownEndDecisions extends LocomotionTakedownDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface TakedownEndEvents extends LocomotionTakedownEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface StandLowGravityDecisions extends LocomotionGroundDecisions {

}

declare interface StandLowGravityEvents extends LocomotionGroundEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface PreCrouchLowGravityDecisions extends LocomotionGroundDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToStandLowGravity(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToCrouchLowGravity(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToDodgeLowGravity(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToDodgeCrouchLowGravity(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface PreCrouchLowGravityEvents extends LocomotionGroundEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToDodgeCrouchLowGravity(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface CrouchLowGravityDecisions extends LocomotionGroundDecisions {

  ToCrouchLowGravity(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToPreCrouchLowGravity(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface CrouchLowGravityEvents extends LocomotionGroundEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToSnapToCover(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToPreCrouchLowGravity(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface DodgeLowGravityDecisions extends LocomotionGroundDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToStandLowGravity(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface DodgeLowGravityEvents extends LocomotionGroundEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface DodgeCrouchLowGravityDecisions extends LocomotionGroundDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToCrouchLowGravity(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface DodgeCrouchLowGravityEvents extends LocomotionGroundEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SprintLowGravityDecisions extends LocomotionGroundDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToStandLowGravity(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToSprintJumpLowGravity(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface SprintWindupLowGravityDecisions extends SprintLowGravityDecisions {

  ToSprintLowGravity(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface SprintLowGravityEvents extends LocomotionGroundEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SprintWindupLowGravityEvents extends SprintLowGravityEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface LocomotionAirLowGravityDecisions extends LocomotionAirDecisions {

  ToRegularLandLowGravity(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface SprintJumpLowGravityDecisions extends LocomotionAirLowGravityDecisions {

  ToSprintLowGravity(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToJumpLowGravity(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface LocomotionAirLowGravityEvents extends LocomotionAirEvents {

}

declare interface SprintJumpLowGravityEvents extends LocomotionAirLowGravityEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SlideLowGravityDecisions extends CrouchLowGravityDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToCrouchLowGravity(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ShouldExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface SlideLowGravityEvents extends CrouchLowGravityEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateSprint(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateCrouch(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToCrouch(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface JumpLowGravityDecisions extends LocomotionAirLowGravityDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToFallLowGravity(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface JumpLowGravityEvents extends LocomotionAirLowGravityEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface FallLowGravityDecisions extends LocomotionAirLowGravityDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface FallLowGravityEvents extends LocomotionAirLowGravityEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface AbstractLandDecisions extends LocomotionGroundDecisions {

  InternalEnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface RegularLandLowGravityDecisions extends AbstractLandDecisions {

}

declare interface RegularLandLowGravityEvents extends AbstractLandEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface DodgeAirLowGravityDecisions extends LocomotionAirLowGravityDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface DodgeAirLowGravityEvents extends LocomotionAirLowGravityEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ClimbLowGravityDecisions extends LocomotionGroundDecisions {

  OverlapFitTest(scriptInterface: StateGameScriptInterface, climbInfo: PlayerClimbInfo): Bool
  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ClimbLowGravityEvents extends LocomotionGroundEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface IdleTier3Events extends LocomotionGroundEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface IdleTier4Decisions extends LocomotionGroundDecisions {

}

declare interface IdleTier4Events extends LocomotionGroundEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface IdleTier5Decisions extends LocomotionGroundDecisions {

}

declare interface IdleTier5Events extends LocomotionGroundEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface MineDispenserEventsTransition extends MineDispenserTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface MineDispenserIdleDecisions extends MineDispenserTransition {

  ToMineDispenserCycleItem(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToMineDispenserUnequip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MineDispenserIdleEvents extends MineDispenserEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface MineDispenserCycleItemDecisions extends MineDispenserTransition {

  ToMineDispenserIdle(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MineDispenserCycleItemEvents extends MineDispenserEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface MineDispenserPlaceDecisions extends MineDispenserTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  CanBePlaced(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToMineDispenserUnequip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  FindPlaceForMine(scriptInterface: StateGameScriptInterface): TraceResult
}

declare interface MineDispenserPlaceEvents extends MineDispenserEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  SetupSpawnParams(scriptInterface: StateGameScriptInterface): void
  PlaceMine(scriptInterface: StateGameScriptInterface): void
  FindPlaceForMine(scriptInterface: StateGameScriptInterface): TraceResult
}

declare interface MineDispenserUnequipEvents extends MineDispenserEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface Ground extends DefaultTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface Air extends DefaultTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface QuickSlotsHoldDecisions extends QuickSlotsDecisions {

  ToQuickSlotsReady(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToQuickSlotsBusy(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface QuickSlotsHoldEvents extends QuickSlotsEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  NotifyQuickSlotsManagerButtonHoldStart(scriptInterface: StateGameScriptInterface, dPadItemDirection: EDPadSlot): void
  NotifyQuickSlotsManagerButtonHoldEnd(stateContext: StateContext, scriptInterface: StateGameScriptInterface, dPadItemDirection: EDPadSlot, tryExecuteCommand: Bool): void
  GetRightStickAngle(stateFloat: StateResultFloat, scriptInterface: StateGameScriptInterface): number
  GetLeftStickAngle(stateFloat: StateResultFloat, scriptInterface: StateGameScriptInterface): number
  GetStickAngle(stateFloat: StateResultFloat, scriptInterface: StateGameScriptInterface): number
}

declare interface QuickSlotsTapDecisions extends QuickSlotsDecisions {

  ToQuickSlotsReady(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToQuickSlotsBusy(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface QuickSlotsTapEvents extends QuickSlotsEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  CallActionRequest(scriptInterface: StateGameScriptInterface, actionType: QuickSlotActionType): void
}

declare interface QuickSlotsReadyDecisions extends QuickSlotsDecisions {

  ToQuickSlotsBusy(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToCallVehicle(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToCycleObjective(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToGadgetWheel(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToConsumableWheel(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToVehicleWheel(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToVehicleInsideWheel(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToWeaponWheel(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface QuickSlotsReadyEvents extends QuickSlotsEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface OnlyVehicleEvents extends QuickSlotsReadyEvents {

}

declare interface OnlyVehicleDecisions extends QuickSlotsReadyDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToQuickSlotsReady(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface QuickSlotsBusyDecisions extends QuickSlotsDecisions {

  ToQuickSlotsReady(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface QuickSlotsBusyEvents extends QuickSlotsEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface QuickSlotsDisabledDecisions extends QuickSlotsDecisions {

  ShouldDisableRadialForReplacer(scriptInterface: StateGameScriptInterface): Bool
  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToQuickSlotsReady(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToCycleObjective(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface QuickSlotsDisabledEvents extends QuickSlotsEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface CallVehicleDecisions extends QuickSlotsTapDecisions {

}

declare interface CycleObjectiveDecisions extends QuickSlotsTapDecisions {

}

declare interface CallVehicleEvents extends QuickSlotsTapEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface CycleObjectiveEvents extends QuickSlotsTapEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface WeaponWheelDecisions extends QuickSlotsHoldDecisions {

}

declare interface VehicleWheelDecisions extends QuickSlotsHoldDecisions {

  ToQuickSlotsReady(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface VehicleInsideWheelDecisions extends QuickSlotsHoldDecisions {

  ToQuickSlotsReady(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface GadgetWheelDecisions extends QuickSlotsHoldDecisions {

}

declare interface ConsumableWheelDecisions extends QuickSlotsHoldDecisions {

}

declare interface GadgetWheelEvents extends QuickSlotsHoldEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToQuickSlotsBusy(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ConsumableWheelEvents extends QuickSlotsHoldEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToQuickSlotsBusy(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface VehicleWheelEvents extends QuickSlotsHoldEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToQuickSlotsBusy(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface VehicleInsideWheelEvents extends QuickSlotsHoldEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToQuickSlotsBusy(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface WeaponWheelEvents extends QuickSlotsHoldEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToQuickSlotsBusy(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ReactionTransition extends DefaultTransition {

  DrawDebugText(scriptInterface: StateGameScriptInterface, textLayerId: number, text: string): void
  ClearDebugText(scriptInterface: StateGameScriptInterface, textLayerId: number): void
}

declare interface StaggerDecisions extends ReactionTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface Stagger extends ReactionTransition {

  AddImpulse(scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ScenesFastForwardTransition extends DefaultTransition {

  SetFastForwardAvailableBB(scriptInterface: StateGameScriptInterface, newVal: Bool): void
  SetFastForwardActiveBB(scriptInterface: StateGameScriptInterface, newVal: Bool): void
  GetDebugFFConditionParam(stateContext: StateContext): Bool
  ActivateFastForward(scriptInterface: StateGameScriptInterface, mode: scnFastForwardMode): void
  IsFastForwardModeActive(scriptInterface: StateGameScriptInterface, mode: scnFastForwardMode): Bool
  DeActivateFastForward(scriptInterface: StateGameScriptInterface): void
  IsFastForwardAvailable(scriptInterface: StateGameScriptInterface, mode: scnFastForwardMode): Bool
  FastForwardInputValid(scriptInterface: StateGameScriptInterface): Bool
  DebugFastForwardInputValid(scriptInterface: StateGameScriptInterface): Bool
  ProcessHoldInputFastForwardLock(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  StartGlitchFx(scriptInterface: StateGameScriptInterface): void
  StopGlitchFx(scriptInterface: StateGameScriptInterface): void
  GetFFSceneThrehsoldFromBraindanceSystem(scriptInterface: StateGameScriptInterface): number
  DisplayFFButtonPrompt(scriptInterface: StateGameScriptInterface): void
  GetFFButtonType(scriptInterface: StateGameScriptInterface): inkInputHintHoldIndicationType
  HideFFButtonPrompt(scriptInterface: StateGameScriptInterface): void
  IsLookingAtDialogueEntity(scriptInterface: StateGameScriptInterface): Bool
  IsBlockedByPhoneCallRestriction(scriptInterface: StateGameScriptInterface): Bool
  PhoneBBStateBlockingFF(scriptInterface: StateGameScriptInterface): Bool
}

declare interface FastForwardUnavailableDecisions extends ScenesFastForwardTransition {

  ToFastForwardAvailable(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface FastForwardUnavailableEvents extends ScenesFastForwardTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface FastForwardAvailableDecisions extends ScenesFastForwardTransition {

  ToFastForwardUnavailable(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToFastForwardActive(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface FastForwardAvailableEvents extends ScenesFastForwardTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface FastForwardActiveDecisions extends ScenesFastForwardTransition {

  ToFastForwardAvailable(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToFastForwardUnavailable(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface FastForwardActiveEvents extends ScenesFastForwardTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface StaminaTransition extends DefaultTransition {

  IsStaminaAbovePercValue(scriptInterface: StateGameScriptInterface, value: number): Bool
  HasStatusEffect(scriptInterface: StateGameScriptInterface, statusEffect: TweakDBID): Bool
  IsStaminaAboveZero(scriptInterface: StateGameScriptInterface): Bool
  ChangeStaminaRegenDelay(scriptInterface: StateGameScriptInterface, delay: number): void
  ShouldRegenStamina(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  EnableStaminaPoolRegen(stateContext: StateContext, scriptInterface: StateGameScriptInterface, enable: Bool): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface StaminaEventsTransition extends StaminaTransition {

}

declare interface RestedEvents extends StaminaEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ExhaustedDecisions extends StaminaTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ExhaustedEvents extends StaminaEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface DefaultTest extends StateFunctor {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface BeginOne extends DefaultTest {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface MiddleOne extends DefaultTest {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface EndOne extends DefaultTest {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface BeginTwo extends DefaultTest {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface EndTwo extends DefaultTest {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface BeginFive extends DefaultTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface, stateMachineInput: PlayerStateMachineTestFiveInput): Bool
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface, stateMachineInput: PlayerStateMachineTestFiveInput): void
  ToNext(stateContext: StateContext, scriptInterface: StateGameScriptInterface, stateMachineInput: PlayerStateMachineTestFiveInput): Bool
}

declare interface MiddleFive extends DefaultTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface, stateMachineInput: PlayerStateMachineTestFiveInput): Bool
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface, stateMachineInput: PlayerStateMachineTestFiveInput): void
  ToNext(stateContext: StateContext, scriptInterface: StateGameScriptInterface, stateMachineInput: PlayerStateMachineTestFiveInput): Bool
}

declare interface EndFive extends DefaultTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface, stateMachineInput: PlayerStateMachineTestFiveInput): Bool
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface, stateMachineInput: PlayerStateMachineTestFiveInput): void
  ToNext(stateContext: StateContext, scriptInterface: StateGameScriptInterface, stateMachineInput: PlayerStateMachineTestFiveInput): Bool
}

declare interface BeginFour extends DefaultTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface, stateMachineInput: PlayerStateMachineTestFourInput): Bool
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface, stateMachineInput: PlayerStateMachineTestFourInput, stateMachineOutput: PlayerStateMachineTestFourOutput): void
  ToNext(stateContext: StateContext, scriptInterface: StateGameScriptInterface, stateMachineInput: PlayerStateMachineTestFourInput): Bool
}

declare interface MiddleFour extends DefaultTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface, stateMachineInput: PlayerStateMachineTestFourInput): Bool
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface, stateMachineInput: PlayerStateMachineTestFourInput, stateMachineOutput: PlayerStateMachineTestFourOutput): void
  ToNext(stateContext: StateContext, scriptInterface: StateGameScriptInterface, stateMachineInput: PlayerStateMachineTestFourInput): Bool
}

declare interface EndFour extends DefaultTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface, stateMachineInput: PlayerStateMachineTestFourInput): Bool
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface, stateMachineInput: PlayerStateMachineTestFourInput, stateMachineOutput: PlayerStateMachineTestFourOutput): void
  ToNext(stateContext: StateContext, scriptInterface: StateGameScriptInterface, stateMachineInput: PlayerStateMachineTestFourInput): Bool
}

declare interface BeginThree extends DefaultTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface, stateMachineOuptut: PlayerStateMachineTestThreeOutput): void
  ToNext(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MiddleThree extends DefaultTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface, stateMachineOuptut: PlayerStateMachineTestThreeOutput): void
  ToNext(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface EndThree extends DefaultTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface, stateMachineOuptut: PlayerStateMachineTestThreeOutput): void
  ToNext(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface TimeDilationTransitions extends DefaultTransition {

  IsSandevistanActivationRequested(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsForceDeactivationRequested(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsSandevistanDeactivationRequested(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsKerenzikovActivationRequested(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsKerenzikovDeactivationRequested(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsRequiredStateActive(stateContext: StateContext): Bool
  IsInVisionMode(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsChangingTarget(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsTargetChanged(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsPlayerMovementDetected(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsCameraRotated(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  GetBoolFromTimeSystemTweak(tweakDBPath: string, paramName: string): Bool
  GetFloatFromTimeSystemTweak(tweakDBPath: string, paramName: string): number
  GetCNameFromTimeSystemTweak(tweakDBPath: string, paramName: string): CName
}

declare interface TimeDilationEventsTransitions extends TimeDilationTransitions {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  SetTimeDilationGlobal(stateContext: StateContext, scriptInterface: StateGameScriptInterface, reason: CName, timeDilation: number, duration?: number, easeInCurve?: CName, easeOutCurve?: CName, listener?: TimeDilationListener): void
  SetTimeDilationOnLocalPlayer(reason: CName, timeDilation: number, duration?: number, easeInCurve?: CName, easeOutCurve?: CName, stateContext?: StateContext, scriptInterface?: StateGameScriptInterface): void
  SetCameraTimeDilationCurve(stateContext: StateContext, scriptInterface: StateGameScriptInterface, curveName: CName): void
  UnsetTimeDilation(stateContext: StateContext, scriptInterface: StateGameScriptInterface, reason: CName, easeOutCurve?: CName): void
}

declare interface SandevistanDecisions extends TimeDilationTransitions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  EnterSandevistan(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToTimeDilationReady(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface SandevistanEvents extends TimeDilationEventsTransitions {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface KerenzikovDecisions extends TimeDilationTransitions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsRequiredAction(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsMeleeAttackWindowOpen(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToTimeDilationReady(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface KerenzikovEvents extends TimeDilationEventsTransitions {

  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ClearKerenzikov(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  GetPlayerTimeDilation(stateContext: StateContext, scriptInterface: StateGameScriptInterface, isSliding: Bool, playerDilation: number): void
  EnableAllowMovementInputStatModifier(stateContext: StateContext, scriptInterface: StateGameScriptInterface, enable: Bool): void
}

declare interface TimeDilationProgressWithInputDecisions extends TimeDilationTransitions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToTimeDilationReady(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  CanActivate(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface TimeDilationProgressWithInputEvents extends TimeDilationEventsTransitions {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateTimeScaleBasedOnInput(stateContext: StateContext, scriptInterface: StateGameScriptInterface, timeDelta: number): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface TimeDilationFocusModeDecisions extends TimeDilationTransitions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToTimeDilationReady(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsPlayerInFocusMode(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsPlayerInCombatState(scriptInterface: StateGameScriptInterface): Bool
  IsPlayerLookingAtQuickHackTarget(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ShouldActivate(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface TimeDilationFocusModeEvents extends TimeDilationEventsTransitions {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface TurretTransition extends DefaultTransition {

  EnterWorkspot(game: GameInstance, turret: GameObject, activator: GameObject, freeCamera?: Bool, componentName?: CName, deviceData?: CName): void
  GetTurretEquippedWeapon(initData: TurretInitData): WeaponObject
}

declare interface TurretBeginEvents extends TurretTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface TurretBeginDecisions extends TurretTransition {

  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface TurretRipOffEvents extends TurretTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface TurretRipOffDecisions extends TurretTransition {

}

declare interface TurretEndEvents extends TurretTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface TurretEndDecisions extends TurretTransition {

}

declare interface ForceIdleDecisions extends LocomotionGroundDecisions {

  InternalEnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToStand(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ForceIdleEvents extends LocomotionGroundEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface WorkspotDecisions extends LocomotionGroundDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToCrouch(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToStand(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface WorkspotEvents extends LocomotionGroundEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  SetWorkspotAnimFeature(scriptInterface: StateGameScriptInterface): void
  ResetWorkspotAnimFeature(scriptInterface: StateGameScriptInterface): void
}

declare interface ForceWalkDecisions extends LocomotionGroundDecisions {

  InternalEnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToStand(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ForceWalkEvents extends LocomotionGroundEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ForceFreezeDecisions extends LocomotionGroundDecisions {

  InternalEnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToStand(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToWorkspot(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ForceFreezeEvents extends LocomotionGroundEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface InitialDecisions extends LocomotionGroundDecisions {

  ToCrouch(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface StandDecisions extends LocomotionGroundDecisions {

  InternalEnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface StandEvents extends LocomotionGroundEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateFootstepRegularStim(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface MeleeNotReadyDecisions extends MeleeTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MeleeNotReadyEvents extends MeleeEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface AimWalkDecisions extends LocomotionGroundDecisions {

  InternalEnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToStand(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MeleeParriedDecisions extends MeleeTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToMeleeIdle(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToMeleeDeflect(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MeleeParriedEvents extends MeleeEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface AimWalkEvents extends LocomotionGroundEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface CrouchDecisions extends LocomotionGroundDecisions {

  InternalEnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToCrouch(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToStand(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToSprint(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MeleeRecoveryDecisions extends MeleeTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MeleeRecoveryEvents extends MeleeNotReadyEvents {

  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface MeleeIdleDecisions extends MeleeTransition {

  ToMeleePublicSafe(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToMeleeHold(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MeleeIdleEvents extends MeleeEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  SetFlags(stateContext: StateContext): void
}

declare interface MeleePublicSafeDecisions extends MeleeTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToMeleeIdle(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MeleePublicSafeEvents extends MeleeEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface MeleeSafeDecisions extends MeleeTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MeleeSafeEvents extends MeleePublicSafeEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface MeleeHoldDecisions extends MeleeTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToMeleeChargedHold(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToMeleeFinalAttack(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MeleeHoldEvents extends MeleeEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface MeleeChargedHoldDecisions extends MeleeTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToMeleeStrongAttack(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToMeleeFinalAttack(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MeleeChargedHoldEvents extends MeleeEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  GetChargeValuePerSec(scriptInterface: StateGameScriptInterface): number
}

declare interface MeleeAttackGenericDecisions extends MeleeTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  GetAttackData(stateContext: StateContext): MeleeAttackData
}

declare interface MeleeAttackGenericEvents extends MeleeEventsTransition {

  GetAttackType(): EMeleeAttackType
  IsMoveToTargetEnabled(attackData: MeleeAttackData, assistRecord: AimAssistMelee_Record): Bool
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  SendAnimationSlotData(stateContext: StateContext, scriptInterface: StateGameScriptInterface, attackData: MeleeAttackData): Bool
  ConsumeStamina(scriptInterface: StateGameScriptInterface, attackData: MeleeAttackData): void
  ConsumeWeaponCharge(scriptInterface: StateGameScriptInterface, attackData: MeleeAttackData): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateIKData(scriptInterface: StateGameScriptInterface, attackData: MeleeAttackData): void
  ShouldBlockMovementImpulseUpdate(timeDelta: number, attackData: MeleeAttackData, stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  UpdateMovementImpulse(timeDelta: number, attackData: MeleeAttackData, stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  UpdateEffectPosition(stateContext: StateContext, scriptInterface: StateGameScriptInterface, attackData: MeleeAttackData): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  CreateMeleeAttack(stateContext: StateContext, scriptInterface: StateGameScriptInterface, attackData: MeleeAttackData): void
  SpawnAttackGameEffect(stateContext: StateContext, scriptInterface: StateGameScriptInterface, startPosition: Vector4, endPosition: Vector4, time: number, colliderBox: Vector4, attackData: MeleeAttackData): Bool
  BroadcastStimuli(scriptInterface: StateGameScriptInterface, radius: number): void
  GetAttackData(stateContext: StateContext): MeleeAttackData
  IsAttackWindowOpen(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface CrouchEvents extends LocomotionGroundEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SprintDecisions extends LocomotionGroundDecisions {

  InternalEnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToJump(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToChargeJump(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToStand(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface SprintEvents extends LocomotionGroundEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  EvaluateTwoStepSprint(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  AddMaxSpeedModifier(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  RemoveMaxSpeedModifier(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ShouldEnterSecondSprint(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  CleanupTwoStepSprint(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  GetReloadModifier(scriptInterface: StateGameScriptInterface): number
  EnableReloadStatModifier(enable: Bool, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateFootstepSprintStim(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToJump(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToChargeJump(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface MeleeComboAttackDecisions extends MeleeAttackGenericDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MeleeComboAttackEvents extends MeleeAttackGenericEvents {

  GetAttackType(): EMeleeAttackType
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface MeleeFinalAttackDecisions extends MeleeAttackGenericDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MeleeFinalAttackEvents extends MeleeAttackGenericEvents {

  GetAttackType(): EMeleeAttackType
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface MeleeSafeAttackDecisions extends MeleeAttackGenericDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MeleeSafeAttackEvents extends MeleeAttackGenericEvents {

  GetAttackType(): EMeleeAttackType
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface MeleeStrongAttackDecisions extends MeleeAttackGenericDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MeleeStrongAttackEvents extends MeleeAttackGenericEvents {

  GetAttackType(): EMeleeAttackType
  OnEnterFromMeleeLeap(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToMeleeComboAttack(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface MeleeDeflectDecisions extends MeleeTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToMeleeHold(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToMeleeComboAttack(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToMeleeBlock(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToMeleeDeflectAttack(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsDeflectSuccessful(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MeleeDeflectEvents extends MeleeEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ForceEmptyHandsDecisions extends UpperBodyTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToEmptyHands(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToSingleWield(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ForceEmptyHandsEvents extends UpperBodyEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ForceSafeDecisions extends UpperBodyTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToEmptyHands(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToSingleWield(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ForceSafeEvents extends UpperBodyEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface EmptyHandsDecisions extends UpperBodyTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToSingleWield(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface EmptyHandsEvents extends UpperBodyEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SingleWieldDecisions extends UpperBodyTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToEmptyHands(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface SingleWieldEvents extends UpperBodyEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  InstantEquipHACK(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface MeleeDeflectAttackDecisions extends MeleeAttackGenericDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MeleeDeflectAttackEvents extends MeleeAttackGenericEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface AimingStateDecisions extends UpperBodyTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToSingleWield(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToEmptyHands(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToForceEmptyHands(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToForceSafe(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface AimingStateEvents extends UpperBodyEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnAimStartBegin(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  GetWeaponObject(scriptInterface: StateGameScriptInterface): WeaponObject
  EvaluateAimSnap(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  GetVehicleAimSnapParams(): AimRequest
  GetPerfectAimSnapParams(): AimRequest
  UpdateAimAnimFeature(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateZoomSfx(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateAimDownSightsSfx(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateZoomVfx(scriptInterface: StateGameScriptInterface): void
  StartZoomEffect(scriptInterface: StateGameScriptInterface, effectName: CName): void
  UpdateWeaponOffsetPosition(scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  TriggerZoomExitSfx(scriptInterface: StateGameScriptInterface): void
  NotifyWeaponObject(scriptInterface: StateGameScriptInterface, isAiming: Bool): void
}

declare interface MeleeBlockDecisions extends MeleeTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MeleeBlockEvents extends MeleeEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface TemporaryUnequipDecisions extends UpperBodyTransition {

  IsTemporaryUnequipRequested(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToWaitForEquip(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToEmptyHands(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToSingleWield(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface TemporaryUnequipEvents extends UpperBodyEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  CheckLeftHandForUnequippedState(stateContext: StateContext): Bool
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ForceEquipStrongArms(player: PlayerPuppet): void
  ForceUnequipStrongArms(player: PlayerPuppet): void
}

declare interface WaitForEquipDecisions extends UpperBodyTransition {

  ToSingleWield(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToEmptyHands(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface WaitForEquipEvents extends UpperBodyEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface AdHocAnimationDecisions extends UpperBodyEventsTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToSingleWield(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToEmptyHands(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface SlideFallDecisions extends LocomotionAirDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToSlide(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToFall(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface AdHocAnimationEvents extends TemporaryUnequipEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SlideFallEvents extends LocomotionAirEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SlideDecisions extends CrouchDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToCrouch(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToStand(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ShouldExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface SlideEvents extends CrouchEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnterFromSprint(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  AddDecelerationStatModifier(stateContext: StateContext, scriptInterface: StateGameScriptInterface, enable: Bool): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  EvaluateSlideDeceleration(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToCrouch(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  CleanUpOnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface MeleeTargetingDecisions extends MeleeTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MeleeTargetingEvents extends MeleeEventsTransition {

  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SceneForceWeaponAim extends Event {

  GetFriendlyDescription(): string
}

declare interface PauseBraindance extends Event {

  GetFriendlyDescription(): string
}

declare interface DodgeDecisions extends LocomotionGroundDecisions {

  InternalEnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToStand(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface DodgeEvents extends LocomotionGroundEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  CleanUpOnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  Dodge(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  EnableMovementDecelerationStatModifier(stateContext: StateContext, scriptInterface: StateGameScriptInterface, enable: Bool): void
}

declare interface MeleeThrowAttackDecisions extends MeleeAttackGenericDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MeleeThrowAttackEvents extends MeleeAttackGenericEvents {

  GetAttackType(): EMeleeAttackType
  EnableLockOnTarget(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateNanoWireIKState(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  EnableNanoWireIK(scriptInterface: StateGameScriptInterface, enable: Bool, setPosition?: Bool): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface MeleeLeapDecisions extends MeleeTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  CheckLeapCollision(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToMeleeStrongAttack(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToMeleeIdle(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MeleeLeapEvents extends MeleeEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  LeapToTarget(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  Leap(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  CalculateAdjustmentDuration(distance: number): number
}

declare interface MeleeDashDecisions extends MeleeTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  CheckDashCollision(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToMeleeSprintAttack(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToMeleeIdle(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MeleeDashEvents extends MeleeEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  DashToTarget(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  Dash(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface MeleeBlockAttackDecisions extends MeleeAttackGenericDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MeleeBlockAttackEvents extends MeleeAttackGenericEvents {

  GetAttackType(): EMeleeAttackType
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface MeleeCrouchAttackDecisions extends MeleeAttackGenericDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MeleeCrouchAttackEvents extends MeleeAttackGenericEvents {

  GetAttackType(): EMeleeAttackType
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface MeleeJumpAttackDecisions extends MeleeAttackGenericDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MeleeJumpAttackEvents extends MeleeAttackGenericEvents {

  GetAttackType(): EMeleeAttackType
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface MeleeSprintAttackDecisions extends MeleeAttackGenericDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MeleeSprintAttackEvents extends MeleeAttackGenericEvents {

  GetAttackType(): EMeleeAttackType
  OnEnterFromMeleeDash(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface MeleeEquipAttackDecisions extends MeleeAttackGenericDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface MeleeEquipAttackEvents extends MeleeAttackGenericEvents {

  GetAttackType(): EMeleeAttackType
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ZoomTransitionHelper extends IScriptable {

  /** @noSelf **/
  GetReevaluateZoomName(): CName
}

declare interface ZoomDecisionsTransition extends ZoomTransition {

  ToNextZoomLevel(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToPreviousZoomLevel(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToBaseZoom(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToScanWithLhCyberware(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ZoomEventsTransition extends ZoomTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToZoomLevelBase(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToNextZoomLevel(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToPreviousZoomLevel(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ZoomBlockedDecisions extends ZoomDecisionsTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ZoomBlockedEvents extends ZoomEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToZoomLevelBase(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ZoomLevelBaseDecisions extends ZoomDecisionsTransition {

  ToZoomLevelAim(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ZoomLevelBaseEvents extends ZoomEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToZoomLevelAim(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ZoomLevelAimDecisions extends ZoomDecisionsTransition {

  ToBaseZoom(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToScanZoomLevel(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToZoomLevel3(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToZoomLevel4(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  GetActualZoomValue(stateContext: StateContext, scriptInterface: StateGameScriptInterface): number
}

declare interface ZoomLevelAimEvents extends ZoomEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToZoomLevelBase(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ShouldPlayZoomExitSound(): Bool
  ShouldPlayZoomStepSound(): Bool
  ReevaluateADSZoomIndex(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  GetActualZoomValue(stateContext: StateContext, scriptInterface: StateGameScriptInterface): number
}

declare interface ZoomLevelScanDecisions extends ZoomDecisionsTransition {

  ToBaseZoom(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToZoomLevelAim(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ZoomLevelScanEvents extends ZoomEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToZoomLevelAim(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ZoomLevel3Decisions extends ZoomDecisionsTransition {

  ToBaseZoom(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToZoomLevelAim(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ZoomLevel3Events extends ZoomEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ZoomLevel4Decisions extends ZoomDecisionsTransition {

  ToZoomLevelAim(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToBaseZoom(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ZoomLevel4Events extends ZoomEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToZoomLevelAim(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToBaseZoom(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ExplodingBullet extends BaseBullet {

  OnInitialize(eventData: gameprojectileSetUpEvent): Bool
  OnTick(eventData: gameprojectileTickEvent): Bool
  OnCollision(projectileHitEvent: gameprojectileHitEvent): Bool
  Explode(position?: Vector4): void
  RunGameEffect(): void
  DealDamage(eventData: gameprojectileHitEvent): void
}

declare interface BulletCollisionEvaluator extends gameprojectileScriptCollisionEvaluator {

  SetIsExplodingBullet(isExplodingBullet: Bool): void
  SetWeaponParams(params: gameprojectileWeaponParams): void
  HasReportedStopped(): Bool
  GetStoppedPosition(): Vector4
  EvaluateCollision(defaultOnCollisionAction: gameprojectileOnCollisionAction, params: CollisionEvaluatorParams): gameprojectileOnCollisionAction
}

declare interface Knife extends BaseProjectile {

  OnInitialize(eventData: gameprojectileSetUpEvent): Bool
  OnShoot(eventData: gameprojectileShootEvent): Bool
  OnCollision(eventData: gameprojectileHitEvent): Bool
}

declare interface KnifeCollisionEvaluator extends gameprojectileScriptCollisionEvaluator {

  EvaluateCollision(defaultOnCollisionAction: gameprojectileOnCollisionAction, params: CollisionEvaluatorParams): gameprojectileOnCollisionAction
}

declare interface ClimbDecisions extends LocomotionGroundDecisions {

  InternalEnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToStand(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToCrouch(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ForwardAngleTest(stateContext: StateContext, scriptInterface: StateGameScriptInterface, climbInfo: PlayerClimbInfo): Bool
  TestClimbingPath(scriptInterface: StateGameScriptInterface, climbInfo: PlayerClimbInfo, playerPosition: Vector4): Bool
  OverlapFitTest(scriptInterface: StateGameScriptInterface, climbInfo: PlayerClimbInfo, playerPosition: Vector4): Bool
}

declare interface minibossPlasmaProjectile extends BaseProjectile {

  OnInitialize(eventData: gameprojectileSetUpEvent): Bool
  StartEffect(): void
  StopEffect(): void
  Reset(): void
  OnShoot(eventData: gameprojectileShootEvent): Bool
  OnShootTarget(eventData: gameprojectileShootTargetEvent): Bool
  OnTick(eventData: gameprojectileTickEvent): Bool
  OnCollision(eventData: gameprojectileHitEvent): Bool
  OnAreaEnter(evt: AreaEnteredEvent): Bool
  DealDamage(eventData: gameprojectileHitEvent): void
  Explode(record: TweakDBID): void
  FireAttack(): void
}

declare interface MonoDisc extends BaseProjectile {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnInitialize(eventData: gameprojectileSetUpEvent): Bool
  RegisterForProjectileCaught(): void
  OnShoot(eventData: gameprojectileShootEvent): Bool
  OnShootTarget(eventData: gameprojectileShootTargetEvent): Bool
  GeneralShoot(eventData: gameprojectileShootEvent): void
  ResetParameters(): void
  GetThrowType(chargeParam: number): void
  OnProjectileCaught(value: Bool): Bool
  LaunchDisc(eventData: gameprojectileShootEvent): void
  NoTargetLaunch(localToWorld: Matrix, startVelocity: number, distance: number, sideOffset: number, height: number): void
  GetBlackboardIntVariable(id: BlackboardID_Int): number
  UpdateAnimData(): void
  OnTick(eventData: gameprojectileTickEvent): Bool
  GetMaxDistance(): number
  IsPlayerInKerenzikov(): Bool
  GetPlayerSpeed(): number
  GetPlayerPosition(): Vector4
  OnCollision(eventData: gameprojectileHitEvent): Bool
  LodgeDiscToSurface(): void
  DealDamage(eventData: gameprojectileHitEvent): void
  SetTargetComponentQuickThrow(quickThrowTarget: IPlacedComponent): void
  SetTargetComponent(target: IPlacedComponent): void
  GetPlayerTargetComponent(): CName
  ReturnToPlayer(): void
  StartCathingPlayer(): void
  OnFollowSuccess(eventData: gameprojectileFollowEvent): Bool
  PlayCatchAnimation(): void
  SpawnTrailEffects(): void
  SpawnVisualEffect(effectName: CName, m_disc: GameObject): void
}

declare interface ProjectileLauncherRoundDelayEvent extends Event {

}

declare interface ProjectileLauncherRoundDetonationDelayEvent extends Event {

}

declare interface ProjectileLauncherRoundBreachEvent extends Event {

}

declare interface ProjectileLauncherRoundTickEvent extends TickableEvent {

}

declare interface ProjectileLauncherRoundCollisionEvaluator extends gameprojectileScriptCollisionEvaluator {

  SetCollisionAction(collisionAction: gamedataProjectileOnCollisionAction): void
  SetNumberOfBounces(maxBounceCount: number): void
  ProjectileStopped(): Bool
  ProjectileStopAndStick(): Bool
  ProjectileBounced(): Bool
  ProjectilePierced(): Bool
  projectilePierced(): Bool
  EvaluateCollision(defaultOnCollisionAction: gameprojectileOnCollisionAction, params: CollisionEvaluatorParams): gameprojectileOnCollisionAction
}

declare interface ProjectileLauncherRound extends ItemObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnInitialize(eventData: gameprojectileSetUpEvent): Bool
  SetCollisionAction(): void
  SetCurrentlyInstalledRound(): Bool
  OnShoot(eventData: gameprojectileShootEvent): Bool
  OnShootTarget(eventData: gameprojectileShootTargetEvent): Bool
  GeneralLaunchSetup(eventData: gameprojectileShootEvent): void
  CurvedLaunchToTarget(eventData: gameprojectileShootEvent, targetObject?: GameObject, targetComponent?: IPlacedComponent): void
  GetFloat(param: string): number
  GetInt(param: string): number
  GetBool(param: string): Bool
  GetCName(param: string): CName
  GetString(param: string): string
  GetVector3(param: string): Vector3
  OnCollision(eventData: gameprojectileHitEvent): Bool
  ExecuteGameEffect(eventData?: gameprojectileHitEvent): void
  PlayAudio(): void
  EvaluateStimBroadcasting(stimToSend: gamedataStimType): void
  CreateCustomTickEventWithDuration(value: number): void
  CreateDelayEvent(value: number): void
  CreateDetonationDelayEvent(value: number): void
  OnMaxLifetimeReached(evt: ProjectileDelayEvent): Bool
  OnMaxDetonationTimeReached(evt: ProjectileLauncherRoundDetonationDelayEvent): Bool
  OnTick(eventData: gameprojectileTickEvent): Bool
  SetMeshVisible(value: Bool): void
  Release(): void
  SetProjectileTrailEffect(): void
  SetProjectileLifetime(): void
  SetProjectileDetonationTime(): void
  HasTrajectory(): Bool
  StopProjectile(): void
  SpawnVisualEffect(effectName: CName, eventTag?: CName): void
  BreakVisualEffectLoop(effectName: CName): void
  KillVisualEffect(effectName: CName): void
  GetObject(hitInstance: gameprojectileHitInstance): GameObject
  GetObjectWorldPosition(object: GameObject): Vector4
  SetProjectileLauncherAction(): ELauncherActionType
  SetAttackRecordBasedOnAction(): void
  SetLaunchVelocityBasedOnAction(): void
  CollisionActionNameToEnum(collisionAction: CName): gamedataProjectileOnCollisionAction
  CollisionStimTypeNameToEnum(onCollisionStimType: CName): gamedataStimType
  SetLaunchModeBasedOnAction(): void
  LaunchModeNameToEnum(launchModeName: CName): gamedataProjectileLaunchMode
  TriggerSingleStimuli(radius: number, stimToSend: gamedataStimType): void
  TriggerActiveStimuliWithLifetime(stimToSend: gamedataStimType, lifetime: number, radius: number): void
  ProjectileHitAoE(attackRadius: number, attackRecord?: Attack_Record): void
  ProjectileHit(eventData: gameprojectileHitEvent): void
  LinearLaunch(eventData: gameprojectileShootEvent, startVelocity: number): void
  ParabolicLaunch(eventData: gameprojectileShootEvent, gravitySimulation: number, startVelocity: number, energyLossFactorAfterCollision: number): void
  CurvedLaunch(eventData: gameprojectileShootEvent, targetObject?: GameObject, targetComponent?: IPlacedComponent, startVelocity?: number, linearTimeRatio?: number, interpolationTimeRatio?: number, returnTimeMargin?: number, bendTimeRatio?: number, bendFactor?: number, halfLeanAngle?: number, endLeanAngle?: number, angleInterpolationDuration?: number): void
}

declare interface NanoWireProjectile extends BaseProjectile {

  SetNanoWireProjectileLaunchMode(): void
  OnInitialize(eventData: gameprojectileSetUpEvent): Bool
  OnShoot(eventData: gameprojectileShootEvent): Bool
  OnShootTarget(eventData: gameprojectileShootTargetEvent): Bool
  OnCollision(eventData: gameprojectileHitEvent): Bool
}

declare interface NanoWireProjectileCollisionEvaluator extends gameprojectileScriptCollisionEvaluator {

  EvaluateCollision(defaultOnCollisionAction: gameprojectileOnCollisionAction, params: CollisionEvaluatorParams): gameprojectileOnCollisionAction
}

declare interface VaultDecisions extends LocomotionGroundDecisions {

  InternalEnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  SpeedTest(stateContext: StateContext, scriptInterface: StateGameScriptInterface, vaultInfo: PlayerClimbInfo): Bool
  FitTest(scriptInterface: StateGameScriptInterface, playerCapsuleDimensions: Vector4, vaultInfo: PlayerClimbInfo): Bool
  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToStand(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToCrouch(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface VaultEvents extends LocomotionGroundEvents {

  GetVaultParameter(scriptInterface: StateGameScriptInterface): VaultParameters
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface LadderDecisions extends LocomotionGroundDecisions {

  InternalEnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  TestParameters(stateContext: StateContext, scriptInterface: StateGameScriptInterface, ladderParameter: LadderDescription): Bool
  IsActionEnterLadderUsed(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsLadderEnterInProgress(stateContext: StateContext): Bool
  TestMath(stateContext: StateContext, scriptInterface: StateGameScriptInterface, ladderParameter: LadderDescription): Bool
  ToStand(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToLadderCrouch(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface RainMissileProjectile extends BaseProjectile {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnInitialize(eventData: gameprojectileSetUpEvent): Bool
  StartTrailEffect(): void
  OnShoot(eventData: gameprojectileShootEvent): Bool
  OnShootTarget(eventData: gameprojectileShootTargetEvent): Bool
  OnAcceleratedMovement(eventData: gameprojectileAcceleratedMovementEvent): Bool
  OnLinearMovement(eventData: gameprojectileLinearMovementEvent): Bool
  OnTick(eventData: gameprojectileTickEvent): Bool
  OnCollision(eventData: gameprojectileHitEvent): Bool
  OnGameprojectileBroadPhaseHitEvent(eventData: gameprojectileBroadPhaseHitEvent): Bool
  OnCollideWithEntity(projectilePosition: Vector4): void
  DelayDestroyBullet(): void
  DestroyBullet(): void
  Explode(projectilePosition: Vector4): void
  OnFollowSuccess(eventData: gameprojectileFollowEvent): Bool
  StartPhase1(targetPos: Vector4): void
  StartPhase2(): void
  CalcFinalTargetPositionAndOffset(): void
  SpawnLandVFXs(fx: FxResource, fxposition: Vector4): void
  KillLandVFX(fxInstance: FxInstance): void
  CreateFxInstance(resource: FxResource, transform: WorldTransform): FxInstance
}

declare interface SpiderbotHeavyProjectile extends BaseProjectile {

  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  Reset(): void
  OnShoot(eventData: gameprojectileShootEvent): Bool
  OnShootTarget(eventData: gameprojectileShootTargetEvent): Bool
  OnCollision(eventData: gameprojectileHitEvent): Bool
  Explode(hitInstance: gameprojectileHitInstance): void
}

declare interface NetrunnerPrototypeSpawnRequestEvent extends Event {

  Create(whatToSpawn: CName, whereToSpawn: Vector4, scale: Vector4, colorIndex: number): void
}

declare interface NetrunnerPrototypeSpawnCompletedEvent extends Event {

}

declare interface NetrunnerPrototypeDespawnEvent extends Event {

}

declare interface NetrunnerPrototypeNetworkNode extends GameObject {

  ChangeHighlightColorIndex(colorIndex: number, componentName?: CName): void
}

declare interface LinkedStatusEffectListener extends ScriptStatusEffectListener {

  OnStatusEffectRemoved(statusEffect: StatusEffect_Record): void
}

declare interface LadderSprintDecisions extends LadderDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToLadder(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface LadderSprintEvents extends LadderEvents {

  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface LadderSlideDecisions extends LadderDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToLadder(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface LadderSlideEvents extends LadderEvents {

  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface LadderJumpEvents extends LocomotionAirEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ReadyDecisions extends WeaponTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToSemiAuto(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToFullAuto(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface UnsecureFootingFallDecisions extends FallDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface IdleDecisions extends VehicleTransition {

  ToExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface IdleEvents extends VehicleEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface EnteringDecisions extends VehicleTransition {

  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToExiting(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToSwitchSeats(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface EnteringEvents extends VehicleEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface PassengerDecisions extends VehicleTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToCombat(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToSwitchSeats(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface PassengerEvents extends VehicleEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface GunnerDecisions extends VehicleTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToExiting(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface GunnerEvents extends VehicleEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface DriveDecisions extends VehicleTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToDriverCombat(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToSwitchSeats(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface DriveEvents extends VehicleEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ReadyEvents extends WeaponEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SwitchSeatsDecisions extends VehicleTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToDrive(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToPassenger(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface SwitchSeatsEvents extends VehicleEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface EnteringCombatDecisions extends VehicleTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface EnteringCombatEvents extends VehicleEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ExitingCombatDecisions extends VehicleTransition {

  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ExitingCombatEvents extends VehicleEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SceneExitingCombatDecisions extends VehicleTransition {

  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface SceneExitingCombatEvents extends VehicleEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface CombatDecisions extends VehicleTransition {

  ToExitingCombat(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToSceneExitingCombat(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface CombatEvents extends VehicleEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface DriverCombatDecisions extends VehicleTransition {

  ToDrive(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface DriverCombatEvents extends VehicleEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ExitingDecisions extends VehicleTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ExitingEvents extends ExitingEventsBase {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ImmediateExitWithForceEvents extends ExitingEventsBase {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ExitWorkspot(stateContext: StateContext, scriptInterface: StateGameScriptInterface, isInstant: Bool, isUpsidedown?: Bool): void
  Unmount(scriptInterface: StateGameScriptInterface, stateContext: StateContext): void
  ApplyCounterForce(scriptInterface: StateGameScriptInterface, stateContext: StateContext): void
}

declare interface CollisionExitingDecisions extends ExitingDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  SetBikeForce(stateContext: StateContext, vehicle: VehicleObject, collisionForce: Vector4): void
}

declare interface CollisionExitingEvents extends ImmediateExitWithForceEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface UnsecureFootingFallEvents extends FallEvents {

  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface JamWeaponE3HackEvent extends Event {

}

declare interface entRagdollPutToSleepEvent extends Event {

}

declare interface QuickHackEvent extends Event {

}

declare interface PuppetActionContext {

}

declare interface NotReadyDecisions extends WeaponTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface NotReadyEvents extends WeaponEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ForceUnhideRegularHands(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SafeDecisions extends WeaponTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToPublicSafe(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface DeathExitingDecisions extends ExitingDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface SafeEvents extends WeaponEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface DeathExitingEvents extends ImmediateExitWithForceEvents {

}

declare interface ExitEvents extends VehicleEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface PublicSafeDecisions extends WeaponTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToNotReady(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToPublicSafeToReady(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToNoAmmo(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ShouldLeaveSafe(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface WaitingForSceneDecisions extends VehicleTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToEntering(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface WaitingForSceneEvents extends VehicleTransition {

}

declare interface SceneDecisions extends VehicleTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToVehicleTurret(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToCombat(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToDriverCombat(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  CanTransitionToCombat(stateContext: StateContext): Bool
}

declare interface PublicSafeEvents extends WeaponEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  RequestWeaponUnequipNotifyUpperBody(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToNotReady(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface PublicSafeToReadyDecisions extends WeaponTransition {

  ToReady(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface PublicSafeToReadyEvents extends WeaponEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface QuickMeleeDecisions extends WeaponTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToStandardExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToSemiAuto(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToFullAuto(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsPassedCancelWindow(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface SceneEvents extends VehicleEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  FallbackMountToWorkspot(scriptInterface: StateGameScriptInterface, mountingInfo: MountingInfo): void
}

declare interface AirThrustersDecisions extends LocomotionAirDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsFallHeightAcceptable(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToFall(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToStand(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToDoubleJump(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface AirThrustersEvents extends LocomotionAirEvents {

  SendAnimFeatureDataToGraph(stateContext: StateContext, scriptInterface: StateGameScriptInterface, state: number): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  GetActiveFeetAreaItem(scriptInterface: StateGameScriptInterface): ItemObject
  PlayEffectOnItem(scriptInterface: StateGameScriptInterface, effectName: CName): void
  StopEffectOnItem(scriptInterface: StateGameScriptInterface, effectName: CName): void
  SetUpwardsThrustStats(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface AirHoverDecisions extends LocomotionAirDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsDistanceToGroundAcceptable(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  IsFallSpeedAcceptable(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToSuperheroFall(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface AirHoverEvents extends LocomotionAirEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  AddUpwardsImpulse(stateContext: StateContext, scriptInterface: StateGameScriptInterface, verticalSpeed: number): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SuperheroFallDecisions extends LocomotionAirDecisions {

}

declare interface SuperheroFallEvents extends LocomotionAirEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface JumpDecisions extends LocomotionAirDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface JumpEvents extends LocomotionAirEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface DoubleJumpDecisions extends LocomotionAirDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface DoubleJumpEvents extends LocomotionAirEvents {

  OnEnterFromAirThrusters(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SceneExitingDecisions extends VehicleTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ChargeJumpDecisions extends LocomotionAirDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface SceneExitingEvents extends VehicleEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ChargeJumpEvents extends LocomotionAirEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  SetChargeJumpParameters(stateContext: StateContext, scriptInterface: StateGameScriptInterface, inputHoldTime: number): void
  UpdateChargeJumpStats(stateContext: StateContext, scriptInterface: StateGameScriptInterface, upwardsGravity: number, downwardsGravity: number, nameSuffix: string): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface HoverJumpDecisions extends LocomotionAirDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface HoverJumpEvents extends LocomotionAirEvents {

  SendHoverJumpStateToGraph(stateContext: StateContext, scriptInterface: StateGameScriptInterface, state: number): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  CanHover(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  UpdateHoverJumpStats(stateContext: StateContext, scriptInterface: StateGameScriptInterface, upwardsGravity: number, downwardsGravity: number, nameSuffix: string): void
  AddUpwardsThrust(stateContext: StateContext, scriptInterface: StateGameScriptInterface, verticalImpulse: number): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  CleanUpOnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface DodgeAirDecisions extends LocomotionAirDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToFall(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface DodgeAirEvents extends LocomotionAirEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  Dodge(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface FailedLandingAbstractDecisions extends AbstractLandDecisions {

  ToStand(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface FailedLandingAbstractEvents extends AbstractLandEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface RegularLandDecisions extends AbstractLandDecisions {

}

declare interface RegularLandEvents extends AbstractLandEvents {

  OnEnterFromLadderCrouch(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnterFromUnsecureFootingFall(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  EvaluateTransitioningToSlideAfterLanding(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  TryPlayRumble(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ShouldTriggerDestruction(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface QuickMeleeEvents extends WeaponEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ConsumeStamina(scriptInterface: StateGameScriptInterface): void
  InitiateQuickMeleeAttack(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  GetQuickMeleeTarget(scriptInterface: StateGameScriptInterface, withinDistance?: number): GameObject
  SpawnQuickMeleeGameEffect(stateContext: StateContext, scriptInterface: StateGameScriptInterface, startPosition: Vector4, endPosition: Vector4, attackTime: number, colliderBox: Vector4): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  UpdateGameEffectPosition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  GetAttackParameters(scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnForcedExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  SendAnimFeature(stateContext: StateContext, scriptInterface: StateGameScriptInterface, state: number): void
  GetQuickMeleeAttackTweakID(scriptInterface: StateGameScriptInterface): TweakDBID
}

declare interface QuickMeleeAttackData {

}

declare interface NoAmmoDecisions extends WeaponTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToReady(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToReload(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToPublicSafe(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface NoAmmoEvents extends WeaponEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ReloadDecisions extends WeaponTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToReload(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ReloadEvents extends WeaponEventsTransition {

  SendReloadAnimData(stateContext: StateContext, scriptInterface: StateGameScriptInterface, isActive: Bool): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  ShouldUseAutoloader(scriptInterface: StateGameScriptInterface): Bool
  OnExitToReload(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface DrawBetweenEntitiesEvent extends Event {

}

declare interface SecurityBreachPuppetNotificationEvent extends SecuritySystemInput {

}

declare interface HardLandDecisions extends FailedLandingAbstractDecisions {

}

declare interface HardLandEvents extends FailedLandingAbstractEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface VeryHardLandDecisions extends FailedLandingAbstractDecisions {

}

declare interface VeryHardLandEvents extends FailedLandingAbstractEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface DeathLandDecisions extends FailedLandingAbstractDecisions {

}

declare interface DeathLandEvents extends FailedLandingAbstractEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SuperheroLandDecisions extends AbstractLandDecisions {

  ToSuperheroLandRecovery(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface SuperheroLandEvents extends AbstractLandEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SuperheroLandRecoveryDecisions extends AbstractLandDecisions {

  ToStand(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface SuperheroLandRecoveryEvents extends AbstractLandEvents {

  SendAnimFeature(stateContext: StateContext, scriptInterface: StateGameScriptInterface, state: number): void
  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface WallCollisionHelpers extends IScriptable {

  /** @noSelf **/
  GetWallCollision(scriptInterface: StateGameScriptInterface, playerPosition: Vector4, up: Vector4, capsuleRadius: number, wallCollision: ControllerHit): Bool
}

declare interface StatusEffectDecisions extends LocomotionGroundDecisions {

  InternalEnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToStand(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToRegularFall(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  HasMovementAffiliatedStatusEffect(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  GetStatusEffectName(stateContext: StateContext, scriptInterface: StateGameScriptInterface): string
}

declare interface KnockdownDecisions extends StatusEffectDecisions {

  ToStand(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToRegularFall(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToSecondaryKnockdown(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface AICommandNodeFunction {

}

declare interface AICommandNodeFunctionProvider extends IScriptable {

  /** @noSelf **/
  Add(functions: AICommandNodeFunction[], nodeType: CName, category: CName, friendlyName: string, paramsType: CName, color: Color): void
  /** @noSelf **/
  CollectFunctions(): AICommandNodeFunction[]
}

declare interface ShootDecisions extends WeaponTransition {

  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ShootEvents extends WeaponEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface questPaymentConditionData {

}

declare interface LifePath_ScriptConditionType extends BluelineConditionTypeBase {

  Evaluate(playerObject: GameObject): Bool
  GetBluelinePart(playerObject: GameObject): BluelinePart
  ToString(): string
  GetPlayerDevelopmentSystem(): PlayerDevelopmentSystem
}

declare interface Build_ScriptConditionType extends BluelineConditionTypeBase {

  Evaluate(playerObject: GameObject): Bool
  GetBluelinePart(playerObject: GameObject): BluelinePart
  ToString(): string
}

declare interface PaymentConditionTypeBase extends BluelineConditionTypeBase {

  IsInverted(): Bool
  IsPaidWhenSucceeded(): Bool
  GetPaymentAmount(playerObject: GameObject): number
  GetPaymentMoneyItemId(): ItemID
  Evaluate(playerObject: GameObject): Bool
  ExecuteBluelineAction(playerObject: GameObject): void
  GetPaymentData(playerObject: GameObject): questPaymentConditionData
}

declare interface PaymentBalanced_ScriptConditionType extends PaymentConditionTypeBase {

  GetPaymentAmount(playerObject: GameObject): number
  GetBluelinePart(playerObject: GameObject): BluelinePart
  ToString(): string
}

declare interface PaymentFixedAmount_ScriptConditionType extends PaymentConditionTypeBase {

  SetPayAmountValue(value: number): void
  GetPaymentAmount(playerObject: GameObject): number
  GetBluelinePart(playerObject: GameObject): BluelinePart
  ToString(): string
}

declare interface RandomizationDataEntry {

}

declare interface IRandomizationSupervisor extends IScriptable {

}

declare interface ScriptedRandomizationSupervisor extends IRandomizationSupervisor {

}

declare interface TestRandomizationSupervisor extends ScriptedRandomizationSupervisor {

  OnBeginRandomization(entries: RandomizationDataEntry[]): Bool
  OnCanBeGenerated(entry: RandomizationDataEntry): Bool
  OnMarkGenerated(entry: RandomizationDataEntry): Bool
  OnEndRandomization(): Bool
}

declare interface VoicesetComponent extends GameComponent {

  IsGenericTalkInteractionEnabled(): Bool
}

declare interface EffectPostAction_BulletExplode extends EffectPostAction_Scripted {

  Process(ctx: EffectScriptContext): Bool
}

declare interface SnapToTargetExecutor extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface EffectExecutor_ApplyEffector extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface gameEffectExecutor_BulletImpact extends EffectExecutor {

  ShouldProcessImpactOnEntity(ctx: EffectScriptContext, isMeleeAttack: Bool, target: Entity, hitPosition: Vector4, hitDirection: Vector4): Bool
}

declare interface StrikeExecutor_Heal extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface StrikeExecutor_Kill extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface LookAtTargetExecutor extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface MeleeHitAnimEventExecutor extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
  GetTargetWeapon(target: ScriptedPuppet): WeaponObject
  TriggerSingleStimuliOnHit(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext, stimToSend: gamedataStimType): void
  GetStimuliData(path: string, stimToProcess: StimuliEvent): void
  IsMuted(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface MeleeHitTerminateGameEffectExecutor extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface MeleePreAttackExecutor extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface StrikeExecutor_ModifyStat extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
  ModStatPuppet(puppet: ScriptedPuppet, stat: gamedataStatType, value: number, source: Entity): Bool
}

declare interface QuickMeleeHitExecutor extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface RevealObjectExecutor extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
  HighlightTarget(targetObject: GameObject, ctx: EffectScriptContext): void
  RemoveTarget(targetObject: GameObject, ctx: EffectScriptContext): void
  TargetLost(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): void
}

declare interface KnockdownEvents extends StatusEffectEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  CommonOnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  SendStatusEffectAnimDataToGraph(stateContext: StateContext, scriptInterface: StateGameScriptInterface, state: EKnockdownStates): void
  UpdateStatusEffectAnimStates(timeDelta: number, scriptInterface: StateGameScriptInterface, stateContext: StateContext): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  QueueSecondaryKnockdown(stateContext: StateContext, scriptInterface: StateGameScriptInterface, knockdownDir: Vector4): void
  UpdateQueuedSecondaryKnockdown(stateContext: StateContext, scriptInterface: StateGameScriptInterface, deltaTime: number): void
  DidPlayerCollideWithWall(scriptInterface: StateGameScriptInterface, wallCollision: ControllerHit): Bool
}

declare interface MarkingBubble extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
  TargetAcquired(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): void
  TargetLost(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): void
}

declare interface GameEffectExecutor_StimOnHit extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
  GetStimuliData(path: string, stimToProcess: StimuliEvent): void
  IsMuted(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface SetTemporaryIndividualTimeDilation extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface EffectExecutor_SlashEffect_Entry {

}

declare interface EffectExecutor_SlashEffect extends EffectExecutor_Scripted {

  Process(ctx: EffectScriptContext, applierCtx: EffectExecutionScriptContext): Bool
}

declare interface gameEffectExecutor_Ricochet extends EffectExecutor {

  OnSnap(ctx: EffectScriptContext, entity: Entity): void
}

declare interface StrikeFilterSingle_NPC extends EffectObjectSingleFilter_Scripted {

  Process(ctx: EffectScriptContext, filterCtx: EffectSingleFilterScriptContext): Bool
}

declare interface FilterNPCsByType extends EffectObjectSingleFilter_Scripted {

  Process(ctx: EffectScriptContext, filterCtx: EffectSingleFilterScriptContext): Bool
}

declare interface FilterNPCDodgeOpportunity extends EffectObjectSingleFilter_Scripted {

  Process(ctx: EffectScriptContext, filterCtx: EffectSingleFilterScriptContext): Bool
}

declare interface gameEffectObjectFilter_OnlyNearest_Pierce extends gameEffectObjectFilter_OnlyNearest {

  CanPierceEntity(ctx: EffectScriptContext, target: Entity, hitPosition: Vector4, hitDirection: Vector4): Bool
}

declare interface FilterStimTargets extends EffectObjectSingleFilter_Scripted {

  Process(ctx: EffectScriptContext, filterCtx: EffectSingleFilterScriptContext): Bool
  EvaluateTarget(puppet: NPCPuppet, targets: NPCstubData[]): Bool
}

declare interface FilterTargetsByDistanceFromRoot extends EffectObjectSingleFilter_Scripted {

  Process(ctx: EffectScriptContext, filterCtx: EffectSingleFilterScriptContext): Bool
}

declare interface IsFacingTowardsSource extends EffectObjectSingleFilter_Scripted {

  Process(ctx: EffectScriptContext, filterCtx: EffectSingleFilterScriptContext): Bool
  IsWithinAngleLimits(sourceTransform: Transform, targetTransform: Transform, maxAllowedAngleYaw: number, maxAllowedAnglePitch: number): Bool
}

declare interface InvestigationReactionFilter extends EffectObjectSingleFilter_Scripted {

  Process(ctx: EffectScriptContext, filterCtx: EffectSingleFilterScriptContext): Bool
}

declare interface CycleRoundDecisions extends WeaponTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface CycleRoundEvents extends WeaponEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface CycleTriggerModeDecisions extends WeaponTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToReady(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToCharge(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface CycleTriggerModeEvents extends WeaponEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SemiAutoDecisions extends WeaponTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToShoot(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface BluelineSelectedRequest extends PlayerScriptableSystemRequest {

}

declare interface UnlockAllAchievementsRequest extends ScriptableSystemRequest {

}

declare interface ResetLightHitsReceivedRequest extends ScriptableSystemRequest {

}

declare interface ResetStrongHitsReceivedRequest extends ScriptableSystemRequest {

}

declare interface ResetFinalComboHitsReceivedRequest extends ScriptableSystemRequest {

}

declare interface ResetBlockAttackHitsReceivedRequest extends ScriptableSystemRequest {

}

declare interface ResetBlockedHitsRequest extends ScriptableSystemRequest {

}

declare interface ResetDeflectedHitsRequest extends ScriptableSystemRequest {

}

declare interface ResetGuardBreakRequest extends ScriptableSystemRequest {

}

declare interface GrenadeQuickhackKillEntry {

}

declare interface EnvironmentDamageReceiverComponent extends IPlacedComponent {

  DealDamageFromParticle(particleDamageRecords: ParticleDamage_Record[], instigator: GameObject, source: GameObject): void
}

declare interface ForcedKnockdownDecisions extends KnockdownDecisions {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  HasForcedStatusEffect(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  GetForcedStatusEffectName(stateContext: StateContext, scriptInterface: StateGameScriptInterface): string
}

declare interface ForcedKnockdownEvents extends KnockdownEvents {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface SemiAutoEvents extends WeaponEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface FullAutoDecisions extends WeaponTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToShoot(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToReady(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface FullAutoEvents extends WeaponEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  CalculateCycleTime(stateContext: StateContext, scriptInterface: StateGameScriptInterface): number
}

declare interface BurstDecisions extends WeaponTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToShoot(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ClearSubCharacterRequest extends ScriptableSystemRequest {

}

declare interface SpawnSubCharacterRequest extends SpawnUniqueSubCharacterRequest {

}

declare interface DespawnSubCharacterRequest extends DespawnUniqueSubCharacterRequest {

}

declare interface GravityChangeTrigger extends GameObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnAreaEnter(trigger: AreaEnteredEvent): Bool
  OnAreaExit(trigger: AreaExitedEvent): Bool
  SwitchGravity(gravityType: EGravityType): void
}

declare interface TankTurretComponent extends ScriptableComponent {

  OnGameAttach(): void
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
  Shoot(slotComponent: SlotComponent, slotName: CName): void
}

declare interface TankTurret extends WeakspotObject {

  OnWeakspotInitialized(): Bool
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
  Shoot(): void
}

declare interface BurstEvents extends WeaponEventsTransition {

  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ChargeEventsAbstract extends WeaponEventsTransition {

  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToShoot(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  SetupFullChargedShootingSequence(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ChargeDecisions extends WeaponTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToShoot(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToChargeReady(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ChargeEvents extends ChargeEventsAbstract {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToChargeReady(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  GetChargeValuePerSec(scriptInterface: StateGameScriptInterface): number
  OnExitToShoot(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface sampleUIAnchorButton extends inkLogicController {

  OnInitialize(): Bool
}

declare interface sampleUIAnchorController extends inkLogicController {

  OnInitialize(): Bool
  onButtonRelease(e: inkPointerEvent): void
}

declare interface AnimationsConstructor extends IScriptable {

  SetGenericSettings(animDuration: number, animType: inkanimInterpolationType, animMode: inkanimInterpolationMode, isAdditive: Bool): void
  NewMarginInterpolator(startMargin: inkMargin, endMargin: inkMargin): inkAnimMargin
  NewSizeInterpolator(startSize: Vector2, endSize: Vector2): inkAnimSize
  NewRotationInterpolator(startRotation: number, endRotation: number): inkAnimRotation
  NewColorInterpolator(startColor: HDRColor, endColor: HDRColor): inkAnimColor
}

declare interface sampleUICustomizableAnimationsController extends inkLogicController {

  OnInitialize(): Bool
  Higlight(e: inkPointerEvent): void
  EndHiglight(e: inkPointerEvent): void
  SaveDefaults(): void
  Reset(e: inkPointerEvent): void
  PlayAnimation(e: inkPointerEvent): void
  SetText(buttonName: CName, status: Bool): void
  ToggleRotationAnim(e: inkPointerEvent): void
  ToggleSizeAnim(e: inkPointerEvent): void
  ToggleColorAnim(e: inkPointerEvent): void
  ToggleAlphaAnim(e: inkPointerEvent): void
  TogglePositionAnim(e: inkPointerEvent): void
  UpdateDefinitions(): void
}

declare interface sampleUILoadingBarController extends inkLogicController {

  OnInitialize(): Bool
  OnHold(e: inkPointerEvent): void
  OnRelease(e: inkPointerEvent): void
}

declare interface sampleUIEventTestLogicController extends inkLogicController {

  OnInitialize(): Bool
  ToggleVisibility(text: string): void
  OnButtonClickEventTest(e: inkPointerEvent): void
  CallbackTest(widget: inkWidget): void
  OnButtonClickCallbackTest(e: inkPointerEvent): void
}

declare interface InterpolatorsShowcaseController extends inkLogicController {

  OnInitialize(): Bool
  FillWidgetsVariables(): void
  PrepareGraphPointer(): void
  InterpolatorModeToIn(e: inkPointerEvent): void
  InterpolatorModeToOut(e: inkPointerEvent): void
  InterpolatorModeToInOut(e: inkPointerEvent): void
  InterpolatorTypeToLinear(e: inkPointerEvent): void
  InterpolatorTypeToQuadratic(e: inkPointerEvent): void
  InterpolatorTypeToQubic(e: inkPointerEvent): void
  InterpolatorTypeToQuartic(e: inkPointerEvent): void
  InterpolatorTypeToQuintic(e: inkPointerEvent): void
  InterpolatorTypeToSinusoidal(e: inkPointerEvent): void
  InterpolatorTypeToExponential(e: inkPointerEvent): void
  InterpolatorTypeToElastic(e: inkPointerEvent): void
  InterpolatorTypeToCircular(e: inkPointerEvent): void
  InterpolatorTypeToBack(e: inkPointerEvent): void
  RiseTimer_1(e: inkPointerEvent): void
  RiseTimer_2(e: inkPointerEvent): void
  RiseTimer_3(e: inkPointerEvent): void
  LowerTimer_1(e: inkPointerEvent): void
  LowerTimer_2(e: inkPointerEvent): void
  LowerTimer_3(e: inkPointerEvent): void
  UpdateCounterText(): void
  PlayAnimation(e: inkPointerEvent): void
  StopAllAnimations(): void
  ConstructAnimations(): void
  ConstructInterpolatorAnim(): void
  ConstructTimelineFollow(): void
  ConstructShowcaseAnimations(): void
}

declare interface ChargeReadyDecisions extends WeaponTransition {

  ToShoot(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToChargeMax(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ChargeReadyEvents extends ChargeEventsAbstract {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToShoot(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToChargeMax(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface ChargeMaxDecisions extends WeaponTransition {

  ToShoot(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ChargeMaxEvents extends ChargeEventsAbstract {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExitToShoot(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface sampleTextScrolling extends inkLogicController {

  OnInitialize(): Bool
}

declare interface sampleUIVideoPlayer extends inkLogicController {

  OnInitialize(): Bool
  PlayPauseVideo(e: inkPointerEvent): void
  StopVideo(e: inkPointerEvent): void
  PauseVideo(e: inkPointerEvent): void
  ResumeVideo(e: inkPointerEvent): void
  Rewind(e: inkPointerEvent): void
  FastForward(e: inkPointerEvent): void
  JumpToFrame(e: inkPointerEvent): void
  JumpToTime(e: inkPointerEvent): void
  RiseFramesCounter(e: inkPointerEvent): void
  LowerFramesCounter(e: inkPointerEvent): void
  UpdateTextWidgets(): void
  UpdateCounter(): void
}

declare interface customGameNotificationDataSet extends inkGameNotificationData {

}

declare interface gameNotificationsTest extends inkGameController {

  OnInitialize(): Bool
  OnResponse(data: inkGameNotificationData): Bool
}

declare interface gameNotificationsReceiverTest extends inkGameController {

  OnInitialize(): Bool
}

declare interface sampleUIAnimationController extends inkLogicController {

  OnInitialize(): Bool
  OnStopAnimation(widget: inkWidget): void
  OnPauseResumeAnimation(widget: inkWidget): void
  OnPlay(widget: inkWidget): void
  OnPlayCycleLoop(widget: inkWidget): void
  OnPlayPingPongLoop(widget: inkWidget): void
  PrepareDefinitions(): void
}

declare interface sampleStyleManagerGameController extends inkGameController {

  OnInitialize(): Bool
  OnState1(e: inkPointerEvent): Bool
  OnState2(e: inkPointerEvent): Bool
  OnState3(e: inkPointerEvent): Bool
  OnStyle1(e: inkPointerEvent): Bool
  OnStyle2(e: inkPointerEvent): Bool
}

declare interface sampleUIPathAndReferenceGameController extends inkGameController {

  OnInitialize(): Bool
}

declare interface sampleUIStatusWidgetLogicController extends inkLogicController {

  OnInitialize(): Bool
  SetStatus(on: Bool): void
}

declare interface sampleUIInteractionWidgetLogicController extends inkLogicController {

  OnInitialize(): Bool
  SetIsInteracting(interacting: Bool): void
}

declare interface sampleStylesGameController extends inkGameController {

  OnInitialize(): Bool
  OnButton1StateChanged(controller: inkButtonController, oldState: inkEButtonState, newState: inkEButtonState): Bool
  OnButton2Pressed(e: inkPointerEvent): Bool
  ButtonStateToString(state: inkEButtonState): string
}

declare interface sampleScreenProjectionGameController extends inkProjectedHUDGameController {

  OnInitialize(): Bool
  OnTargetHit(value: Variant): Bool
  OnScreenProjectionUpdate(projections: gameuiScreenProjectionsData): Bool
  OnRemoveTarget(targetWidget: inkWidget): Bool
}

declare interface sampleScreenProjectionLogicController extends inkLogicController {

  OnInitialize(): Bool
  GetProjection(): inkScreenProjection
  SetProjection(projection: inkScreenProjection): void
  UpdatewidgetPosition(projection: inkScreenProjection): void
  PlayAnimation(): void
  OnAnimFinished(proxy: inkAnimProxy): Bool
}

declare interface DischargeDecisions extends WeaponTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ToReady(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface DischargeEvents extends WeaponEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnUpdate(timeDelta: number, stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface sampleUISoundsLogicController extends inkLogicController {

  OnInitialize(): Bool
  OnHoverOver(button: inkWidget): void
  OnHoverOut(button: inkWidget): void
  OnPress(button: inkWidget): void
  OnRelease(button: inkWidget): void
}

declare interface SampleUITextSystemController extends inkGameController {

  OnInitialize(): Bool
  InitControls(): void
  InitTextParams(): void
  UpdateNumberParam(value: number): void
  UpdateStringParam(value: string): void
  UpdateTimeParam(): void
  UpdateMeasurementSystem(system: EMeasurementSystem): void
  OnIncreaseNumberToInject(e: inkPointerEvent): Bool
  OnDecreaseNumberToInject(e: inkPointerEvent): Bool
  OnChangeTextToInject(str: string): Bool
  OnRefreshTime(e: inkPointerEvent): Bool
  OnSwitchToMetricSystem(e: inkPointerEvent): Bool
  OnSwitchToImperialSystem(e: inkPointerEvent): Bool
  OnAnimateTextOffset(e: inkPointerEvent): Bool
  OnAnimateTextReplace(e: inkPointerEvent): Bool
  OnAnimateValue(e: inkPointerEvent): Bool
}

declare interface SampleUIMeasurementController extends inkLogicController {

  OnInitialize(): Bool
  SetMeasurementSystem(system: EMeasurementSystem): void
  UpdateTextWidgets(): void
  FormatValue(value: number): string
  OnIncreaseValue(e: inkPointerEvent): Bool
  OnDecreaseValue(e: inkPointerEvent): Bool
}

declare interface SampleUIButtons extends inkLogicController {

  OnInitialize(): Bool
  SetText(text: string): void
  OnButtonClick(controller: inkButtonController): void
  OnButtonHoldComplete(controller: inkButtonController, cancelled: Bool): void
  OnToggle1Changed(controller: inkToggleController, isToggled: Bool): void
  OnToggle1Click(controller: inkButtonController): void
  OnToggle2Changed(controller: inkToggleController, isToggled: Bool): void
  OnToggle2Click(controller: inkButtonController): void
  OnToggle3Changed(controller: inkToggleController, isToggled: Bool): void
  OnToggle3Click(controller: inkButtonController): void
  OnRadioValueChanged(controller: inkRadioGroupController, selectedIndex: number): void
}

declare interface OverheatDecisions extends WeaponTransition {

  EnterCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
  ExitCondition(stateContext: StateContext, scriptInterface: StateGameScriptInterface): Bool
}

declare interface ImageSwappingController extends inkLogicController {

  OnInitialize(): Bool
  FillButtons(): void
}

declare interface TechQA_ImageSwappingButtonController extends inkLogicController {

  OnInitialize(): Bool
  SetDescription(newDescription: string): void
}

declare interface sampleImageChanger extends inkLogicController {

  OnInitialize(): Bool
  OnButtonClick(e: inkPointerEvent): void
  ChangeImage(imageName: CName): void
}

declare interface sampleBullet extends BaseProjectile {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  Reset(): void
  OnInitialize(eventData: gameprojectileSetUpEvent): Bool
  StartTrailEffect(): void
  OnShoot(eventData: gameprojectileShootEvent): Bool
  OnShootTarget(eventData: gameprojectileShootTargetEvent): Bool
  OnTick(eventData: gameprojectileTickEvent): Bool
  OnCollision(projectileHitEvent: gameprojectileHitEvent): Bool
  DealDamage(eventData: gameprojectileHitEvent): void
}

declare interface OverheatEvents extends WeaponEventsTransition {

  OnEnter(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
  OnExit(stateContext: StateContext, scriptInterface: StateGameScriptInterface): void
}

declare interface sampleBulletGeneric extends BaseProjectile {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  Reset(): void
  OnInitialize(eventData: gameprojectileSetUpEvent): Bool
  StartTrailEffect(): void
  OnShoot(eventData: gameprojectileShootEvent): Bool
  OnShootTarget(eventData: gameprojectileShootTargetEvent): Bool
  OnTick(eventData: gameprojectileTickEvent): Bool
  OnCollision(projectileHitEvent: gameprojectileHitEvent): Bool
}

declare interface SampleDeviceClass extends GameObject {

}

declare interface SampleDeviceClassPS extends GameObjectPS {

  OnActionInt(evt: ActionInt): EntityNotificationType
  GetAction_ActionInt(): ActionInt
  GetActions(): DeviceAction[]
}

declare interface PSD_DetectorPS extends DeviceComponentPS {

  GetLastEntityID(): EntityID
  GetLastPersistentID(): PersistentID
  GetName(): CName
  ReadTheCounter(): number
  OnBumpTheCounter(evt: SampleBumpEvent): EntityNotificationType
  OnBumpTheCounter(evt: ActionInt): EntityNotificationType
  OnLogAction(evt: ActionBool): EntityNotificationType
  GetAction_BumpTheCounter(): ActionInt
  GetAction_Log(): ActionBool
}

declare interface SampleBumpEvent extends Event {

}

declare interface PSD_Detector extends DeviceComponent {

  LogID(): void
}

declare interface PSD_Master extends DeviceComponent {

}

declare interface PSD_MasterPS extends DeviceComponentPS {

}

declare interface PSD_Trigger extends GameObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnInteraction(interaction: InteractionChoiceEvent): Bool
}

declare interface sampleGranade extends BaseProjectile {

  OnInitialize(eventData: gameprojectileSetUpEvent): Bool
  StartTrailEffect(): void
  Reset(): void
  OnShoot(eventData: gameprojectileShootEvent): Bool
  OnShootTarget(eventData: gameprojectileShootTargetEvent): Bool
  OnTick(eventData: gameprojectileTickEvent): Bool
  OnCollision(eventData: gameprojectileHitEvent): Bool
  PlayExplosionSound(): void
}

declare interface Slave_Test extends GameObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnInteraction(interaction: InteractionChoiceEvent): Bool
}

declare interface Master_Test extends GameObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnInteraction(interaction: InteractionChoiceEvent): Bool
  OnSlaveChanged(evt: PSDeviceChangedEvent): Bool
}

declare interface InputReceiver extends GameObject {

  OnGameAttached(): Bool
  OnAction(action: ListenerAction, consumer: ListenerActionConsumer): Bool
}

declare interface InspectionObject extends GameObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnInteractionChoice(choiceEvent: InteractionChoiceEvent): Bool
  CreateChoice(choiceName: string, data: number): InteractionChoice
}

declare interface SampleEntityWithCounterPS extends GameObjectPS {

  ReadTheCounter(): number
  OnBumpTheCounter(evt: SampleBumpEvent): EntityNotificationType
}

declare interface SampleEntityWithCounter extends GameObject {

  GetPS(): SampleEntityWithCounterPS
  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnBumpTheCounter(evt: SampleBumpEvent): void
}

declare interface SampleCounterDisplayComponent extends ScriptableComponent {

  OnUpdate(deltaTime: number): void
  DisplayCounter(): void
}

declare interface SampleInteractiveEntityThatBumpsTheCounter extends GameObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnInteractionChoice(choice: InteractionChoiceEvent): Bool
}

declare interface SampleComponentWithCounterPS extends GameComponentPS {

  ReadTheCounter(): number
  BumpTheCounter(): number
}

declare interface SampleComponentWithCounter extends ScriptableComponent {

  GetPS(): SampleComponentWithCounterPS
  OnUpdate(deltaTime: number): void
}

declare interface sampleTimeListener extends TimeDilationListener {

  OnFinished(reason: CName): Bool
  SetOwner(owner: sampleTimeDilatable): void
}

declare interface sampleTimeDilatable extends TimeDilatable {

  OnGameAttached(): Bool
  OnInteractionChoice(choice: InteractionChoiceEvent): Bool
  OnTimeDilationFinished(): Bool
  OnFinished(reason: CName): void
}

declare interface sampleVisClueMaster extends GameObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnInteractionChoice(choice: InteractionChoiceEvent): Bool
  IsModeOn(): Bool
}

declare interface sampleVisClueSlave extends GameObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnInteractionChoice(choice: InteractionChoiceEvent): Bool
  IsModeOn(): Bool
}

declare interface sampleSmartBullet extends BaseProjectile {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnInitialize(eventData: gameprojectileSetUpEvent): Bool
  StartTrailEffect(): void
  Reset(): void
  OnShoot(eventData: gameprojectileShootEvent): Bool
  SetCurrentDamageTrailName(): void
  OnShootTarget(eventData: gameprojectileShootTargetEvent): Bool
  SetupCommonParams(weaponVel: Vector4): void
  StartPhase(phase: ESmartBulletPhase): void
  StartNextPhase(): void
  OnTick(eventData: gameprojectileTickEvent): Bool
  OnCollision(projectileHitEvent: gameprojectileHitEvent): Bool
  OnAcceleratedMovement(eventData: gameprojectileAcceleratedMovementEvent): Bool
  OnLinearMovement(eventData: gameprojectileLinearMovementEvent): Bool
  DealDamage(eventData: gameprojectileHitEvent): void
  OnFollowSuccess(eventData: gameprojectileFollowEvent): Bool
  BulletRelease(): void
  UpdateReadyToMiss(): void
  EnableTargetCollisions(targetID: EntityID): void
  DisableTargetCollisions(targetID: EntityID): void
  GetInitialDistanceToTarget(): number
}

declare interface sampleVisWireMaster extends GameObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnInteractionChoice(choice: InteractionChoiceEvent): Bool
  OnHUDInstruction(evt: HUDInstruction): Bool
  IsModeOn(): Bool
  OnFound(): void
}

declare interface sampleVisWireSlave extends GameObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnInteractionChoice(choice: InteractionChoiceEvent): Bool
  IsModeOn(): Bool
}

declare interface sampleVisWireMasterTwo extends GameObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  IsModeOn(): Bool
}

declare interface sampleVisWireSlaveTwo extends GameObject {

  OnRequestComponents(ri: EntityRequestComponentsInterface): Bool
  OnTakeControl(ri: EntityResolveComponentsInterface): Bool
  OnGameAttached(): Bool
  OnInteractionChoice(choice: InteractionChoiceEvent): Bool
  IsModeOn(): Bool
}

declare interface DisassembleMasterController extends MasterController {

  GetPS(): DisassembleMasterControllerPS
}

declare interface DisassembleMasterControllerPS extends MasterControllerPS {

  OnInstantiated(): Bool
  Initialize(): void
  GetActions(outActions: DeviceAction[], context: GetActionsContext): Bool
  RefreshLockOnSlaves(): void
  OnDisassembleDevice(evt: DisassembleDevice): EntityNotificationType
}

declare interface FUNC_TEST_Container {

}

declare interface FUNC_TEST_Container_2 {

}

declare interface FUNC_TEST_inkGameController extends inkGameController {

}

declare interface WorkspotFunctionalTestsDebugListener extends IScriptable {

  GetEntityID(): EntityID
  SetEntityID(entID: EntityID): void
  GetInstancesCreatedCount(): number
  GetInstancesRemovedCount(): number
  GetWorkspotsSetupCount(): number
  GetWorkspotsStartedCount(): number
  GetWorkspotsFinishedCount(): number
  GetAnimationStack(): string[]
  GetLastPlayedAnimation(): string
  GetAnimationPlayCount(animationName: string): number
  GetSkippedAnimationStack(): string[]
  GetLastSkippedAnimation(): string
  GetMissingAnimationStack(): string[]
  GetLastMissingAnimation(): string
  GetSkipOverflowsCount(): number
  GetTeleportRequestsCount(): number
  GetMovementRequestsCount(): number
  OnInstanceCreated(): Bool
  OnInstanceRemoved(): Bool
  OnWorkspotSetup(path: string): Bool
  OnWorkspotStarted(): Bool
  OnWorkspotFinished(): Bool
  OnAnimationChanged(animName: CName, workEntryID: WorkEntryId): Bool
  OnAnimationSkipped(animName: CName, workEntryID: WorkEntryId): Bool
  OnAnimationMissing(animName: CName, workEntryID: WorkEntryId): Bool
  OnSkipOverflow(): Bool
  OnTeleportRequest(): Bool
  OnMovementRequest(): Bool
}

declare interface FunctionalTestsTimeChangeEvent extends Event {

}

declare interface muliplayerInteractionTest extends GameObject {

  OnGameAttached(): Bool
  OnInteractionChoice(choiceEvent: InteractionChoiceEvent): Bool
}

declare interface LevelUpdateEvent extends Event {

}

declare interface ActivePerkChangedEvent extends Event {

}

declare interface InstallCyberwareRequest extends EquipRequest {

}

declare interface UninstallCyberwareRequest extends UnequipRequest {

}

declare interface EquipmentUIBBRequest extends PlayerScriptableSystemRequest {

}

declare interface ProcessVisualTags extends PlayerScriptableSystemRequest {

}
